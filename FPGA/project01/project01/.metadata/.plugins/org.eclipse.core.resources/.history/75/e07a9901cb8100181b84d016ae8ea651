
#include "io.h"
#include "./HAL/inc/altera_up_avalon_rs232_regs.h"
#include "./HAL/inc/altera_up_avalon_rs232.h"
#include "./HAL/inc/nios2.h"
#include <stdio.h>
#include "./convolution.h"
static const int NUM_VECTOR = 128; // change to 128 actually
static const int NUM_DIM = 256; // due to 4 (32/8) data per transmission
static const int NUM_DIM_WRITE = (256+4) / 4; // change to 256 actually
static const int NUM_DIM_SHRINK = 256 >> 1; // due to 2 (32/16) result per transmission

static int bit_mask = 0x000000FF;

#define READ_FIFO_EMPTY 0x0

alt_u8 par;

static int LABEL_NUM = 6;
static int FC_UNITS = 864;
static int FIRST_CONV = 10 * 10 * 1 * 16;
static int SECOND_CONV = 5 * 5 * 16 * 16;
static int DATA_SHAPE = 49 * 40;
alt_u8 transform(alt_u8 data) {
	if(data == 128)
		return (alt_u8)0;
	if((data >> 7) == 1)
		data = (((data << 1) >> 1) ^ 0xFF)+1+128;
	return data;
}
void read_event(alt_up_rs232_dev* rs232, alt_u8* w_data, int read_num){
  alt_u8 read_FIFO_used = 0;
  alt_u8 fail = 1;
  alt_u8 data;
  int count = 0;
  while(1){
    //read_FIFO_used = alt_up_rs232_get_used_space_in_read_FIFO(rs232_ptr);
    fail = alt_up_rs232_read_data(rs232 , &data, &par);
    if(!fail){
      data = transform(data);
      *(w_data + count) = data;
      alt_up_rs232_disable_read_interrupt(rs232);
      alt_up_rs232_write_data(rs232, 1);
      alt_up_rs232_enable_read_interrupt(rs232);
      count++;
      //printf("Read num: %d\n",count);
    }
    if(count == read_num){
      printf("Reading data successfully!!!\n");
      break;
    }
  }
}

void printBinary(int val2, int mode, int num_bit) {
   /*
    * Used to print 32 bits, e.g. 10000000_10000000_10000000_10000000
    */
   val2 = (val2 << (32 - num_bit));
   unsigned char *p = (unsigned char*)&(val2) + 3;
   int k = 0;
   int i = 0;
   for(k = 0; k < num_bit >> 3; k++) {
      int val2 = *(p-k);
      for (i = 7; i >= 0; i--) {
      if(val2 & (1 << i))
         printf("1");
      else
         printf("0");
      }
      if(k != (num_bit >> 3)-1)
        printf("_");
   }
   if(mode == 1)
     printf("_");
   else printf("\n");
};

void transform_32to8(alt_u32 data_32, alt_u8 data_8[4] ) {
   data_8[0] = data_32 & bit_mask;
   data_8[1] = (data_32 >> 8) & bit_mask;
   data_8[2] = (data_32 >> 16) & bit_mask;
   data_8[3] = (data_32 >> 24) & bit_mask;
};

#include "system.h"
void printSignBinary(alt_u8 data, double offset) {
   // Print the 2's complement binary into decimal
   if((data >>7) == 1) {
      data = ((data ^ 0xFF) + 1);
      //printBinary(data, 0, 32);
      printf("%f", -(double)((data) / offset));
   }
   else printf("%f", (double)data / offset);
}
alt_u32 transform_8to32(alt_u8* data_8) {
  alt_u32 data_32 = 0;
  int i = 0;
  for(i = 0; i < 4; ++i)
    data_32 += (alt_u32)((((alt_u32)(*(data_8+i*128)))) << 8*i);
//  printBinary(data_32, 0, 32);
  return data_32;
}
void printMatrix(alt_u8* matrix, int ROW, int COLUMN, int DEPTH, double precision) {
  int row = 0, column = 0, dep = 0;
  for(dep = 0; dep < DEPTH; dep ++) {
    printf("Dep %d: \n", dep);
    for(row = 0; row < ROW; row++){
      for(column = 0; column < COLUMN; column++) {
        //printf("%f",(double)(*(matrix+row*COLUMN*DEPTH+column*DEPTH + dep)) / precision);
    	printSignBinary(*(matrix+row*COLUMN*DEPTH+column*DEPTH + dep), precision);
        printf(" ");
      }
      printf("\n");
    }
  }
}
void flatten_matrix(alt_u8* flattened_matrix, alt_u8* input_fmap,
      int input_fmap_h, int input_fmap_w, int filter_h, int filter_w, int depth){
   //printf("  flatten input_fmap to flattened_matrix ...................................................\n");
   int w = 0, h = 0, d = 0;
   int count = 0;
   while(w + filter_w <= input_fmap_w)
   {
      while(h + filter_h <= input_fmap_h)
      {
         int w_in, h_in, d_in = 0;
         for(h_in = 0; h_in < filter_h; ++h_in){
            for (w_in = 0; w_in < filter_w; ++w_in){
               for (d_in = 0; d_in < depth; ++d_in){
                  *(flattened_matrix + count) = *(input_fmap + (h+h_in) * depth * input_fmap_w + (w+w_in) * depth + d_in);
                  count = count + 1;
               }
            }
         }
         h = h + 1;
      }
      w = w + 1;
      h = 0;
   }
};

alt_u8 truncation(alt_16 data) {
   double max_num = 7.9375;
   if(data > 127) {
      //printf("    Data %f is bigger than %f!!\n", (double)(data) / 16.0, (double)(max_num));
      return (alt_u8)(127);
   }
   else if(data < 0) {
      //printf("    Data %f is smaller than %f!!\n", (double)(data) / 16.0, (double)(0));
      return (alt_u8)0;
   }
   else return (alt_u8)data;
};

void matrix_to_imageCube(alt_16* matrix_result, alt_u8* o_fmap, int height, int width, int depth) {
//   printf("  Transforming matrix to image cube...\n");
   int h = 0, w = 0, d = 0;
   for(d = 0; d < depth; d++) {
      alt_16* current_map;
      current_map = matrix_result + d;
      for(w = 0; w < width; w++) {
         for(h = 0; h < height; h++) {
         //printf("    Data before truncate: "); //
            //printf("%f", (double)(*(current_map + (h + w*height)*depth)) / 16.0);
            //printf("\n");
            *(o_fmap+h*width*depth+w*depth+d) = truncation(*(current_map + (h + w*height)*depth));
        	//*(o_fmap+h*width*depth+w*depth+d) = (*(current_map + (h + w*height)*depth));
            //printf("    Data after truncate: ");
            //printSignBinary((*(o_fmap+ h*width*depth + w*depth + d)), 16.0);
            //printf("\n");
         }
      }
   }
};
void mat_mul(alt_u8* matrix, alt_16* result) {
   // Assert the matrix size to NUM_DIM x NUM_VECTOR
//   printf("  Calculating matmul(%d x %d)...\n", NUM_DIM, NUM_VECTOR);
   int row = 0, column = 0;
   alt_u32 matrix_32[65][128] = {0};
//   printf("ready................\n");
   for(column = 0; column < 128; column++) {
     for(row = 0; row < 65; row++) {
       matrix_32[row][column] = transform_8to32(matrix+128*4*row+column);
       //printf("matrix_32 (%d, %d) = ", row, column);
//       printBinary(matrix_32[row][column], 0, 32);
       //printf("%d", matrix_32[row][column]);
     }
   }

//   printf("ready write................\n");
   int count = 0;
   for(column = 0; column < 128; column++) {
      for(row = 0; row < 65; row++) {
        count = count + 1;
//       printf("writing ................column: %d, row : %d,  times %d \n", column, row, count);
         IOWR(TEST_SLAVE_0_BASE, 0, matrix_32[row][column]);
      }
   }

   alt_u32 tmp = 0;
//   printf("ready read................\n");

   //printf("  Collecting the result...\n");
   for(row = 0; row < 128; row ++) {
//     printf("reading ................. row : %d\n", row);
      tmp = IORD(TEST_SLAVE_0_BASE, 0);
//      printf("finish r row : %d \n", row);
      *(result + 2*row) = (alt_16)((tmp << 16) >> 16);
      *(result + 2*row + 1) = (alt_16)(tmp >> 16);
      printBinary(tmp, 0, 32);
      //printBinary(*(result + 2* row), 0, 16);
      //printBinary(*(result + 2* row+1), 0, 16);
   }
//   printf("finish read................\n");


};
void conv( alt_u8 * data_mat, int image_h, int image_w,
   alt_u8 * weight_mat, int filter_height, int filter_weight, int filter_num, alt_u8 * temp_fmap, alt_16 * output_mat){
   int flatten_num = image_h*image_w;
   alt_u8 mat_block[257][128] = {0};
   alt_16 result[256] = {0};
   alt_u8 * d_ptr; d_ptr = data_mat;
   alt_u8 * f_ptr; f_ptr = weight_mat;
   int i=0, db=0, fb=0, r=0, c=0, result_c=0, counter = 0;

   // for every colume in filter
   for(i=0 ; i < filter_num ; ++i){
      // for every block in filter(filter block)
      for(fb=0; fb < (filter_height * filter_weight - 1)/128 + 1; ++fb){
         //set the initial ptr
         d_ptr = data_mat + fb*128;
         f_ptr = weight_mat + fb*filter_num*128 +i;

         // for every block per colume in data(data block)
         for(db=0; db < (flatten_num - 1)/256 + 1; ++db){
            // one block
            // put every row in data into mat_block
            for( r=0; r<256; ++r ){
               // when data row is smaller then flatten_num
               if( db*256+r < flatten_num ){
                  // put every element in data into mat_block
                  for(c=0 ; c<128 ; ++c){
                     // when data colume is smaller then filter_height*filter_weight
                     if( fb*128+c < filter_height*filter_weight ){
                        mat_block[r][c] = *(d_ptr);
//                        counter++;
//                        printSignBinary(*d_ptr, 16);
//                        printf("\ncointer %d\n", counter);
                        d_ptr = d_ptr+1;
                     }
                     // else = 0
                     else{

                        mat_block[r][c] = (alt_u8)1;
                     }
                  }
                  d_ptr = data_mat + db*256*filter_height*filter_weight + (r+1)*filter_height*filter_weight + fb*128;
               }
               // else = 0
               else{
                  for(c=0 ; c<128 ; ++c){ mat_block[r][c] = (alt_u8)1; }
               }
            }

            // put one colume in filter into mat_block
            for(c=0 ; c<128 ; ++c){
               if(fb*128+c<(filter_height*filter_weight)){
                  mat_block[256][c] = *(f_ptr);
//                  printSignBinary(*f_ptr, 128);
//                  printf("\n");
                  f_ptr = f_ptr + filter_num;
               }
               else
//            	  printf("1\n");
                  mat_block[256][c] = (alt_u8)(0);
            }
            printf("MatBlock.............................................................................\n");
            if(i==0 && fb==0 && db==0) {printMatrix(mat_block, 257, 128, 1, 16);}

            //calculate by mat_mul
            mat_mul(mat_block, result);
            printf("================================== result ======================================\n");
//            if(i==0 && fb==0 && db==0) {
               int fuck=0;
               for(fuck=0 ; fuck<256 ; ++fuck){
                   printf("num = %d, ans = %f ", fuck, (double)(*(result+fuck)));
            	   printf("\n");
               }
//            }
            for(result_c=0 ; result_c<256 ; ++result_c){
               if(db*256+result_c<flatten_num)
                  *(output_mat+(db*256+result_c)*filter_num + i) += result[result_c];
            }
         }
      }
   }
//   printf("================================== result ======================================\n");
//   for(c = 0; c < 121; c++)
//	   printf("%f ", (double)(*(output_mat+c)) / 16.0);

   //recovery to image
   matrix_to_imageCube(output_mat, temp_fmap, image_h, image_w, filter_num);
   //printMatrix(temp_fmap, 40, 31, 16);

};

void max_pooling(alt_u8* input_fmap, alt_u8* output_fmap, int height, int width, int depth){
   int w = 0, h = 0, d = 0,count=0;
   while(h + 1 < height)
   {
      while(w + 1 < width)
      {
         while(d < depth)
         {
            int i = 1;
            alt_u8 temp = 0;
            temp = *(input_fmap + h * depth * width + w * depth + d);
            for (i = 1; i < 4; i++){
               if (temp >= *(input_fmap + (h + i/2) * depth * width + (w + i%2) * depth + d))
                  temp = *(input_fmap + (h + i/2) * depth * width + (w + i%2) * depth + d);
            }
            *(output_fmap + count) = temp;
            count = count + 1;
            d = d + 1;
         }
         w = w + 2;
         d = 0;
      }
      h = h + 2;
      w = 0;
      d = 0;
   }
};
void mean_pooling(alt_u8* input_fmap, alt_u8* output_fmap, int height, int width, int depth){
   int w = 0, h = 0, d = 0,count=0;
   while(h + 1 < height)
   {
      while(w + 1 < width)
      {
         while(d < depth)
         {
            int i = 1;
            alt_u16 temp = 0;
            temp = (alt_u16)(*(input_fmap + h * depth * width + w * depth + d));
            for (i = 1; i < 4; i++){
               temp = temp + (alt_u16) (*(input_fmap + (h + i/2) * depth * width + (w + i%2) * depth + d));
            }
            //printf("%f\n", temp);
            *(output_fmap + count) = (((alt_u8)(temp >> 2)));
            count = count + 1;
            d = d + 1;
         }
         w = w + 2;
         d = 0;
      }
      h = h + 2;
      w = 0;
      d = 0;
   }
};
void conv_interface_1(alt_u8* first_conv, alt_u8* spectrum, alt_u8* con2_fmap){
   /* Convolution 1 */
   alt_u8 flatten_mat1[1240][100] = {0};
   alt_16 output_mat[1240][16] = {0};
   flatten_matrix(flatten_mat1, spectrum, 49, 40, 10, 10, 1);
   conv(flatten_mat1, 40, 31, first_conv, 10, 10, 16, con2_fmap, output_mat);
};

void conv_interface_2(alt_u8* second_conv, alt_u8* con2_fmap, alt_u8* conv_finish_fmap){
   /* Convolution 2 */
   alt_u8 flatten_mat2[972][400] = {0};
   alt_u8  temp_fmap[36][27][16] = {0};
   alt_u8 temp2_fmap[18][13][16] = {0};
   alt_16 output_mat[972][16] = {0};
   flatten_matrix(flatten_mat2, con2_fmap, 40, 31, 5, 5, 16);
   conv(flatten_mat2, 36, 27, second_conv, 1, 400, 16, temp_fmap, output_mat);
   printf("Output for second conv: ");
   printf("%f\n", (double)((temp_fmap[0][0][5])) / 16.0);
   max_pooling(temp_fmap, temp2_fmap, 36, 27, 16);
   mean_pooling(temp2_fmap, conv_finish_fmap, 9, 6, 16);

};

void total_conv(alt_u8* first_conv, alt_u8* second_conv, alt_u8* spectrum, alt_u8* conv_finish_fmap){
   alt_u8  con2_fmap[40][31][16] = {0};
   conv_interface_1( first_conv, spectrum, con2_fmap);
   printf("Output for first CONV: ");
   int i = 0, j = 0, k = 0;
   for(i = 0; i < 40; i++) {
	   for(j = 0; j <31; j++){
		   for(k = 0; k < 16; k++){
			   printSignBinary(con2_fmap[i][j][k], 16);
			   printf("\n");
		   }
	   }
   }
   conv_interface_2(second_conv, con2_fmap, conv_finish_fmap);
   printf("Output for mean pool: ");
   printf("%f\n", (double)(*(conv_finish_fmap)) / 16.0);
   //printMatrix(conv_finish_fmap, 9, 6, 16, 16);
};

void fully_connencted( alt_u8 * data_mat, int image_h, int image_w,
   alt_u8 * weight_mat, int filter_height, int filter_weight, int filter_num, alt_16* fc_finish){
   int flatten_num = image_h*image_w;
   alt_u8 mat_block[257][128] = {0};
   alt_16 result[256] = {0};
   alt_u8 * d_ptr; d_ptr = data_mat;
   alt_u8 * f_ptr; f_ptr = weight_mat;
   int i=0, db=0, fb=0, r=0, c=0, result_c=0;

   // for every colume in filter
   for(i=0 ; i < filter_num ; ++i){
      // for every block in filter(filter block)
      for(fb=0; fb < (filter_height * filter_weight - 1)/128 + 1; ++fb){
         //set the initial ptr
         d_ptr = data_mat + fb*128;
         f_ptr = weight_mat + fb*filter_num*128 +i;

         // for every block per colume in data(data block)
         for(db=0; db < (flatten_num - 1)/256 + 1; ++db){
            // one block
            // put every row in data into mat_block
            for( r=0; r<256; ++r ){
               // when data row is smaller then flatten_num
               if( db*256+r < flatten_num ){
                  // put every element in data into mat_block
                  for(c=0 ; c<128 ; ++c){
                     // when data colume is smaller then filter_height*filter_weight
                     if( fb*128+c < filter_height*filter_weight ){
                        mat_block[r][c] = *(d_ptr);
                        d_ptr = d_ptr+1;
                     }
                     // else = 0
                     else{
                        mat_block[r][c] = (alt_u8)0;
                     }
                  }
                  d_ptr = data_mat + db*256*filter_height*filter_weight + (r+1)*filter_height*filter_weight + fb*128;
               }
               // else = 0
               else{
                  for(c=0 ; c<128 ; ++c){ mat_block[r][c] = (alt_u8)0; }
               }
            }

            // put one colume in filter into mat_block
            for(c=0 ; c<128 ; ++c){
               if(fb*128+c<(filter_height*filter_weight)){
                  mat_block[256][c] = *(f_ptr);
                  f_ptr = f_ptr + filter_num;
               }
               else
                  mat_block[256][c] = (alt_u8)32;
            }

            //calculate by mat_mul
            mat_mul(mat_block, result);
            if(i==0 && fb==0 && db==0) {
               int fuck=0;
               for(fuck=0 ; fuck<256 ; ++fuck){
            	   printf("num = %d, ans = %f ", fuck, (double)(*(result+fuck)));
            	   printf("\n");
               }
            }
            for(result_c=0 ; result_c<256 ; ++result_c){
               if(db*256+result_c<flatten_num)
                  *(fc_finish+(db*256+result_c)*filter_num + i) += result[result_c];
            }
         }
      }
   }
};

void printResult(alt_u8* matrix, alt_16* result) {
   int row = 0;
   int column = 0;
   int weight_counter = 0;
   if(NUM_DIM >= NUM_VECTOR) {
     for(row = 0; row < NUM_DIM; ++row) {
      printf("[ ");
        for(column = 0; column < NUM_VECTOR; ++column) {
          printSignBinary((*(matrix + row*NUM_VECTOR + column)), 16);
          printf(" ");
        }
        if(row >= NUM_VECTOR) printf("]         ");
        else {
          printf("] ");//%3f", (double)(*(matrix+(NUM_DIM)*NUM_VECTOR+weight_counter)) / 128.0);
          printSignBinary(*(matrix+(NUM_DIM)*NUM_VECTOR+weight_counter), 128);
        }
        weight_counter ++;
        printf(" %f\n", (double)(*(result+row)) / 16.0);
     }
   }
};

int main() {
     printf("Hello from Nios II!\n");
     alt_u8 matrix[8+1][4] = {0};
     alt_u8 data[2][2][1] = {0};
     alt_16 result[9] = {0};
     int row = 0;
     int column = 0;
     printf("ha ha ..........................\n");
     for(row = 0; row < 8+1; row ++){
        for(column = 0; column < 4; column++){
        	if(row == 8) {
        		if(column > 1) matrix[row][column] = 16;
        		else matrix[row][column] = 16;//-row+column;
        	}
        	else {
        		if(row > 4 || column > 5) matrix[row][column] = 16;
        		else matrix[row][column] = 16;
        	}
        }
     }
     for(row = 0; row < 2; row ++){
        for(column = 0; column < 2; column++){
        	data[row][column][0] = 64;
        }
     }
     printf("fuck ..........................\n");
     printMatrix(matrix, 8, 4, 1, 16.0);
     printMatrix(matrix[8], 2, 2, 1, 128.0);
//     max_pooling(matrix, result, 9, 4, 1);
     fully_connencted(matrix, 9, 1, matrix[8], 2, 2, 1, result);
//     printMatrix(result, 9, 1, 1, 16.0);
//     mat_mul(matrix, result);
//     printf("Matrix Multiplication:\n");

     for(row = 0; row < 8; row++)
   	   printf("%f\n", (double)(*(result+row)) / 16.0);
//     printResult(matrix, result);
     return 0;

//  alt_u8 matrix[20][20] = {0};
//  alt_u8 filter[10][10][1][1] = {0};
//  int row = 0;
//  int column = 0;
//  printf("ha ha ..........................\n");
//  for(row = 0; row < 20; row ++){
//	for(column = 0; column < 20; column++){
//		matrix[row][column] = 12;
//	}
//  }
//  for(row = 0; row < 10; row ++){
//	for(column = 0; column < 10; column++){
//		filter[row][column][0][0] = 8;//+row+column;
//		filter[row][column][0][0] = 2;//+row+column;
//	}
//  }
//  alt_u8 flatten [121][100] = {0};
//  alt_16 output_mat[121][1] = {0};
//  alt_u8  con2_fmap[11][11][1] = {0};
//  flatten_matrix(flatten, matrix, 20, 20, 10, 10, 1);
//  //printMatrix(flatten, 121, 100, 1, 16);
//  conv(flatten, 11, 11, filter, 10, 10, 1, con2_fmap, output_mat);
//  printMatrix(con2_fmap, 11, 11, 1, 16);
//  return 0;

//  alt_up_rs232_dev* rs232_ptr ;
//  alt_up_rs232_dev rs232 ;
//  rs232.base = RS232_0_BASE;
//  rs232_ptr = &rs232;
//
//  //right
//  IOWR(HEX4_BASE, 0, 127);
//  IOWR(HEX3_BASE, 0, 127);
//  IOWR(HEX2_BASE, 0, 127);
//  IOWR(HEX1_BASE, 0, 127);
//  IOWR(HEX0_BASE, 0, 127);
//
//
//
//  if(rs232_ptr == NULL) printf("Error\n");
//  else printf("Open\n");
//
//  alt_up_rs232_enable_read_interrupt(rs232_ptr);
//
//  alt_u8 fc[6][864] = {0};
//  alt_u8 first_conv[10][10][1][16] = {0};
//  alt_u8 second_conv[5][5][16][16] = {0};
//  alt_u8 spectrum[49][40] = {0};
//
//
//
//  /* Reading model */
//
//  read_event(rs232_ptr, &fc, FC_UNITS * LABEL_NUM);
//  read_event(rs232_ptr, &first_conv, FIRST_CONV);
//  read_event(rs232_ptr, &second_conv, SECOND_CONV);
////  read_event(rs232_ptr, &spectrum, DATA_SHAPE);
//  int i =0, j = 0, k = 0, w = 0;
//  for(i = 0; i < 5; ++i) {
//	  for(j = 0; j < 5; ++j) {
//		  for( k = 0; k < 16; k++) {
//			  for(w = 0; w < 16; ++w) {
//				  printSignBinary(second_conv[i][j][k][w], 128);
//				  printf("\n");
//			  }
//		  }
//	  }
//  }

  /* Testing model parameters */

//  printf("fc element 0 : %d\n", (int)fc[0][0]);
//  printSignBinary(fc[0][0], 128);
//  printf("\n");
//  printf("fc element 16 : %d\n", (int)fc[2][4]);
//  printSignBinary(fc[2][4], 128);
//  printf("\n");
//  printf("first conv element 0 : %d\n", (int)first_conv[0][0][0][0]);
//  printSignBinary(first_conv[0][0][0][0], 128);
//  printf("\n");
//  printf("first conv element 16 : %d\n", (int)first_conv[0][1][0][0]);
//  printSignBinary(first_conv[0][1][0][0], 128);
//  printf("\n");
//  printf("second conv element 0 : %d\n", (int)second_conv[0][0][0][0]);
//  printSignBinary(second_conv[0][0][0][0], 128);
//  printf("\n");
//  printf("second conv element 16 : %d\n", (int)second_conv[0][0][1][0]);
//  printSignBinary(second_conv[0][0][1][0], 128);
//  printf("\n");

//  printf("\n");
//  int count = 0;
//  int row = 0;
//  while(count < 10) {
//	alt_u8 conv_finish_fmap[9][6][16] = {0};
//	alt_16 final_fmap[6] = {0};
//	printf("Reading data NUM: %d\n", count);
//	count ++;
//	read_event(rs232_ptr, &spectrum, DATA_SHAPE);
////	printMatrix(spectrum, 49, 40, 1, 16);
////	printf("data element 0 : %d\n", (int)spectrum[0][0]);
////	printSignBinary(spectrum[0][0], 16);
////	printf("\n");
////	printf("data element 49 : %d\n", (int)spectrum[1][9]);
////	printSignBinary(spectrum[1][9], 16);
////	printf("\n");
//	printf("==================== predicting ====================\n");
//	total_conv(first_conv, second_conv, spectrum, conv_finish_fmap);
//	fully_connencted(fc, 6, 1, conv_finish_fmap, 54, 16, 1, final_fmap);
//	printf("Collecting results...\n");
//	for(row = 0; row < 6; ++row)
//		printf("%f ", (double)final_fmap[row] / 16.0);
//	printf("\nend\n");
	//dog
//	IOWR(HEX[4], 0, 127);
//	IOWR(HEX[3], 0, 127);
//	IOWR(HEX[2], 0, 33);
//	IOWR(HEX[1], 0, 35);
//	IOWR(HEX[0], 0, 16);

	//stop
//	IOWR(HEX[4], 0, 127);
//	IOWR(HEX[3], 0, 54);
//	IOWR(HEX[2], 0, 7);
//	IOWR(HEX[1], 0, 35);
//	IOWR(HEX[0], 0, 12);

	//left
//	IOWR(HEX4_BASE, 0, 127);
//	IOWR(HEX3_BASE, 0, 71);
//	IOWR(HEX2_BASE, 0, 6);
//	IOWR(HEX1_BASE, 0, 14);
//	IOWR(HEX0_BASE, 0, 7);

	//right

//  }
//	printMatrix(conv_finish_fmap, 18, 13, 16);
//
  return 0;
}
