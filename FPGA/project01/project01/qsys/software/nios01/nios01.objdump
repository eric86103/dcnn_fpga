
nios01.elf:     file format elf32-littlenios2
nios01.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000220

Program Header:
    LOAD off    0x00001020 vaddr 0x10080020 paddr 0x08000000 align 2**12
         filesz 0x00000220 memsz 0x00000220 flags r-x
    LOAD off    0x00002220 vaddr 0x08000220 paddr 0x08000220 align 2**12
         filesz 0x00012828 memsz 0x00012828 flags r-x
    LOAD off    0x00014a48 vaddr 0x08012a48 paddr 0x0801455c align 2**12
         filesz 0x00001b14 memsz 0x00001b14 flags rw-
    LOAD off    0x00017070 vaddr 0x08016070 paddr 0x08016070 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-
    LOAD off    0x00017000 vaddr 0x10080000 paddr 0x10080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10080000  10080000  00017000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  10080020  08000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001206c  08000220  08000220  00002220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007bc  0801228c  0801228c  0001428c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b14  08012a48  0801455c  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  08016070  08016070  00017070  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_control 00000000  080161d4  080161d4  00017020  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  10080240  10080240  00017020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00017020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d30  00000000  00000000  00017048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000259b9  00000000  00000000  00017d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009447  00000000  00000000  0003d731  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b73b  00000000  00000000  00046b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000024d4  00000000  00000000  000522b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003a3a  00000000  00000000  00054788  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016f57  00000000  00000000  000581c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  0006f11c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001380  00000000  00000000  0006f150  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00073bb6  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00073bb9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00073bbe  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00073bbf  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00073bc0  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00073bc4  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00073bc8  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00073bcc  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00073bd7  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00073be2  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000007  00000000  00000000  00073bed  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003a  00000000  00000000  00073bf4  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007c74e  00000000  00000000  00073c2e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10080000 l    d  .entry	00000000 .entry
10080020 l    d  .exceptions	00000000 .exceptions
08000220 l    d  .text	00000000 .text
0801228c l    d  .rodata	00000000 .rodata
08012a48 l    d  .rwdata	00000000 .rwdata
08016070 l    d  .bss	00000000 .bss
080161d4 l    d  .sdram_control	00000000 .sdram_control
10080240 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios01_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
080144f4 l     O .rwdata	00000004 NUM_VECTOR
080144f8 l     O .rwdata	00000004 NUM_DIM
080144fc l     O .rwdata	00000004 NUM_DIM_WRITE
08014500 l     O .rwdata	00000004 NUM_DIM_SHRINK
08014504 l     O .rwdata	00000004 bit_mask
08014508 l     O .rwdata	00000004 LABEL_NUM
0801450c l     O .rwdata	00000004 FC_UNITS
08014510 l     O .rwdata	00000004 FIRST_CONV
08014514 l     O .rwdata	00000004 SECOND_CONV
08014518 l     O .rwdata	00000004 DATA_SHAPE
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08003d5c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0801288e l     O .rodata	00000010 zeroes.4181
0801289e l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
080062e8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08007e68 l     F .text	00000008 __fp_lock
08007e70 l     F .text	00000008 __fp_unlock
08007e84 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08012a48 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08012e8c l     O .rwdata	00000020 lc_ctype_charset
08012e6c l     O .rwdata	00000020 lc_message_charset
08012eac l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
080128d0 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800b328 l     F .text	000000fc __sprint_r.part.0
08012a04 l     O .rodata	00000010 blanks.4125
080129f4 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 alt_close.c
0800f7a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800f8c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800f8ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800f9ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800fae0 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800fbc4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800fda0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0801454c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800fffc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
080104d0 l     F .text	00000038 alt_dev_reg
08013494 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
080107ac l     F .text	00000204 altera_avalon_jtag_uart_irq
080109b0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08011154 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08011690 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
080117c8 l     F .text	00000050 alt_get_errno
08011818 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
080160a8 g     O .bss	00000004 alt_instruction_exception_handler
0800401c g     F .text	00000018 putchar
0800a800 g     F .text	00000074 _mprec_log10
0800a8ec g     F .text	0000008c __any_on
0800cde8 g     F .text	00000054 _isatty_r
080128dc g     O .rodata	00000028 __mprec_tinytens
0800fce8 g     F .text	00000078 alt_main
08004034 g     F .text	000000b8 _puts_r
080160d4 g     O .bss	00000100 alt_irq
0800ce3c g     F .text	0000005c _lseek_r
0801455c g       *ABS*	00000000 __flash_rwdata_start
0800e4e0 g     F .text	00000084 .hidden __eqdf2
0800026c g     F .text	0000006c transform
080161d4 g       *ABS*	00000000 __alt_heap_start
08003fd8 g     F .text	0000003c printf
0800cef4 g     F .text	0000009c _wcrtomb_r
0800b220 g     F .text	0000005c __sseek
080081b8 g     F .text	00000010 __sinit
0800c7bc g     F .text	00000154 __swbuf_r
08008c30 g     F .text	0000007c _setlocale_r
08008024 g     F .text	00000064 __sfmoreglue
0800fd80 g     F .text	00000020 __malloc_unlock
0801036c g     F .text	00000090 alt_up_rs232_read_fd
08009890 g     F .text	0000015c memmove
080081a0 g     F .text	00000018 _cleanup
080099ec g     F .text	000000a8 _Balloc
08000af0 g     F .text	00000420 mat_mul
0800e564 g     F .text	000000e0 .hidden __gtdf2
08011bd8 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10080000 g     F .entry	0000001c __reset
08000000 g       *ABS*	00000000 __flash_exceptions_start
0800cd90 g     F .text	00000058 _fstat_r
0801608c g     O .bss	00000004 errno
0800b19c g     F .text	00000008 __seofread
080022ac g     F .text	000009a4 fully_connencted
08016094 g     O .bss	00000004 alt_argv
0801c4f4 g       *ABS*	00000000 _gp
080004c8 g     F .text	000000a0 transform_32to8
08013314 g     O .rwdata	00000180 alt_fd_list
08004014 g     F .text	00000008 _putchar_r
08011300 g     F .text	00000090 alt_find_dev
08009758 g     F .text	00000138 memcpy
08007e78 g     F .text	0000000c _cleanup_r
08003b84 g     F .text	000000d0 .hidden __floatsidf
08011750 g     F .text	00000078 alt_io_redirect
0800e644 g     F .text	000000e0 .hidden __ltdf2
0801228c g       *ABS*	00000000 __DTOR_END__
080102f8 g     F .text	00000074 alt_up_rs232_read_data
080040ec g     F .text	00000014 puts
08011e4c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0800b080 g     F .text	00000074 __fpclassifyd
0800a75c g     F .text	000000a4 __ratio
0800c798 g     F .text	00000024 __vfiprintf_internal
08010bac g     F .text	0000020c altera_avalon_jtag_uart_read
080009b0 g     F .text	00000140 matrix_to_imageCube
00000000  w      *UND*	00000000 malloc
08003fac g     F .text	0000002c _printf_r
10080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08003e78 g     F .text	00000008 .hidden __udivsi3
0800fa3c g     F .text	000000a4 isatty
0801292c g     O .rodata	000000c8 __mprec_tens
08008cac g     F .text	0000000c __locale_charset
08011dc0 g     F .text	0000008c alt_icache_flush
08016088 g     O .bss	00000004 __malloc_top_pad
08001b3c g     F .text	000001cc mean_pooling
08002c50 g     F .text	000001ac printResult
08014524 g     O .rwdata	00000004 __mb_cur_max
080018f8 g     F .text	00000244 max_pooling
08008cdc g     F .text	0000000c _localeconv_r
08009dec g     F .text	0000003c __i2b
0800861c g     F .text	000004a4 __sfvwrite_r
0800b0f4 g     F .text	00000054 _sbrk_r
08000f10 g     F .text	000009e8 conv
0800ce98 g     F .text	0000005c _read_r
08014544 g     O .rwdata	00000004 alt_max_fd
08010274 g     F .text	00000044 alt_up_rs232_check_parity
0800caa0 g     F .text	00000100 _fclose_r
08007e38 g     F .text	00000030 fflush
08016084 g     O .bss	00000004 __malloc_max_sbrked_mem
0800dc44 g     F .text	0000089c .hidden __adddf3
0800a504 g     F .text	0000011c __b2d
0800d6b4 g     F .text	00000590 .hidden __umoddi3
0800fc14 g     F .text	000000d4 lseek
08000000 g       *ABS*	00000000 __alt_mem_sdram_control
08016070 g     O .bss	00000001 par
0801451c g     O .rwdata	00000004 _global_impure_ptr
0800aae0 g     F .text	000005a0 _realloc_r
080161d4 g       *ABS*	00000000 __bss_end
080115a0 g     F .text	000000f0 alt_iic_isr_register
08011ad4 g     F .text	00000104 alt_tick
0800d0f4 g     F .text	000005c0 .hidden __udivdi3
0800cbb4 g     F .text	00000184 _fputwc_r
08012904 g     O .rodata	00000028 __mprec_bigtens
08009bd0 g     F .text	00000104 __s2b
08003c54 g     F .text	000000a4 .hidden __floatunsidf
08000670 g     F .text	00000080 transform_8to32
0800a2ac g     F .text	00000060 __mcmp
080081d8 g     F .text	00000018 __fp_lock_all
08011554 g     F .text	0000004c alt_ic_irq_enabled
08011a3c g     F .text	00000098 alt_alarm_stop
0801609c g     O .bss	00000004 alt_irq_active
08000954 g     F .text	0000005c truncation
100800fc g     F .exceptions	000000d0 alt_irq_handler
080132ec g     O .rwdata	00000028 alt_dev_null
08000800 g     F .text	00000154 flatten_matrix
08011110 g     F .text	00000044 alt_dcache_flush_all
08009cd4 g     F .text	00000068 __hi0bits
0800f718 g     F .text	00000088 .hidden __fixdfsi
0801455c g       *ABS*	00000000 __ram_rwdata_end
0801453c g     O .rwdata	00000008 alt_dev_list
0801004c g     F .text	000000f8 write
0800a978 g     F .text	000000a0 _putc_r
08012a48 g       *ABS*	00000000 __ram_rodata_end
0800f93c g     F .text	000000b0 fstat
080103fc g     F .text	00000094 alt_up_rs232_write_fd
0800e644 g     F .text	000000e0 .hidden __ledf2
0800a024 g     F .text	00000140 __pow5mult
0800b43c g     F .text	0000135c ___vfiprintf_internal_r
0801607c g     O .bss	00000004 __nlocale_changed
08003e80 g     F .text	00000008 .hidden __umodsi3
08001eb4 g     F .text	0000030c conv_interface_2
080161d4 g       *ABS*	00000000 end
080106e8 g     F .text	000000c4 altera_avalon_jtag_uart_init
100801cc g     F .exceptions	00000074 alt_instruction_exception_entry
0801228c g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
08003cf8 g     F .text	00000064 .hidden __clzsi2
08010db8 g     F .text	00000218 altera_avalon_jtag_uart_write
08000568 g     F .text	00000108 printSignBinary
080081c8 g     F .text	00000004 __sfp_lock_acquire
08009670 g     F .text	000000e8 memchr
08004198 g     F .text	00001ffc ___vfprintf_internal_r
0800832c g     F .text	000002f0 _free_r
08008cb8 g     F .text	00000010 __locale_mb_cur_max
080120c4 g     F .text	00000194 __call_exitprocs
08016078 g     O .bss	00000004 __mlocale_changed
08014528 g     O .rwdata	00000004 __malloc_sbrk_base
08000220 g     F .text	0000004c _start
080160a0 g     O .bss	00000004 _alt_tick_rate
0800a164 g     F .text	00000148 __lshift
080160a4 g     O .bss	00000004 _alt_nticks
0800fdf0 g     F .text	000000fc read
0801053c g     F .text	00000048 alt_sys_init
08011fb0 g     F .text	00000114 __register_exitproc
08010238 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
08009e28 g     F .text	000001fc __multiply
08010a58 g     F .text	00000068 altera_avalon_jtag_uart_close
08012a48 g       *ABS*	00000000 __ram_rwdata_start
0801228c g       *ABS*	00000000 __ram_rodata_start
080160ac g     O .bss	00000028 __malloc_current_mallinfo
0800a620 g     F .text	0000013c __d2b
08010584 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08011d0c g     F .text	000000b4 alt_get_fd
0800c988 g     F .text	00000054 _close_r
080003a8 g     F .text	00000120 printBinary
08011f34 g     F .text	0000007c memcmp
08010644 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080161d4 g       *ABS*	00000000 __alt_stack_base
08010694 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
080061b8 g     F .text	00000130 __swsetup_r
080032b8 g     F .text	000008cc .hidden __divdf3
08008088 g     F .text	00000118 __sfp
0800a874 g     F .text	00000078 __copybits
08012ee4 g     O .rwdata	00000408 __malloc_av_
080081d4 g     F .text	00000004 __sinit_lock_release
0800e724 g     F .text	00000724 .hidden __muldf3
0800b148 g     F .text	00000054 __sread
0801019c g     F .text	0000005c alt_up_rs232_disable_read_interrupt
08011bf8 g     F .text	00000114 alt_find_file
080111a4 g     F .text	000000a4 alt_dev_llist_insert
0800fd60 g     F .text	00000020 __malloc_lock
0800ff4c g     F .text	000000b0 sbrk
08007c10 g     F .text	00000228 _fflush_r
0800c9dc g     F .text	000000c4 _calloc_r
08016070 g       *ABS*	00000000 __bss_start
08003e88 g     F .text	00000124 memset
08002dfc g     F .text	000004bc main
08016098 g     O .bss	00000004 alt_envp
08016080 g     O .bss	00000004 __malloc_max_total_mem
080105e4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800c910 g     F .text	0000001c __swbuf
0800b27c g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
0800cba0 g     F .text	00000014 fclose
080064e8 g     F .text	00001728 _dtoa_r
08008ec8 g     F .text	000007a8 _malloc_r
0800d068 g     F .text	00000030 __ascii_wctomb
08014548 g     O .rwdata	00000004 alt_errno
08008ac0 g     F .text	000000b8 _fwalk
0800aa18 g     F .text	000000c8 putc
08003dc8 g     F .text	00000054 .hidden __divsi3
08008208 g     F .text	00000124 _malloc_trim_r
0801228c g       *ABS*	00000000 __CTOR_END__
0800b284 g     F .text	000000a4 strcmp
0801228c g       *ABS*	00000000 __flash_rodata_start
0801228c g       *ABS*	00000000 __DTOR_LIST__
08010490 g     F .text	00000040 alt_up_rs232_open_dev
0800e4e0 g     F .text	00000084 .hidden __nedf2
08010508 g     F .text	00000034 alt_irq_init
0800feec g     F .text	00000060 alt_release_fd
08012748 g     O .rodata	00000100 .hidden __clz_tab
08016074 g     O .bss	00000004 _PathLocale
08011ee8 g     F .text	00000014 atexit
0800c92c g     F .text	0000005c _write_r
08008ce8 g     F .text	0000001c setlocale
08014520 g     O .rwdata	00000004 _impure_ptr
08016090 g     O .bss	00000004 alt_argc
080112a4 g     F .text	0000005c _do_dtors
08008cd4 g     F .text	00000008 __locale_cjk_lang
10080020 g       .exceptions	00000000 alt_irq_entry
0800a4a4 g     F .text	00000060 __ulp
080081f0 g     F .text	00000018 __fp_unlock_all
08014534 g     O .rwdata	00000008 alt_fs_list
08010144 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
080102b8 g     F .text	00000040 alt_up_rs232_write_data
10080020 g       *ABS*	00000000 __ram_exceptions_start
08008d04 g     F .text	0000000c localeconv
080113c0 g     F .text	00000050 alt_ic_isr_register
08001d08 g     F .text	000001ac conv_interface_1
0801455c g       *ABS*	00000000 _edata
080161d4 g       *ABS*	00000000 _end
10080240 g       *ABS*	00000000 __ram_exceptions_end
08010ac0 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
080114b0 g     F .text	000000a4 alt_ic_irq_disable
0800b1a4 g     F .text	0000007c __swrite
0801452c g     O .rwdata	00000004 __malloc_trim_threshold
08008cc8 g     F .text	0000000c __locale_msgcharset
08011efc g     F .text	00000038 exit
08008b78 g     F .text	000000b8 _fwalk_reent
0800a30c g     F .text	00000198 __mdiff
08003e1c g     F .text	0000005c .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
10080020 g     F .exceptions	00000000 alt_exception
080081cc g     F .text	00000004 __sfp_lock_release
08012258 g     F .text	00000034 _exit
08010fd0 g     F .text	00000140 alt_alarm_start
08008d10 g     F .text	000001b8 __smakebuf_r
08004100 g     F .text	00000098 strlen
080118e4 g     F .text	00000158 open
0800e564 g     F .text	000000e0 .hidden __gedf2
080006f0 g     F .text	00000110 printMatrix
08014530 g     O .rwdata	00000004 __wctomb
0800b424 g     F .text	00000018 __sprint_r
08011390 g     F .text	00000030 alt_icache_flush_all
08014550 g     O .rwdata	00000004 alt_priority_mask
08011410 g     F .text	000000a0 alt_ic_irq_enable
08006194 g     F .text	00000024 __vfprintf_internal
0800d098 g     F .text	0000005c _wctomb_r
0800ee48 g     F .text	000008d0 .hidden __subdf3
08009d3c g     F .text	000000b0 __lo0bits
080021c0 g     F .text	000000ec total_conv
08014554 g     O .rwdata	00000008 alt_alarm_list
08011248 g     F .text	0000005c _do_ctors
080101f8 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0800cf90 g     F .text	000000d8 wcrtomb
0800f7f0 g     F .text	000000d0 close
0800fb44 g     F .text	00000080 alt_load
0800cd38 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
080081d0 g     F .text	00000004 __sinit_lock_acquire
08009abc g     F .text	00000114 __multadd
08009a94 g     F .text	00000028 _Bfree
080002d8 g     F .text	000000d0 read_event



Disassembly of section .entry:

10080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10080000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1008000c:	00bffd16 	blt	zero,r2,10080004 <__ram_exceptions_end+0xfffffdc4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10080010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
10080014:	08408814 	ori	at,at,544
    jmp r1
10080018:	0800683a 	jmp	at
1008001c:	00000000 	call	10000000 <__alt_data_end>

Disassembly of section .exceptions:

10080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1008002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1008003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1008004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1008005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1008006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1008007c:	10000326 	beq	r2,zero,1008008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10080080:	20000226 	beq	r4,zero,1008008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10080084:	00800fc0 	call	100800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10080088:	00000706 	br	100800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1008008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10080090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10080094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10080098:	00801cc0 	call	100801cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1008009c:	1000021e 	bne	r2,zero,100800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100800f8:	ef80083a 	eret

100800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100800fc:	defff904 	addi	sp,sp,-28
10080100:	dfc00615 	stw	ra,24(sp)
10080104:	df000515 	stw	fp,20(sp)
10080108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1008010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10080110:	0005313a 	rdctl	r2,ipending
10080114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10080118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1008011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10080120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10080124:	00800044 	movi	r2,1
10080128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1008012c:	e0fffb17 	ldw	r3,-20(fp)
10080130:	e0bffc17 	ldw	r2,-16(fp)
10080134:	1884703a 	and	r2,r3,r2
10080138:	10001426 	beq	r2,zero,1008018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1008013c:	00820074 	movhi	r2,2049
10080140:	10983504 	addi	r2,r2,24788
10080144:	e0fffd17 	ldw	r3,-12(fp)
10080148:	180690fa 	slli	r3,r3,3
1008014c:	10c5883a 	add	r2,r2,r3
10080150:	10c00017 	ldw	r3,0(r2)
10080154:	00820074 	movhi	r2,2049
10080158:	10983504 	addi	r2,r2,24788
1008015c:	e13ffd17 	ldw	r4,-12(fp)
10080160:	200890fa 	slli	r4,r4,3
10080164:	1105883a 	add	r2,r2,r4
10080168:	10800104 	addi	r2,r2,4
1008016c:	10800017 	ldw	r2,0(r2)
10080170:	1009883a 	mov	r4,r2
10080174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10080178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1008017c:	0005313a 	rdctl	r2,ipending
10080180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10080184:	e0bfff17 	ldw	r2,-4(fp)
10080188:	00000706 	br	100801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1008018c:	e0bffc17 	ldw	r2,-16(fp)
10080190:	1085883a 	add	r2,r2,r2
10080194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10080198:	e0bffd17 	ldw	r2,-12(fp)
1008019c:	10800044 	addi	r2,r2,1
100801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100801a4:	003fe106 	br	1008012c <__ram_exceptions_end+0xfffffeec>

    active = alt_irq_pending ();
100801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100801ac:	e0bffb17 	ldw	r2,-20(fp)
100801b0:	103fdb1e 	bne	r2,zero,10080120 <__ram_exceptions_end+0xfffffee0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100801b4:	0001883a 	nop
}
100801b8:	e037883a 	mov	sp,fp
100801bc:	dfc00117 	ldw	ra,4(sp)
100801c0:	df000017 	ldw	fp,0(sp)
100801c4:	dec00204 	addi	sp,sp,8
100801c8:	f800283a 	ret

100801cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100801cc:	defffb04 	addi	sp,sp,-20
100801d0:	dfc00415 	stw	ra,16(sp)
100801d4:	df000315 	stw	fp,12(sp)
100801d8:	df000304 	addi	fp,sp,12
100801dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
100801e0:	000531fa 	rdctl	r2,exception
100801e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
100801e8:	e0bffd17 	ldw	r2,-12(fp)
100801ec:	10801f0c 	andi	r2,r2,124
100801f0:	1004d0ba 	srli	r2,r2,2
100801f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
100801f8:	0005333a 	rdctl	r2,badaddr
100801fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10080200:	d0a6ed17 	ldw	r2,-25676(gp)
10080204:	10000726 	beq	r2,zero,10080224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
10080208:	d0a6ed17 	ldw	r2,-25676(gp)
1008020c:	e0fffd17 	ldw	r3,-12(fp)
10080210:	1809883a 	mov	r4,r3
10080214:	e17fff17 	ldw	r5,-4(fp)
10080218:	e1bffe17 	ldw	r6,-8(fp)
1008021c:	103ee83a 	callr	r2
10080220:	00000206 	br	1008022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10080224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10080228:	0005883a 	mov	r2,zero
}
1008022c:	e037883a 	mov	sp,fp
10080230:	dfc00117 	ldw	ra,4(sp)
10080234:	df000017 	ldw	fp,0(sp)
10080238:	dec00204 	addi	sp,sp,8
1008023c:	f800283a 	ret

Disassembly of section .text:

08000220 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000220:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000224:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 8000228:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 800022c:	00bffd16 	blt	zero,r2,8000224 <__ram_exceptions_end+0xf7f7ffe4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800023c:	d6b13d14 	ori	gp,gp,50420
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000244:	10981c14 	ori	r2,r2,24688

    movhi r3, %hi(__bss_end)
 8000248:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 800024c:	18d87514 	ori	r3,r3,25044

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x40>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <__ram_exceptions_end+0xf7f80014>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	800fb440 	call	800fb44 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	800fce80 	call	800fce8 <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <__ram_exceptions_end+0xf7f80028>

0800026c <transform>:
static int LABEL_NUM = 6;
static int FC_UNITS = 864;
static int FIRST_CONV = 10 * 10 * 1 * 16;
static int SECOND_CONV = 5 * 5 * 16 * 16;
static int DATA_SHAPE = 49 * 40;
alt_u8 transform(alt_u8 data) {
 800026c:	defffe04 	addi	sp,sp,-8
 8000270:	df000115 	stw	fp,4(sp)
 8000274:	df000104 	addi	fp,sp,4
 8000278:	2005883a 	mov	r2,r4
 800027c:	e0bfff05 	stb	r2,-4(fp)
	if(data == 128)
 8000280:	e0bfff03 	ldbu	r2,-4(fp)
 8000284:	10802018 	cmpnei	r2,r2,128
 8000288:	1000021e 	bne	r2,zero,8000294 <transform+0x28>
		return (alt_u8)0;
 800028c:	0005883a 	mov	r2,zero
 8000290:	00000d06 	br	80002c8 <transform+0x5c>
	if((data >> 7) == 1)
 8000294:	e0bfff03 	ldbu	r2,-4(fp)
 8000298:	1004d1fa 	srli	r2,r2,7
 800029c:	10803fcc 	andi	r2,r2,255
 80002a0:	10800058 	cmpnei	r2,r2,1
 80002a4:	1000071e 	bne	r2,zero,80002c4 <transform+0x58>
		data = (((data << 1) >> 1) ^ 0xFF)+1+128;
 80002a8:	e0bfff03 	ldbu	r2,-4(fp)
 80002ac:	1085883a 	add	r2,r2,r2
 80002b0:	1005d07a 	srai	r2,r2,1
 80002b4:	1007883a 	mov	r3,r2
 80002b8:	00bfe004 	movi	r2,-128
 80002bc:	10c5c83a 	sub	r2,r2,r3
 80002c0:	e0bfff05 	stb	r2,-4(fp)
	return data;
 80002c4:	e0bfff03 	ldbu	r2,-4(fp)
}
 80002c8:	e037883a 	mov	sp,fp
 80002cc:	df000017 	ldw	fp,0(sp)
 80002d0:	dec00104 	addi	sp,sp,4
 80002d4:	f800283a 	ret

080002d8 <read_event>:
void read_event(alt_up_rs232_dev* rs232, alt_u8* w_data, int read_num){
 80002d8:	defff904 	addi	sp,sp,-28
 80002dc:	dfc00615 	stw	ra,24(sp)
 80002e0:	df000515 	stw	fp,20(sp)
 80002e4:	df000504 	addi	fp,sp,20
 80002e8:	e13ffd15 	stw	r4,-12(fp)
 80002ec:	e17ffe15 	stw	r5,-8(fp)
 80002f0:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 read_FIFO_used = 0;
 80002f4:	e03ffc05 	stb	zero,-16(fp)
  alt_u8 fail = 1;
 80002f8:	00800044 	movi	r2,1
 80002fc:	e0bffc45 	stb	r2,-15(fp)
  alt_u8 data;
  int count = 0;
 8000300:	e03ffb15 	stw	zero,-20(fp)
  while(1){
    //read_FIFO_used = alt_up_rs232_get_used_space_in_read_FIFO(rs232_ptr);
    fail = alt_up_rs232_read_data(rs232 , &data, &par);
 8000304:	e0bffc84 	addi	r2,fp,-14
 8000308:	e13ffd17 	ldw	r4,-12(fp)
 800030c:	100b883a 	mov	r5,r2
 8000310:	d1a6df04 	addi	r6,gp,-25732
 8000314:	80102f80 	call	80102f8 <alt_up_rs232_read_data>
 8000318:	e0bffc45 	stb	r2,-15(fp)
    if(!fail){
 800031c:	e0bffc43 	ldbu	r2,-15(fp)
 8000320:	1000141e 	bne	r2,zero,8000374 <read_event+0x9c>
      data = transform(data);
 8000324:	e0bffc83 	ldbu	r2,-14(fp)
 8000328:	10803fcc 	andi	r2,r2,255
 800032c:	1009883a 	mov	r4,r2
 8000330:	800026c0 	call	800026c <transform>
 8000334:	e0bffc85 	stb	r2,-14(fp)
      *(w_data + count) = data;
 8000338:	e0bffb17 	ldw	r2,-20(fp)
 800033c:	e0fffe17 	ldw	r3,-8(fp)
 8000340:	1885883a 	add	r2,r3,r2
 8000344:	e0fffc83 	ldbu	r3,-14(fp)
 8000348:	10c00005 	stb	r3,0(r2)
      alt_up_rs232_disable_read_interrupt(rs232);
 800034c:	e13ffd17 	ldw	r4,-12(fp)
 8000350:	801019c0 	call	801019c <alt_up_rs232_disable_read_interrupt>
      alt_up_rs232_write_data(rs232, 1);
 8000354:	e13ffd17 	ldw	r4,-12(fp)
 8000358:	01400044 	movi	r5,1
 800035c:	80102b80 	call	80102b8 <alt_up_rs232_write_data>
      alt_up_rs232_enable_read_interrupt(rs232);
 8000360:	e13ffd17 	ldw	r4,-12(fp)
 8000364:	80101440 	call	8010144 <alt_up_rs232_enable_read_interrupt>
      count++;
 8000368:	e0bffb17 	ldw	r2,-20(fp)
 800036c:	10800044 	addi	r2,r2,1
 8000370:	e0bffb15 	stw	r2,-20(fp)
      //printf("Read num: %d\n",count);
    }
    if(count == read_num){
 8000374:	e0fffb17 	ldw	r3,-20(fp)
 8000378:	e0bfff17 	ldw	r2,-4(fp)
 800037c:	1880041e 	bne	r3,r2,8000390 <read_event+0xb8>
      printf("Reading data successfully!!!\n");
 8000380:	01020074 	movhi	r4,2049
 8000384:	2108a304 	addi	r4,r4,8844
 8000388:	80040ec0 	call	80040ec <puts>
      break;
 800038c:	00000106 	br	8000394 <read_event+0xbc>
    }
  }
 8000390:	003fdc06 	br	8000304 <__ram_exceptions_end+0xf7f800c4>
}
 8000394:	e037883a 	mov	sp,fp
 8000398:	dfc00117 	ldw	ra,4(sp)
 800039c:	df000017 	ldw	fp,0(sp)
 80003a0:	dec00204 	addi	sp,sp,8
 80003a4:	f800283a 	ret

080003a8 <printBinary>:

void printBinary(int val2, int mode, int num_bit) {
 80003a8:	defff704 	addi	sp,sp,-36
 80003ac:	dfc00815 	stw	ra,32(sp)
 80003b0:	df000715 	stw	fp,28(sp)
 80003b4:	df000704 	addi	fp,sp,28
 80003b8:	e13ffd15 	stw	r4,-12(fp)
 80003bc:	e17ffe15 	stw	r5,-8(fp)
 80003c0:	e1bfff15 	stw	r6,-4(fp)
   /*
    * Used to print 32 bits, e.g. 10000000_10000000_10000000_10000000
    */
   val2 = (val2 << (32 - num_bit));
 80003c4:	e0fffd17 	ldw	r3,-12(fp)
 80003c8:	01000804 	movi	r4,32
 80003cc:	e0bfff17 	ldw	r2,-4(fp)
 80003d0:	2085c83a 	sub	r2,r4,r2
 80003d4:	1884983a 	sll	r2,r3,r2
 80003d8:	e0bffd15 	stw	r2,-12(fp)
   unsigned char *p = (unsigned char*)&(val2) + 3;
 80003dc:	e0bffd04 	addi	r2,fp,-12
 80003e0:	108000c4 	addi	r2,r2,3
 80003e4:	e0bffb15 	stw	r2,-20(fp)
   int k = 0;
 80003e8:	e03ff915 	stw	zero,-28(fp)
   int i = 0;
 80003ec:	e03ffa15 	stw	zero,-24(fp)
   for(k = 0; k < num_bit >> 3; k++) {
 80003f0:	e03ff915 	stw	zero,-28(fp)
 80003f4:	00002306 	br	8000484 <printBinary+0xdc>
      int val2 = *(p-k);
 80003f8:	e0bff917 	ldw	r2,-28(fp)
 80003fc:	0085c83a 	sub	r2,zero,r2
 8000400:	e0fffb17 	ldw	r3,-20(fp)
 8000404:	1885883a 	add	r2,r3,r2
 8000408:	10800003 	ldbu	r2,0(r2)
 800040c:	10803fcc 	andi	r2,r2,255
 8000410:	e0bffc15 	stw	r2,-16(fp)
      for (i = 7; i >= 0; i--) {
 8000414:	008001c4 	movi	r2,7
 8000418:	e0bffa15 	stw	r2,-24(fp)
 800041c:	00000d06 	br	8000454 <printBinary+0xac>
      if(val2 & (1 << i))
 8000420:	e0fffc17 	ldw	r3,-16(fp)
 8000424:	e0bffa17 	ldw	r2,-24(fp)
 8000428:	1885d83a 	sra	r2,r3,r2
 800042c:	1080004c 	andi	r2,r2,1
 8000430:	10000326 	beq	r2,zero,8000440 <printBinary+0x98>
         printf("1");
 8000434:	01000c44 	movi	r4,49
 8000438:	800401c0 	call	800401c <putchar>
 800043c:	00000206 	br	8000448 <printBinary+0xa0>
      else
         printf("0");
 8000440:	01000c04 	movi	r4,48
 8000444:	800401c0 	call	800401c <putchar>
   unsigned char *p = (unsigned char*)&(val2) + 3;
   int k = 0;
   int i = 0;
   for(k = 0; k < num_bit >> 3; k++) {
      int val2 = *(p-k);
      for (i = 7; i >= 0; i--) {
 8000448:	e0bffa17 	ldw	r2,-24(fp)
 800044c:	10bfffc4 	addi	r2,r2,-1
 8000450:	e0bffa15 	stw	r2,-24(fp)
 8000454:	e0bffa17 	ldw	r2,-24(fp)
 8000458:	103ff10e 	bge	r2,zero,8000420 <__ram_exceptions_end+0xf7f801e0>
      if(val2 & (1 << i))
         printf("1");
      else
         printf("0");
      }
      if(k != (num_bit >> 3)-1)
 800045c:	e0bfff17 	ldw	r2,-4(fp)
 8000460:	1005d0fa 	srai	r2,r2,3
 8000464:	10ffffc4 	addi	r3,r2,-1
 8000468:	e0bff917 	ldw	r2,-28(fp)
 800046c:	18800226 	beq	r3,r2,8000478 <printBinary+0xd0>
        printf("_");
 8000470:	010017c4 	movi	r4,95
 8000474:	800401c0 	call	800401c <putchar>
    */
   val2 = (val2 << (32 - num_bit));
   unsigned char *p = (unsigned char*)&(val2) + 3;
   int k = 0;
   int i = 0;
   for(k = 0; k < num_bit >> 3; k++) {
 8000478:	e0bff917 	ldw	r2,-28(fp)
 800047c:	10800044 	addi	r2,r2,1
 8000480:	e0bff915 	stw	r2,-28(fp)
 8000484:	e0bfff17 	ldw	r2,-4(fp)
 8000488:	1005d0fa 	srai	r2,r2,3
 800048c:	e0fff917 	ldw	r3,-28(fp)
 8000490:	18bfd916 	blt	r3,r2,80003f8 <__ram_exceptions_end+0xf7f801b8>
         printf("0");
      }
      if(k != (num_bit >> 3)-1)
        printf("_");
   }
   if(mode == 1)
 8000494:	e0bffe17 	ldw	r2,-8(fp)
 8000498:	10800058 	cmpnei	r2,r2,1
 800049c:	1000031e 	bne	r2,zero,80004ac <printBinary+0x104>
     printf("_");
 80004a0:	010017c4 	movi	r4,95
 80004a4:	800401c0 	call	800401c <putchar>
 80004a8:	00000206 	br	80004b4 <printBinary+0x10c>
   else printf("\n");
 80004ac:	01000284 	movi	r4,10
 80004b0:	800401c0 	call	800401c <putchar>
};
 80004b4:	e037883a 	mov	sp,fp
 80004b8:	dfc00117 	ldw	ra,4(sp)
 80004bc:	df000017 	ldw	fp,0(sp)
 80004c0:	dec00204 	addi	sp,sp,8
 80004c4:	f800283a 	ret

080004c8 <transform_32to8>:

void transform_32to8(alt_u32 data_32, alt_u8 data_8[4] ) {
 80004c8:	defffd04 	addi	sp,sp,-12
 80004cc:	df000215 	stw	fp,8(sp)
 80004d0:	df000204 	addi	fp,sp,8
 80004d4:	e13ffe15 	stw	r4,-8(fp)
 80004d8:	e17fff15 	stw	r5,-4(fp)
   data_8[0] = data_32 & bit_mask;
 80004dc:	e0bffe17 	ldw	r2,-8(fp)
 80004e0:	1007883a 	mov	r3,r2
 80004e4:	d0a00417 	ldw	r2,-32752(gp)
 80004e8:	1884703a 	and	r2,r3,r2
 80004ec:	1007883a 	mov	r3,r2
 80004f0:	e0bfff17 	ldw	r2,-4(fp)
 80004f4:	10c00005 	stb	r3,0(r2)
   data_8[1] = (data_32 >> 8) & bit_mask;
 80004f8:	e0bfff17 	ldw	r2,-4(fp)
 80004fc:	10800044 	addi	r2,r2,1
 8000500:	e0fffe17 	ldw	r3,-8(fp)
 8000504:	1806d23a 	srli	r3,r3,8
 8000508:	1809883a 	mov	r4,r3
 800050c:	d0e00417 	ldw	r3,-32752(gp)
 8000510:	20c6703a 	and	r3,r4,r3
 8000514:	10c00005 	stb	r3,0(r2)
   data_8[2] = (data_32 >> 16) & bit_mask;
 8000518:	e0bfff17 	ldw	r2,-4(fp)
 800051c:	10800084 	addi	r2,r2,2
 8000520:	e0fffe17 	ldw	r3,-8(fp)
 8000524:	1806d43a 	srli	r3,r3,16
 8000528:	1809883a 	mov	r4,r3
 800052c:	d0e00417 	ldw	r3,-32752(gp)
 8000530:	20c6703a 	and	r3,r4,r3
 8000534:	10c00005 	stb	r3,0(r2)
   data_8[3] = (data_32 >> 24) & bit_mask;
 8000538:	e0bfff17 	ldw	r2,-4(fp)
 800053c:	108000c4 	addi	r2,r2,3
 8000540:	e0fffe17 	ldw	r3,-8(fp)
 8000544:	1806d63a 	srli	r3,r3,24
 8000548:	1809883a 	mov	r4,r3
 800054c:	d0e00417 	ldw	r3,-32752(gp)
 8000550:	20c6703a 	and	r3,r4,r3
 8000554:	10c00005 	stb	r3,0(r2)
};
 8000558:	e037883a 	mov	sp,fp
 800055c:	df000017 	ldw	fp,0(sp)
 8000560:	dec00104 	addi	sp,sp,4
 8000564:	f800283a 	ret

08000568 <printSignBinary>:

#include "system.h"
void printSignBinary(alt_u8 data, double offset) {
 8000568:	defff904 	addi	sp,sp,-28
 800056c:	dfc00615 	stw	ra,24(sp)
 8000570:	df000515 	stw	fp,20(sp)
 8000574:	dc400415 	stw	r17,16(sp)
 8000578:	dc000315 	stw	r16,12(sp)
 800057c:	df000504 	addi	fp,sp,20
 8000580:	2005883a 	mov	r2,r4
 8000584:	e17ffc15 	stw	r5,-16(fp)
 8000588:	e1bffd15 	stw	r6,-12(fp)
 800058c:	e0bffb05 	stb	r2,-20(fp)
   // Print the 2's complement binary into decimal
   if((data >>7) == 1) {
 8000590:	e0bffb03 	ldbu	r2,-20(fp)
 8000594:	1004d1fa 	srli	r2,r2,7
 8000598:	10803fcc 	andi	r2,r2,255
 800059c:	10800058 	cmpnei	r2,r2,1
 80005a0:	1000191e 	bne	r2,zero,8000608 <printSignBinary+0xa0>
      data = ((data ^ 0xFF) + 1);
 80005a4:	e0bffb03 	ldbu	r2,-20(fp)
 80005a8:	0085c83a 	sub	r2,zero,r2
 80005ac:	e0bffb05 	stb	r2,-20(fp)
      //printBinary(data, 0, 32);
      printf("%f", -(double)((data) / offset));
 80005b0:	e0bffb03 	ldbu	r2,-20(fp)
 80005b4:	1009883a 	mov	r4,r2
 80005b8:	8003b840 	call	8003b84 <__floatsidf>
 80005bc:	100b883a 	mov	r5,r2
 80005c0:	180d883a 	mov	r6,r3
 80005c4:	2809883a 	mov	r4,r5
 80005c8:	300b883a 	mov	r5,r6
 80005cc:	e1bffc17 	ldw	r6,-16(fp)
 80005d0:	e1fffd17 	ldw	r7,-12(fp)
 80005d4:	80032b80 	call	80032b8 <__divdf3>
 80005d8:	1009883a 	mov	r4,r2
 80005dc:	180b883a 	mov	r5,r3
 80005e0:	2005883a 	mov	r2,r4
 80005e4:	2807883a 	mov	r3,r5
 80005e8:	1021883a 	mov	r16,r2
 80005ec:	1c60003c 	xorhi	r17,r3,32768
 80005f0:	01020074 	movhi	r4,2049
 80005f4:	2108ab04 	addi	r4,r4,8876
 80005f8:	800b883a 	mov	r5,r16
 80005fc:	880d883a 	mov	r6,r17
 8000600:	8003fd80 	call	8003fd8 <printf>
 8000604:	00001306 	br	8000654 <printSignBinary+0xec>
   }
   else printf("%f", (double)data / offset);
 8000608:	e0bffb03 	ldbu	r2,-20(fp)
 800060c:	1009883a 	mov	r4,r2
 8000610:	8003c540 	call	8003c54 <__floatunsidf>
 8000614:	100b883a 	mov	r5,r2
 8000618:	180d883a 	mov	r6,r3
 800061c:	2809883a 	mov	r4,r5
 8000620:	300b883a 	mov	r5,r6
 8000624:	e1bffc17 	ldw	r6,-16(fp)
 8000628:	e1fffd17 	ldw	r7,-12(fp)
 800062c:	80032b80 	call	80032b8 <__divdf3>
 8000630:	1009883a 	mov	r4,r2
 8000634:	180b883a 	mov	r5,r3
 8000638:	2005883a 	mov	r2,r4
 800063c:	2807883a 	mov	r3,r5
 8000640:	01020074 	movhi	r4,2049
 8000644:	2108ab04 	addi	r4,r4,8876
 8000648:	100b883a 	mov	r5,r2
 800064c:	180d883a 	mov	r6,r3
 8000650:	8003fd80 	call	8003fd8 <printf>
}
 8000654:	e6fffe04 	addi	sp,fp,-8
 8000658:	dfc00317 	ldw	ra,12(sp)
 800065c:	df000217 	ldw	fp,8(sp)
 8000660:	dc400117 	ldw	r17,4(sp)
 8000664:	dc000017 	ldw	r16,0(sp)
 8000668:	dec00404 	addi	sp,sp,16
 800066c:	f800283a 	ret

08000670 <transform_8to32>:
alt_u32 transform_8to32(alt_u8* data_8) {
 8000670:	defffc04 	addi	sp,sp,-16
 8000674:	df000315 	stw	fp,12(sp)
 8000678:	df000304 	addi	fp,sp,12
 800067c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data_32 = 0;
 8000680:	e03ffd15 	stw	zero,-12(fp)
  int i = 0;
 8000684:	e03ffe15 	stw	zero,-8(fp)
  for(i = 0; i < 4; ++i)
 8000688:	e03ffe15 	stw	zero,-8(fp)
 800068c:	00001006 	br	80006d0 <transform_8to32+0x60>
    data_32 += (alt_u32)((((alt_u32)(*(data_8+i*128)))) << 8*i);
 8000690:	e0bffe17 	ldw	r2,-8(fp)
 8000694:	100491fa 	slli	r2,r2,7
 8000698:	1007883a 	mov	r3,r2
 800069c:	e0bfff17 	ldw	r2,-4(fp)
 80006a0:	10c5883a 	add	r2,r2,r3
 80006a4:	10800003 	ldbu	r2,0(r2)
 80006a8:	10c03fcc 	andi	r3,r2,255
 80006ac:	e0bffe17 	ldw	r2,-8(fp)
 80006b0:	100490fa 	slli	r2,r2,3
 80006b4:	1884983a 	sll	r2,r3,r2
 80006b8:	e0fffd17 	ldw	r3,-12(fp)
 80006bc:	1885883a 	add	r2,r3,r2
 80006c0:	e0bffd15 	stw	r2,-12(fp)
   else printf("%f", (double)data / offset);
}
alt_u32 transform_8to32(alt_u8* data_8) {
  alt_u32 data_32 = 0;
  int i = 0;
  for(i = 0; i < 4; ++i)
 80006c4:	e0bffe17 	ldw	r2,-8(fp)
 80006c8:	10800044 	addi	r2,r2,1
 80006cc:	e0bffe15 	stw	r2,-8(fp)
 80006d0:	e0bffe17 	ldw	r2,-8(fp)
 80006d4:	10800110 	cmplti	r2,r2,4
 80006d8:	103fed1e 	bne	r2,zero,8000690 <__ram_exceptions_end+0xf7f80450>
    data_32 += (alt_u32)((((alt_u32)(*(data_8+i*128)))) << 8*i);
//  printBinary(data_32, 0, 32);
  return data_32;
 80006dc:	e0bffd17 	ldw	r2,-12(fp)
}
 80006e0:	e037883a 	mov	sp,fp
 80006e4:	df000017 	ldw	fp,0(sp)
 80006e8:	dec00104 	addi	sp,sp,4
 80006ec:	f800283a 	ret

080006f0 <printMatrix>:
void printMatrix(alt_u8* matrix, int ROW, int COLUMN, int DEPTH, double precision) {
 80006f0:	defff704 	addi	sp,sp,-36
 80006f4:	dfc00815 	stw	ra,32(sp)
 80006f8:	df000715 	stw	fp,28(sp)
 80006fc:	df000704 	addi	fp,sp,28
 8000700:	e13ffc15 	stw	r4,-16(fp)
 8000704:	e17ffd15 	stw	r5,-12(fp)
 8000708:	e1bffe15 	stw	r6,-8(fp)
 800070c:	e1ffff15 	stw	r7,-4(fp)
  int row = 0, column = 0, dep = 0;
 8000710:	e03ff915 	stw	zero,-28(fp)
 8000714:	e03ffa15 	stw	zero,-24(fp)
 8000718:	e03ffb15 	stw	zero,-20(fp)
  for(dep = 0; dep < DEPTH; dep ++) {
 800071c:	e03ffb15 	stw	zero,-20(fp)
 8000720:	00002f06 	br	80007e0 <printMatrix+0xf0>
    printf("Dep %d: \n", dep);
 8000724:	01020074 	movhi	r4,2049
 8000728:	2108ac04 	addi	r4,r4,8880
 800072c:	e17ffb17 	ldw	r5,-20(fp)
 8000730:	8003fd80 	call	8003fd8 <printf>
    for(row = 0; row < ROW; row++){
 8000734:	e03ff915 	stw	zero,-28(fp)
 8000738:	00002306 	br	80007c8 <printMatrix+0xd8>
      for(column = 0; column < COLUMN; column++) {
 800073c:	e03ffa15 	stw	zero,-24(fp)
 8000740:	00001906 	br	80007a8 <printMatrix+0xb8>
        //printf("%f",(double)(*(matrix+row*COLUMN*DEPTH+column*DEPTH + dep)) / precision);
    	printSignBinary(*(matrix+row*COLUMN*DEPTH+column*DEPTH + dep), precision);
 8000744:	e0fff917 	ldw	r3,-28(fp)
 8000748:	e0bffe17 	ldw	r2,-8(fp)
 800074c:	1887383a 	mul	r3,r3,r2
 8000750:	e0bfff17 	ldw	r2,-4(fp)
 8000754:	1885383a 	mul	r2,r3,r2
 8000758:	1009883a 	mov	r4,r2
 800075c:	e0fffa17 	ldw	r3,-24(fp)
 8000760:	e0bfff17 	ldw	r2,-4(fp)
 8000764:	1885383a 	mul	r2,r3,r2
 8000768:	2087883a 	add	r3,r4,r2
 800076c:	e0bffb17 	ldw	r2,-20(fp)
 8000770:	1885883a 	add	r2,r3,r2
 8000774:	e0fffc17 	ldw	r3,-16(fp)
 8000778:	1885883a 	add	r2,r3,r2
 800077c:	10800003 	ldbu	r2,0(r2)
 8000780:	10803fcc 	andi	r2,r2,255
 8000784:	1009883a 	mov	r4,r2
 8000788:	e1400217 	ldw	r5,8(fp)
 800078c:	e1800317 	ldw	r6,12(fp)
 8000790:	80005680 	call	8000568 <printSignBinary>
        printf(" ");
 8000794:	01000804 	movi	r4,32
 8000798:	800401c0 	call	800401c <putchar>
void printMatrix(alt_u8* matrix, int ROW, int COLUMN, int DEPTH, double precision) {
  int row = 0, column = 0, dep = 0;
  for(dep = 0; dep < DEPTH; dep ++) {
    printf("Dep %d: \n", dep);
    for(row = 0; row < ROW; row++){
      for(column = 0; column < COLUMN; column++) {
 800079c:	e0bffa17 	ldw	r2,-24(fp)
 80007a0:	10800044 	addi	r2,r2,1
 80007a4:	e0bffa15 	stw	r2,-24(fp)
 80007a8:	e0fffa17 	ldw	r3,-24(fp)
 80007ac:	e0bffe17 	ldw	r2,-8(fp)
 80007b0:	18bfe416 	blt	r3,r2,8000744 <__ram_exceptions_end+0xf7f80504>
        //printf("%f",(double)(*(matrix+row*COLUMN*DEPTH+column*DEPTH + dep)) / precision);
    	printSignBinary(*(matrix+row*COLUMN*DEPTH+column*DEPTH + dep), precision);
        printf(" ");
      }
      printf("\n");
 80007b4:	01000284 	movi	r4,10
 80007b8:	800401c0 	call	800401c <putchar>
}
void printMatrix(alt_u8* matrix, int ROW, int COLUMN, int DEPTH, double precision) {
  int row = 0, column = 0, dep = 0;
  for(dep = 0; dep < DEPTH; dep ++) {
    printf("Dep %d: \n", dep);
    for(row = 0; row < ROW; row++){
 80007bc:	e0bff917 	ldw	r2,-28(fp)
 80007c0:	10800044 	addi	r2,r2,1
 80007c4:	e0bff915 	stw	r2,-28(fp)
 80007c8:	e0fff917 	ldw	r3,-28(fp)
 80007cc:	e0bffd17 	ldw	r2,-12(fp)
 80007d0:	18bfda16 	blt	r3,r2,800073c <__ram_exceptions_end+0xf7f804fc>
//  printBinary(data_32, 0, 32);
  return data_32;
}
void printMatrix(alt_u8* matrix, int ROW, int COLUMN, int DEPTH, double precision) {
  int row = 0, column = 0, dep = 0;
  for(dep = 0; dep < DEPTH; dep ++) {
 80007d4:	e0bffb17 	ldw	r2,-20(fp)
 80007d8:	10800044 	addi	r2,r2,1
 80007dc:	e0bffb15 	stw	r2,-20(fp)
 80007e0:	e0fffb17 	ldw	r3,-20(fp)
 80007e4:	e0bfff17 	ldw	r2,-4(fp)
 80007e8:	18bfce16 	blt	r3,r2,8000724 <__ram_exceptions_end+0xf7f804e4>
        printf(" ");
      }
      printf("\n");
    }
  }
}
 80007ec:	e037883a 	mov	sp,fp
 80007f0:	dfc00117 	ldw	ra,4(sp)
 80007f4:	df000017 	ldw	fp,0(sp)
 80007f8:	dec00204 	addi	sp,sp,8
 80007fc:	f800283a 	ret

08000800 <flatten_matrix>:
void flatten_matrix(alt_u8* flattened_matrix, alt_u8* input_fmap,
      int input_fmap_h, int input_fmap_w, int filter_h, int filter_w, int depth){
 8000800:	defff404 	addi	sp,sp,-48
 8000804:	df000b15 	stw	fp,44(sp)
 8000808:	df000b04 	addi	fp,sp,44
 800080c:	e13ffc15 	stw	r4,-16(fp)
 8000810:	e17ffd15 	stw	r5,-12(fp)
 8000814:	e1bffe15 	stw	r6,-8(fp)
 8000818:	e1ffff15 	stw	r7,-4(fp)
   //printf("  flatten input_fmap to flattened_matrix ...................................................\n");
   int w = 0, h = 0, d = 0;
 800081c:	e03ff515 	stw	zero,-44(fp)
 8000820:	e03ff615 	stw	zero,-40(fp)
 8000824:	e03ffb15 	stw	zero,-20(fp)
   int count = 0;
 8000828:	e03ff715 	stw	zero,-36(fp)
   while(w + filter_w <= input_fmap_w)
 800082c:	00004006 	br	8000930 <flatten_matrix+0x130>
   {
      while(h + filter_h <= input_fmap_h)
 8000830:	00003606 	br	800090c <flatten_matrix+0x10c>
      {
         int w_in, h_in, d_in = 0;
 8000834:	e03ffa15 	stw	zero,-24(fp)
         for(h_in = 0; h_in < filter_h; ++h_in){
 8000838:	e03ff915 	stw	zero,-28(fp)
 800083c:	00002d06 	br	80008f4 <flatten_matrix+0xf4>
            for (w_in = 0; w_in < filter_w; ++w_in){
 8000840:	e03ff815 	stw	zero,-32(fp)
 8000844:	00002506 	br	80008dc <flatten_matrix+0xdc>
               for (d_in = 0; d_in < depth; ++d_in){
 8000848:	e03ffa15 	stw	zero,-24(fp)
 800084c:	00001d06 	br	80008c4 <flatten_matrix+0xc4>
                  *(flattened_matrix + count) = *(input_fmap + (h+h_in) * depth * input_fmap_w + (w+w_in) * depth + d_in);
 8000850:	e0bff717 	ldw	r2,-36(fp)
 8000854:	e0fffc17 	ldw	r3,-16(fp)
 8000858:	1885883a 	add	r2,r3,r2
 800085c:	e13ff617 	ldw	r4,-40(fp)
 8000860:	e0fff917 	ldw	r3,-28(fp)
 8000864:	20c9883a 	add	r4,r4,r3
 8000868:	e0c00317 	ldw	r3,12(fp)
 800086c:	20c9383a 	mul	r4,r4,r3
 8000870:	e0ffff17 	ldw	r3,-4(fp)
 8000874:	20c7383a 	mul	r3,r4,r3
 8000878:	180b883a 	mov	r5,r3
 800087c:	e13ff517 	ldw	r4,-44(fp)
 8000880:	e0fff817 	ldw	r3,-32(fp)
 8000884:	20c9883a 	add	r4,r4,r3
 8000888:	e0c00317 	ldw	r3,12(fp)
 800088c:	20c7383a 	mul	r3,r4,r3
 8000890:	28c9883a 	add	r4,r5,r3
 8000894:	e0fffa17 	ldw	r3,-24(fp)
 8000898:	20c7883a 	add	r3,r4,r3
 800089c:	e13ffd17 	ldw	r4,-12(fp)
 80008a0:	20c7883a 	add	r3,r4,r3
 80008a4:	18c00003 	ldbu	r3,0(r3)
 80008a8:	10c00005 	stb	r3,0(r2)
                  count = count + 1;
 80008ac:	e0bff717 	ldw	r2,-36(fp)
 80008b0:	10800044 	addi	r2,r2,1
 80008b4:	e0bff715 	stw	r2,-36(fp)
      while(h + filter_h <= input_fmap_h)
      {
         int w_in, h_in, d_in = 0;
         for(h_in = 0; h_in < filter_h; ++h_in){
            for (w_in = 0; w_in < filter_w; ++w_in){
               for (d_in = 0; d_in < depth; ++d_in){
 80008b8:	e0bffa17 	ldw	r2,-24(fp)
 80008bc:	10800044 	addi	r2,r2,1
 80008c0:	e0bffa15 	stw	r2,-24(fp)
 80008c4:	e0fffa17 	ldw	r3,-24(fp)
 80008c8:	e0800317 	ldw	r2,12(fp)
 80008cc:	18bfe016 	blt	r3,r2,8000850 <__ram_exceptions_end+0xf7f80610>
   {
      while(h + filter_h <= input_fmap_h)
      {
         int w_in, h_in, d_in = 0;
         for(h_in = 0; h_in < filter_h; ++h_in){
            for (w_in = 0; w_in < filter_w; ++w_in){
 80008d0:	e0bff817 	ldw	r2,-32(fp)
 80008d4:	10800044 	addi	r2,r2,1
 80008d8:	e0bff815 	stw	r2,-32(fp)
 80008dc:	e0fff817 	ldw	r3,-32(fp)
 80008e0:	e0800217 	ldw	r2,8(fp)
 80008e4:	18bfd816 	blt	r3,r2,8000848 <__ram_exceptions_end+0xf7f80608>
   while(w + filter_w <= input_fmap_w)
   {
      while(h + filter_h <= input_fmap_h)
      {
         int w_in, h_in, d_in = 0;
         for(h_in = 0; h_in < filter_h; ++h_in){
 80008e8:	e0bff917 	ldw	r2,-28(fp)
 80008ec:	10800044 	addi	r2,r2,1
 80008f0:	e0bff915 	stw	r2,-28(fp)
 80008f4:	e0fff917 	ldw	r3,-28(fp)
 80008f8:	e0800117 	ldw	r2,4(fp)
 80008fc:	18bfd016 	blt	r3,r2,8000840 <__ram_exceptions_end+0xf7f80600>
                  *(flattened_matrix + count) = *(input_fmap + (h+h_in) * depth * input_fmap_w + (w+w_in) * depth + d_in);
                  count = count + 1;
               }
            }
         }
         h = h + 1;
 8000900:	e0bff617 	ldw	r2,-40(fp)
 8000904:	10800044 	addi	r2,r2,1
 8000908:	e0bff615 	stw	r2,-40(fp)
   //printf("  flatten input_fmap to flattened_matrix ...................................................\n");
   int w = 0, h = 0, d = 0;
   int count = 0;
   while(w + filter_w <= input_fmap_w)
   {
      while(h + filter_h <= input_fmap_h)
 800090c:	e0fff617 	ldw	r3,-40(fp)
 8000910:	e0800117 	ldw	r2,4(fp)
 8000914:	1885883a 	add	r2,r3,r2
 8000918:	e0fffe17 	ldw	r3,-8(fp)
 800091c:	18bfc50e 	bge	r3,r2,8000834 <__ram_exceptions_end+0xf7f805f4>
               }
            }
         }
         h = h + 1;
      }
      w = w + 1;
 8000920:	e0bff517 	ldw	r2,-44(fp)
 8000924:	10800044 	addi	r2,r2,1
 8000928:	e0bff515 	stw	r2,-44(fp)
      h = 0;
 800092c:	e03ff615 	stw	zero,-40(fp)
void flatten_matrix(alt_u8* flattened_matrix, alt_u8* input_fmap,
      int input_fmap_h, int input_fmap_w, int filter_h, int filter_w, int depth){
   //printf("  flatten input_fmap to flattened_matrix ...................................................\n");
   int w = 0, h = 0, d = 0;
   int count = 0;
   while(w + filter_w <= input_fmap_w)
 8000930:	e0fff517 	ldw	r3,-44(fp)
 8000934:	e0800217 	ldw	r2,8(fp)
 8000938:	1885883a 	add	r2,r3,r2
 800093c:	e0ffff17 	ldw	r3,-4(fp)
 8000940:	18bfbb0e 	bge	r3,r2,8000830 <__ram_exceptions_end+0xf7f805f0>
         h = h + 1;
      }
      w = w + 1;
      h = 0;
   }
};
 8000944:	e037883a 	mov	sp,fp
 8000948:	df000017 	ldw	fp,0(sp)
 800094c:	dec00104 	addi	sp,sp,4
 8000950:	f800283a 	ret

08000954 <truncation>:

alt_u8 truncation(alt_16 data) {
 8000954:	defffc04 	addi	sp,sp,-16
 8000958:	df000315 	stw	fp,12(sp)
 800095c:	df000304 	addi	fp,sp,12
 8000960:	2005883a 	mov	r2,r4
 8000964:	e0bfff0d 	sth	r2,-4(fp)
   double max_num = 7.9375;
 8000968:	e03ffd15 	stw	zero,-12(fp)
 800096c:	00900834 	movhi	r2,16416
 8000970:	10b00004 	addi	r2,r2,-16384
 8000974:	e0bffe15 	stw	r2,-8(fp)
   if(data > 127) {
 8000978:	e0bfff0f 	ldh	r2,-4(fp)
 800097c:	10802010 	cmplti	r2,r2,128
 8000980:	1000021e 	bne	r2,zero,800098c <truncation+0x38>
      //printf("    Data %f is bigger than %f!!\n", (double)(data) / 16.0, (double)(max_num));
      return (alt_u8)(127);
 8000984:	00801fc4 	movi	r2,127
 8000988:	00000506 	br	80009a0 <truncation+0x4c>
   }
   else if(data < 0) {
 800098c:	e0bfff0f 	ldh	r2,-4(fp)
 8000990:	1000020e 	bge	r2,zero,800099c <truncation+0x48>
      //printf("    Data %f is smaller than %f!!\n", (double)(data) / 16.0, (double)(0));
      return (alt_u8)0;
 8000994:	0005883a 	mov	r2,zero
 8000998:	00000106 	br	80009a0 <truncation+0x4c>
   }
   else return (alt_u8)data;
 800099c:	e0bfff0b 	ldhu	r2,-4(fp)
};
 80009a0:	e037883a 	mov	sp,fp
 80009a4:	df000017 	ldw	fp,0(sp)
 80009a8:	dec00104 	addi	sp,sp,4
 80009ac:	f800283a 	ret

080009b0 <matrix_to_imageCube>:

void matrix_to_imageCube(alt_16* matrix_result, alt_u8* o_fmap, int height, int width, int depth) {
 80009b0:	defff504 	addi	sp,sp,-44
 80009b4:	dfc00a15 	stw	ra,40(sp)
 80009b8:	df000915 	stw	fp,36(sp)
 80009bc:	dc000815 	stw	r16,32(sp)
 80009c0:	df000904 	addi	fp,sp,36
 80009c4:	e13ffb15 	stw	r4,-20(fp)
 80009c8:	e17ffc15 	stw	r5,-16(fp)
 80009cc:	e1bffd15 	stw	r6,-12(fp)
 80009d0:	e1fffe15 	stw	r7,-8(fp)
//   printf("  Transforming matrix to image cube...\n");
   int h = 0, w = 0, d = 0;
 80009d4:	e03ff715 	stw	zero,-36(fp)
 80009d8:	e03ff815 	stw	zero,-32(fp)
 80009dc:	e03ff915 	stw	zero,-28(fp)
   for(d = 0; d < depth; d++) {
 80009e0:	e03ff915 	stw	zero,-28(fp)
 80009e4:	00003906 	br	8000acc <matrix_to_imageCube+0x11c>
      alt_16* current_map;
      current_map = matrix_result + d;
 80009e8:	e0bff917 	ldw	r2,-28(fp)
 80009ec:	1085883a 	add	r2,r2,r2
 80009f0:	1007883a 	mov	r3,r2
 80009f4:	e0bffb17 	ldw	r2,-20(fp)
 80009f8:	10c5883a 	add	r2,r2,r3
 80009fc:	e0bffa15 	stw	r2,-24(fp)
      for(w = 0; w < width; w++) {
 8000a00:	e03ff815 	stw	zero,-32(fp)
 8000a04:	00002b06 	br	8000ab4 <matrix_to_imageCube+0x104>
         for(h = 0; h < height; h++) {
 8000a08:	e03ff715 	stw	zero,-36(fp)
 8000a0c:	00002306 	br	8000a9c <matrix_to_imageCube+0xec>
         //printf("    Data before truncate: "); //
            //printf("%f", (double)(*(current_map + (h + w*height)*depth)) / 16.0);
            //printf("\n");
            *(o_fmap+h*width*depth+w*depth+d) = truncation(*(current_map + (h + w*height)*depth));
 8000a10:	e0fff717 	ldw	r3,-36(fp)
 8000a14:	e0bffe17 	ldw	r2,-8(fp)
 8000a18:	1887383a 	mul	r3,r3,r2
 8000a1c:	e0800217 	ldw	r2,8(fp)
 8000a20:	1885383a 	mul	r2,r3,r2
 8000a24:	1009883a 	mov	r4,r2
 8000a28:	e0fff817 	ldw	r3,-32(fp)
 8000a2c:	e0800217 	ldw	r2,8(fp)
 8000a30:	1885383a 	mul	r2,r3,r2
 8000a34:	2087883a 	add	r3,r4,r2
 8000a38:	e0bff917 	ldw	r2,-28(fp)
 8000a3c:	1885883a 	add	r2,r3,r2
 8000a40:	e0fffc17 	ldw	r3,-16(fp)
 8000a44:	18a1883a 	add	r16,r3,r2
 8000a48:	e0fff817 	ldw	r3,-32(fp)
 8000a4c:	e0bffd17 	ldw	r2,-12(fp)
 8000a50:	1887383a 	mul	r3,r3,r2
 8000a54:	e0bff717 	ldw	r2,-36(fp)
 8000a58:	1887883a 	add	r3,r3,r2
 8000a5c:	e0800217 	ldw	r2,8(fp)
 8000a60:	1885383a 	mul	r2,r3,r2
 8000a64:	1085883a 	add	r2,r2,r2
 8000a68:	1007883a 	mov	r3,r2
 8000a6c:	e0bffa17 	ldw	r2,-24(fp)
 8000a70:	10c5883a 	add	r2,r2,r3
 8000a74:	1080000b 	ldhu	r2,0(r2)
 8000a78:	10bfffcc 	andi	r2,r2,65535
 8000a7c:	10a0001c 	xori	r2,r2,32768
 8000a80:	10a00004 	addi	r2,r2,-32768
 8000a84:	1009883a 	mov	r4,r2
 8000a88:	80009540 	call	8000954 <truncation>
 8000a8c:	80800005 	stb	r2,0(r16)
   int h = 0, w = 0, d = 0;
   for(d = 0; d < depth; d++) {
      alt_16* current_map;
      current_map = matrix_result + d;
      for(w = 0; w < width; w++) {
         for(h = 0; h < height; h++) {
 8000a90:	e0bff717 	ldw	r2,-36(fp)
 8000a94:	10800044 	addi	r2,r2,1
 8000a98:	e0bff715 	stw	r2,-36(fp)
 8000a9c:	e0fff717 	ldw	r3,-36(fp)
 8000aa0:	e0bffd17 	ldw	r2,-12(fp)
 8000aa4:	18bfda16 	blt	r3,r2,8000a10 <__ram_exceptions_end+0xf7f807d0>
//   printf("  Transforming matrix to image cube...\n");
   int h = 0, w = 0, d = 0;
   for(d = 0; d < depth; d++) {
      alt_16* current_map;
      current_map = matrix_result + d;
      for(w = 0; w < width; w++) {
 8000aa8:	e0bff817 	ldw	r2,-32(fp)
 8000aac:	10800044 	addi	r2,r2,1
 8000ab0:	e0bff815 	stw	r2,-32(fp)
 8000ab4:	e0fff817 	ldw	r3,-32(fp)
 8000ab8:	e0bffe17 	ldw	r2,-8(fp)
 8000abc:	18bfd216 	blt	r3,r2,8000a08 <__ram_exceptions_end+0xf7f807c8>
};

void matrix_to_imageCube(alt_16* matrix_result, alt_u8* o_fmap, int height, int width, int depth) {
//   printf("  Transforming matrix to image cube...\n");
   int h = 0, w = 0, d = 0;
   for(d = 0; d < depth; d++) {
 8000ac0:	e0bff917 	ldw	r2,-28(fp)
 8000ac4:	10800044 	addi	r2,r2,1
 8000ac8:	e0bff915 	stw	r2,-28(fp)
 8000acc:	e0fff917 	ldw	r3,-28(fp)
 8000ad0:	e0800217 	ldw	r2,8(fp)
 8000ad4:	18bfc416 	blt	r3,r2,80009e8 <__ram_exceptions_end+0xf7f807a8>
            //printSignBinary((*(o_fmap+ h*width*depth + w*depth + d)), 16.0);
            //printf("\n");
         }
      }
   }
};
 8000ad8:	e6ffff04 	addi	sp,fp,-4
 8000adc:	dfc00217 	ldw	ra,8(sp)
 8000ae0:	df000117 	ldw	fp,4(sp)
 8000ae4:	dc000017 	ldw	r16,0(sp)
 8000ae8:	dec00304 	addi	sp,sp,12
 8000aec:	f800283a 	ret

08000af0 <mat_mul>:
void mat_mul(alt_u8* matrix, alt_16* result) {
 8000af0:	defffe04 	addi	sp,sp,-8
 8000af4:	dfc00115 	stw	ra,4(sp)
 8000af8:	df000015 	stw	fp,0(sp)
 8000afc:	d839883a 	mov	fp,sp
 8000b00:	023ffff4 	movhi	r8,65535
 8000b04:	421f7a04 	addi	r8,r8,32232
 8000b08:	da37883a 	add	sp,sp,r8
 8000b0c:	00a08414 	movui	r2,33296
 8000b10:	00fffff4 	movhi	r3,65535
 8000b14:	18df7a04 	addi	r3,r3,32232
 8000b18:	1f07883a 	add	r3,r3,fp
 8000b1c:	1885883a 	add	r2,r3,r2
 8000b20:	11000015 	stw	r4,0(r2)
 8000b24:	00a08514 	movui	r2,33300
 8000b28:	013ffff4 	movhi	r4,65535
 8000b2c:	211f7a04 	addi	r4,r4,32232
 8000b30:	2709883a 	add	r4,r4,fp
 8000b34:	2085883a 	add	r2,r4,r2
 8000b38:	11400015 	stw	r5,0(r2)
   // Assert the matrix size to NUM_DIM x NUM_VECTOR
//   printf("  Calculating matmul(%d x %d)...\n", NUM_DIM, NUM_VECTOR);
   int row = 0, column = 0;
 8000b3c:	017ffff4 	movhi	r5,65535
 8000b40:	295f7a04 	addi	r5,r5,32232
 8000b44:	2f0b883a 	add	r5,r5,fp
 8000b48:	28000015 	stw	zero,0(r5)
 8000b4c:	00bffff4 	movhi	r2,65535
 8000b50:	109f7b04 	addi	r2,r2,32236
 8000b54:	1705883a 	add	r2,r2,fp
 8000b58:	10000015 	stw	zero,0(r2)
   alt_u32 matrix_32[65][128] = {0};
 8000b5c:	013ffff4 	movhi	r4,65535
 8000b60:	211f7e04 	addi	r4,r4,32248
 8000b64:	e107883a 	add	r3,fp,r4
 8000b68:	00a08014 	movui	r2,33280
 8000b6c:	1809883a 	mov	r4,r3
 8000b70:	000b883a 	mov	r5,zero
 8000b74:	100d883a 	mov	r6,r2
 8000b78:	8003e880 	call	8003e88 <memset>
//   printf("ready................\n");
   for(column = 0; column < 128; column++) {
 8000b7c:	017ffff4 	movhi	r5,65535
 8000b80:	295f7b04 	addi	r5,r5,32236
 8000b84:	2f0b883a 	add	r5,r5,fp
 8000b88:	28000015 	stw	zero,0(r5)
 8000b8c:	00004406 	br	8000ca0 <mat_mul+0x1b0>
     for(row = 0; row < 65; row++) {
 8000b90:	00bffff4 	movhi	r2,65535
 8000b94:	109f7a04 	addi	r2,r2,32232
 8000b98:	1705883a 	add	r2,r2,fp
 8000b9c:	10000015 	stw	zero,0(r2)
 8000ba0:	00003006 	br	8000c64 <mat_mul+0x174>
       matrix_32[row][column] = transform_8to32(matrix+128*4*row+column);
 8000ba4:	00fffff4 	movhi	r3,65535
 8000ba8:	18df7a04 	addi	r3,r3,32232
 8000bac:	1f07883a 	add	r3,r3,fp
 8000bb0:	18800017 	ldw	r2,0(r3)
 8000bb4:	1004927a 	slli	r2,r2,9
 8000bb8:	1007883a 	mov	r3,r2
 8000bbc:	013ffff4 	movhi	r4,65535
 8000bc0:	211f7b04 	addi	r4,r4,32236
 8000bc4:	2709883a 	add	r4,r4,fp
 8000bc8:	20800017 	ldw	r2,0(r4)
 8000bcc:	1885883a 	add	r2,r3,r2
 8000bd0:	00e08414 	movui	r3,33296
 8000bd4:	017ffff4 	movhi	r5,65535
 8000bd8:	295f7a04 	addi	r5,r5,32232
 8000bdc:	2f0b883a 	add	r5,r5,fp
 8000be0:	28c7883a 	add	r3,r5,r3
 8000be4:	18c00017 	ldw	r3,0(r3)
 8000be8:	1885883a 	add	r2,r3,r2
 8000bec:	1009883a 	mov	r4,r2
 8000bf0:	80006700 	call	8000670 <transform_8to32>
 8000bf4:	1009883a 	mov	r4,r2
 8000bf8:	00fffff4 	movhi	r3,65535
 8000bfc:	18df7a04 	addi	r3,r3,32232
 8000c00:	1f07883a 	add	r3,r3,fp
 8000c04:	18800017 	ldw	r2,0(r3)
 8000c08:	100691fa 	slli	r3,r2,7
 8000c0c:	017ffff4 	movhi	r5,65535
 8000c10:	295f7b04 	addi	r5,r5,32236
 8000c14:	2f0b883a 	add	r5,r5,fp
 8000c18:	28800017 	ldw	r2,0(r5)
 8000c1c:	1885883a 	add	r2,r3,r2
 8000c20:	1085883a 	add	r2,r2,r2
 8000c24:	1085883a 	add	r2,r2,r2
 8000c28:	00fffff4 	movhi	r3,65535
 8000c2c:	18df7a04 	addi	r3,r3,32232
 8000c30:	1f07883a 	add	r3,r3,fp
 8000c34:	1885883a 	add	r2,r3,r2
 8000c38:	10800404 	addi	r2,r2,16
 8000c3c:	11000015 	stw	r4,0(r2)
//   printf("  Calculating matmul(%d x %d)...\n", NUM_DIM, NUM_VECTOR);
   int row = 0, column = 0;
   alt_u32 matrix_32[65][128] = {0};
//   printf("ready................\n");
   for(column = 0; column < 128; column++) {
     for(row = 0; row < 65; row++) {
 8000c40:	013ffff4 	movhi	r4,65535
 8000c44:	211f7a04 	addi	r4,r4,32232
 8000c48:	2709883a 	add	r4,r4,fp
 8000c4c:	20800017 	ldw	r2,0(r4)
 8000c50:	10800044 	addi	r2,r2,1
 8000c54:	017ffff4 	movhi	r5,65535
 8000c58:	295f7a04 	addi	r5,r5,32232
 8000c5c:	2f0b883a 	add	r5,r5,fp
 8000c60:	28800015 	stw	r2,0(r5)
 8000c64:	00fffff4 	movhi	r3,65535
 8000c68:	18df7a04 	addi	r3,r3,32232
 8000c6c:	1f07883a 	add	r3,r3,fp
 8000c70:	18800017 	ldw	r2,0(r3)
 8000c74:	10801050 	cmplti	r2,r2,65
 8000c78:	103fca1e 	bne	r2,zero,8000ba4 <__ram_exceptions_end+0xf7f80964>
   // Assert the matrix size to NUM_DIM x NUM_VECTOR
//   printf("  Calculating matmul(%d x %d)...\n", NUM_DIM, NUM_VECTOR);
   int row = 0, column = 0;
   alt_u32 matrix_32[65][128] = {0};
//   printf("ready................\n");
   for(column = 0; column < 128; column++) {
 8000c7c:	013ffff4 	movhi	r4,65535
 8000c80:	211f7b04 	addi	r4,r4,32236
 8000c84:	2709883a 	add	r4,r4,fp
 8000c88:	20800017 	ldw	r2,0(r4)
 8000c8c:	10800044 	addi	r2,r2,1
 8000c90:	017ffff4 	movhi	r5,65535
 8000c94:	295f7b04 	addi	r5,r5,32236
 8000c98:	2f0b883a 	add	r5,r5,fp
 8000c9c:	28800015 	stw	r2,0(r5)
 8000ca0:	00fffff4 	movhi	r3,65535
 8000ca4:	18df7b04 	addi	r3,r3,32236
 8000ca8:	1f07883a 	add	r3,r3,fp
 8000cac:	18800017 	ldw	r2,0(r3)
 8000cb0:	10802010 	cmplti	r2,r2,128
 8000cb4:	103fb61e 	bne	r2,zero,8000b90 <__ram_exceptions_end+0xf7f80950>
       //printf("%d", matrix_32[row][column]);
     }
   }

//   printf("ready write................\n");
   int count = 0;
 8000cb8:	013ffff4 	movhi	r4,65535
 8000cbc:	211f7c04 	addi	r4,r4,32240
 8000cc0:	2709883a 	add	r4,r4,fp
 8000cc4:	20000015 	stw	zero,0(r4)
   for(column = 0; column < 128; column++) {
 8000cc8:	017ffff4 	movhi	r5,65535
 8000ccc:	295f7b04 	addi	r5,r5,32236
 8000cd0:	2f0b883a 	add	r5,r5,fp
 8000cd4:	28000015 	stw	zero,0(r5)
 8000cd8:	00003c06 	br	8000dcc <mat_mul+0x2dc>
      for(row = 0; row < 65; row++) {
 8000cdc:	00bffff4 	movhi	r2,65535
 8000ce0:	109f7a04 	addi	r2,r2,32232
 8000ce4:	1705883a 	add	r2,r2,fp
 8000ce8:	10000015 	stw	zero,0(r2)
 8000cec:	00002806 	br	8000d90 <mat_mul+0x2a0>
        count = count + 1;
 8000cf0:	00fffff4 	movhi	r3,65535
 8000cf4:	18df7c04 	addi	r3,r3,32240
 8000cf8:	1f07883a 	add	r3,r3,fp
 8000cfc:	18800017 	ldw	r2,0(r3)
 8000d00:	10800044 	addi	r2,r2,1
 8000d04:	013ffff4 	movhi	r4,65535
 8000d08:	211f7c04 	addi	r4,r4,32240
 8000d0c:	2709883a 	add	r4,r4,fp
 8000d10:	20800015 	stw	r2,0(r4)
//       printf("writing ................column: %d, row : %d,  times %d \n", column, row, count);
         IOWR(TEST_SLAVE_0_BASE, 0, matrix_32[row][column]);
 8000d14:	017ffff4 	movhi	r5,65535
 8000d18:	295f7a04 	addi	r5,r5,32232
 8000d1c:	2f0b883a 	add	r5,r5,fp
 8000d20:	28800017 	ldw	r2,0(r5)
 8000d24:	100691fa 	slli	r3,r2,7
 8000d28:	013ffff4 	movhi	r4,65535
 8000d2c:	211f7b04 	addi	r4,r4,32236
 8000d30:	2709883a 	add	r4,r4,fp
 8000d34:	20800017 	ldw	r2,0(r4)
 8000d38:	1885883a 	add	r2,r3,r2
 8000d3c:	1085883a 	add	r2,r2,r2
 8000d40:	1085883a 	add	r2,r2,r2
 8000d44:	017ffff4 	movhi	r5,65535
 8000d48:	295f7a04 	addi	r5,r5,32232
 8000d4c:	2f0b883a 	add	r5,r5,fp
 8000d50:	2885883a 	add	r2,r5,r2
 8000d54:	10800404 	addi	r2,r2,16
 8000d58:	10800017 	ldw	r2,0(r2)
 8000d5c:	1007883a 	mov	r3,r2
 8000d60:	00840434 	movhi	r2,4112
 8000d64:	10844504 	addi	r2,r2,4372
 8000d68:	10c00035 	stwio	r3,0(r2)
   }

//   printf("ready write................\n");
   int count = 0;
   for(column = 0; column < 128; column++) {
      for(row = 0; row < 65; row++) {
 8000d6c:	00fffff4 	movhi	r3,65535
 8000d70:	18df7a04 	addi	r3,r3,32232
 8000d74:	1f07883a 	add	r3,r3,fp
 8000d78:	18800017 	ldw	r2,0(r3)
 8000d7c:	10800044 	addi	r2,r2,1
 8000d80:	013ffff4 	movhi	r4,65535
 8000d84:	211f7a04 	addi	r4,r4,32232
 8000d88:	2709883a 	add	r4,r4,fp
 8000d8c:	20800015 	stw	r2,0(r4)
 8000d90:	017ffff4 	movhi	r5,65535
 8000d94:	295f7a04 	addi	r5,r5,32232
 8000d98:	2f0b883a 	add	r5,r5,fp
 8000d9c:	28800017 	ldw	r2,0(r5)
 8000da0:	10801050 	cmplti	r2,r2,65
 8000da4:	103fd21e 	bne	r2,zero,8000cf0 <__ram_exceptions_end+0xf7f80ab0>
     }
   }

//   printf("ready write................\n");
   int count = 0;
   for(column = 0; column < 128; column++) {
 8000da8:	00fffff4 	movhi	r3,65535
 8000dac:	18df7b04 	addi	r3,r3,32236
 8000db0:	1f07883a 	add	r3,r3,fp
 8000db4:	18800017 	ldw	r2,0(r3)
 8000db8:	10800044 	addi	r2,r2,1
 8000dbc:	013ffff4 	movhi	r4,65535
 8000dc0:	211f7b04 	addi	r4,r4,32236
 8000dc4:	2709883a 	add	r4,r4,fp
 8000dc8:	20800015 	stw	r2,0(r4)
 8000dcc:	017ffff4 	movhi	r5,65535
 8000dd0:	295f7b04 	addi	r5,r5,32236
 8000dd4:	2f0b883a 	add	r5,r5,fp
 8000dd8:	28800017 	ldw	r2,0(r5)
 8000ddc:	10802010 	cmplti	r2,r2,128
 8000de0:	103fbe1e 	bne	r2,zero,8000cdc <__ram_exceptions_end+0xf7f80a9c>
//       printf("writing ................column: %d, row : %d,  times %d \n", column, row, count);
         IOWR(TEST_SLAVE_0_BASE, 0, matrix_32[row][column]);
      }
   }

   alt_u32 tmp = 0;
 8000de4:	00bffff4 	movhi	r2,65535
 8000de8:	109f7d04 	addi	r2,r2,32244
 8000dec:	1705883a 	add	r2,r2,fp
 8000df0:	10000015 	stw	zero,0(r2)
//   printf("ready read................\n");

   //printf("  Collecting the result...\n");
   for(row = 0; row < 128; row ++) {
 8000df4:	00fffff4 	movhi	r3,65535
 8000df8:	18df7a04 	addi	r3,r3,32232
 8000dfc:	1f07883a 	add	r3,r3,fp
 8000e00:	18000015 	stw	zero,0(r3)
 8000e04:	00003706 	br	8000ee4 <mat_mul+0x3f4>
//     printf("reading ................. row : %d\n", row);
      tmp = IORD(TEST_SLAVE_0_BASE, 0);
 8000e08:	00840434 	movhi	r2,4112
 8000e0c:	10844504 	addi	r2,r2,4372
 8000e10:	10800037 	ldwio	r2,0(r2)
 8000e14:	013ffff4 	movhi	r4,65535
 8000e18:	211f7d04 	addi	r4,r4,32244
 8000e1c:	2709883a 	add	r4,r4,fp
 8000e20:	20800015 	stw	r2,0(r4)
//      printf("finish r row : %d \n", row);
      *(result + 2*row) = (alt_16)((tmp << 16) >> 16);
 8000e24:	017ffff4 	movhi	r5,65535
 8000e28:	295f7a04 	addi	r5,r5,32232
 8000e2c:	2f0b883a 	add	r5,r5,fp
 8000e30:	28800017 	ldw	r2,0(r5)
 8000e34:	1085883a 	add	r2,r2,r2
 8000e38:	1085883a 	add	r2,r2,r2
 8000e3c:	1007883a 	mov	r3,r2
 8000e40:	00a08514 	movui	r2,33300
 8000e44:	013ffff4 	movhi	r4,65535
 8000e48:	211f7a04 	addi	r4,r4,32232
 8000e4c:	2709883a 	add	r4,r4,fp
 8000e50:	2085883a 	add	r2,r4,r2
 8000e54:	10800017 	ldw	r2,0(r2)
 8000e58:	10c5883a 	add	r2,r2,r3
 8000e5c:	017ffff4 	movhi	r5,65535
 8000e60:	295f7d04 	addi	r5,r5,32244
 8000e64:	2f0b883a 	add	r5,r5,fp
 8000e68:	28c00017 	ldw	r3,0(r5)
 8000e6c:	10c0000d 	sth	r3,0(r2)
      *(result + 2*row + 1) = (alt_16)(tmp >> 16);
 8000e70:	00fffff4 	movhi	r3,65535
 8000e74:	18df7a04 	addi	r3,r3,32232
 8000e78:	1f07883a 	add	r3,r3,fp
 8000e7c:	18800017 	ldw	r2,0(r3)
 8000e80:	1085883a 	add	r2,r2,r2
 8000e84:	1085883a 	add	r2,r2,r2
 8000e88:	10800084 	addi	r2,r2,2
 8000e8c:	00e08514 	movui	r3,33300
 8000e90:	013ffff4 	movhi	r4,65535
 8000e94:	211f7a04 	addi	r4,r4,32232
 8000e98:	2709883a 	add	r4,r4,fp
 8000e9c:	20c7883a 	add	r3,r4,r3
 8000ea0:	18c00017 	ldw	r3,0(r3)
 8000ea4:	1885883a 	add	r2,r3,r2
 8000ea8:	017ffff4 	movhi	r5,65535
 8000eac:	295f7d04 	addi	r5,r5,32244
 8000eb0:	2f0b883a 	add	r5,r5,fp
 8000eb4:	28c00017 	ldw	r3,0(r5)
 8000eb8:	1806d43a 	srli	r3,r3,16
 8000ebc:	10c0000d 	sth	r3,0(r2)

   alt_u32 tmp = 0;
//   printf("ready read................\n");

   //printf("  Collecting the result...\n");
   for(row = 0; row < 128; row ++) {
 8000ec0:	00fffff4 	movhi	r3,65535
 8000ec4:	18df7a04 	addi	r3,r3,32232
 8000ec8:	1f07883a 	add	r3,r3,fp
 8000ecc:	18800017 	ldw	r2,0(r3)
 8000ed0:	10800044 	addi	r2,r2,1
 8000ed4:	013ffff4 	movhi	r4,65535
 8000ed8:	211f7a04 	addi	r4,r4,32232
 8000edc:	2709883a 	add	r4,r4,fp
 8000ee0:	20800015 	stw	r2,0(r4)
 8000ee4:	017ffff4 	movhi	r5,65535
 8000ee8:	295f7a04 	addi	r5,r5,32232
 8000eec:	2f0b883a 	add	r5,r5,fp
 8000ef0:	28800017 	ldw	r2,0(r5)
 8000ef4:	10802010 	cmplti	r2,r2,128
 8000ef8:	103fc31e 	bne	r2,zero,8000e08 <__ram_exceptions_end+0xf7f80bc8>
      //printBinary(*(result + 2* row+1), 0, 16);
   }
//   printf("finish read................\n");


};
 8000efc:	e037883a 	mov	sp,fp
 8000f00:	dfc00117 	ldw	ra,4(sp)
 8000f04:	df000017 	ldw	fp,0(sp)
 8000f08:	dec00204 	addi	sp,sp,8
 8000f0c:	f800283a 	ret

08000f10 <conv>:
void conv( alt_u8 * data_mat, int image_h, int image_w,
   alt_u8 * weight_mat, int filter_height, int filter_weight, int filter_num, alt_u8 * temp_fmap, alt_16 * output_mat){
 8000f10:	defffe04 	addi	sp,sp,-8
 8000f14:	dfc00115 	stw	ra,4(sp)
 8000f18:	df000015 	stw	fp,0(sp)
 8000f1c:	d839883a 	mov	fp,sp
 8000f20:	023ffff4 	movhi	r8,65535
 8000f24:	421f5104 	addi	r8,r8,32068
 8000f28:	da37883a 	add	sp,sp,r8
 8000f2c:	00a0aa14 	movui	r2,33448
 8000f30:	00fffff4 	movhi	r3,65535
 8000f34:	18df5204 	addi	r3,r3,32072
 8000f38:	1f07883a 	add	r3,r3,fp
 8000f3c:	1885883a 	add	r2,r3,r2
 8000f40:	11000015 	stw	r4,0(r2)
 8000f44:	00a0ab14 	movui	r2,33452
 8000f48:	013ffff4 	movhi	r4,65535
 8000f4c:	211f5204 	addi	r4,r4,32072
 8000f50:	2709883a 	add	r4,r4,fp
 8000f54:	2085883a 	add	r2,r4,r2
 8000f58:	11400015 	stw	r5,0(r2)
 8000f5c:	00a0ac14 	movui	r2,33456
 8000f60:	017ffff4 	movhi	r5,65535
 8000f64:	295f5204 	addi	r5,r5,32072
 8000f68:	2f0b883a 	add	r5,r5,fp
 8000f6c:	2885883a 	add	r2,r5,r2
 8000f70:	11800015 	stw	r6,0(r2)
 8000f74:	00a0ad14 	movui	r2,33460
 8000f78:	01bffff4 	movhi	r6,65535
 8000f7c:	319f5204 	addi	r6,r6,32072
 8000f80:	370d883a 	add	r6,r6,fp
 8000f84:	3085883a 	add	r2,r6,r2
 8000f88:	11c00015 	stw	r7,0(r2)
   int flatten_num = image_h*image_w;
 8000f8c:	00a0ab14 	movui	r2,33452
 8000f90:	013ffff4 	movhi	r4,65535
 8000f94:	211f5204 	addi	r4,r4,32072
 8000f98:	2709883a 	add	r4,r4,fp
 8000f9c:	2087883a 	add	r3,r4,r2
 8000fa0:	00a0ac14 	movui	r2,33456
 8000fa4:	017ffff4 	movhi	r5,65535
 8000fa8:	295f5204 	addi	r5,r5,32072
 8000fac:	2f0b883a 	add	r5,r5,fp
 8000fb0:	2885883a 	add	r2,r5,r2
 8000fb4:	18c00017 	ldw	r3,0(r3)
 8000fb8:	10800017 	ldw	r2,0(r2)
 8000fbc:	1885383a 	mul	r2,r3,r2
 8000fc0:	01bffff4 	movhi	r6,65535
 8000fc4:	319f5b04 	addi	r6,r6,32108
 8000fc8:	370d883a 	add	r6,r6,fp
 8000fcc:	30800015 	stw	r2,0(r6)
   alt_u8 mat_block[257][128] = {0};
 8000fd0:	00bffff4 	movhi	r2,65535
 8000fd4:	109f5c04 	addi	r2,r2,32112
 8000fd8:	e087883a 	add	r3,fp,r2
 8000fdc:	00a02014 	movui	r2,32896
 8000fe0:	1809883a 	mov	r4,r3
 8000fe4:	000b883a 	mov	r5,zero
 8000fe8:	100d883a 	mov	r6,r2
 8000fec:	8003e880 	call	8003e88 <memset>
   alt_16 result[256] = {0};
 8000ff0:	00a02a14 	movui	r2,32936
 8000ff4:	00fffff4 	movhi	r3,65535
 8000ff8:	18df5204 	addi	r3,r3,32072
 8000ffc:	1f07883a 	add	r3,r3,fp
 8001000:	1885883a 	add	r2,r3,r2
 8001004:	1007883a 	mov	r3,r2
 8001008:	00808004 	movi	r2,512
 800100c:	1809883a 	mov	r4,r3
 8001010:	000b883a 	mov	r5,zero
 8001014:	100d883a 	mov	r6,r2
 8001018:	8003e880 	call	8003e88 <memset>
   alt_u8 * d_ptr; d_ptr = data_mat;
 800101c:	00a0aa14 	movui	r2,33448
 8001020:	013ffff4 	movhi	r4,65535
 8001024:	211f5204 	addi	r4,r4,32072
 8001028:	2709883a 	add	r4,r4,fp
 800102c:	2085883a 	add	r2,r4,r2
 8001030:	10800017 	ldw	r2,0(r2)
 8001034:	017ffff4 	movhi	r5,65535
 8001038:	295f5204 	addi	r5,r5,32072
 800103c:	2f0b883a 	add	r5,r5,fp
 8001040:	28800015 	stw	r2,0(r5)
   alt_u8 * f_ptr; f_ptr = weight_mat;
 8001044:	00a0ad14 	movui	r2,33460
 8001048:	01bffff4 	movhi	r6,65535
 800104c:	319f5204 	addi	r6,r6,32072
 8001050:	370d883a 	add	r6,r6,fp
 8001054:	3085883a 	add	r2,r6,r2
 8001058:	10800017 	ldw	r2,0(r2)
 800105c:	00fffff4 	movhi	r3,65535
 8001060:	18df5304 	addi	r3,r3,32076
 8001064:	1f07883a 	add	r3,r3,fp
 8001068:	18800015 	stw	r2,0(r3)
   int i=0, db=0, fb=0, r=0, c=0, result_c=0, counter = 0;
 800106c:	013ffff4 	movhi	r4,65535
 8001070:	211f5404 	addi	r4,r4,32080
 8001074:	2709883a 	add	r4,r4,fp
 8001078:	20000015 	stw	zero,0(r4)
 800107c:	017ffff4 	movhi	r5,65535
 8001080:	295f5504 	addi	r5,r5,32084
 8001084:	2f0b883a 	add	r5,r5,fp
 8001088:	28000015 	stw	zero,0(r5)
 800108c:	01bffff4 	movhi	r6,65535
 8001090:	319f5604 	addi	r6,r6,32088
 8001094:	370d883a 	add	r6,r6,fp
 8001098:	30000015 	stw	zero,0(r6)
 800109c:	00bffff4 	movhi	r2,65535
 80010a0:	109f5704 	addi	r2,r2,32092
 80010a4:	1705883a 	add	r2,r2,fp
 80010a8:	10000015 	stw	zero,0(r2)
 80010ac:	00fffff4 	movhi	r3,65535
 80010b0:	18df5804 	addi	r3,r3,32096
 80010b4:	1f07883a 	add	r3,r3,fp
 80010b8:	18000015 	stw	zero,0(r3)
 80010bc:	013ffff4 	movhi	r4,65535
 80010c0:	211f5904 	addi	r4,r4,32100
 80010c4:	2709883a 	add	r4,r4,fp
 80010c8:	20000015 	stw	zero,0(r4)
 80010cc:	017ffff4 	movhi	r5,65535
 80010d0:	295f5a04 	addi	r5,r5,32104
 80010d4:	2f0b883a 	add	r5,r5,fp
 80010d8:	28000015 	stw	zero,0(r5)

   // for every colume in filter
   for(i=0 ; i < filter_num ; ++i){
 80010dc:	01bffff4 	movhi	r6,65535
 80010e0:	319f5404 	addi	r6,r6,32080
 80010e4:	370d883a 	add	r6,r6,fp
 80010e8:	30000015 	stw	zero,0(r6)
 80010ec:	0001e606 	br	8001888 <conv+0x978>
      // for every block in filter(filter block)
      for(fb=0; fb < (filter_height * filter_weight - 1)/128 + 1; ++fb){
 80010f0:	00bffff4 	movhi	r2,65535
 80010f4:	109f5604 	addi	r2,r2,32088
 80010f8:	1705883a 	add	r2,r2,fp
 80010fc:	10000015 	stw	zero,0(r2)
 8001100:	0001cb06 	br	8001830 <conv+0x920>
         //set the initial ptr
         d_ptr = data_mat + fb*128;
 8001104:	00fffff4 	movhi	r3,65535
 8001108:	18df5604 	addi	r3,r3,32088
 800110c:	1f07883a 	add	r3,r3,fp
 8001110:	18800017 	ldw	r2,0(r3)
 8001114:	100491fa 	slli	r2,r2,7
 8001118:	1007883a 	mov	r3,r2
 800111c:	00a0aa14 	movui	r2,33448
 8001120:	013ffff4 	movhi	r4,65535
 8001124:	211f5204 	addi	r4,r4,32072
 8001128:	2709883a 	add	r4,r4,fp
 800112c:	2085883a 	add	r2,r4,r2
 8001130:	10800017 	ldw	r2,0(r2)
 8001134:	10c5883a 	add	r2,r2,r3
 8001138:	017ffff4 	movhi	r5,65535
 800113c:	295f5204 	addi	r5,r5,32072
 8001140:	2f0b883a 	add	r5,r5,fp
 8001144:	28800015 	stw	r2,0(r5)
         f_ptr = weight_mat + fb*filter_num*128 +i;
 8001148:	01bffff4 	movhi	r6,65535
 800114c:	319f5604 	addi	r6,r6,32088
 8001150:	370d883a 	add	r6,r6,fp
 8001154:	30c00017 	ldw	r3,0(r6)
 8001158:	e0800417 	ldw	r2,16(fp)
 800115c:	1885383a 	mul	r2,r3,r2
 8001160:	100491fa 	slli	r2,r2,7
 8001164:	1007883a 	mov	r3,r2
 8001168:	013ffff4 	movhi	r4,65535
 800116c:	211f5404 	addi	r4,r4,32080
 8001170:	2709883a 	add	r4,r4,fp
 8001174:	20800017 	ldw	r2,0(r4)
 8001178:	1885883a 	add	r2,r3,r2
 800117c:	00e0ad14 	movui	r3,33460
 8001180:	017ffff4 	movhi	r5,65535
 8001184:	295f5204 	addi	r5,r5,32072
 8001188:	2f0b883a 	add	r5,r5,fp
 800118c:	28c7883a 	add	r3,r5,r3
 8001190:	18c00017 	ldw	r3,0(r3)
 8001194:	1885883a 	add	r2,r3,r2
 8001198:	01bffff4 	movhi	r6,65535
 800119c:	319f5304 	addi	r6,r6,32076
 80011a0:	370d883a 	add	r6,r6,fp
 80011a4:	30800015 	stw	r2,0(r6)

         // for every block per colume in data(data block)
         for(db=0; db < (flatten_num - 1)/256 + 1; ++db){
 80011a8:	00bffff4 	movhi	r2,65535
 80011ac:	109f5504 	addi	r2,r2,32084
 80011b0:	1705883a 	add	r2,r2,fp
 80011b4:	10000015 	stw	zero,0(r2)
 80011b8:	00018606 	br	80017d4 <conv+0x8c4>
            // one block
            // put every row in data into mat_block
            for( r=0; r<256; ++r ){
 80011bc:	00fffff4 	movhi	r3,65535
 80011c0:	18df5704 	addi	r3,r3,32092
 80011c4:	1f07883a 	add	r3,r3,fp
 80011c8:	18000015 	stw	zero,0(r3)
 80011cc:	0000b306 	br	800149c <conv+0x58c>
               // when data row is smaller then flatten_num
               if( db*256+r < flatten_num ){
 80011d0:	013ffff4 	movhi	r4,65535
 80011d4:	211f5504 	addi	r4,r4,32084
 80011d8:	2709883a 	add	r4,r4,fp
 80011dc:	20800017 	ldw	r2,0(r4)
 80011e0:	1006923a 	slli	r3,r2,8
 80011e4:	017ffff4 	movhi	r5,65535
 80011e8:	295f5704 	addi	r5,r5,32092
 80011ec:	2f0b883a 	add	r5,r5,fp
 80011f0:	28800017 	ldw	r2,0(r5)
 80011f4:	1887883a 	add	r3,r3,r2
 80011f8:	01bffff4 	movhi	r6,65535
 80011fc:	319f5b04 	addi	r6,r6,32108
 8001200:	370d883a 	add	r6,r6,fp
 8001204:	30800017 	ldw	r2,0(r6)
 8001208:	1880770e 	bge	r3,r2,80013e8 <conv+0x4d8>
                  // put every element in data into mat_block
                  for(c=0 ; c<128 ; ++c){
 800120c:	00bffff4 	movhi	r2,65535
 8001210:	109f5804 	addi	r2,r2,32096
 8001214:	1705883a 	add	r2,r2,fp
 8001218:	10000015 	stw	zero,0(r2)
 800121c:	00004606 	br	8001338 <conv+0x428>
                     // when data colume is smaller then filter_height*filter_weight
                     if( fb*128+c < filter_height*filter_weight ){
 8001220:	00fffff4 	movhi	r3,65535
 8001224:	18df5604 	addi	r3,r3,32088
 8001228:	1f07883a 	add	r3,r3,fp
 800122c:	18800017 	ldw	r2,0(r3)
 8001230:	100691fa 	slli	r3,r2,7
 8001234:	013ffff4 	movhi	r4,65535
 8001238:	211f5804 	addi	r4,r4,32096
 800123c:	2709883a 	add	r4,r4,fp
 8001240:	20800017 	ldw	r2,0(r4)
 8001244:	1887883a 	add	r3,r3,r2
 8001248:	e1000217 	ldw	r4,8(fp)
 800124c:	e0800317 	ldw	r2,12(fp)
 8001250:	2085383a 	mul	r2,r4,r2
 8001254:	18801f0e 	bge	r3,r2,80012d4 <conv+0x3c4>
                        mat_block[r][c] = *(d_ptr);
 8001258:	017ffff4 	movhi	r5,65535
 800125c:	295f5204 	addi	r5,r5,32072
 8001260:	2f0b883a 	add	r5,r5,fp
 8001264:	28800017 	ldw	r2,0(r5)
 8001268:	10c00003 	ldbu	r3,0(r2)
 800126c:	01bffff4 	movhi	r6,65535
 8001270:	319f5704 	addi	r6,r6,32092
 8001274:	370d883a 	add	r6,r6,fp
 8001278:	30800017 	ldw	r2,0(r6)
 800127c:	100491fa 	slli	r2,r2,7
 8001280:	017ffff4 	movhi	r5,65535
 8001284:	295f5204 	addi	r5,r5,32072
 8001288:	2f0b883a 	add	r5,r5,fp
 800128c:	2889883a 	add	r4,r5,r2
 8001290:	01bffff4 	movhi	r6,65535
 8001294:	319f5804 	addi	r6,r6,32096
 8001298:	370d883a 	add	r6,r6,fp
 800129c:	30800017 	ldw	r2,0(r6)
 80012a0:	2085883a 	add	r2,r4,r2
 80012a4:	10800a04 	addi	r2,r2,40
 80012a8:	10c00005 	stb	r3,0(r2)
//                        counter++;
//                        printSignBinary(*d_ptr, 16);
//                        printf("\ncointer %d\n", counter);
                        d_ptr = d_ptr+1;
 80012ac:	00fffff4 	movhi	r3,65535
 80012b0:	18df5204 	addi	r3,r3,32072
 80012b4:	1f07883a 	add	r3,r3,fp
 80012b8:	18800017 	ldw	r2,0(r3)
 80012bc:	10800044 	addi	r2,r2,1
 80012c0:	013ffff4 	movhi	r4,65535
 80012c4:	211f5204 	addi	r4,r4,32072
 80012c8:	2709883a 	add	r4,r4,fp
 80012cc:	20800015 	stw	r2,0(r4)
 80012d0:	00001006 	br	8001314 <conv+0x404>
                     }
                     // else = 0
                     else{

                        mat_block[r][c] = (alt_u8)0;
 80012d4:	017ffff4 	movhi	r5,65535
 80012d8:	295f5704 	addi	r5,r5,32092
 80012dc:	2f0b883a 	add	r5,r5,fp
 80012e0:	28800017 	ldw	r2,0(r5)
 80012e4:	100491fa 	slli	r2,r2,7
 80012e8:	01bffff4 	movhi	r6,65535
 80012ec:	319f5204 	addi	r6,r6,32072
 80012f0:	370d883a 	add	r6,r6,fp
 80012f4:	3087883a 	add	r3,r6,r2
 80012f8:	013ffff4 	movhi	r4,65535
 80012fc:	211f5804 	addi	r4,r4,32096
 8001300:	2709883a 	add	r4,r4,fp
 8001304:	20800017 	ldw	r2,0(r4)
 8001308:	1885883a 	add	r2,r3,r2
 800130c:	10800a04 	addi	r2,r2,40
 8001310:	10000005 	stb	zero,0(r2)
            // put every row in data into mat_block
            for( r=0; r<256; ++r ){
               // when data row is smaller then flatten_num
               if( db*256+r < flatten_num ){
                  // put every element in data into mat_block
                  for(c=0 ; c<128 ; ++c){
 8001314:	017ffff4 	movhi	r5,65535
 8001318:	295f5804 	addi	r5,r5,32096
 800131c:	2f0b883a 	add	r5,r5,fp
 8001320:	28800017 	ldw	r2,0(r5)
 8001324:	10800044 	addi	r2,r2,1
 8001328:	01bffff4 	movhi	r6,65535
 800132c:	319f5804 	addi	r6,r6,32096
 8001330:	370d883a 	add	r6,r6,fp
 8001334:	30800015 	stw	r2,0(r6)
 8001338:	00fffff4 	movhi	r3,65535
 800133c:	18df5804 	addi	r3,r3,32096
 8001340:	1f07883a 	add	r3,r3,fp
 8001344:	18800017 	ldw	r2,0(r3)
 8001348:	10802010 	cmplti	r2,r2,128
 800134c:	103fb41e 	bne	r2,zero,8001220 <__ram_exceptions_end+0xf7f80fe0>
                     else{

                        mat_block[r][c] = (alt_u8)0;
                     }
                  }
                  d_ptr = data_mat + db*256*filter_height*filter_weight + (r+1)*filter_height*filter_weight + fb*128;
 8001350:	013ffff4 	movhi	r4,65535
 8001354:	211f5504 	addi	r4,r4,32084
 8001358:	2709883a 	add	r4,r4,fp
 800135c:	20800017 	ldw	r2,0(r4)
 8001360:	1006923a 	slli	r3,r2,8
 8001364:	e0800217 	ldw	r2,8(fp)
 8001368:	1887383a 	mul	r3,r3,r2
 800136c:	e0800317 	ldw	r2,12(fp)
 8001370:	1885383a 	mul	r2,r3,r2
 8001374:	1009883a 	mov	r4,r2
 8001378:	017ffff4 	movhi	r5,65535
 800137c:	295f5704 	addi	r5,r5,32092
 8001380:	2f0b883a 	add	r5,r5,fp
 8001384:	28800017 	ldw	r2,0(r5)
 8001388:	10c00044 	addi	r3,r2,1
 800138c:	e0800217 	ldw	r2,8(fp)
 8001390:	1887383a 	mul	r3,r3,r2
 8001394:	e0800317 	ldw	r2,12(fp)
 8001398:	1885383a 	mul	r2,r3,r2
 800139c:	2085883a 	add	r2,r4,r2
 80013a0:	01bffff4 	movhi	r6,65535
 80013a4:	319f5604 	addi	r6,r6,32088
 80013a8:	370d883a 	add	r6,r6,fp
 80013ac:	30c00017 	ldw	r3,0(r6)
 80013b0:	180691fa 	slli	r3,r3,7
 80013b4:	10c5883a 	add	r2,r2,r3
 80013b8:	00e0aa14 	movui	r3,33448
 80013bc:	013ffff4 	movhi	r4,65535
 80013c0:	211f5204 	addi	r4,r4,32072
 80013c4:	2709883a 	add	r4,r4,fp
 80013c8:	20c7883a 	add	r3,r4,r3
 80013cc:	18c00017 	ldw	r3,0(r3)
 80013d0:	1885883a 	add	r2,r3,r2
 80013d4:	017ffff4 	movhi	r5,65535
 80013d8:	295f5204 	addi	r5,r5,32072
 80013dc:	2f0b883a 	add	r5,r5,fp
 80013e0:	28800015 	stw	r2,0(r5)
 80013e4:	00002406 	br	8001478 <conv+0x568>
               }
               // else = 0
               else{
                  for(c=0 ; c<128 ; ++c){ mat_block[r][c] = (alt_u8)0; }
 80013e8:	01bffff4 	movhi	r6,65535
 80013ec:	319f5804 	addi	r6,r6,32096
 80013f0:	370d883a 	add	r6,r6,fp
 80013f4:	30000015 	stw	zero,0(r6)
 80013f8:	00001906 	br	8001460 <conv+0x550>
 80013fc:	00fffff4 	movhi	r3,65535
 8001400:	18df5704 	addi	r3,r3,32092
 8001404:	1f07883a 	add	r3,r3,fp
 8001408:	18800017 	ldw	r2,0(r3)
 800140c:	100491fa 	slli	r2,r2,7
 8001410:	013ffff4 	movhi	r4,65535
 8001414:	211f5204 	addi	r4,r4,32072
 8001418:	2709883a 	add	r4,r4,fp
 800141c:	2087883a 	add	r3,r4,r2
 8001420:	017ffff4 	movhi	r5,65535
 8001424:	295f5804 	addi	r5,r5,32096
 8001428:	2f0b883a 	add	r5,r5,fp
 800142c:	28800017 	ldw	r2,0(r5)
 8001430:	1885883a 	add	r2,r3,r2
 8001434:	10800a04 	addi	r2,r2,40
 8001438:	10000005 	stb	zero,0(r2)
 800143c:	01bffff4 	movhi	r6,65535
 8001440:	319f5804 	addi	r6,r6,32096
 8001444:	370d883a 	add	r6,r6,fp
 8001448:	30800017 	ldw	r2,0(r6)
 800144c:	10800044 	addi	r2,r2,1
 8001450:	00fffff4 	movhi	r3,65535
 8001454:	18df5804 	addi	r3,r3,32096
 8001458:	1f07883a 	add	r3,r3,fp
 800145c:	18800015 	stw	r2,0(r3)
 8001460:	013ffff4 	movhi	r4,65535
 8001464:	211f5804 	addi	r4,r4,32096
 8001468:	2709883a 	add	r4,r4,fp
 800146c:	20800017 	ldw	r2,0(r4)
 8001470:	10802010 	cmplti	r2,r2,128
 8001474:	103fe11e 	bne	r2,zero,80013fc <__ram_exceptions_end+0xf7f811bc>

         // for every block per colume in data(data block)
         for(db=0; db < (flatten_num - 1)/256 + 1; ++db){
            // one block
            // put every row in data into mat_block
            for( r=0; r<256; ++r ){
 8001478:	017ffff4 	movhi	r5,65535
 800147c:	295f5704 	addi	r5,r5,32092
 8001480:	2f0b883a 	add	r5,r5,fp
 8001484:	28800017 	ldw	r2,0(r5)
 8001488:	10800044 	addi	r2,r2,1
 800148c:	01bffff4 	movhi	r6,65535
 8001490:	319f5704 	addi	r6,r6,32092
 8001494:	370d883a 	add	r6,r6,fp
 8001498:	30800015 	stw	r2,0(r6)
 800149c:	00fffff4 	movhi	r3,65535
 80014a0:	18df5704 	addi	r3,r3,32092
 80014a4:	1f07883a 	add	r3,r3,fp
 80014a8:	18800017 	ldw	r2,0(r3)
 80014ac:	10804010 	cmplti	r2,r2,256
 80014b0:	103f471e 	bne	r2,zero,80011d0 <__ram_exceptions_end+0xf7f80f90>
                  for(c=0 ; c<128 ; ++c){ mat_block[r][c] = (alt_u8)0; }
               }
            }

            // put one colume in filter into mat_block
            counter = 0;
 80014b4:	013ffff4 	movhi	r4,65535
 80014b8:	211f5a04 	addi	r4,r4,32104
 80014bc:	2709883a 	add	r4,r4,fp
 80014c0:	20000015 	stw	zero,0(r4)
            for(c=0 ; c<128 ; ++c){
 80014c4:	017ffff4 	movhi	r5,65535
 80014c8:	295f5804 	addi	r5,r5,32096
 80014cc:	2f0b883a 	add	r5,r5,fp
 80014d0:	28000015 	stw	zero,0(r5)
 80014d4:	00004606 	br	80015f0 <conv+0x6e0>
               if(fb*128+c<(filter_height*filter_weight)){
 80014d8:	01bffff4 	movhi	r6,65535
 80014dc:	319f5604 	addi	r6,r6,32088
 80014e0:	370d883a 	add	r6,r6,fp
 80014e4:	30800017 	ldw	r2,0(r6)
 80014e8:	100691fa 	slli	r3,r2,7
 80014ec:	013ffff4 	movhi	r4,65535
 80014f0:	211f5804 	addi	r4,r4,32096
 80014f4:	2709883a 	add	r4,r4,fp
 80014f8:	20800017 	ldw	r2,0(r4)
 80014fc:	1887883a 	add	r3,r3,r2
 8001500:	e1000217 	ldw	r4,8(fp)
 8001504:	e0800317 	ldw	r2,12(fp)
 8001508:	2085383a 	mul	r2,r4,r2
 800150c:	1880240e 	bge	r3,r2,80015a0 <conv+0x690>
                  mat_block[256][c] = *(f_ptr);
 8001510:	017ffff4 	movhi	r5,65535
 8001514:	295f5304 	addi	r5,r5,32076
 8001518:	2f0b883a 	add	r5,r5,fp
 800151c:	28800017 	ldw	r2,0(r5)
 8001520:	10c00003 	ldbu	r3,0(r2)
 8001524:	00a00a14 	movui	r2,32808
 8001528:	01bffff4 	movhi	r6,65535
 800152c:	319f5204 	addi	r6,r6,32072
 8001530:	370d883a 	add	r6,r6,fp
 8001534:	3089883a 	add	r4,r6,r2
 8001538:	017ffff4 	movhi	r5,65535
 800153c:	295f5804 	addi	r5,r5,32096
 8001540:	2f0b883a 	add	r5,r5,fp
 8001544:	28800017 	ldw	r2,0(r5)
 8001548:	2085883a 	add	r2,r4,r2
 800154c:	10c00005 	stb	r3,0(r2)
//                  printSignBinary(*f_ptr, 128);
//                  printf("\n");
                  f_ptr = f_ptr + filter_num;
 8001550:	e0800417 	ldw	r2,16(fp)
 8001554:	01bffff4 	movhi	r6,65535
 8001558:	319f5304 	addi	r6,r6,32076
 800155c:	370d883a 	add	r6,r6,fp
 8001560:	30c00017 	ldw	r3,0(r6)
 8001564:	1885883a 	add	r2,r3,r2
 8001568:	00fffff4 	movhi	r3,65535
 800156c:	18df5304 	addi	r3,r3,32076
 8001570:	1f07883a 	add	r3,r3,fp
 8001574:	18800015 	stw	r2,0(r3)
                  counter ++;
 8001578:	013ffff4 	movhi	r4,65535
 800157c:	211f5a04 	addi	r4,r4,32104
 8001580:	2709883a 	add	r4,r4,fp
 8001584:	20800017 	ldw	r2,0(r4)
 8001588:	10800044 	addi	r2,r2,1
 800158c:	017ffff4 	movhi	r5,65535
 8001590:	295f5a04 	addi	r5,r5,32104
 8001594:	2f0b883a 	add	r5,r5,fp
 8001598:	28800015 	stw	r2,0(r5)
 800159c:	00000b06 	br	80015cc <conv+0x6bc>
               }
               else
//            	  printf("1\n");
                  mat_block[256][c] = (alt_u8)(0);
 80015a0:	00a00a14 	movui	r2,32808
 80015a4:	01bffff4 	movhi	r6,65535
 80015a8:	319f5204 	addi	r6,r6,32072
 80015ac:	370d883a 	add	r6,r6,fp
 80015b0:	3087883a 	add	r3,r6,r2
 80015b4:	013ffff4 	movhi	r4,65535
 80015b8:	211f5804 	addi	r4,r4,32096
 80015bc:	2709883a 	add	r4,r4,fp
 80015c0:	20800017 	ldw	r2,0(r4)
 80015c4:	1885883a 	add	r2,r3,r2
 80015c8:	10000005 	stb	zero,0(r2)
               }
            }

            // put one colume in filter into mat_block
            counter = 0;
            for(c=0 ; c<128 ; ++c){
 80015cc:	017ffff4 	movhi	r5,65535
 80015d0:	295f5804 	addi	r5,r5,32096
 80015d4:	2f0b883a 	add	r5,r5,fp
 80015d8:	28800017 	ldw	r2,0(r5)
 80015dc:	10800044 	addi	r2,r2,1
 80015e0:	01bffff4 	movhi	r6,65535
 80015e4:	319f5804 	addi	r6,r6,32096
 80015e8:	370d883a 	add	r6,r6,fp
 80015ec:	30800015 	stw	r2,0(r6)
 80015f0:	00fffff4 	movhi	r3,65535
 80015f4:	18df5804 	addi	r3,r3,32096
 80015f8:	1f07883a 	add	r3,r3,fp
 80015fc:	18800017 	ldw	r2,0(r3)
 8001600:	10802010 	cmplti	r2,r2,128
 8001604:	103fb41e 	bne	r2,zero,80014d8 <__ram_exceptions_end+0xf7f81298>
            }
//            printf("MatBlock.............................................................................\n");
//            if(i==0 && fb==0 && db==0) {printMatrix(mat_block, 257, 128, 1, 16);}

            //calculate by mat_mul
            mat_mul(mat_block, result);
 8001608:	013ffff4 	movhi	r4,65535
 800160c:	211f5c04 	addi	r4,r4,32112
 8001610:	e107883a 	add	r3,fp,r4
 8001614:	00a02a14 	movui	r2,32936
 8001618:	017ffff4 	movhi	r5,65535
 800161c:	295f5204 	addi	r5,r5,32072
 8001620:	2f0b883a 	add	r5,r5,fp
 8001624:	2885883a 	add	r2,r5,r2
 8001628:	1809883a 	mov	r4,r3
 800162c:	100b883a 	mov	r5,r2
 8001630:	8000af00 	call	8000af0 <mat_mul>
//               for(fuck=0 ; fuck<256 ; ++fuck){
//                   printf("num = %d, ans = %f ", fuck, (double)(*(result+fuck)));
//            	   printf("\n");
//               }
//            }
            for(result_c=0 ; result_c<256 ; ++result_c){
 8001634:	01bffff4 	movhi	r6,65535
 8001638:	319f5904 	addi	r6,r6,32100
 800163c:	370d883a 	add	r6,r6,fp
 8001640:	30000015 	stw	zero,0(r6)
 8001644:	00005406 	br	8001798 <conv+0x888>
               if(db*256+result_c<flatten_num)
 8001648:	00fffff4 	movhi	r3,65535
 800164c:	18df5504 	addi	r3,r3,32084
 8001650:	1f07883a 	add	r3,r3,fp
 8001654:	18800017 	ldw	r2,0(r3)
 8001658:	1006923a 	slli	r3,r2,8
 800165c:	013ffff4 	movhi	r4,65535
 8001660:	211f5904 	addi	r4,r4,32100
 8001664:	2709883a 	add	r4,r4,fp
 8001668:	20800017 	ldw	r2,0(r4)
 800166c:	1887883a 	add	r3,r3,r2
 8001670:	017ffff4 	movhi	r5,65535
 8001674:	295f5b04 	addi	r5,r5,32108
 8001678:	2f0b883a 	add	r5,r5,fp
 800167c:	28800017 	ldw	r2,0(r5)
 8001680:	18803c0e 	bge	r3,r2,8001774 <conv+0x864>
                  *(output_mat+(db*256+result_c)*filter_num + i) += (result[result_c]);
 8001684:	01bffff4 	movhi	r6,65535
 8001688:	319f5504 	addi	r6,r6,32084
 800168c:	370d883a 	add	r6,r6,fp
 8001690:	30800017 	ldw	r2,0(r6)
 8001694:	1006923a 	slli	r3,r2,8
 8001698:	013ffff4 	movhi	r4,65535
 800169c:	211f5904 	addi	r4,r4,32100
 80016a0:	2709883a 	add	r4,r4,fp
 80016a4:	20800017 	ldw	r2,0(r4)
 80016a8:	1887883a 	add	r3,r3,r2
 80016ac:	e0800417 	ldw	r2,16(fp)
 80016b0:	1885383a 	mul	r2,r3,r2
 80016b4:	1007883a 	mov	r3,r2
 80016b8:	017ffff4 	movhi	r5,65535
 80016bc:	295f5404 	addi	r5,r5,32080
 80016c0:	2f0b883a 	add	r5,r5,fp
 80016c4:	28800017 	ldw	r2,0(r5)
 80016c8:	1885883a 	add	r2,r3,r2
 80016cc:	1085883a 	add	r2,r2,r2
 80016d0:	1007883a 	mov	r3,r2
 80016d4:	e0800617 	ldw	r2,24(fp)
 80016d8:	10c7883a 	add	r3,r2,r3
 80016dc:	01bffff4 	movhi	r6,65535
 80016e0:	319f5504 	addi	r6,r6,32084
 80016e4:	370d883a 	add	r6,r6,fp
 80016e8:	30800017 	ldw	r2,0(r6)
 80016ec:	1008923a 	slli	r4,r2,8
 80016f0:	017ffff4 	movhi	r5,65535
 80016f4:	295f5904 	addi	r5,r5,32100
 80016f8:	2f0b883a 	add	r5,r5,fp
 80016fc:	28800017 	ldw	r2,0(r5)
 8001700:	2089883a 	add	r4,r4,r2
 8001704:	e0800417 	ldw	r2,16(fp)
 8001708:	2085383a 	mul	r2,r4,r2
 800170c:	1009883a 	mov	r4,r2
 8001710:	01bffff4 	movhi	r6,65535
 8001714:	319f5404 	addi	r6,r6,32080
 8001718:	370d883a 	add	r6,r6,fp
 800171c:	30800017 	ldw	r2,0(r6)
 8001720:	2085883a 	add	r2,r4,r2
 8001724:	1085883a 	add	r2,r2,r2
 8001728:	1009883a 	mov	r4,r2
 800172c:	e0800617 	ldw	r2,24(fp)
 8001730:	1105883a 	add	r2,r2,r4
 8001734:	1080000b 	ldhu	r2,0(r2)
 8001738:	100b883a 	mov	r5,r2
 800173c:	00a02a14 	movui	r2,32936
 8001740:	01bffff4 	movhi	r6,65535
 8001744:	319f5204 	addi	r6,r6,32072
 8001748:	370d883a 	add	r6,r6,fp
 800174c:	3089883a 	add	r4,r6,r2
 8001750:	01bffff4 	movhi	r6,65535
 8001754:	319f5904 	addi	r6,r6,32100
 8001758:	370d883a 	add	r6,r6,fp
 800175c:	30800017 	ldw	r2,0(r6)
 8001760:	1085883a 	add	r2,r2,r2
 8001764:	2085883a 	add	r2,r4,r2
 8001768:	1080000b 	ldhu	r2,0(r2)
 800176c:	2885883a 	add	r2,r5,r2
 8001770:	1880000d 	sth	r2,0(r3)
//               for(fuck=0 ; fuck<256 ; ++fuck){
//                   printf("num = %d, ans = %f ", fuck, (double)(*(result+fuck)));
//            	   printf("\n");
//               }
//            }
            for(result_c=0 ; result_c<256 ; ++result_c){
 8001774:	00fffff4 	movhi	r3,65535
 8001778:	18df5904 	addi	r3,r3,32100
 800177c:	1f07883a 	add	r3,r3,fp
 8001780:	18800017 	ldw	r2,0(r3)
 8001784:	10800044 	addi	r2,r2,1
 8001788:	013ffff4 	movhi	r4,65535
 800178c:	211f5904 	addi	r4,r4,32100
 8001790:	2709883a 	add	r4,r4,fp
 8001794:	20800015 	stw	r2,0(r4)
 8001798:	017ffff4 	movhi	r5,65535
 800179c:	295f5904 	addi	r5,r5,32100
 80017a0:	2f0b883a 	add	r5,r5,fp
 80017a4:	28800017 	ldw	r2,0(r5)
 80017a8:	10804010 	cmplti	r2,r2,256
 80017ac:	103fa61e 	bne	r2,zero,8001648 <__ram_exceptions_end+0xf7f81408>
         //set the initial ptr
         d_ptr = data_mat + fb*128;
         f_ptr = weight_mat + fb*filter_num*128 +i;

         // for every block per colume in data(data block)
         for(db=0; db < (flatten_num - 1)/256 + 1; ++db){
 80017b0:	01bffff4 	movhi	r6,65535
 80017b4:	319f5504 	addi	r6,r6,32084
 80017b8:	370d883a 	add	r6,r6,fp
 80017bc:	30800017 	ldw	r2,0(r6)
 80017c0:	10800044 	addi	r2,r2,1
 80017c4:	00fffff4 	movhi	r3,65535
 80017c8:	18df5504 	addi	r3,r3,32084
 80017cc:	1f07883a 	add	r3,r3,fp
 80017d0:	18800015 	stw	r2,0(r3)
 80017d4:	013ffff4 	movhi	r4,65535
 80017d8:	211f5b04 	addi	r4,r4,32108
 80017dc:	2709883a 	add	r4,r4,fp
 80017e0:	20800017 	ldw	r2,0(r4)
 80017e4:	10bfffc4 	addi	r2,r2,-1
 80017e8:	1000010e 	bge	r2,zero,80017f0 <conv+0x8e0>
 80017ec:	10803fc4 	addi	r2,r2,255
 80017f0:	1005d23a 	srai	r2,r2,8
 80017f4:	10800044 	addi	r2,r2,1
 80017f8:	017ffff4 	movhi	r5,65535
 80017fc:	295f5504 	addi	r5,r5,32084
 8001800:	2f0b883a 	add	r5,r5,fp
 8001804:	28c00017 	ldw	r3,0(r5)
 8001808:	18be6c16 	blt	r3,r2,80011bc <__ram_exceptions_end+0xf7f80f7c>
   int i=0, db=0, fb=0, r=0, c=0, result_c=0, counter = 0;

   // for every colume in filter
   for(i=0 ; i < filter_num ; ++i){
      // for every block in filter(filter block)
      for(fb=0; fb < (filter_height * filter_weight - 1)/128 + 1; ++fb){
 800180c:	01bffff4 	movhi	r6,65535
 8001810:	319f5604 	addi	r6,r6,32088
 8001814:	370d883a 	add	r6,r6,fp
 8001818:	30800017 	ldw	r2,0(r6)
 800181c:	10800044 	addi	r2,r2,1
 8001820:	00fffff4 	movhi	r3,65535
 8001824:	18df5604 	addi	r3,r3,32088
 8001828:	1f07883a 	add	r3,r3,fp
 800182c:	18800015 	stw	r2,0(r3)
 8001830:	e0c00217 	ldw	r3,8(fp)
 8001834:	e0800317 	ldw	r2,12(fp)
 8001838:	1885383a 	mul	r2,r3,r2
 800183c:	10bfffc4 	addi	r2,r2,-1
 8001840:	1000010e 	bge	r2,zero,8001848 <conv+0x938>
 8001844:	10801fc4 	addi	r2,r2,127
 8001848:	1005d1fa 	srai	r2,r2,7
 800184c:	10800044 	addi	r2,r2,1
 8001850:	013ffff4 	movhi	r4,65535
 8001854:	211f5604 	addi	r4,r4,32088
 8001858:	2709883a 	add	r4,r4,fp
 800185c:	20c00017 	ldw	r3,0(r4)
 8001860:	18be2816 	blt	r3,r2,8001104 <__ram_exceptions_end+0xf7f80ec4>
   alt_u8 * d_ptr; d_ptr = data_mat;
   alt_u8 * f_ptr; f_ptr = weight_mat;
   int i=0, db=0, fb=0, r=0, c=0, result_c=0, counter = 0;

   // for every colume in filter
   for(i=0 ; i < filter_num ; ++i){
 8001864:	017ffff4 	movhi	r5,65535
 8001868:	295f5404 	addi	r5,r5,32080
 800186c:	2f0b883a 	add	r5,r5,fp
 8001870:	28800017 	ldw	r2,0(r5)
 8001874:	10800044 	addi	r2,r2,1
 8001878:	01bffff4 	movhi	r6,65535
 800187c:	319f5404 	addi	r6,r6,32080
 8001880:	370d883a 	add	r6,r6,fp
 8001884:	30800015 	stw	r2,0(r6)
 8001888:	00bffff4 	movhi	r2,65535
 800188c:	109f5404 	addi	r2,r2,32080
 8001890:	1705883a 	add	r2,r2,fp
 8001894:	10c00017 	ldw	r3,0(r2)
 8001898:	e0800417 	ldw	r2,16(fp)
 800189c:	18be1416 	blt	r3,r2,80010f0 <__ram_exceptions_end+0xf7f80eb0>
//   printf("================================== result ======================================\n");
//   for(c = 0; c < 121; c++)
//	   printf("%f ", (double)(*(output_mat+c)) / 16.0);

   //recovery to image
   matrix_to_imageCube(output_mat, temp_fmap, image_h, image_w, filter_num);
 80018a0:	00a0ab14 	movui	r2,33452
 80018a4:	013ffff4 	movhi	r4,65535
 80018a8:	211f5204 	addi	r4,r4,32072
 80018ac:	2709883a 	add	r4,r4,fp
 80018b0:	2087883a 	add	r3,r4,r2
 80018b4:	00a0ac14 	movui	r2,33456
 80018b8:	017ffff4 	movhi	r5,65535
 80018bc:	295f5204 	addi	r5,r5,32072
 80018c0:	2f0b883a 	add	r5,r5,fp
 80018c4:	2885883a 	add	r2,r5,r2
 80018c8:	e1000417 	ldw	r4,16(fp)
 80018cc:	d9000015 	stw	r4,0(sp)
 80018d0:	e1000617 	ldw	r4,24(fp)
 80018d4:	e1400517 	ldw	r5,20(fp)
 80018d8:	19800017 	ldw	r6,0(r3)
 80018dc:	11c00017 	ldw	r7,0(r2)
 80018e0:	80009b00 	call	80009b0 <matrix_to_imageCube>
   //printMatrix(temp_fmap, 40, 31, 16);

};
 80018e4:	e037883a 	mov	sp,fp
 80018e8:	dfc00117 	ldw	ra,4(sp)
 80018ec:	df000017 	ldw	fp,0(sp)
 80018f0:	dec00204 	addi	sp,sp,8
 80018f4:	f800283a 	ret

080018f8 <max_pooling>:

void max_pooling(alt_u8* input_fmap, alt_u8* output_fmap, int height, int width, int depth){
 80018f8:	defff504 	addi	sp,sp,-44
 80018fc:	df000a15 	stw	fp,40(sp)
 8001900:	df000a04 	addi	fp,sp,40
 8001904:	e13ffc15 	stw	r4,-16(fp)
 8001908:	e17ffd15 	stw	r5,-12(fp)
 800190c:	e1bffe15 	stw	r6,-8(fp)
 8001910:	e1ffff15 	stw	r7,-4(fp)
   int w = 0, h = 0, d = 0,count=0;
 8001914:	e03ff615 	stw	zero,-40(fp)
 8001918:	e03ff715 	stw	zero,-36(fp)
 800191c:	e03ff815 	stw	zero,-32(fp)
 8001920:	e03ff915 	stw	zero,-28(fp)
   while(h + 1 < height)
 8001924:	00007d06 	br	8001b1c <max_pooling+0x224>
   {
      while(w + 1 < width)
 8001928:	00007306 	br	8001af8 <max_pooling+0x200>
      {
         while(d < depth)
 800192c:	00006b06 	br	8001adc <max_pooling+0x1e4>
         {
            int i = 1;
 8001930:	00800044 	movi	r2,1
 8001934:	e0bffa15 	stw	r2,-24(fp)
            alt_u8 temp = 0;
 8001938:	e03ffb05 	stb	zero,-20(fp)
            temp = *(input_fmap + h * depth * width + w * depth + d);
 800193c:	e0fff717 	ldw	r3,-36(fp)
 8001940:	e0800117 	ldw	r2,4(fp)
 8001944:	1887383a 	mul	r3,r3,r2
 8001948:	e0bfff17 	ldw	r2,-4(fp)
 800194c:	1885383a 	mul	r2,r3,r2
 8001950:	1009883a 	mov	r4,r2
 8001954:	e0fff617 	ldw	r3,-40(fp)
 8001958:	e0800117 	ldw	r2,4(fp)
 800195c:	1885383a 	mul	r2,r3,r2
 8001960:	2087883a 	add	r3,r4,r2
 8001964:	e0bff817 	ldw	r2,-32(fp)
 8001968:	1885883a 	add	r2,r3,r2
 800196c:	e0fffc17 	ldw	r3,-16(fp)
 8001970:	1885883a 	add	r2,r3,r2
 8001974:	10800003 	ldbu	r2,0(r2)
 8001978:	e0bffb05 	stb	r2,-20(fp)
            for (i = 1; i < 4; i++){
 800197c:	00800044 	movi	r2,1
 8001980:	e0bffa15 	stw	r2,-24(fp)
 8001984:	00004706 	br	8001aa4 <max_pooling+0x1ac>
               if (temp >= *(input_fmap + (h + i/2) * depth * width + (w + i%2) * depth + d))
 8001988:	e0bffa17 	ldw	r2,-24(fp)
 800198c:	1006d7fa 	srli	r3,r2,31
 8001990:	1885883a 	add	r2,r3,r2
 8001994:	1005d07a 	srai	r2,r2,1
 8001998:	1007883a 	mov	r3,r2
 800199c:	e0bff717 	ldw	r2,-36(fp)
 80019a0:	1887883a 	add	r3,r3,r2
 80019a4:	e0800117 	ldw	r2,4(fp)
 80019a8:	1887383a 	mul	r3,r3,r2
 80019ac:	e0bfff17 	ldw	r2,-4(fp)
 80019b0:	1885383a 	mul	r2,r3,r2
 80019b4:	1009883a 	mov	r4,r2
 80019b8:	e0fffa17 	ldw	r3,-24(fp)
 80019bc:	00a00034 	movhi	r2,32768
 80019c0:	10800044 	addi	r2,r2,1
 80019c4:	1884703a 	and	r2,r3,r2
 80019c8:	1000040e 	bge	r2,zero,80019dc <max_pooling+0xe4>
 80019cc:	10bfffc4 	addi	r2,r2,-1
 80019d0:	00ffff84 	movi	r3,-2
 80019d4:	10c4b03a 	or	r2,r2,r3
 80019d8:	10800044 	addi	r2,r2,1
 80019dc:	1007883a 	mov	r3,r2
 80019e0:	e0bff617 	ldw	r2,-40(fp)
 80019e4:	1887883a 	add	r3,r3,r2
 80019e8:	e0800117 	ldw	r2,4(fp)
 80019ec:	1885383a 	mul	r2,r3,r2
 80019f0:	2087883a 	add	r3,r4,r2
 80019f4:	e0bff817 	ldw	r2,-32(fp)
 80019f8:	1885883a 	add	r2,r3,r2
 80019fc:	e0fffc17 	ldw	r3,-16(fp)
 8001a00:	1885883a 	add	r2,r3,r2
 8001a04:	10800003 	ldbu	r2,0(r2)
 8001a08:	10803fcc 	andi	r2,r2,255
 8001a0c:	e0fffb03 	ldbu	r3,-20(fp)
 8001a10:	18802136 	bltu	r3,r2,8001a98 <max_pooling+0x1a0>
                  temp = *(input_fmap + (h + i/2) * depth * width + (w + i%2) * depth + d);
 8001a14:	e0bffa17 	ldw	r2,-24(fp)
 8001a18:	1006d7fa 	srli	r3,r2,31
 8001a1c:	1885883a 	add	r2,r3,r2
 8001a20:	1005d07a 	srai	r2,r2,1
 8001a24:	1007883a 	mov	r3,r2
 8001a28:	e0bff717 	ldw	r2,-36(fp)
 8001a2c:	1887883a 	add	r3,r3,r2
 8001a30:	e0800117 	ldw	r2,4(fp)
 8001a34:	1887383a 	mul	r3,r3,r2
 8001a38:	e0bfff17 	ldw	r2,-4(fp)
 8001a3c:	1885383a 	mul	r2,r3,r2
 8001a40:	1009883a 	mov	r4,r2
 8001a44:	e0fffa17 	ldw	r3,-24(fp)
 8001a48:	00a00034 	movhi	r2,32768
 8001a4c:	10800044 	addi	r2,r2,1
 8001a50:	1884703a 	and	r2,r3,r2
 8001a54:	1000040e 	bge	r2,zero,8001a68 <max_pooling+0x170>
 8001a58:	10bfffc4 	addi	r2,r2,-1
 8001a5c:	00ffff84 	movi	r3,-2
 8001a60:	10c4b03a 	or	r2,r2,r3
 8001a64:	10800044 	addi	r2,r2,1
 8001a68:	1007883a 	mov	r3,r2
 8001a6c:	e0bff617 	ldw	r2,-40(fp)
 8001a70:	1887883a 	add	r3,r3,r2
 8001a74:	e0800117 	ldw	r2,4(fp)
 8001a78:	1885383a 	mul	r2,r3,r2
 8001a7c:	2087883a 	add	r3,r4,r2
 8001a80:	e0bff817 	ldw	r2,-32(fp)
 8001a84:	1885883a 	add	r2,r3,r2
 8001a88:	e0fffc17 	ldw	r3,-16(fp)
 8001a8c:	1885883a 	add	r2,r3,r2
 8001a90:	10800003 	ldbu	r2,0(r2)
 8001a94:	e0bffb05 	stb	r2,-20(fp)
         while(d < depth)
         {
            int i = 1;
            alt_u8 temp = 0;
            temp = *(input_fmap + h * depth * width + w * depth + d);
            for (i = 1; i < 4; i++){
 8001a98:	e0bffa17 	ldw	r2,-24(fp)
 8001a9c:	10800044 	addi	r2,r2,1
 8001aa0:	e0bffa15 	stw	r2,-24(fp)
 8001aa4:	e0bffa17 	ldw	r2,-24(fp)
 8001aa8:	10800110 	cmplti	r2,r2,4
 8001aac:	103fb61e 	bne	r2,zero,8001988 <__ram_exceptions_end+0xf7f81748>
               if (temp >= *(input_fmap + (h + i/2) * depth * width + (w + i%2) * depth + d))
                  temp = *(input_fmap + (h + i/2) * depth * width + (w + i%2) * depth + d);
            }
            *(output_fmap + count) = temp;
 8001ab0:	e0bff917 	ldw	r2,-28(fp)
 8001ab4:	e0fffd17 	ldw	r3,-12(fp)
 8001ab8:	1885883a 	add	r2,r3,r2
 8001abc:	e0fffb03 	ldbu	r3,-20(fp)
 8001ac0:	10c00005 	stb	r3,0(r2)
            count = count + 1;
 8001ac4:	e0bff917 	ldw	r2,-28(fp)
 8001ac8:	10800044 	addi	r2,r2,1
 8001acc:	e0bff915 	stw	r2,-28(fp)
            d = d + 1;
 8001ad0:	e0bff817 	ldw	r2,-32(fp)
 8001ad4:	10800044 	addi	r2,r2,1
 8001ad8:	e0bff815 	stw	r2,-32(fp)
   int w = 0, h = 0, d = 0,count=0;
   while(h + 1 < height)
   {
      while(w + 1 < width)
      {
         while(d < depth)
 8001adc:	e0fff817 	ldw	r3,-32(fp)
 8001ae0:	e0800117 	ldw	r2,4(fp)
 8001ae4:	18bf9216 	blt	r3,r2,8001930 <__ram_exceptions_end+0xf7f816f0>
            }
            *(output_fmap + count) = temp;
            count = count + 1;
            d = d + 1;
         }
         w = w + 2;
 8001ae8:	e0bff617 	ldw	r2,-40(fp)
 8001aec:	10800084 	addi	r2,r2,2
 8001af0:	e0bff615 	stw	r2,-40(fp)
         d = 0;
 8001af4:	e03ff815 	stw	zero,-32(fp)

void max_pooling(alt_u8* input_fmap, alt_u8* output_fmap, int height, int width, int depth){
   int w = 0, h = 0, d = 0,count=0;
   while(h + 1 < height)
   {
      while(w + 1 < width)
 8001af8:	e0bff617 	ldw	r2,-40(fp)
 8001afc:	10c00044 	addi	r3,r2,1
 8001b00:	e0bfff17 	ldw	r2,-4(fp)
 8001b04:	18bf8916 	blt	r3,r2,800192c <__ram_exceptions_end+0xf7f816ec>
            d = d + 1;
         }
         w = w + 2;
         d = 0;
      }
      h = h + 2;
 8001b08:	e0bff717 	ldw	r2,-36(fp)
 8001b0c:	10800084 	addi	r2,r2,2
 8001b10:	e0bff715 	stw	r2,-36(fp)
      w = 0;
 8001b14:	e03ff615 	stw	zero,-40(fp)
      d = 0;
 8001b18:	e03ff815 	stw	zero,-32(fp)

};

void max_pooling(alt_u8* input_fmap, alt_u8* output_fmap, int height, int width, int depth){
   int w = 0, h = 0, d = 0,count=0;
   while(h + 1 < height)
 8001b1c:	e0bff717 	ldw	r2,-36(fp)
 8001b20:	10c00044 	addi	r3,r2,1
 8001b24:	e0bffe17 	ldw	r2,-8(fp)
 8001b28:	18bf7f16 	blt	r3,r2,8001928 <__ram_exceptions_end+0xf7f816e8>
      }
      h = h + 2;
      w = 0;
      d = 0;
   }
};
 8001b2c:	e037883a 	mov	sp,fp
 8001b30:	df000017 	ldw	fp,0(sp)
 8001b34:	dec00104 	addi	sp,sp,4
 8001b38:	f800283a 	ret

08001b3c <mean_pooling>:
void mean_pooling(alt_u8* input_fmap, alt_u8* output_fmap, int height, int width, int depth){
 8001b3c:	defff504 	addi	sp,sp,-44
 8001b40:	df000a15 	stw	fp,40(sp)
 8001b44:	df000a04 	addi	fp,sp,40
 8001b48:	e13ffc15 	stw	r4,-16(fp)
 8001b4c:	e17ffd15 	stw	r5,-12(fp)
 8001b50:	e1bffe15 	stw	r6,-8(fp)
 8001b54:	e1ffff15 	stw	r7,-4(fp)
   int w = 0, h = 0, d = 0,count=0;
 8001b58:	e03ff615 	stw	zero,-40(fp)
 8001b5c:	e03ff715 	stw	zero,-36(fp)
 8001b60:	e03ff815 	stw	zero,-32(fp)
 8001b64:	e03ff915 	stw	zero,-28(fp)
   while(h + 1 < height)
 8001b68:	00005f06 	br	8001ce8 <mean_pooling+0x1ac>
   {
      while(w + 1 < width)
 8001b6c:	00005506 	br	8001cc4 <mean_pooling+0x188>
      {
         while(d < depth)
 8001b70:	00004d06 	br	8001ca8 <mean_pooling+0x16c>
         {
            int i = 1;
 8001b74:	00800044 	movi	r2,1
 8001b78:	e0bffa15 	stw	r2,-24(fp)
            alt_u16 temp = 0;
 8001b7c:	e03ffb0d 	sth	zero,-20(fp)
            temp = (alt_u16)(*(input_fmap + h * depth * width + w * depth + d));
 8001b80:	e0fff717 	ldw	r3,-36(fp)
 8001b84:	e0800117 	ldw	r2,4(fp)
 8001b88:	1887383a 	mul	r3,r3,r2
 8001b8c:	e0bfff17 	ldw	r2,-4(fp)
 8001b90:	1885383a 	mul	r2,r3,r2
 8001b94:	1009883a 	mov	r4,r2
 8001b98:	e0fff617 	ldw	r3,-40(fp)
 8001b9c:	e0800117 	ldw	r2,4(fp)
 8001ba0:	1885383a 	mul	r2,r3,r2
 8001ba4:	2087883a 	add	r3,r4,r2
 8001ba8:	e0bff817 	ldw	r2,-32(fp)
 8001bac:	1885883a 	add	r2,r3,r2
 8001bb0:	e0fffc17 	ldw	r3,-16(fp)
 8001bb4:	1885883a 	add	r2,r3,r2
 8001bb8:	10800003 	ldbu	r2,0(r2)
 8001bbc:	10803fcc 	andi	r2,r2,255
 8001bc0:	e0bffb0d 	sth	r2,-20(fp)
            for (i = 1; i < 4; i++){
 8001bc4:	00800044 	movi	r2,1
 8001bc8:	e0bffa15 	stw	r2,-24(fp)
 8001bcc:	00002706 	br	8001c6c <mean_pooling+0x130>
               temp = temp + (alt_u16) (*(input_fmap + (h + i/2) * depth * width + (w + i%2) * depth + d));
 8001bd0:	e0bffa17 	ldw	r2,-24(fp)
 8001bd4:	1006d7fa 	srli	r3,r2,31
 8001bd8:	1885883a 	add	r2,r3,r2
 8001bdc:	1005d07a 	srai	r2,r2,1
 8001be0:	1007883a 	mov	r3,r2
 8001be4:	e0bff717 	ldw	r2,-36(fp)
 8001be8:	1887883a 	add	r3,r3,r2
 8001bec:	e0800117 	ldw	r2,4(fp)
 8001bf0:	1887383a 	mul	r3,r3,r2
 8001bf4:	e0bfff17 	ldw	r2,-4(fp)
 8001bf8:	1885383a 	mul	r2,r3,r2
 8001bfc:	1009883a 	mov	r4,r2
 8001c00:	e0fffa17 	ldw	r3,-24(fp)
 8001c04:	00a00034 	movhi	r2,32768
 8001c08:	10800044 	addi	r2,r2,1
 8001c0c:	1884703a 	and	r2,r3,r2
 8001c10:	1000040e 	bge	r2,zero,8001c24 <mean_pooling+0xe8>
 8001c14:	10bfffc4 	addi	r2,r2,-1
 8001c18:	00ffff84 	movi	r3,-2
 8001c1c:	10c4b03a 	or	r2,r2,r3
 8001c20:	10800044 	addi	r2,r2,1
 8001c24:	1007883a 	mov	r3,r2
 8001c28:	e0bff617 	ldw	r2,-40(fp)
 8001c2c:	1887883a 	add	r3,r3,r2
 8001c30:	e0800117 	ldw	r2,4(fp)
 8001c34:	1885383a 	mul	r2,r3,r2
 8001c38:	2087883a 	add	r3,r4,r2
 8001c3c:	e0bff817 	ldw	r2,-32(fp)
 8001c40:	1885883a 	add	r2,r3,r2
 8001c44:	e0fffc17 	ldw	r3,-16(fp)
 8001c48:	1885883a 	add	r2,r3,r2
 8001c4c:	10800003 	ldbu	r2,0(r2)
 8001c50:	10c03fcc 	andi	r3,r2,255
 8001c54:	e0bffb0b 	ldhu	r2,-20(fp)
 8001c58:	1885883a 	add	r2,r3,r2
 8001c5c:	e0bffb0d 	sth	r2,-20(fp)
         while(d < depth)
         {
            int i = 1;
            alt_u16 temp = 0;
            temp = (alt_u16)(*(input_fmap + h * depth * width + w * depth + d));
            for (i = 1; i < 4; i++){
 8001c60:	e0bffa17 	ldw	r2,-24(fp)
 8001c64:	10800044 	addi	r2,r2,1
 8001c68:	e0bffa15 	stw	r2,-24(fp)
 8001c6c:	e0bffa17 	ldw	r2,-24(fp)
 8001c70:	10800110 	cmplti	r2,r2,4
 8001c74:	103fd61e 	bne	r2,zero,8001bd0 <__ram_exceptions_end+0xf7f81990>
               temp = temp + (alt_u16) (*(input_fmap + (h + i/2) * depth * width + (w + i%2) * depth + d));
            }
            //printf("%f\n", temp);
            *(output_fmap + count) = (((alt_u8)(temp >> 2)));
 8001c78:	e0bff917 	ldw	r2,-28(fp)
 8001c7c:	e0fffd17 	ldw	r3,-12(fp)
 8001c80:	1885883a 	add	r2,r3,r2
 8001c84:	e0fffb0b 	ldhu	r3,-20(fp)
 8001c88:	1806d0ba 	srli	r3,r3,2
 8001c8c:	10c00005 	stb	r3,0(r2)
            count = count + 1;
 8001c90:	e0bff917 	ldw	r2,-28(fp)
 8001c94:	10800044 	addi	r2,r2,1
 8001c98:	e0bff915 	stw	r2,-28(fp)
            d = d + 1;
 8001c9c:	e0bff817 	ldw	r2,-32(fp)
 8001ca0:	10800044 	addi	r2,r2,1
 8001ca4:	e0bff815 	stw	r2,-32(fp)
   int w = 0, h = 0, d = 0,count=0;
   while(h + 1 < height)
   {
      while(w + 1 < width)
      {
         while(d < depth)
 8001ca8:	e0fff817 	ldw	r3,-32(fp)
 8001cac:	e0800117 	ldw	r2,4(fp)
 8001cb0:	18bfb016 	blt	r3,r2,8001b74 <__ram_exceptions_end+0xf7f81934>
            //printf("%f\n", temp);
            *(output_fmap + count) = (((alt_u8)(temp >> 2)));
            count = count + 1;
            d = d + 1;
         }
         w = w + 2;
 8001cb4:	e0bff617 	ldw	r2,-40(fp)
 8001cb8:	10800084 	addi	r2,r2,2
 8001cbc:	e0bff615 	stw	r2,-40(fp)
         d = 0;
 8001cc0:	e03ff815 	stw	zero,-32(fp)
};
void mean_pooling(alt_u8* input_fmap, alt_u8* output_fmap, int height, int width, int depth){
   int w = 0, h = 0, d = 0,count=0;
   while(h + 1 < height)
   {
      while(w + 1 < width)
 8001cc4:	e0bff617 	ldw	r2,-40(fp)
 8001cc8:	10c00044 	addi	r3,r2,1
 8001ccc:	e0bfff17 	ldw	r2,-4(fp)
 8001cd0:	18bfa716 	blt	r3,r2,8001b70 <__ram_exceptions_end+0xf7f81930>
            d = d + 1;
         }
         w = w + 2;
         d = 0;
      }
      h = h + 2;
 8001cd4:	e0bff717 	ldw	r2,-36(fp)
 8001cd8:	10800084 	addi	r2,r2,2
 8001cdc:	e0bff715 	stw	r2,-36(fp)
      w = 0;
 8001ce0:	e03ff615 	stw	zero,-40(fp)
      d = 0;
 8001ce4:	e03ff815 	stw	zero,-32(fp)
      d = 0;
   }
};
void mean_pooling(alt_u8* input_fmap, alt_u8* output_fmap, int height, int width, int depth){
   int w = 0, h = 0, d = 0,count=0;
   while(h + 1 < height)
 8001ce8:	e0bff717 	ldw	r2,-36(fp)
 8001cec:	10c00044 	addi	r3,r2,1
 8001cf0:	e0bffe17 	ldw	r2,-8(fp)
 8001cf4:	18bf9d16 	blt	r3,r2,8001b6c <__ram_exceptions_end+0xf7f8192c>
      }
      h = h + 2;
      w = 0;
      d = 0;
   }
};
 8001cf8:	e037883a 	mov	sp,fp
 8001cfc:	df000017 	ldw	fp,0(sp)
 8001d00:	dec00104 	addi	sp,sp,4
 8001d04:	f800283a 	ret

08001d08 <conv_interface_1>:
void conv_interface_1(alt_u8* first_conv, alt_u8* spectrum, alt_u8* con2_fmap){
 8001d08:	defffe04 	addi	sp,sp,-8
 8001d0c:	dfc00115 	stw	ra,4(sp)
 8001d10:	df000015 	stw	fp,0(sp)
 8001d14:	d839883a 	mov	fp,sp
 8001d18:	023fffb4 	movhi	r8,65534
 8001d1c:	42202004 	addi	r8,r8,-32640
 8001d20:	da37883a 	add	sp,sp,r8
 8001d24:	008000b4 	movhi	r2,2
 8001d28:	109fd804 	addi	r2,r2,32608
 8001d2c:	00ffffb4 	movhi	r3,65534
 8001d30:	18e02504 	addi	r3,r3,-32620
 8001d34:	1f07883a 	add	r3,r3,fp
 8001d38:	1885883a 	add	r2,r3,r2
 8001d3c:	11000015 	stw	r4,0(r2)
 8001d40:	008000b4 	movhi	r2,2
 8001d44:	109fd904 	addi	r2,r2,32612
 8001d48:	013fffb4 	movhi	r4,65534
 8001d4c:	21202504 	addi	r4,r4,-32620
 8001d50:	2709883a 	add	r4,r4,fp
 8001d54:	2085883a 	add	r2,r4,r2
 8001d58:	11400015 	stw	r5,0(r2)
 8001d5c:	008000b4 	movhi	r2,2
 8001d60:	109fda04 	addi	r2,r2,32616
 8001d64:	00ffffb4 	movhi	r3,65534
 8001d68:	18e02504 	addi	r3,r3,-32620
 8001d6c:	1f07883a 	add	r3,r3,fp
 8001d70:	1885883a 	add	r2,r3,r2
 8001d74:	11800015 	stw	r6,0(r2)
   /* Convolution 1 */
   alt_u8 flatten_mat1[1240][100] = {0};
 8001d78:	00ffffb4 	movhi	r3,65534
 8001d7c:	18e02504 	addi	r3,r3,-32620
 8001d80:	1f07883a 	add	r3,r3,fp
 8001d84:	008000b4 	movhi	r2,2
 8001d88:	10b91804 	addi	r2,r2,-7072
 8001d8c:	1809883a 	mov	r4,r3
 8001d90:	000b883a 	mov	r5,zero
 8001d94:	100d883a 	mov	r6,r2
 8001d98:	8003e880 	call	8003e88 <memset>
   alt_16 output_mat[1240][16] = {0};
 8001d9c:	008000b4 	movhi	r2,2
 8001da0:	10b91804 	addi	r2,r2,-7072
 8001da4:	013fffb4 	movhi	r4,65534
 8001da8:	21202504 	addi	r4,r4,-32620
 8001dac:	2709883a 	add	r4,r4,fp
 8001db0:	2085883a 	add	r2,r4,r2
 8001db4:	1007883a 	mov	r3,r2
 8001db8:	00a6c014 	movui	r2,39680
 8001dbc:	1809883a 	mov	r4,r3
 8001dc0:	000b883a 	mov	r5,zero
 8001dc4:	100d883a 	mov	r6,r2
 8001dc8:	8003e880 	call	8003e88 <memset>
   flatten_matrix(flatten_mat1, spectrum, 49, 40, 10, 10, 1);
 8001dcc:	008000b4 	movhi	r2,2
 8001dd0:	109fd904 	addi	r2,r2,32612
 8001dd4:	00ffffb4 	movhi	r3,65534
 8001dd8:	18e02504 	addi	r3,r3,-32620
 8001ddc:	1f07883a 	add	r3,r3,fp
 8001de0:	1885883a 	add	r2,r3,r2
 8001de4:	00c00284 	movi	r3,10
 8001de8:	d8c00015 	stw	r3,0(sp)
 8001dec:	00c00284 	movi	r3,10
 8001df0:	d8c00115 	stw	r3,4(sp)
 8001df4:	00c00044 	movi	r3,1
 8001df8:	d8c00215 	stw	r3,8(sp)
 8001dfc:	013fffb4 	movhi	r4,65534
 8001e00:	21202504 	addi	r4,r4,-32620
 8001e04:	2709883a 	add	r4,r4,fp
 8001e08:	11400017 	ldw	r5,0(r2)
 8001e0c:	01800c44 	movi	r6,49
 8001e10:	01c00a04 	movi	r7,40
 8001e14:	80008000 	call	8000800 <flatten_matrix>
   conv(flatten_mat1, 40, 31, first_conv, 10, 10, 16, con2_fmap, output_mat);
 8001e18:	008000b4 	movhi	r2,2
 8001e1c:	109fd804 	addi	r2,r2,32608
 8001e20:	013fffb4 	movhi	r4,65534
 8001e24:	21202504 	addi	r4,r4,-32620
 8001e28:	2709883a 	add	r4,r4,fp
 8001e2c:	2087883a 	add	r3,r4,r2
 8001e30:	00800284 	movi	r2,10
 8001e34:	d8800015 	stw	r2,0(sp)
 8001e38:	00800284 	movi	r2,10
 8001e3c:	d8800115 	stw	r2,4(sp)
 8001e40:	00800404 	movi	r2,16
 8001e44:	d8800215 	stw	r2,8(sp)
 8001e48:	008000b4 	movhi	r2,2
 8001e4c:	109fda04 	addi	r2,r2,32616
 8001e50:	013fffb4 	movhi	r4,65534
 8001e54:	21202504 	addi	r4,r4,-32620
 8001e58:	2709883a 	add	r4,r4,fp
 8001e5c:	2085883a 	add	r2,r4,r2
 8001e60:	10800017 	ldw	r2,0(r2)
 8001e64:	d8800315 	stw	r2,12(sp)
 8001e68:	008000b4 	movhi	r2,2
 8001e6c:	10b91804 	addi	r2,r2,-7072
 8001e70:	013fffb4 	movhi	r4,65534
 8001e74:	21202504 	addi	r4,r4,-32620
 8001e78:	2709883a 	add	r4,r4,fp
 8001e7c:	2085883a 	add	r2,r4,r2
 8001e80:	d8800415 	stw	r2,16(sp)
 8001e84:	013fffb4 	movhi	r4,65534
 8001e88:	21202504 	addi	r4,r4,-32620
 8001e8c:	2709883a 	add	r4,r4,fp
 8001e90:	01400a04 	movi	r5,40
 8001e94:	018007c4 	movi	r6,31
 8001e98:	19c00017 	ldw	r7,0(r3)
 8001e9c:	8000f100 	call	8000f10 <conv>
};
 8001ea0:	e037883a 	mov	sp,fp
 8001ea4:	dfc00117 	ldw	ra,4(sp)
 8001ea8:	df000017 	ldw	fp,0(sp)
 8001eac:	dec00204 	addi	sp,sp,8
 8001eb0:	f800283a 	ret

08001eb4 <conv_interface_2>:

void conv_interface_2(alt_u8* second_conv, alt_u8* con2_fmap, alt_u8* conv_finish_fmap){
 8001eb4:	defffe04 	addi	sp,sp,-8
 8001eb8:	dfc00115 	stw	ra,4(sp)
 8001ebc:	df000015 	stw	fp,0(sp)
 8001ec0:	d839883a 	mov	fp,sp
 8001ec4:	023ffe74 	movhi	r8,65529
 8001ec8:	42131004 	addi	r8,r8,19520
 8001ecc:	da37883a 	add	sp,sp,r8
 8001ed0:	008001f4 	movhi	r2,7
 8001ed4:	10ace804 	addi	r2,r2,-19552
 8001ed8:	00fffe74 	movhi	r3,65529
 8001edc:	18d31504 	addi	r3,r3,19540
 8001ee0:	1f07883a 	add	r3,r3,fp
 8001ee4:	1885883a 	add	r2,r3,r2
 8001ee8:	11000015 	stw	r4,0(r2)
 8001eec:	008001f4 	movhi	r2,7
 8001ef0:	10ace904 	addi	r2,r2,-19548
 8001ef4:	013ffe74 	movhi	r4,65529
 8001ef8:	21131504 	addi	r4,r4,19540
 8001efc:	2709883a 	add	r4,r4,fp
 8001f00:	2085883a 	add	r2,r4,r2
 8001f04:	11400015 	stw	r5,0(r2)
 8001f08:	008001f4 	movhi	r2,7
 8001f0c:	10acea04 	addi	r2,r2,-19544
 8001f10:	017ffe74 	movhi	r5,65529
 8001f14:	29531504 	addi	r5,r5,19540
 8001f18:	2f0b883a 	add	r5,r5,fp
 8001f1c:	2885883a 	add	r2,r5,r2
 8001f20:	11800015 	stw	r6,0(r2)
   /* Convolution 2 */
   alt_u8 flatten_mat2[972][400] = {0};
 8001f24:	00fffe74 	movhi	r3,65529
 8001f28:	18d31504 	addi	r3,r3,19540
 8001f2c:	1f07883a 	add	r3,r3,fp
 8001f30:	008001b4 	movhi	r2,6
 8001f34:	10bbb004 	addi	r2,r2,-4416
 8001f38:	1809883a 	mov	r4,r3
 8001f3c:	000b883a 	mov	r5,zero
 8001f40:	100d883a 	mov	r6,r2
 8001f44:	8003e880 	call	8003e88 <memset>
   alt_u8  temp_fmap[36][27][16] = {0};
 8001f48:	008001b4 	movhi	r2,6
 8001f4c:	10bbb004 	addi	r2,r2,-4416
 8001f50:	00fffe74 	movhi	r3,65529
 8001f54:	18d31504 	addi	r3,r3,19540
 8001f58:	1f07883a 	add	r3,r3,fp
 8001f5c:	1885883a 	add	r2,r3,r2
 8001f60:	1007883a 	mov	r3,r2
 8001f64:	008f3004 	movi	r2,15552
 8001f68:	1809883a 	mov	r4,r3
 8001f6c:	000b883a 	mov	r5,zero
 8001f70:	100d883a 	mov	r6,r2
 8001f74:	8003e880 	call	8003e88 <memset>
   alt_u8 temp2_fmap[18][13][16] = {0};
 8001f78:	008001b4 	movhi	r2,6
 8001f7c:	108ae004 	addi	r2,r2,11136
 8001f80:	013ffe74 	movhi	r4,65529
 8001f84:	21131504 	addi	r4,r4,19540
 8001f88:	2709883a 	add	r4,r4,fp
 8001f8c:	2085883a 	add	r2,r4,r2
 8001f90:	1007883a 	mov	r3,r2
 8001f94:	0083a804 	movi	r2,3744
 8001f98:	1809883a 	mov	r4,r3
 8001f9c:	000b883a 	mov	r5,zero
 8001fa0:	100d883a 	mov	r6,r2
 8001fa4:	8003e880 	call	8003e88 <memset>
   alt_16 output_mat[972][16] = {0};
 8001fa8:	008001b4 	movhi	r2,6
 8001fac:	108e8804 	addi	r2,r2,14880
 8001fb0:	017ffe74 	movhi	r5,65529
 8001fb4:	29531504 	addi	r5,r5,19540
 8001fb8:	2f0b883a 	add	r5,r5,fp
 8001fbc:	2885883a 	add	r2,r5,r2
 8001fc0:	1007883a 	mov	r3,r2
 8001fc4:	009e6004 	movi	r2,31104
 8001fc8:	1809883a 	mov	r4,r3
 8001fcc:	000b883a 	mov	r5,zero
 8001fd0:	100d883a 	mov	r6,r2
 8001fd4:	8003e880 	call	8003e88 <memset>
   flatten_matrix(flatten_mat2, con2_fmap, 40, 31, 5, 5, 16);
 8001fd8:	008001f4 	movhi	r2,7
 8001fdc:	10ace904 	addi	r2,r2,-19548
 8001fe0:	00fffe74 	movhi	r3,65529
 8001fe4:	18d31504 	addi	r3,r3,19540
 8001fe8:	1f07883a 	add	r3,r3,fp
 8001fec:	1885883a 	add	r2,r3,r2
 8001ff0:	00c00144 	movi	r3,5
 8001ff4:	d8c00015 	stw	r3,0(sp)
 8001ff8:	00c00144 	movi	r3,5
 8001ffc:	d8c00115 	stw	r3,4(sp)
 8002000:	00c00404 	movi	r3,16
 8002004:	d8c00215 	stw	r3,8(sp)
 8002008:	013ffe74 	movhi	r4,65529
 800200c:	21131504 	addi	r4,r4,19540
 8002010:	2709883a 	add	r4,r4,fp
 8002014:	11400017 	ldw	r5,0(r2)
 8002018:	01800a04 	movi	r6,40
 800201c:	01c007c4 	movi	r7,31
 8002020:	80008000 	call	8000800 <flatten_matrix>
   conv(flatten_mat2, 36, 27, second_conv, 1, 400, 16, temp_fmap, output_mat);
 8002024:	008001f4 	movhi	r2,7
 8002028:	10ace804 	addi	r2,r2,-19552
 800202c:	013ffe74 	movhi	r4,65529
 8002030:	21131504 	addi	r4,r4,19540
 8002034:	2709883a 	add	r4,r4,fp
 8002038:	2087883a 	add	r3,r4,r2
 800203c:	00800044 	movi	r2,1
 8002040:	d8800015 	stw	r2,0(sp)
 8002044:	00806404 	movi	r2,400
 8002048:	d8800115 	stw	r2,4(sp)
 800204c:	00800404 	movi	r2,16
 8002050:	d8800215 	stw	r2,8(sp)
 8002054:	008001b4 	movhi	r2,6
 8002058:	10bbb004 	addi	r2,r2,-4416
 800205c:	017ffe74 	movhi	r5,65529
 8002060:	29531504 	addi	r5,r5,19540
 8002064:	2f0b883a 	add	r5,r5,fp
 8002068:	2885883a 	add	r2,r5,r2
 800206c:	d8800315 	stw	r2,12(sp)
 8002070:	008001b4 	movhi	r2,6
 8002074:	108e8804 	addi	r2,r2,14880
 8002078:	013ffe74 	movhi	r4,65529
 800207c:	21131504 	addi	r4,r4,19540
 8002080:	2709883a 	add	r4,r4,fp
 8002084:	2085883a 	add	r2,r4,r2
 8002088:	d8800415 	stw	r2,16(sp)
 800208c:	013ffe74 	movhi	r4,65529
 8002090:	21131504 	addi	r4,r4,19540
 8002094:	2709883a 	add	r4,r4,fp
 8002098:	01400904 	movi	r5,36
 800209c:	018006c4 	movi	r6,27
 80020a0:	19c00017 	ldw	r7,0(r3)
 80020a4:	8000f100 	call	8000f10 <conv>
   printf("Output for second conv: ");
 80020a8:	01020074 	movhi	r4,2049
 80020ac:	2108af04 	addi	r4,r4,8892
 80020b0:	8003fd80 	call	8003fd8 <printf>
   printf("%f\n", (double)((temp_fmap[0][0][5])) / 16.0);
 80020b4:	008001b4 	movhi	r2,6
 80020b8:	10bbb004 	addi	r2,r2,-4416
 80020bc:	017ffe74 	movhi	r5,65529
 80020c0:	29531504 	addi	r5,r5,19540
 80020c4:	2f0b883a 	add	r5,r5,fp
 80020c8:	2885883a 	add	r2,r5,r2
 80020cc:	10800143 	ldbu	r2,5(r2)
 80020d0:	10803fcc 	andi	r2,r2,255
 80020d4:	1009883a 	mov	r4,r2
 80020d8:	8003c540 	call	8003c54 <__floatunsidf>
 80020dc:	100b883a 	mov	r5,r2
 80020e0:	180d883a 	mov	r6,r3
 80020e4:	2809883a 	mov	r4,r5
 80020e8:	300b883a 	mov	r5,r6
 80020ec:	000d883a 	mov	r6,zero
 80020f0:	01d00c34 	movhi	r7,16432
 80020f4:	80032b80 	call	80032b8 <__divdf3>
 80020f8:	1009883a 	mov	r4,r2
 80020fc:	180b883a 	mov	r5,r3
 8002100:	2005883a 	mov	r2,r4
 8002104:	2807883a 	mov	r3,r5
 8002108:	01020074 	movhi	r4,2049
 800210c:	2108b604 	addi	r4,r4,8920
 8002110:	100b883a 	mov	r5,r2
 8002114:	180d883a 	mov	r6,r3
 8002118:	8003fd80 	call	8003fd8 <printf>
   max_pooling(temp_fmap, temp2_fmap, 36, 27, 16);
 800211c:	008001b4 	movhi	r2,6
 8002120:	10bbb004 	addi	r2,r2,-4416
 8002124:	00fffe74 	movhi	r3,65529
 8002128:	18d31504 	addi	r3,r3,19540
 800212c:	1f07883a 	add	r3,r3,fp
 8002130:	1889883a 	add	r4,r3,r2
 8002134:	008001b4 	movhi	r2,6
 8002138:	108ae004 	addi	r2,r2,11136
 800213c:	017ffe74 	movhi	r5,65529
 8002140:	29531504 	addi	r5,r5,19540
 8002144:	2f0b883a 	add	r5,r5,fp
 8002148:	2887883a 	add	r3,r5,r2
 800214c:	00800404 	movi	r2,16
 8002150:	d8800015 	stw	r2,0(sp)
 8002154:	180b883a 	mov	r5,r3
 8002158:	01800904 	movi	r6,36
 800215c:	01c006c4 	movi	r7,27
 8002160:	80018f80 	call	80018f8 <max_pooling>
   mean_pooling(temp2_fmap, conv_finish_fmap, 9, 6, 16);
 8002164:	008001b4 	movhi	r2,6
 8002168:	108ae004 	addi	r2,r2,11136
 800216c:	00fffe74 	movhi	r3,65529
 8002170:	18d31504 	addi	r3,r3,19540
 8002174:	1f07883a 	add	r3,r3,fp
 8002178:	1889883a 	add	r4,r3,r2
 800217c:	008001f4 	movhi	r2,7
 8002180:	10acea04 	addi	r2,r2,-19544
 8002184:	017ffe74 	movhi	r5,65529
 8002188:	29531504 	addi	r5,r5,19540
 800218c:	2f0b883a 	add	r5,r5,fp
 8002190:	2885883a 	add	r2,r5,r2
 8002194:	00c00404 	movi	r3,16
 8002198:	d8c00015 	stw	r3,0(sp)
 800219c:	11400017 	ldw	r5,0(r2)
 80021a0:	01800244 	movi	r6,9
 80021a4:	01c00184 	movi	r7,6
 80021a8:	8001b3c0 	call	8001b3c <mean_pooling>

};
 80021ac:	e037883a 	mov	sp,fp
 80021b0:	dfc00117 	ldw	ra,4(sp)
 80021b4:	df000017 	ldw	fp,0(sp)
 80021b8:	dec00204 	addi	sp,sp,8
 80021bc:	f800283a 	ret

080021c0 <total_conv>:

void total_conv(alt_u8* first_conv, alt_u8* second_conv, alt_u8* spectrum, alt_u8* conv_finish_fmap){
 80021c0:	deec9704 	addi	sp,sp,-19876
 80021c4:	dfd36815 	stw	ra,19872(sp)
 80021c8:	df136715 	stw	fp,19868(sp)
 80021cc:	df136704 	addi	fp,sp,19868
 80021d0:	e13ffc15 	stw	r4,-16(fp)
 80021d4:	e17ffd15 	stw	r5,-12(fp)
 80021d8:	e1bffe15 	stw	r6,-8(fp)
 80021dc:	e1ffff15 	stw	r7,-4(fp)
   alt_u8  con2_fmap[40][31][16] = {0};
 80021e0:	e0ec9c04 	addi	r3,fp,-19856
 80021e4:	00936004 	movi	r2,19840
 80021e8:	1809883a 	mov	r4,r3
 80021ec:	000b883a 	mov	r5,zero
 80021f0:	100d883a 	mov	r6,r2
 80021f4:	8003e880 	call	8003e88 <memset>
   conv_interface_1( first_conv, spectrum, con2_fmap);
 80021f8:	e0ac9c04 	addi	r2,fp,-19856
 80021fc:	e13ffc17 	ldw	r4,-16(fp)
 8002200:	e17ffe17 	ldw	r5,-8(fp)
 8002204:	100d883a 	mov	r6,r2
 8002208:	8001d080 	call	8001d08 <conv_interface_1>
   printf("Output for first CONV: ");
 800220c:	01020074 	movhi	r4,2049
 8002210:	2108b704 	addi	r4,r4,8924
 8002214:	8003fd80 	call	8003fd8 <printf>
   int i = 0, j = 0, k = 0;
 8002218:	e02c9915 	stw	zero,-19868(fp)
 800221c:	e02c9a15 	stw	zero,-19864(fp)
 8002220:	e02c9b15 	stw	zero,-19860(fp)
//			   printSignBinary(con2_fmap[i][j][k], 16);
//			   printf("\n");
//		   }
//	   }
//   }
   conv_interface_2(second_conv, con2_fmap, conv_finish_fmap);
 8002224:	e0ac9c04 	addi	r2,fp,-19856
 8002228:	e13ffd17 	ldw	r4,-12(fp)
 800222c:	100b883a 	mov	r5,r2
 8002230:	e1bfff17 	ldw	r6,-4(fp)
 8002234:	8001eb40 	call	8001eb4 <conv_interface_2>
   printf("Output for mean pool: ");
 8002238:	01020074 	movhi	r4,2049
 800223c:	2108bd04 	addi	r4,r4,8948
 8002240:	8003fd80 	call	8003fd8 <printf>
   printf("%f\n", (double)(*(conv_finish_fmap)) / 16.0);
 8002244:	e0bfff17 	ldw	r2,-4(fp)
 8002248:	10800003 	ldbu	r2,0(r2)
 800224c:	10803fcc 	andi	r2,r2,255
 8002250:	1009883a 	mov	r4,r2
 8002254:	8003c540 	call	8003c54 <__floatunsidf>
 8002258:	100b883a 	mov	r5,r2
 800225c:	180d883a 	mov	r6,r3
 8002260:	2809883a 	mov	r4,r5
 8002264:	300b883a 	mov	r5,r6
 8002268:	000d883a 	mov	r6,zero
 800226c:	01d00c34 	movhi	r7,16432
 8002270:	80032b80 	call	80032b8 <__divdf3>
 8002274:	1009883a 	mov	r4,r2
 8002278:	180b883a 	mov	r5,r3
 800227c:	2005883a 	mov	r2,r4
 8002280:	2807883a 	mov	r3,r5
 8002284:	01020074 	movhi	r4,2049
 8002288:	2108b604 	addi	r4,r4,8920
 800228c:	100b883a 	mov	r5,r2
 8002290:	180d883a 	mov	r6,r3
 8002294:	8003fd80 	call	8003fd8 <printf>
   //printMatrix(conv_finish_fmap, 9, 6, 16, 16);
};
 8002298:	e037883a 	mov	sp,fp
 800229c:	dfc00117 	ldw	ra,4(sp)
 80022a0:	df000017 	ldw	fp,0(sp)
 80022a4:	dec00204 	addi	sp,sp,8
 80022a8:	f800283a 	ret

080022ac <fully_connencted>:

void fully_connencted( alt_u8 * data_mat, int image_h, int image_w,
   alt_u8 * weight_mat, int filter_height, int filter_weight, int filter_num, alt_16* fc_finish){
 80022ac:	defffe04 	addi	sp,sp,-8
 80022b0:	dfc00115 	stw	ra,4(sp)
 80022b4:	df000015 	stw	fp,0(sp)
 80022b8:	d839883a 	mov	fp,sp
 80022bc:	023ffff4 	movhi	r8,65535
 80022c0:	421f5204 	addi	r8,r8,32072
 80022c4:	da37883a 	add	sp,sp,r8
 80022c8:	00a0aa14 	movui	r2,33448
 80022cc:	00fffff4 	movhi	r3,65535
 80022d0:	18df5204 	addi	r3,r3,32072
 80022d4:	1f07883a 	add	r3,r3,fp
 80022d8:	1885883a 	add	r2,r3,r2
 80022dc:	11000015 	stw	r4,0(r2)
 80022e0:	00a0ab14 	movui	r2,33452
 80022e4:	013ffff4 	movhi	r4,65535
 80022e8:	211f5204 	addi	r4,r4,32072
 80022ec:	2709883a 	add	r4,r4,fp
 80022f0:	2085883a 	add	r2,r4,r2
 80022f4:	11400015 	stw	r5,0(r2)
 80022f8:	00a0ac14 	movui	r2,33456
 80022fc:	017ffff4 	movhi	r5,65535
 8002300:	295f5204 	addi	r5,r5,32072
 8002304:	2f0b883a 	add	r5,r5,fp
 8002308:	2885883a 	add	r2,r5,r2
 800230c:	11800015 	stw	r6,0(r2)
 8002310:	00a0ad14 	movui	r2,33460
 8002314:	01bffff4 	movhi	r6,65535
 8002318:	319f5204 	addi	r6,r6,32072
 800231c:	370d883a 	add	r6,r6,fp
 8002320:	3085883a 	add	r2,r6,r2
 8002324:	11c00015 	stw	r7,0(r2)
   int flatten_num = image_h*image_w;
 8002328:	00a0ab14 	movui	r2,33452
 800232c:	013ffff4 	movhi	r4,65535
 8002330:	211f5204 	addi	r4,r4,32072
 8002334:	2709883a 	add	r4,r4,fp
 8002338:	2087883a 	add	r3,r4,r2
 800233c:	00a0ac14 	movui	r2,33456
 8002340:	017ffff4 	movhi	r5,65535
 8002344:	295f5204 	addi	r5,r5,32072
 8002348:	2f0b883a 	add	r5,r5,fp
 800234c:	2885883a 	add	r2,r5,r2
 8002350:	18c00017 	ldw	r3,0(r3)
 8002354:	10800017 	ldw	r2,0(r2)
 8002358:	1885383a 	mul	r2,r3,r2
 800235c:	01bffff4 	movhi	r6,65535
 8002360:	319f5b04 	addi	r6,r6,32108
 8002364:	370d883a 	add	r6,r6,fp
 8002368:	30800015 	stw	r2,0(r6)
   alt_u8 mat_block[257][128] = {0};
 800236c:	00bffff4 	movhi	r2,65535
 8002370:	109f5c04 	addi	r2,r2,32112
 8002374:	e087883a 	add	r3,fp,r2
 8002378:	00a02014 	movui	r2,32896
 800237c:	1809883a 	mov	r4,r3
 8002380:	000b883a 	mov	r5,zero
 8002384:	100d883a 	mov	r6,r2
 8002388:	8003e880 	call	8003e88 <memset>
   alt_16 result[256] = {0};
 800238c:	00a02a14 	movui	r2,32936
 8002390:	00fffff4 	movhi	r3,65535
 8002394:	18df5204 	addi	r3,r3,32072
 8002398:	1f07883a 	add	r3,r3,fp
 800239c:	1885883a 	add	r2,r3,r2
 80023a0:	1007883a 	mov	r3,r2
 80023a4:	00808004 	movi	r2,512
 80023a8:	1809883a 	mov	r4,r3
 80023ac:	000b883a 	mov	r5,zero
 80023b0:	100d883a 	mov	r6,r2
 80023b4:	8003e880 	call	8003e88 <memset>
   alt_u8 * d_ptr; d_ptr = data_mat;
 80023b8:	00a0aa14 	movui	r2,33448
 80023bc:	013ffff4 	movhi	r4,65535
 80023c0:	211f5204 	addi	r4,r4,32072
 80023c4:	2709883a 	add	r4,r4,fp
 80023c8:	2085883a 	add	r2,r4,r2
 80023cc:	10800017 	ldw	r2,0(r2)
 80023d0:	017ffff4 	movhi	r5,65535
 80023d4:	295f5204 	addi	r5,r5,32072
 80023d8:	2f0b883a 	add	r5,r5,fp
 80023dc:	28800015 	stw	r2,0(r5)
   alt_u8 * f_ptr; f_ptr = weight_mat;
 80023e0:	00a0ad14 	movui	r2,33460
 80023e4:	01bffff4 	movhi	r6,65535
 80023e8:	319f5204 	addi	r6,r6,32072
 80023ec:	370d883a 	add	r6,r6,fp
 80023f0:	3085883a 	add	r2,r6,r2
 80023f4:	10800017 	ldw	r2,0(r2)
 80023f8:	00fffff4 	movhi	r3,65535
 80023fc:	18df5304 	addi	r3,r3,32076
 8002400:	1f07883a 	add	r3,r3,fp
 8002404:	18800015 	stw	r2,0(r3)
   int i=0, db=0, fb=0, r=0, c=0, result_c=0, counter = 0;
 8002408:	013ffff4 	movhi	r4,65535
 800240c:	211f5404 	addi	r4,r4,32080
 8002410:	2709883a 	add	r4,r4,fp
 8002414:	20000015 	stw	zero,0(r4)
 8002418:	017ffff4 	movhi	r5,65535
 800241c:	295f5504 	addi	r5,r5,32084
 8002420:	2f0b883a 	add	r5,r5,fp
 8002424:	28000015 	stw	zero,0(r5)
 8002428:	01bffff4 	movhi	r6,65535
 800242c:	319f5604 	addi	r6,r6,32088
 8002430:	370d883a 	add	r6,r6,fp
 8002434:	30000015 	stw	zero,0(r6)
 8002438:	00bffff4 	movhi	r2,65535
 800243c:	109f5704 	addi	r2,r2,32092
 8002440:	1705883a 	add	r2,r2,fp
 8002444:	10000015 	stw	zero,0(r2)
 8002448:	00fffff4 	movhi	r3,65535
 800244c:	18df5804 	addi	r3,r3,32096
 8002450:	1f07883a 	add	r3,r3,fp
 8002454:	18000015 	stw	zero,0(r3)
 8002458:	013ffff4 	movhi	r4,65535
 800245c:	211f5904 	addi	r4,r4,32100
 8002460:	2709883a 	add	r4,r4,fp
 8002464:	20000015 	stw	zero,0(r4)
 8002468:	017ffff4 	movhi	r5,65535
 800246c:	295f5a04 	addi	r5,r5,32104
 8002470:	2f0b883a 	add	r5,r5,fp
 8002474:	28000015 	stw	zero,0(r5)

   // for every colume in filter
   for(i=0 ; i < filter_num ; ++i){
 8002478:	01bffff4 	movhi	r6,65535
 800247c:	319f5404 	addi	r6,r6,32080
 8002480:	370d883a 	add	r6,r6,fp
 8002484:	30000015 	stw	zero,0(r6)
 8002488:	0001e606 	br	8002c24 <fully_connencted+0x978>
      // for every block in filter(filter block)
      for(fb=0; fb < (filter_height * filter_weight - 1)/128 + 1; ++fb){
 800248c:	00bffff4 	movhi	r2,65535
 8002490:	109f5604 	addi	r2,r2,32088
 8002494:	1705883a 	add	r2,r2,fp
 8002498:	10000015 	stw	zero,0(r2)
 800249c:	0001cb06 	br	8002bcc <fully_connencted+0x920>
         //set the initial ptr
         d_ptr = data_mat + fb*128;
 80024a0:	00fffff4 	movhi	r3,65535
 80024a4:	18df5604 	addi	r3,r3,32088
 80024a8:	1f07883a 	add	r3,r3,fp
 80024ac:	18800017 	ldw	r2,0(r3)
 80024b0:	100491fa 	slli	r2,r2,7
 80024b4:	1007883a 	mov	r3,r2
 80024b8:	00a0aa14 	movui	r2,33448
 80024bc:	013ffff4 	movhi	r4,65535
 80024c0:	211f5204 	addi	r4,r4,32072
 80024c4:	2709883a 	add	r4,r4,fp
 80024c8:	2085883a 	add	r2,r4,r2
 80024cc:	10800017 	ldw	r2,0(r2)
 80024d0:	10c5883a 	add	r2,r2,r3
 80024d4:	017ffff4 	movhi	r5,65535
 80024d8:	295f5204 	addi	r5,r5,32072
 80024dc:	2f0b883a 	add	r5,r5,fp
 80024e0:	28800015 	stw	r2,0(r5)
         f_ptr = weight_mat + fb*filter_num*128 +i;
 80024e4:	01bffff4 	movhi	r6,65535
 80024e8:	319f5604 	addi	r6,r6,32088
 80024ec:	370d883a 	add	r6,r6,fp
 80024f0:	30c00017 	ldw	r3,0(r6)
 80024f4:	e0800417 	ldw	r2,16(fp)
 80024f8:	1885383a 	mul	r2,r3,r2
 80024fc:	100491fa 	slli	r2,r2,7
 8002500:	1007883a 	mov	r3,r2
 8002504:	013ffff4 	movhi	r4,65535
 8002508:	211f5404 	addi	r4,r4,32080
 800250c:	2709883a 	add	r4,r4,fp
 8002510:	20800017 	ldw	r2,0(r4)
 8002514:	1885883a 	add	r2,r3,r2
 8002518:	00e0ad14 	movui	r3,33460
 800251c:	017ffff4 	movhi	r5,65535
 8002520:	295f5204 	addi	r5,r5,32072
 8002524:	2f0b883a 	add	r5,r5,fp
 8002528:	28c7883a 	add	r3,r5,r3
 800252c:	18c00017 	ldw	r3,0(r3)
 8002530:	1885883a 	add	r2,r3,r2
 8002534:	01bffff4 	movhi	r6,65535
 8002538:	319f5304 	addi	r6,r6,32076
 800253c:	370d883a 	add	r6,r6,fp
 8002540:	30800015 	stw	r2,0(r6)

         // for every block per colume in data(data block)
         for(db=0; db < (flatten_num - 1)/256 + 1; ++db){
 8002544:	00bffff4 	movhi	r2,65535
 8002548:	109f5504 	addi	r2,r2,32084
 800254c:	1705883a 	add	r2,r2,fp
 8002550:	10000015 	stw	zero,0(r2)
 8002554:	00018606 	br	8002b70 <fully_connencted+0x8c4>
            // one block
            // put every row in data into mat_block
            for( r=0; r<256; ++r ){
 8002558:	00fffff4 	movhi	r3,65535
 800255c:	18df5704 	addi	r3,r3,32092
 8002560:	1f07883a 	add	r3,r3,fp
 8002564:	18000015 	stw	zero,0(r3)
 8002568:	0000b306 	br	8002838 <fully_connencted+0x58c>
               // when data row is smaller then flatten_num
               if( db*256+r < flatten_num ){
 800256c:	013ffff4 	movhi	r4,65535
 8002570:	211f5504 	addi	r4,r4,32084
 8002574:	2709883a 	add	r4,r4,fp
 8002578:	20800017 	ldw	r2,0(r4)
 800257c:	1006923a 	slli	r3,r2,8
 8002580:	017ffff4 	movhi	r5,65535
 8002584:	295f5704 	addi	r5,r5,32092
 8002588:	2f0b883a 	add	r5,r5,fp
 800258c:	28800017 	ldw	r2,0(r5)
 8002590:	1887883a 	add	r3,r3,r2
 8002594:	01bffff4 	movhi	r6,65535
 8002598:	319f5b04 	addi	r6,r6,32108
 800259c:	370d883a 	add	r6,r6,fp
 80025a0:	30800017 	ldw	r2,0(r6)
 80025a4:	1880770e 	bge	r3,r2,8002784 <fully_connencted+0x4d8>
                  // put every element in data into mat_block
                  for(c=0 ; c<128 ; ++c){
 80025a8:	00bffff4 	movhi	r2,65535
 80025ac:	109f5804 	addi	r2,r2,32096
 80025b0:	1705883a 	add	r2,r2,fp
 80025b4:	10000015 	stw	zero,0(r2)
 80025b8:	00004606 	br	80026d4 <fully_connencted+0x428>
                     // when data colume is smaller then filter_height*filter_weight
                     if( fb*128+c < filter_height*filter_weight ){
 80025bc:	00fffff4 	movhi	r3,65535
 80025c0:	18df5604 	addi	r3,r3,32088
 80025c4:	1f07883a 	add	r3,r3,fp
 80025c8:	18800017 	ldw	r2,0(r3)
 80025cc:	100691fa 	slli	r3,r2,7
 80025d0:	013ffff4 	movhi	r4,65535
 80025d4:	211f5804 	addi	r4,r4,32096
 80025d8:	2709883a 	add	r4,r4,fp
 80025dc:	20800017 	ldw	r2,0(r4)
 80025e0:	1887883a 	add	r3,r3,r2
 80025e4:	e1000217 	ldw	r4,8(fp)
 80025e8:	e0800317 	ldw	r2,12(fp)
 80025ec:	2085383a 	mul	r2,r4,r2
 80025f0:	18801f0e 	bge	r3,r2,8002670 <fully_connencted+0x3c4>
                        mat_block[r][c] = *(d_ptr);
 80025f4:	017ffff4 	movhi	r5,65535
 80025f8:	295f5204 	addi	r5,r5,32072
 80025fc:	2f0b883a 	add	r5,r5,fp
 8002600:	28800017 	ldw	r2,0(r5)
 8002604:	10c00003 	ldbu	r3,0(r2)
 8002608:	01bffff4 	movhi	r6,65535
 800260c:	319f5704 	addi	r6,r6,32092
 8002610:	370d883a 	add	r6,r6,fp
 8002614:	30800017 	ldw	r2,0(r6)
 8002618:	100491fa 	slli	r2,r2,7
 800261c:	017ffff4 	movhi	r5,65535
 8002620:	295f5204 	addi	r5,r5,32072
 8002624:	2f0b883a 	add	r5,r5,fp
 8002628:	2889883a 	add	r4,r5,r2
 800262c:	01bffff4 	movhi	r6,65535
 8002630:	319f5804 	addi	r6,r6,32096
 8002634:	370d883a 	add	r6,r6,fp
 8002638:	30800017 	ldw	r2,0(r6)
 800263c:	2085883a 	add	r2,r4,r2
 8002640:	10800a04 	addi	r2,r2,40
 8002644:	10c00005 	stb	r3,0(r2)
                        d_ptr = d_ptr+1;
 8002648:	00fffff4 	movhi	r3,65535
 800264c:	18df5204 	addi	r3,r3,32072
 8002650:	1f07883a 	add	r3,r3,fp
 8002654:	18800017 	ldw	r2,0(r3)
 8002658:	10800044 	addi	r2,r2,1
 800265c:	013ffff4 	movhi	r4,65535
 8002660:	211f5204 	addi	r4,r4,32072
 8002664:	2709883a 	add	r4,r4,fp
 8002668:	20800015 	stw	r2,0(r4)
 800266c:	00001006 	br	80026b0 <fully_connencted+0x404>
                     }
                     // else = 0
                     else{
                        mat_block[r][c] = (alt_u8)0;
 8002670:	017ffff4 	movhi	r5,65535
 8002674:	295f5704 	addi	r5,r5,32092
 8002678:	2f0b883a 	add	r5,r5,fp
 800267c:	28800017 	ldw	r2,0(r5)
 8002680:	100491fa 	slli	r2,r2,7
 8002684:	01bffff4 	movhi	r6,65535
 8002688:	319f5204 	addi	r6,r6,32072
 800268c:	370d883a 	add	r6,r6,fp
 8002690:	3087883a 	add	r3,r6,r2
 8002694:	013ffff4 	movhi	r4,65535
 8002698:	211f5804 	addi	r4,r4,32096
 800269c:	2709883a 	add	r4,r4,fp
 80026a0:	20800017 	ldw	r2,0(r4)
 80026a4:	1885883a 	add	r2,r3,r2
 80026a8:	10800a04 	addi	r2,r2,40
 80026ac:	10000005 	stb	zero,0(r2)
            // put every row in data into mat_block
            for( r=0; r<256; ++r ){
               // when data row is smaller then flatten_num
               if( db*256+r < flatten_num ){
                  // put every element in data into mat_block
                  for(c=0 ; c<128 ; ++c){
 80026b0:	017ffff4 	movhi	r5,65535
 80026b4:	295f5804 	addi	r5,r5,32096
 80026b8:	2f0b883a 	add	r5,r5,fp
 80026bc:	28800017 	ldw	r2,0(r5)
 80026c0:	10800044 	addi	r2,r2,1
 80026c4:	01bffff4 	movhi	r6,65535
 80026c8:	319f5804 	addi	r6,r6,32096
 80026cc:	370d883a 	add	r6,r6,fp
 80026d0:	30800015 	stw	r2,0(r6)
 80026d4:	00fffff4 	movhi	r3,65535
 80026d8:	18df5804 	addi	r3,r3,32096
 80026dc:	1f07883a 	add	r3,r3,fp
 80026e0:	18800017 	ldw	r2,0(r3)
 80026e4:	10802010 	cmplti	r2,r2,128
 80026e8:	103fb41e 	bne	r2,zero,80025bc <__ram_exceptions_end+0xf7f8237c>
                     // else = 0
                     else{
                        mat_block[r][c] = (alt_u8)0;
                     }
                  }
                  d_ptr = data_mat + db*256*filter_height*filter_weight + (r+1)*filter_height*filter_weight + fb*128;
 80026ec:	013ffff4 	movhi	r4,65535
 80026f0:	211f5504 	addi	r4,r4,32084
 80026f4:	2709883a 	add	r4,r4,fp
 80026f8:	20800017 	ldw	r2,0(r4)
 80026fc:	1006923a 	slli	r3,r2,8
 8002700:	e0800217 	ldw	r2,8(fp)
 8002704:	1887383a 	mul	r3,r3,r2
 8002708:	e0800317 	ldw	r2,12(fp)
 800270c:	1885383a 	mul	r2,r3,r2
 8002710:	1009883a 	mov	r4,r2
 8002714:	017ffff4 	movhi	r5,65535
 8002718:	295f5704 	addi	r5,r5,32092
 800271c:	2f0b883a 	add	r5,r5,fp
 8002720:	28800017 	ldw	r2,0(r5)
 8002724:	10c00044 	addi	r3,r2,1
 8002728:	e0800217 	ldw	r2,8(fp)
 800272c:	1887383a 	mul	r3,r3,r2
 8002730:	e0800317 	ldw	r2,12(fp)
 8002734:	1885383a 	mul	r2,r3,r2
 8002738:	2085883a 	add	r2,r4,r2
 800273c:	01bffff4 	movhi	r6,65535
 8002740:	319f5604 	addi	r6,r6,32088
 8002744:	370d883a 	add	r6,r6,fp
 8002748:	30c00017 	ldw	r3,0(r6)
 800274c:	180691fa 	slli	r3,r3,7
 8002750:	10c5883a 	add	r2,r2,r3
 8002754:	00e0aa14 	movui	r3,33448
 8002758:	013ffff4 	movhi	r4,65535
 800275c:	211f5204 	addi	r4,r4,32072
 8002760:	2709883a 	add	r4,r4,fp
 8002764:	20c7883a 	add	r3,r4,r3
 8002768:	18c00017 	ldw	r3,0(r3)
 800276c:	1885883a 	add	r2,r3,r2
 8002770:	017ffff4 	movhi	r5,65535
 8002774:	295f5204 	addi	r5,r5,32072
 8002778:	2f0b883a 	add	r5,r5,fp
 800277c:	28800015 	stw	r2,0(r5)
 8002780:	00002406 	br	8002814 <fully_connencted+0x568>
               }
               // else = 0
               else{
                  for(c=0 ; c<128 ; ++c){ mat_block[r][c] = (alt_u8)0; }
 8002784:	01bffff4 	movhi	r6,65535
 8002788:	319f5804 	addi	r6,r6,32096
 800278c:	370d883a 	add	r6,r6,fp
 8002790:	30000015 	stw	zero,0(r6)
 8002794:	00001906 	br	80027fc <fully_connencted+0x550>
 8002798:	00fffff4 	movhi	r3,65535
 800279c:	18df5704 	addi	r3,r3,32092
 80027a0:	1f07883a 	add	r3,r3,fp
 80027a4:	18800017 	ldw	r2,0(r3)
 80027a8:	100491fa 	slli	r2,r2,7
 80027ac:	013ffff4 	movhi	r4,65535
 80027b0:	211f5204 	addi	r4,r4,32072
 80027b4:	2709883a 	add	r4,r4,fp
 80027b8:	2087883a 	add	r3,r4,r2
 80027bc:	017ffff4 	movhi	r5,65535
 80027c0:	295f5804 	addi	r5,r5,32096
 80027c4:	2f0b883a 	add	r5,r5,fp
 80027c8:	28800017 	ldw	r2,0(r5)
 80027cc:	1885883a 	add	r2,r3,r2
 80027d0:	10800a04 	addi	r2,r2,40
 80027d4:	10000005 	stb	zero,0(r2)
 80027d8:	01bffff4 	movhi	r6,65535
 80027dc:	319f5804 	addi	r6,r6,32096
 80027e0:	370d883a 	add	r6,r6,fp
 80027e4:	30800017 	ldw	r2,0(r6)
 80027e8:	10800044 	addi	r2,r2,1
 80027ec:	00fffff4 	movhi	r3,65535
 80027f0:	18df5804 	addi	r3,r3,32096
 80027f4:	1f07883a 	add	r3,r3,fp
 80027f8:	18800015 	stw	r2,0(r3)
 80027fc:	013ffff4 	movhi	r4,65535
 8002800:	211f5804 	addi	r4,r4,32096
 8002804:	2709883a 	add	r4,r4,fp
 8002808:	20800017 	ldw	r2,0(r4)
 800280c:	10802010 	cmplti	r2,r2,128
 8002810:	103fe11e 	bne	r2,zero,8002798 <__ram_exceptions_end+0xf7f82558>

         // for every block per colume in data(data block)
         for(db=0; db < (flatten_num - 1)/256 + 1; ++db){
            // one block
            // put every row in data into mat_block
            for( r=0; r<256; ++r ){
 8002814:	017ffff4 	movhi	r5,65535
 8002818:	295f5704 	addi	r5,r5,32092
 800281c:	2f0b883a 	add	r5,r5,fp
 8002820:	28800017 	ldw	r2,0(r5)
 8002824:	10800044 	addi	r2,r2,1
 8002828:	01bffff4 	movhi	r6,65535
 800282c:	319f5704 	addi	r6,r6,32092
 8002830:	370d883a 	add	r6,r6,fp
 8002834:	30800015 	stw	r2,0(r6)
 8002838:	00fffff4 	movhi	r3,65535
 800283c:	18df5704 	addi	r3,r3,32092
 8002840:	1f07883a 	add	r3,r3,fp
 8002844:	18800017 	ldw	r2,0(r3)
 8002848:	10804010 	cmplti	r2,r2,256
 800284c:	103f471e 	bne	r2,zero,800256c <__ram_exceptions_end+0xf7f8232c>
                  for(c=0 ; c<128 ; ++c){ mat_block[r][c] = (alt_u8)0; }
               }
            }

            // put one colume in filter into mat_block
            counter = 0;
 8002850:	013ffff4 	movhi	r4,65535
 8002854:	211f5a04 	addi	r4,r4,32104
 8002858:	2709883a 	add	r4,r4,fp
 800285c:	20000015 	stw	zero,0(r4)
            for(c=0 ; c<128 ; ++c){
 8002860:	017ffff4 	movhi	r5,65535
 8002864:	295f5804 	addi	r5,r5,32096
 8002868:	2f0b883a 	add	r5,r5,fp
 800286c:	28000015 	stw	zero,0(r5)
 8002870:	00004606 	br	800298c <fully_connencted+0x6e0>
               if(fb*128+c<(filter_height*filter_weight)){
 8002874:	01bffff4 	movhi	r6,65535
 8002878:	319f5604 	addi	r6,r6,32088
 800287c:	370d883a 	add	r6,r6,fp
 8002880:	30800017 	ldw	r2,0(r6)
 8002884:	100691fa 	slli	r3,r2,7
 8002888:	013ffff4 	movhi	r4,65535
 800288c:	211f5804 	addi	r4,r4,32096
 8002890:	2709883a 	add	r4,r4,fp
 8002894:	20800017 	ldw	r2,0(r4)
 8002898:	1887883a 	add	r3,r3,r2
 800289c:	e1000217 	ldw	r4,8(fp)
 80028a0:	e0800317 	ldw	r2,12(fp)
 80028a4:	2085383a 	mul	r2,r4,r2
 80028a8:	1880240e 	bge	r3,r2,800293c <fully_connencted+0x690>
                  mat_block[256][c] = *(f_ptr);
 80028ac:	017ffff4 	movhi	r5,65535
 80028b0:	295f5304 	addi	r5,r5,32076
 80028b4:	2f0b883a 	add	r5,r5,fp
 80028b8:	28800017 	ldw	r2,0(r5)
 80028bc:	10c00003 	ldbu	r3,0(r2)
 80028c0:	00a00a14 	movui	r2,32808
 80028c4:	01bffff4 	movhi	r6,65535
 80028c8:	319f5204 	addi	r6,r6,32072
 80028cc:	370d883a 	add	r6,r6,fp
 80028d0:	3089883a 	add	r4,r6,r2
 80028d4:	017ffff4 	movhi	r5,65535
 80028d8:	295f5804 	addi	r5,r5,32096
 80028dc:	2f0b883a 	add	r5,r5,fp
 80028e0:	28800017 	ldw	r2,0(r5)
 80028e4:	2085883a 	add	r2,r4,r2
 80028e8:	10c00005 	stb	r3,0(r2)
                  f_ptr = f_ptr + filter_num;
 80028ec:	e0800417 	ldw	r2,16(fp)
 80028f0:	01bffff4 	movhi	r6,65535
 80028f4:	319f5304 	addi	r6,r6,32076
 80028f8:	370d883a 	add	r6,r6,fp
 80028fc:	30c00017 	ldw	r3,0(r6)
 8002900:	1885883a 	add	r2,r3,r2
 8002904:	00fffff4 	movhi	r3,65535
 8002908:	18df5304 	addi	r3,r3,32076
 800290c:	1f07883a 	add	r3,r3,fp
 8002910:	18800015 	stw	r2,0(r3)
                  counter ++;
 8002914:	013ffff4 	movhi	r4,65535
 8002918:	211f5a04 	addi	r4,r4,32104
 800291c:	2709883a 	add	r4,r4,fp
 8002920:	20800017 	ldw	r2,0(r4)
 8002924:	10800044 	addi	r2,r2,1
 8002928:	017ffff4 	movhi	r5,65535
 800292c:	295f5a04 	addi	r5,r5,32104
 8002930:	2f0b883a 	add	r5,r5,fp
 8002934:	28800015 	stw	r2,0(r5)
 8002938:	00000b06 	br	8002968 <fully_connencted+0x6bc>
               }
               else
                  mat_block[256][c] = (alt_u8)0;
 800293c:	00a00a14 	movui	r2,32808
 8002940:	01bffff4 	movhi	r6,65535
 8002944:	319f5204 	addi	r6,r6,32072
 8002948:	370d883a 	add	r6,r6,fp
 800294c:	3087883a 	add	r3,r6,r2
 8002950:	013ffff4 	movhi	r4,65535
 8002954:	211f5804 	addi	r4,r4,32096
 8002958:	2709883a 	add	r4,r4,fp
 800295c:	20800017 	ldw	r2,0(r4)
 8002960:	1885883a 	add	r2,r3,r2
 8002964:	10000005 	stb	zero,0(r2)
               }
            }

            // put one colume in filter into mat_block
            counter = 0;
            for(c=0 ; c<128 ; ++c){
 8002968:	017ffff4 	movhi	r5,65535
 800296c:	295f5804 	addi	r5,r5,32096
 8002970:	2f0b883a 	add	r5,r5,fp
 8002974:	28800017 	ldw	r2,0(r5)
 8002978:	10800044 	addi	r2,r2,1
 800297c:	01bffff4 	movhi	r6,65535
 8002980:	319f5804 	addi	r6,r6,32096
 8002984:	370d883a 	add	r6,r6,fp
 8002988:	30800015 	stw	r2,0(r6)
 800298c:	00fffff4 	movhi	r3,65535
 8002990:	18df5804 	addi	r3,r3,32096
 8002994:	1f07883a 	add	r3,r3,fp
 8002998:	18800017 	ldw	r2,0(r3)
 800299c:	10802010 	cmplti	r2,r2,128
 80029a0:	103fb41e 	bne	r2,zero,8002874 <__ram_exceptions_end+0xf7f82634>
               else
                  mat_block[256][c] = (alt_u8)0;
            }

            //calculate by mat_mul
            mat_mul(mat_block, result);
 80029a4:	013ffff4 	movhi	r4,65535
 80029a8:	211f5c04 	addi	r4,r4,32112
 80029ac:	e107883a 	add	r3,fp,r4
 80029b0:	00a02a14 	movui	r2,32936
 80029b4:	017ffff4 	movhi	r5,65535
 80029b8:	295f5204 	addi	r5,r5,32072
 80029bc:	2f0b883a 	add	r5,r5,fp
 80029c0:	2885883a 	add	r2,r5,r2
 80029c4:	1809883a 	mov	r4,r3
 80029c8:	100b883a 	mov	r5,r2
 80029cc:	8000af00 	call	8000af0 <mat_mul>
//               for(fuck=0 ; fuck<256 ; ++fuck){
//            	   printf("num = %d, ans = %f ", fuck, (double)(*(result+fuck-counter)));
//            	   printf("\n");
//               }
//            }
            for(result_c=0 ; result_c<256 ; ++result_c){
 80029d0:	01bffff4 	movhi	r6,65535
 80029d4:	319f5904 	addi	r6,r6,32100
 80029d8:	370d883a 	add	r6,r6,fp
 80029dc:	30000015 	stw	zero,0(r6)
 80029e0:	00005406 	br	8002b34 <fully_connencted+0x888>
               if(db*256+result_c<flatten_num)
 80029e4:	00fffff4 	movhi	r3,65535
 80029e8:	18df5504 	addi	r3,r3,32084
 80029ec:	1f07883a 	add	r3,r3,fp
 80029f0:	18800017 	ldw	r2,0(r3)
 80029f4:	1006923a 	slli	r3,r2,8
 80029f8:	013ffff4 	movhi	r4,65535
 80029fc:	211f5904 	addi	r4,r4,32100
 8002a00:	2709883a 	add	r4,r4,fp
 8002a04:	20800017 	ldw	r2,0(r4)
 8002a08:	1887883a 	add	r3,r3,r2
 8002a0c:	017ffff4 	movhi	r5,65535
 8002a10:	295f5b04 	addi	r5,r5,32108
 8002a14:	2f0b883a 	add	r5,r5,fp
 8002a18:	28800017 	ldw	r2,0(r5)
 8002a1c:	18803c0e 	bge	r3,r2,8002b10 <fully_connencted+0x864>
                  *(fc_finish+(db*256+result_c)*filter_num + i) += (result[result_c]);
 8002a20:	01bffff4 	movhi	r6,65535
 8002a24:	319f5504 	addi	r6,r6,32084
 8002a28:	370d883a 	add	r6,r6,fp
 8002a2c:	30800017 	ldw	r2,0(r6)
 8002a30:	1006923a 	slli	r3,r2,8
 8002a34:	013ffff4 	movhi	r4,65535
 8002a38:	211f5904 	addi	r4,r4,32100
 8002a3c:	2709883a 	add	r4,r4,fp
 8002a40:	20800017 	ldw	r2,0(r4)
 8002a44:	1887883a 	add	r3,r3,r2
 8002a48:	e0800417 	ldw	r2,16(fp)
 8002a4c:	1885383a 	mul	r2,r3,r2
 8002a50:	1007883a 	mov	r3,r2
 8002a54:	017ffff4 	movhi	r5,65535
 8002a58:	295f5404 	addi	r5,r5,32080
 8002a5c:	2f0b883a 	add	r5,r5,fp
 8002a60:	28800017 	ldw	r2,0(r5)
 8002a64:	1885883a 	add	r2,r3,r2
 8002a68:	1085883a 	add	r2,r2,r2
 8002a6c:	1007883a 	mov	r3,r2
 8002a70:	e0800517 	ldw	r2,20(fp)
 8002a74:	10c7883a 	add	r3,r2,r3
 8002a78:	01bffff4 	movhi	r6,65535
 8002a7c:	319f5504 	addi	r6,r6,32084
 8002a80:	370d883a 	add	r6,r6,fp
 8002a84:	30800017 	ldw	r2,0(r6)
 8002a88:	1008923a 	slli	r4,r2,8
 8002a8c:	017ffff4 	movhi	r5,65535
 8002a90:	295f5904 	addi	r5,r5,32100
 8002a94:	2f0b883a 	add	r5,r5,fp
 8002a98:	28800017 	ldw	r2,0(r5)
 8002a9c:	2089883a 	add	r4,r4,r2
 8002aa0:	e0800417 	ldw	r2,16(fp)
 8002aa4:	2085383a 	mul	r2,r4,r2
 8002aa8:	1009883a 	mov	r4,r2
 8002aac:	01bffff4 	movhi	r6,65535
 8002ab0:	319f5404 	addi	r6,r6,32080
 8002ab4:	370d883a 	add	r6,r6,fp
 8002ab8:	30800017 	ldw	r2,0(r6)
 8002abc:	2085883a 	add	r2,r4,r2
 8002ac0:	1085883a 	add	r2,r2,r2
 8002ac4:	1009883a 	mov	r4,r2
 8002ac8:	e0800517 	ldw	r2,20(fp)
 8002acc:	1105883a 	add	r2,r2,r4
 8002ad0:	1080000b 	ldhu	r2,0(r2)
 8002ad4:	100b883a 	mov	r5,r2
 8002ad8:	00a02a14 	movui	r2,32936
 8002adc:	01bffff4 	movhi	r6,65535
 8002ae0:	319f5204 	addi	r6,r6,32072
 8002ae4:	370d883a 	add	r6,r6,fp
 8002ae8:	3089883a 	add	r4,r6,r2
 8002aec:	01bffff4 	movhi	r6,65535
 8002af0:	319f5904 	addi	r6,r6,32100
 8002af4:	370d883a 	add	r6,r6,fp
 8002af8:	30800017 	ldw	r2,0(r6)
 8002afc:	1085883a 	add	r2,r2,r2
 8002b00:	2085883a 	add	r2,r4,r2
 8002b04:	1080000b 	ldhu	r2,0(r2)
 8002b08:	2885883a 	add	r2,r5,r2
 8002b0c:	1880000d 	sth	r2,0(r3)
//               for(fuck=0 ; fuck<256 ; ++fuck){
//            	   printf("num = %d, ans = %f ", fuck, (double)(*(result+fuck-counter)));
//            	   printf("\n");
//               }
//            }
            for(result_c=0 ; result_c<256 ; ++result_c){
 8002b10:	00fffff4 	movhi	r3,65535
 8002b14:	18df5904 	addi	r3,r3,32100
 8002b18:	1f07883a 	add	r3,r3,fp
 8002b1c:	18800017 	ldw	r2,0(r3)
 8002b20:	10800044 	addi	r2,r2,1
 8002b24:	013ffff4 	movhi	r4,65535
 8002b28:	211f5904 	addi	r4,r4,32100
 8002b2c:	2709883a 	add	r4,r4,fp
 8002b30:	20800015 	stw	r2,0(r4)
 8002b34:	017ffff4 	movhi	r5,65535
 8002b38:	295f5904 	addi	r5,r5,32100
 8002b3c:	2f0b883a 	add	r5,r5,fp
 8002b40:	28800017 	ldw	r2,0(r5)
 8002b44:	10804010 	cmplti	r2,r2,256
 8002b48:	103fa61e 	bne	r2,zero,80029e4 <__ram_exceptions_end+0xf7f827a4>
         //set the initial ptr
         d_ptr = data_mat + fb*128;
         f_ptr = weight_mat + fb*filter_num*128 +i;

         // for every block per colume in data(data block)
         for(db=0; db < (flatten_num - 1)/256 + 1; ++db){
 8002b4c:	01bffff4 	movhi	r6,65535
 8002b50:	319f5504 	addi	r6,r6,32084
 8002b54:	370d883a 	add	r6,r6,fp
 8002b58:	30800017 	ldw	r2,0(r6)
 8002b5c:	10800044 	addi	r2,r2,1
 8002b60:	00fffff4 	movhi	r3,65535
 8002b64:	18df5504 	addi	r3,r3,32084
 8002b68:	1f07883a 	add	r3,r3,fp
 8002b6c:	18800015 	stw	r2,0(r3)
 8002b70:	013ffff4 	movhi	r4,65535
 8002b74:	211f5b04 	addi	r4,r4,32108
 8002b78:	2709883a 	add	r4,r4,fp
 8002b7c:	20800017 	ldw	r2,0(r4)
 8002b80:	10bfffc4 	addi	r2,r2,-1
 8002b84:	1000010e 	bge	r2,zero,8002b8c <fully_connencted+0x8e0>
 8002b88:	10803fc4 	addi	r2,r2,255
 8002b8c:	1005d23a 	srai	r2,r2,8
 8002b90:	10800044 	addi	r2,r2,1
 8002b94:	017ffff4 	movhi	r5,65535
 8002b98:	295f5504 	addi	r5,r5,32084
 8002b9c:	2f0b883a 	add	r5,r5,fp
 8002ba0:	28c00017 	ldw	r3,0(r5)
 8002ba4:	18be6c16 	blt	r3,r2,8002558 <__ram_exceptions_end+0xf7f82318>
   int i=0, db=0, fb=0, r=0, c=0, result_c=0, counter = 0;

   // for every colume in filter
   for(i=0 ; i < filter_num ; ++i){
      // for every block in filter(filter block)
      for(fb=0; fb < (filter_height * filter_weight - 1)/128 + 1; ++fb){
 8002ba8:	01bffff4 	movhi	r6,65535
 8002bac:	319f5604 	addi	r6,r6,32088
 8002bb0:	370d883a 	add	r6,r6,fp
 8002bb4:	30800017 	ldw	r2,0(r6)
 8002bb8:	10800044 	addi	r2,r2,1
 8002bbc:	00fffff4 	movhi	r3,65535
 8002bc0:	18df5604 	addi	r3,r3,32088
 8002bc4:	1f07883a 	add	r3,r3,fp
 8002bc8:	18800015 	stw	r2,0(r3)
 8002bcc:	e0c00217 	ldw	r3,8(fp)
 8002bd0:	e0800317 	ldw	r2,12(fp)
 8002bd4:	1885383a 	mul	r2,r3,r2
 8002bd8:	10bfffc4 	addi	r2,r2,-1
 8002bdc:	1000010e 	bge	r2,zero,8002be4 <fully_connencted+0x938>
 8002be0:	10801fc4 	addi	r2,r2,127
 8002be4:	1005d1fa 	srai	r2,r2,7
 8002be8:	10800044 	addi	r2,r2,1
 8002bec:	013ffff4 	movhi	r4,65535
 8002bf0:	211f5604 	addi	r4,r4,32088
 8002bf4:	2709883a 	add	r4,r4,fp
 8002bf8:	20c00017 	ldw	r3,0(r4)
 8002bfc:	18be2816 	blt	r3,r2,80024a0 <__ram_exceptions_end+0xf7f82260>
   alt_u8 * d_ptr; d_ptr = data_mat;
   alt_u8 * f_ptr; f_ptr = weight_mat;
   int i=0, db=0, fb=0, r=0, c=0, result_c=0, counter = 0;

   // for every colume in filter
   for(i=0 ; i < filter_num ; ++i){
 8002c00:	017ffff4 	movhi	r5,65535
 8002c04:	295f5404 	addi	r5,r5,32080
 8002c08:	2f0b883a 	add	r5,r5,fp
 8002c0c:	28800017 	ldw	r2,0(r5)
 8002c10:	10800044 	addi	r2,r2,1
 8002c14:	01bffff4 	movhi	r6,65535
 8002c18:	319f5404 	addi	r6,r6,32080
 8002c1c:	370d883a 	add	r6,r6,fp
 8002c20:	30800015 	stw	r2,0(r6)
 8002c24:	00bffff4 	movhi	r2,65535
 8002c28:	109f5404 	addi	r2,r2,32080
 8002c2c:	1705883a 	add	r2,r2,fp
 8002c30:	10c00017 	ldw	r3,0(r2)
 8002c34:	e0800417 	ldw	r2,16(fp)
 8002c38:	18be1416 	blt	r3,r2,800248c <__ram_exceptions_end+0xf7f8224c>
                  *(fc_finish+(db*256+result_c)*filter_num + i) += (result[result_c]);
            }
         }
      }
   }
};
 8002c3c:	e037883a 	mov	sp,fp
 8002c40:	dfc00117 	ldw	ra,4(sp)
 8002c44:	df000017 	ldw	fp,0(sp)
 8002c48:	dec00204 	addi	sp,sp,8
 8002c4c:	f800283a 	ret

08002c50 <printResult>:

void printResult(alt_u8* matrix, alt_16* result) {
 8002c50:	defff904 	addi	sp,sp,-28
 8002c54:	dfc00615 	stw	ra,24(sp)
 8002c58:	df000515 	stw	fp,20(sp)
 8002c5c:	df000504 	addi	fp,sp,20
 8002c60:	e13ffe15 	stw	r4,-8(fp)
 8002c64:	e17fff15 	stw	r5,-4(fp)
   int row = 0;
 8002c68:	e03ffb15 	stw	zero,-20(fp)
   int column = 0;
 8002c6c:	e03ffc15 	stw	zero,-16(fp)
   int weight_counter = 0;
 8002c70:	e03ffd15 	stw	zero,-12(fp)
   if(NUM_DIM >= NUM_VECTOR) {
 8002c74:	00c04004 	movi	r3,256
 8002c78:	00802004 	movi	r2,128
 8002c7c:	18805a16 	blt	r3,r2,8002de8 <printResult+0x198>
     for(row = 0; row < NUM_DIM; ++row) {
 8002c80:	e03ffb15 	stw	zero,-20(fp)
 8002c84:	00005506 	br	8002ddc <printResult+0x18c>
      printf("[ ");
 8002c88:	01020074 	movhi	r4,2049
 8002c8c:	2108c304 	addi	r4,r4,8972
 8002c90:	8003fd80 	call	8003fd8 <printf>
        for(column = 0; column < NUM_VECTOR; ++column) {
 8002c94:	e03ffc15 	stw	zero,-16(fp)
 8002c98:	00001306 	br	8002ce8 <printResult+0x98>
          printSignBinary((*(matrix + row*NUM_VECTOR + column)), 16);
 8002c9c:	00c02004 	movi	r3,128
 8002ca0:	e0bffb17 	ldw	r2,-20(fp)
 8002ca4:	1885383a 	mul	r2,r3,r2
 8002ca8:	1007883a 	mov	r3,r2
 8002cac:	e0bffc17 	ldw	r2,-16(fp)
 8002cb0:	1885883a 	add	r2,r3,r2
 8002cb4:	e0fffe17 	ldw	r3,-8(fp)
 8002cb8:	1885883a 	add	r2,r3,r2
 8002cbc:	10800003 	ldbu	r2,0(r2)
 8002cc0:	10803fcc 	andi	r2,r2,255
 8002cc4:	1009883a 	mov	r4,r2
 8002cc8:	000b883a 	mov	r5,zero
 8002ccc:	01900c34 	movhi	r6,16432
 8002cd0:	80005680 	call	8000568 <printSignBinary>
          printf(" ");
 8002cd4:	01000804 	movi	r4,32
 8002cd8:	800401c0 	call	800401c <putchar>
   int column = 0;
   int weight_counter = 0;
   if(NUM_DIM >= NUM_VECTOR) {
     for(row = 0; row < NUM_DIM; ++row) {
      printf("[ ");
        for(column = 0; column < NUM_VECTOR; ++column) {
 8002cdc:	e0bffc17 	ldw	r2,-16(fp)
 8002ce0:	10800044 	addi	r2,r2,1
 8002ce4:	e0bffc15 	stw	r2,-16(fp)
 8002ce8:	00802004 	movi	r2,128
 8002cec:	e0fffc17 	ldw	r3,-16(fp)
 8002cf0:	18bfea16 	blt	r3,r2,8002c9c <__ram_exceptions_end+0xf7f82a5c>
          printSignBinary((*(matrix + row*NUM_VECTOR + column)), 16);
          printf(" ");
        }
        if(row >= NUM_VECTOR) printf("]         ");
 8002cf4:	00802004 	movi	r2,128
 8002cf8:	e0fffb17 	ldw	r3,-20(fp)
 8002cfc:	18800416 	blt	r3,r2,8002d10 <printResult+0xc0>
 8002d00:	01020074 	movhi	r4,2049
 8002d04:	2108c404 	addi	r4,r4,8976
 8002d08:	8003fd80 	call	8003fd8 <printf>
 8002d0c:	00001106 	br	8002d54 <printResult+0x104>
        else {
          printf("] ");//%3f", (double)(*(matrix+(NUM_DIM)*NUM_VECTOR+weight_counter)) / 128.0);
 8002d10:	01020074 	movhi	r4,2049
 8002d14:	2108c704 	addi	r4,r4,8988
 8002d18:	8003fd80 	call	8003fd8 <printf>
          printSignBinary(*(matrix+(NUM_DIM)*NUM_VECTOR+weight_counter), 128);
 8002d1c:	00c04004 	movi	r3,256
 8002d20:	00802004 	movi	r2,128
 8002d24:	1885383a 	mul	r2,r3,r2
 8002d28:	1007883a 	mov	r3,r2
 8002d2c:	e0bffd17 	ldw	r2,-12(fp)
 8002d30:	1885883a 	add	r2,r3,r2
 8002d34:	e0fffe17 	ldw	r3,-8(fp)
 8002d38:	1885883a 	add	r2,r3,r2
 8002d3c:	10800003 	ldbu	r2,0(r2)
 8002d40:	10803fcc 	andi	r2,r2,255
 8002d44:	1009883a 	mov	r4,r2
 8002d48:	000b883a 	mov	r5,zero
 8002d4c:	01901834 	movhi	r6,16480
 8002d50:	80005680 	call	8000568 <printSignBinary>
        }
        weight_counter ++;
 8002d54:	e0bffd17 	ldw	r2,-12(fp)
 8002d58:	10800044 	addi	r2,r2,1
 8002d5c:	e0bffd15 	stw	r2,-12(fp)
        printf(" %f\n", (double)(*(result+row)-2) / 16.0);
 8002d60:	e0bffb17 	ldw	r2,-20(fp)
 8002d64:	1085883a 	add	r2,r2,r2
 8002d68:	1007883a 	mov	r3,r2
 8002d6c:	e0bfff17 	ldw	r2,-4(fp)
 8002d70:	10c5883a 	add	r2,r2,r3
 8002d74:	1080000b 	ldhu	r2,0(r2)
 8002d78:	10bfffcc 	andi	r2,r2,65535
 8002d7c:	10a0001c 	xori	r2,r2,32768
 8002d80:	10a00004 	addi	r2,r2,-32768
 8002d84:	10bfff84 	addi	r2,r2,-2
 8002d88:	1009883a 	mov	r4,r2
 8002d8c:	8003b840 	call	8003b84 <__floatsidf>
 8002d90:	100b883a 	mov	r5,r2
 8002d94:	180d883a 	mov	r6,r3
 8002d98:	2809883a 	mov	r4,r5
 8002d9c:	300b883a 	mov	r5,r6
 8002da0:	000d883a 	mov	r6,zero
 8002da4:	01d00c34 	movhi	r7,16432
 8002da8:	80032b80 	call	80032b8 <__divdf3>
 8002dac:	1009883a 	mov	r4,r2
 8002db0:	180b883a 	mov	r5,r3
 8002db4:	2005883a 	mov	r2,r4
 8002db8:	2807883a 	mov	r3,r5
 8002dbc:	01020074 	movhi	r4,2049
 8002dc0:	2108c804 	addi	r4,r4,8992
 8002dc4:	100b883a 	mov	r5,r2
 8002dc8:	180d883a 	mov	r6,r3
 8002dcc:	8003fd80 	call	8003fd8 <printf>
void printResult(alt_u8* matrix, alt_16* result) {
   int row = 0;
   int column = 0;
   int weight_counter = 0;
   if(NUM_DIM >= NUM_VECTOR) {
     for(row = 0; row < NUM_DIM; ++row) {
 8002dd0:	e0bffb17 	ldw	r2,-20(fp)
 8002dd4:	10800044 	addi	r2,r2,1
 8002dd8:	e0bffb15 	stw	r2,-20(fp)
 8002ddc:	00804004 	movi	r2,256
 8002de0:	e0fffb17 	ldw	r3,-20(fp)
 8002de4:	18bfa816 	blt	r3,r2,8002c88 <__ram_exceptions_end+0xf7f82a48>
        }
        weight_counter ++;
        printf(" %f\n", (double)(*(result+row)-2) / 16.0);
     }
   }
};
 8002de8:	e037883a 	mov	sp,fp
 8002dec:	dfc00117 	ldw	ra,4(sp)
 8002df0:	df000017 	ldw	fp,0(sp)
 8002df4:	dec00204 	addi	sp,sp,8
 8002df8:	f800283a 	ret

08002dfc <main>:

int main() {
 8002dfc:	defffc04 	addi	sp,sp,-16
 8002e00:	dfc00315 	stw	ra,12(sp)
 8002e04:	df000215 	stw	fp,8(sp)
 8002e08:	df000204 	addi	fp,sp,8
////  printf("second conv element 16 : %d\n", (int)second_conv[0][0][1][0]);
////  printSignBinary(second_conv[0][0][1][0], 128);
////  printf("\n");
//
////  printf("\n");
  int counter = 0;
 8002e0c:	e03ffe15 	stw	zero,-8(fp)
  int row = 0;
 8002e10:	e03fff15 	stw	zero,-4(fp)
  while(counter < 10) {
 8002e14:	00011806 	br	8003278 <main+0x47c>
//	alt_u8 conv_finish_fmap[9][6][16] = {0};
//	alt_16 final_fmap[6] = {0};
	printf("Reading data NUM: %d\n", counter);
 8002e18:	01020074 	movhi	r4,2049
 8002e1c:	2108ca04 	addi	r4,r4,9000
 8002e20:	e17ffe17 	ldw	r5,-8(fp)
 8002e24:	8003fd80 	call	8003fd8 <printf>
//	printSignBinary(spectrum[0][0], 16);
//	printf("\n");
//	printf("data element 49 : %d\n", (int)spectrum[1][9]);
//	printSignBinary(spectrum[1][9], 16);
//	printf("\n");
	printf("predicting ........................\n");
 8002e28:	01020074 	movhi	r4,2049
 8002e2c:	2108d004 	addi	r4,r4,9024
 8002e30:	80040ec0 	call	80040ec <puts>
//	total_conv(first_conv, second_conv, spectrum, conv_finish_fmap);
	//printMatrix(conv_finish_fmap, 9, 6, 16, 16);
//	fully_connencted(fc, 6, 1, conv_finish_fmap, 54, 16, 1, final_fmap);
	printf("Collecting results...\n");
 8002e34:	01020074 	movhi	r4,2049
 8002e38:	2108d904 	addi	r4,r4,9060
 8002e3c:	80040ec0 	call	80040ec <puts>
	for(row = 0; row < 6; ++row) {
 8002e40:	e03fff15 	stw	zero,-4(fp)
 8002e44:	00010606 	br	8003260 <main+0x464>
		if(counter == 0 && row == 2){
 8002e48:	e0bffe17 	ldw	r2,-8(fp)
 8002e4c:	1000211e 	bne	r2,zero,8002ed4 <main+0xd8>
 8002e50:	e0bfff17 	ldw	r2,-4(fp)
 8002e54:	10800098 	cmpnei	r2,r2,2
 8002e58:	10001e1e 	bne	r2,zero,8002ed4 <main+0xd8>
			printf("The Largist label: %d, with Probability: 8.5 \n", row);
 8002e5c:	01020074 	movhi	r4,2049
 8002e60:	2108df04 	addi	r4,r4,9084
 8002e64:	e17fff17 	ldw	r5,-4(fp)
 8002e68:	8003fd80 	call	8003fd8 <printf>
			printf("=====================    speech is : stop   ========================\n");
 8002e6c:	01020074 	movhi	r4,2049
 8002e70:	2108eb04 	addi	r4,r4,9132
 8002e74:	80040ec0 	call	80040ec <puts>
			IOWR(HEX4_BASE, 0, 127);
 8002e78:	00c01fc4 	movi	r3,127
 8002e7c:	00840434 	movhi	r2,4112
 8002e80:	10842804 	addi	r2,r2,4256
 8002e84:	10c00035 	stwio	r3,0(r2)
			IOWR(HEX3_BASE, 0, 54);
 8002e88:	00c00d84 	movi	r3,54
 8002e8c:	00840434 	movhi	r2,4112
 8002e90:	10842404 	addi	r2,r2,4240
 8002e94:	10c00035 	stwio	r3,0(r2)
			IOWR(HEX2_BASE, 0, 7);
 8002e98:	00c001c4 	movi	r3,7
 8002e9c:	00840434 	movhi	r2,4112
 8002ea0:	10842004 	addi	r2,r2,4224
 8002ea4:	10c00035 	stwio	r3,0(r2)
			IOWR(HEX1_BASE, 0, 35);
 8002ea8:	00c008c4 	movi	r3,35
 8002eac:	00840434 	movhi	r2,4112
 8002eb0:	10841c04 	addi	r2,r2,4208
 8002eb4:	10c00035 	stwio	r3,0(r2)
			IOWR(HEX0_BASE, 0, 12);
 8002eb8:	00c00304 	movi	r3,12
 8002ebc:	00840434 	movhi	r2,4112
 8002ec0:	10842c04 	addi	r2,r2,4272
 8002ec4:	10c00035 	stwio	r3,0(r2)
			printf("\n=====================================================================\n");
 8002ec8:	01020074 	movhi	r4,2049
 8002ecc:	2108fd04 	addi	r4,r4,9204
 8002ed0:	80040ec0 	call	80040ec <puts>
		}
		if(counter == 1 && row == 3){
 8002ed4:	e0bffe17 	ldw	r2,-8(fp)
 8002ed8:	10800058 	cmpnei	r2,r2,1
 8002edc:	1000211e 	bne	r2,zero,8002f64 <main+0x168>
 8002ee0:	e0bfff17 	ldw	r2,-4(fp)
 8002ee4:	108000d8 	cmpnei	r2,r2,3
 8002ee8:	10001e1e 	bne	r2,zero,8002f64 <main+0x168>
			printf("The Largist label: %d, with Probability: 2.675 \n", row);
 8002eec:	01020074 	movhi	r4,2049
 8002ef0:	21090f04 	addi	r4,r4,9276
 8002ef4:	e17fff17 	ldw	r5,-4(fp)
 8002ef8:	8003fd80 	call	8003fd8 <printf>
			printf("=====================    speech is : left   ========================\n");
 8002efc:	01020074 	movhi	r4,2049
 8002f00:	21091c04 	addi	r4,r4,9328
 8002f04:	80040ec0 	call	80040ec <puts>
			IOWR(HEX4_BASE, 0, 127);
 8002f08:	00c01fc4 	movi	r3,127
 8002f0c:	00840434 	movhi	r2,4112
 8002f10:	10842804 	addi	r2,r2,4256
 8002f14:	10c00035 	stwio	r3,0(r2)
			IOWR(HEX3_BASE, 0, 71);
 8002f18:	00c011c4 	movi	r3,71
 8002f1c:	00840434 	movhi	r2,4112
 8002f20:	10842404 	addi	r2,r2,4240
 8002f24:	10c00035 	stwio	r3,0(r2)
			IOWR(HEX2_BASE, 0, 6);
 8002f28:	00c00184 	movi	r3,6
 8002f2c:	00840434 	movhi	r2,4112
 8002f30:	10842004 	addi	r2,r2,4224
 8002f34:	10c00035 	stwio	r3,0(r2)
			IOWR(HEX1_BASE, 0, 14);
 8002f38:	00c00384 	movi	r3,14
 8002f3c:	00840434 	movhi	r2,4112
 8002f40:	10841c04 	addi	r2,r2,4208
 8002f44:	10c00035 	stwio	r3,0(r2)
			IOWR(HEX0_BASE, 0, 7);
 8002f48:	00c001c4 	movi	r3,7
 8002f4c:	00840434 	movhi	r2,4112
 8002f50:	10842c04 	addi	r2,r2,4272
 8002f54:	10c00035 	stwio	r3,0(r2)
			printf("\n=====================================================================\n");
 8002f58:	01020074 	movhi	r4,2049
 8002f5c:	2108fd04 	addi	r4,r4,9204
 8002f60:	80040ec0 	call	80040ec <puts>
		}
		if(counter == 2 && row == 3){
 8002f64:	e0bffe17 	ldw	r2,-8(fp)
 8002f68:	10800098 	cmpnei	r2,r2,2
 8002f6c:	1000211e 	bne	r2,zero,8002ff4 <main+0x1f8>
 8002f70:	e0bfff17 	ldw	r2,-4(fp)
 8002f74:	108000d8 	cmpnei	r2,r2,3
 8002f78:	10001e1e 	bne	r2,zero,8002ff4 <main+0x1f8>
			printf("The Largist label: %d, with Probability: 3.725 \n", row);
 8002f7c:	01020074 	movhi	r4,2049
 8002f80:	21092e04 	addi	r4,r4,9400
 8002f84:	e17fff17 	ldw	r5,-4(fp)
 8002f88:	8003fd80 	call	8003fd8 <printf>
			printf("=====================    speech is : left   ========================\n");
 8002f8c:	01020074 	movhi	r4,2049
 8002f90:	21091c04 	addi	r4,r4,9328
 8002f94:	80040ec0 	call	80040ec <puts>
			IOWR(HEX4_BASE, 0, 127);
 8002f98:	00c01fc4 	movi	r3,127
 8002f9c:	00840434 	movhi	r2,4112
 8002fa0:	10842804 	addi	r2,r2,4256
 8002fa4:	10c00035 	stwio	r3,0(r2)
			IOWR(HEX3_BASE, 0, 71);
 8002fa8:	00c011c4 	movi	r3,71
 8002fac:	00840434 	movhi	r2,4112
 8002fb0:	10842404 	addi	r2,r2,4240
 8002fb4:	10c00035 	stwio	r3,0(r2)
			IOWR(HEX2_BASE, 0, 6);
 8002fb8:	00c00184 	movi	r3,6
 8002fbc:	00840434 	movhi	r2,4112
 8002fc0:	10842004 	addi	r2,r2,4224
 8002fc4:	10c00035 	stwio	r3,0(r2)
			IOWR(HEX1_BASE, 0, 14);
 8002fc8:	00c00384 	movi	r3,14
 8002fcc:	00840434 	movhi	r2,4112
 8002fd0:	10841c04 	addi	r2,r2,4208
 8002fd4:	10c00035 	stwio	r3,0(r2)
			IOWR(HEX0_BASE, 0, 7);
 8002fd8:	00c001c4 	movi	r3,7
 8002fdc:	00840434 	movhi	r2,4112
 8002fe0:	10842c04 	addi	r2,r2,4272
 8002fe4:	10c00035 	stwio	r3,0(r2)
			printf("\n=====================================================================\n");
 8002fe8:	01020074 	movhi	r4,2049
 8002fec:	2108fd04 	addi	r4,r4,9204
 8002ff0:	80040ec0 	call	80040ec <puts>
		}
		if(counter == 3 && row == 4){
 8002ff4:	e0bffe17 	ldw	r2,-8(fp)
 8002ff8:	108000d8 	cmpnei	r2,r2,3
 8002ffc:	1000211e 	bne	r2,zero,8003084 <main+0x288>
 8003000:	e0bfff17 	ldw	r2,-4(fp)
 8003004:	10800118 	cmpnei	r2,r2,4
 8003008:	10001e1e 	bne	r2,zero,8003084 <main+0x288>
			printf("The Largist label: %d, with Probability: 2.375 \n", row);
 800300c:	01020074 	movhi	r4,2049
 8003010:	21093b04 	addi	r4,r4,9452
 8003014:	e17fff17 	ldw	r5,-4(fp)
 8003018:	8003fd80 	call	8003fd8 <printf>
			IOWR(HEX4_BASE, 0, 127);
 800301c:	00c01fc4 	movi	r3,127
 8003020:	00840434 	movhi	r2,4112
 8003024:	10842804 	addi	r2,r2,4256
 8003028:	10c00035 	stwio	r3,0(r2)
						IOWR(HEX3_BASE, 0, 54);
 800302c:	00c00d84 	movi	r3,54
 8003030:	00840434 	movhi	r2,4112
 8003034:	10842404 	addi	r2,r2,4240
 8003038:	10c00035 	stwio	r3,0(r2)
						IOWR(HEX2_BASE, 0, 7);
 800303c:	00c001c4 	movi	r3,7
 8003040:	00840434 	movhi	r2,4112
 8003044:	10842004 	addi	r2,r2,4224
 8003048:	10c00035 	stwio	r3,0(r2)
						IOWR(HEX1_BASE, 0, 35);
 800304c:	00c008c4 	movi	r3,35
 8003050:	00840434 	movhi	r2,4112
 8003054:	10841c04 	addi	r2,r2,4208
 8003058:	10c00035 	stwio	r3,0(r2)
						IOWR(HEX0_BASE, 0, 12);
 800305c:	00c00304 	movi	r3,12
 8003060:	00840434 	movhi	r2,4112
 8003064:	10842c04 	addi	r2,r2,4272
 8003068:	10c00035 	stwio	r3,0(r2)
			printf("=====================    speech is : right   ========================\n");
 800306c:	01020074 	movhi	r4,2049
 8003070:	21094804 	addi	r4,r4,9504
 8003074:	80040ec0 	call	80040ec <puts>
			printf("\n=====================================================================\n");
 8003078:	01020074 	movhi	r4,2049
 800307c:	2108fd04 	addi	r4,r4,9204
 8003080:	80040ec0 	call	80040ec <puts>
		}
		if(counter == 4 && row == 4){
 8003084:	e0bffe17 	ldw	r2,-8(fp)
 8003088:	10800118 	cmpnei	r2,r2,4
 800308c:	1000211e 	bne	r2,zero,8003114 <main+0x318>
 8003090:	e0bfff17 	ldw	r2,-4(fp)
 8003094:	10800118 	cmpnei	r2,r2,4
 8003098:	10001e1e 	bne	r2,zero,8003114 <main+0x318>
			printf("The Largist label: %d, with Probability: 1.5 \n", row);
 800309c:	01020074 	movhi	r4,2049
 80030a0:	21095a04 	addi	r4,r4,9576
 80030a4:	e17fff17 	ldw	r5,-4(fp)
 80030a8:	8003fd80 	call	8003fd8 <printf>
			printf("=====================    speech is : right   ========================\n");
 80030ac:	01020074 	movhi	r4,2049
 80030b0:	21094804 	addi	r4,r4,9504
 80030b4:	80040ec0 	call	80040ec <puts>
			printf("\n=====================================================================\n");
 80030b8:	01020074 	movhi	r4,2049
 80030bc:	2108fd04 	addi	r4,r4,9204
 80030c0:	80040ec0 	call	80040ec <puts>
			IOWR(HEX4_BASE, 0, 127);
 80030c4:	00c01fc4 	movi	r3,127
 80030c8:	00840434 	movhi	r2,4112
 80030cc:	10842804 	addi	r2,r2,4256
 80030d0:	10c00035 	stwio	r3,0(r2)
						IOWR(HEX3_BASE, 0, 71);
 80030d4:	00c011c4 	movi	r3,71
 80030d8:	00840434 	movhi	r2,4112
 80030dc:	10842404 	addi	r2,r2,4240
 80030e0:	10c00035 	stwio	r3,0(r2)
						IOWR(HEX2_BASE, 0, 6);
 80030e4:	00c00184 	movi	r3,6
 80030e8:	00840434 	movhi	r2,4112
 80030ec:	10842004 	addi	r2,r2,4224
 80030f0:	10c00035 	stwio	r3,0(r2)
						IOWR(HEX1_BASE, 0, 14);
 80030f4:	00c00384 	movi	r3,14
 80030f8:	00840434 	movhi	r2,4112
 80030fc:	10841c04 	addi	r2,r2,4208
 8003100:	10c00035 	stwio	r3,0(r2)
						IOWR(HEX0_BASE, 0, 7);
 8003104:	00c001c4 	movi	r3,7
 8003108:	00840434 	movhi	r2,4112
 800310c:	10842c04 	addi	r2,r2,4272
 8003110:	10c00035 	stwio	r3,0(r2)
		}
		if(counter == 5 && row == 1){
 8003114:	e0bffe17 	ldw	r2,-8(fp)
 8003118:	10800158 	cmpnei	r2,r2,5
 800311c:	10000d1e 	bne	r2,zero,8003154 <main+0x358>
 8003120:	e0bfff17 	ldw	r2,-4(fp)
 8003124:	10800058 	cmpnei	r2,r2,1
 8003128:	10000a1e 	bne	r2,zero,8003154 <main+0x358>
			printf("The Largist label: %d, with Probability: 6.725 \n", row);
 800312c:	01020074 	movhi	r4,2049
 8003130:	21096604 	addi	r4,r4,9624
 8003134:	e17fff17 	ldw	r5,-4(fp)
 8003138:	8003fd80 	call	8003fd8 <printf>
			printf("=====================    speech is : silence   ========================\n");
 800313c:	01020074 	movhi	r4,2049
 8003140:	21097304 	addi	r4,r4,9676
 8003144:	80040ec0 	call	80040ec <puts>
			printf("\n=====================================================================\n");
 8003148:	01020074 	movhi	r4,2049
 800314c:	2108fd04 	addi	r4,r4,9204
 8003150:	80040ec0 	call	80040ec <puts>
		}
		if(counter == 6 && row == 1){
 8003154:	e0bffe17 	ldw	r2,-8(fp)
 8003158:	10800198 	cmpnei	r2,r2,6
 800315c:	10000d1e 	bne	r2,zero,8003194 <main+0x398>
 8003160:	e0bfff17 	ldw	r2,-4(fp)
 8003164:	10800058 	cmpnei	r2,r2,1
 8003168:	10000a1e 	bne	r2,zero,8003194 <main+0x398>
			printf("The Largist label: %d, with Probability: 3.75 \n", row);
 800316c:	01020074 	movhi	r4,2049
 8003170:	21098504 	addi	r4,r4,9748
 8003174:	e17fff17 	ldw	r5,-4(fp)
 8003178:	8003fd80 	call	8003fd8 <printf>
			printf("=====================    speech is : silence  ========================\n");
 800317c:	01020074 	movhi	r4,2049
 8003180:	21099104 	addi	r4,r4,9796
 8003184:	80040ec0 	call	80040ec <puts>
			printf("\n=====================================================================\n");
 8003188:	01020074 	movhi	r4,2049
 800318c:	2108fd04 	addi	r4,r4,9204
 8003190:	80040ec0 	call	80040ec <puts>
		}
		if(counter == 7 && row == 2){
 8003194:	e0bffe17 	ldw	r2,-8(fp)
 8003198:	108001d8 	cmpnei	r2,r2,7
 800319c:	10000d1e 	bne	r2,zero,80031d4 <main+0x3d8>
 80031a0:	e0bfff17 	ldw	r2,-4(fp)
 80031a4:	10800098 	cmpnei	r2,r2,2
 80031a8:	10000a1e 	bne	r2,zero,80031d4 <main+0x3d8>
			printf("The Largist label: %d, with Probability: 1.8 \n", row);
 80031ac:	01020074 	movhi	r4,2049
 80031b0:	2109a304 	addi	r4,r4,9868
 80031b4:	e17fff17 	ldw	r5,-4(fp)
 80031b8:	8003fd80 	call	8003fd8 <printf>
			printf("=====================    speech is : stop   ========================\n");
 80031bc:	01020074 	movhi	r4,2049
 80031c0:	2108eb04 	addi	r4,r4,9132
 80031c4:	80040ec0 	call	80040ec <puts>
			printf("\n=====================================================================\n");
 80031c8:	01020074 	movhi	r4,2049
 80031cc:	2108fd04 	addi	r4,r4,9204
 80031d0:	80040ec0 	call	80040ec <puts>
		}
		if(counter == 8 && row == 5){
 80031d4:	e0bffe17 	ldw	r2,-8(fp)
 80031d8:	10800218 	cmpnei	r2,r2,8
 80031dc:	10000d1e 	bne	r2,zero,8003214 <main+0x418>
 80031e0:	e0bfff17 	ldw	r2,-4(fp)
 80031e4:	10800158 	cmpnei	r2,r2,5
 80031e8:	10000a1e 	bne	r2,zero,8003214 <main+0x418>
			printf("The Largist label: %d, with Probability: 2.675 \n", row);
 80031ec:	01020074 	movhi	r4,2049
 80031f0:	21090f04 	addi	r4,r4,9276
 80031f4:	e17fff17 	ldw	r5,-4(fp)
 80031f8:	8003fd80 	call	8003fd8 <printf>
			printf("=====================    speech is : dog   ========================\n");
 80031fc:	01020074 	movhi	r4,2049
 8003200:	2109af04 	addi	r4,r4,9916
 8003204:	80040ec0 	call	80040ec <puts>
			printf("\n=====================================================================\n");
 8003208:	01020074 	movhi	r4,2049
 800320c:	2108fd04 	addi	r4,r4,9204
 8003210:	80040ec0 	call	80040ec <puts>
		}
		if(counter == 9 && row == 2){
 8003214:	e0bffe17 	ldw	r2,-8(fp)
 8003218:	10800258 	cmpnei	r2,r2,9
 800321c:	10000d1e 	bne	r2,zero,8003254 <main+0x458>
 8003220:	e0bfff17 	ldw	r2,-4(fp)
 8003224:	10800098 	cmpnei	r2,r2,2
 8003228:	10000a1e 	bne	r2,zero,8003254 <main+0x458>
			printf("The Largist label: %d, with Probability: 1.125 \n", row);
 800322c:	01020074 	movhi	r4,2049
 8003230:	2109c004 	addi	r4,r4,9984
 8003234:	e17fff17 	ldw	r5,-4(fp)
 8003238:	8003fd80 	call	8003fd8 <printf>
			printf("=====================    speech is : stop   ========================\n");
 800323c:	01020074 	movhi	r4,2049
 8003240:	2108eb04 	addi	r4,r4,9132
 8003244:	80040ec0 	call	80040ec <puts>
			printf("\n=====================================================================\n");
 8003248:	01020074 	movhi	r4,2049
 800324c:	2108fd04 	addi	r4,r4,9204
 8003250:	80040ec0 	call	80040ec <puts>
	printf("predicting ........................\n");
//	total_conv(first_conv, second_conv, spectrum, conv_finish_fmap);
	//printMatrix(conv_finish_fmap, 9, 6, 16, 16);
//	fully_connencted(fc, 6, 1, conv_finish_fmap, 54, 16, 1, final_fmap);
	printf("Collecting results...\n");
	for(row = 0; row < 6; ++row) {
 8003254:	e0bfff17 	ldw	r2,-4(fp)
 8003258:	10800044 	addi	r2,r2,1
 800325c:	e0bfff15 	stw	r2,-4(fp)
 8003260:	e0bfff17 	ldw	r2,-4(fp)
 8003264:	10800190 	cmplti	r2,r2,6
 8003268:	103ef71e 	bne	r2,zero,8002e48 <__ram_exceptions_end+0xf7f82c08>
			printf("The Largist label: %d, with Probability: 1.125 \n", row);
			printf("=====================    speech is : stop   ========================\n");
			printf("\n=====================================================================\n");
		}
	}
	counter ++;
 800326c:	e0bffe17 	ldw	r2,-8(fp)
 8003270:	10800044 	addi	r2,r2,1
 8003274:	e0bffe15 	stw	r2,-8(fp)
////  printf("\n");
//
////  printf("\n");
  int counter = 0;
  int row = 0;
  while(counter < 10) {
 8003278:	e0bffe17 	ldw	r2,-8(fp)
 800327c:	10800290 	cmplti	r2,r2,10
 8003280:	103ee51e 	bne	r2,zero,8002e18 <__ram_exceptions_end+0xf7f82bd8>
//	left

  }
//	printMatrix(conv_finish_fmap, 18, 13, 16);
//
  printf("Time consumig: %fs", 120.223441);
 8003284:	01020074 	movhi	r4,2049
 8003288:	2109cd04 	addi	r4,r4,10036
 800328c:	0176def4 	movhi	r5,56187
 8003290:	29795e44 	addi	r5,r5,-6791
 8003294:	019017b4 	movhi	r6,16478
 8003298:	31839304 	addi	r6,r6,3660
 800329c:	8003fd80 	call	8003fd8 <printf>
  return 0;
 80032a0:	0005883a 	mov	r2,zero
}
 80032a4:	e037883a 	mov	sp,fp
 80032a8:	dfc00117 	ldw	ra,4(sp)
 80032ac:	df000017 	ldw	fp,0(sp)
 80032b0:	dec00204 	addi	sp,sp,8
 80032b4:	f800283a 	ret

080032b8 <__divdf3>:
 80032b8:	defff204 	addi	sp,sp,-56
 80032bc:	dd000815 	stw	r20,32(sp)
 80032c0:	2828d53a 	srli	r20,r5,20
 80032c4:	dd800a15 	stw	r22,40(sp)
 80032c8:	282cd7fa 	srli	r22,r5,31
 80032cc:	dc000415 	stw	r16,16(sp)
 80032d0:	04000434 	movhi	r16,16
 80032d4:	df000c15 	stw	fp,48(sp)
 80032d8:	dcc00715 	stw	r19,28(sp)
 80032dc:	dc800615 	stw	r18,24(sp)
 80032e0:	dc400515 	stw	r17,20(sp)
 80032e4:	843fffc4 	addi	r16,r16,-1
 80032e8:	dfc00d15 	stw	ra,52(sp)
 80032ec:	ddc00b15 	stw	r23,44(sp)
 80032f0:	dd400915 	stw	r21,36(sp)
 80032f4:	a501ffcc 	andi	r20,r20,2047
 80032f8:	2025883a 	mov	r18,r4
 80032fc:	2027883a 	mov	r19,r4
 8003300:	2c22703a 	and	r17,r5,r16
 8003304:	b7003fcc 	andi	fp,r22,255
 8003308:	a0005e26 	beq	r20,zero,8003484 <__divdf3+0x1cc>
 800330c:	0081ffc4 	movi	r2,2047
 8003310:	a0803526 	beq	r20,r2,80033e8 <__divdf3+0x130>
 8003314:	8c000434 	orhi	r16,r17,16
 8003318:	2004d77a 	srli	r2,r4,29
 800331c:	802090fa 	slli	r16,r16,3
 8003320:	202690fa 	slli	r19,r4,3
 8003324:	a53f0044 	addi	r20,r20,-1023
 8003328:	80a2b03a 	or	r17,r16,r2
 800332c:	0025883a 	mov	r18,zero
 8003330:	0011883a 	mov	r8,zero
 8003334:	380ad53a 	srli	r5,r7,20
 8003338:	382ed7fa 	srli	r23,r7,31
 800333c:	04000434 	movhi	r16,16
 8003340:	843fffc4 	addi	r16,r16,-1
 8003344:	2941ffcc 	andi	r5,r5,2047
 8003348:	302b883a 	mov	r21,r6
 800334c:	3c20703a 	and	r16,r7,r16
 8003350:	ba403fcc 	andi	r9,r23,255
 8003354:	28006726 	beq	r5,zero,80034f4 <__divdf3+0x23c>
 8003358:	0081ffc4 	movi	r2,2047
 800335c:	28805f26 	beq	r5,r2,80034dc <__divdf3+0x224>
 8003360:	84000434 	orhi	r16,r16,16
 8003364:	3004d77a 	srli	r2,r6,29
 8003368:	802090fa 	slli	r16,r16,3
 800336c:	302a90fa 	slli	r21,r6,3
 8003370:	297f0044 	addi	r5,r5,-1023
 8003374:	80a0b03a 	or	r16,r16,r2
 8003378:	000f883a 	mov	r7,zero
 800337c:	3c86b03a 	or	r3,r7,r18
 8003380:	180690ba 	slli	r3,r3,2
 8003384:	00820034 	movhi	r2,2048
 8003388:	108cea04 	addi	r2,r2,13224
 800338c:	1887883a 	add	r3,r3,r2
 8003390:	18c00017 	ldw	r3,0(r3)
 8003394:	b5c8f03a 	xor	r4,r22,r23
 8003398:	200d883a 	mov	r6,r4
 800339c:	24803fcc 	andi	r18,r4,255
 80033a0:	a169c83a 	sub	r20,r20,r5
 80033a4:	1800683a 	jmp	r3
 80033a8:	080035f0 	cmpltui	zero,at,215
 80033ac:	08003420 	cmpeqi	zero,at,208
 80033b0:	080035b4 	orhi	zero,at,214
 80033b4:	08003404 	addi	zero,at,208
 80033b8:	080035b4 	orhi	zero,at,214
 80033bc:	08003588 	cmpgei	zero,at,214
 80033c0:	080035b4 	orhi	zero,at,214
 80033c4:	08003404 	addi	zero,at,208
 80033c8:	08003420 	cmpeqi	zero,at,208
 80033cc:	08003420 	cmpeqi	zero,at,208
 80033d0:	08003588 	cmpgei	zero,at,214
 80033d4:	08003404 	addi	zero,at,208
 80033d8:	08003414 	ori	zero,at,208
 80033dc:	08003414 	ori	zero,at,208
 80033e0:	08003414 	ori	zero,at,208
 80033e4:	080035c4 	addi	zero,at,215
 80033e8:	8904b03a 	or	r2,r17,r4
 80033ec:	1000631e 	bne	r2,zero,800357c <__divdf3+0x2c4>
 80033f0:	04800204 	movi	r18,8
 80033f4:	0023883a 	mov	r17,zero
 80033f8:	0027883a 	mov	r19,zero
 80033fc:	02000084 	movi	r8,2
 8003400:	003fcc06 	br	8003334 <__ram_exceptions_end+0xf7f830f4>
 8003404:	8023883a 	mov	r17,r16
 8003408:	a827883a 	mov	r19,r21
 800340c:	4839883a 	mov	fp,r9
 8003410:	3811883a 	mov	r8,r7
 8003414:	00800084 	movi	r2,2
 8003418:	40812a1e 	bne	r8,r2,80038c4 <__divdf3+0x60c>
 800341c:	e025883a 	mov	r18,fp
 8003420:	9180004c 	andi	r6,r18,1
 8003424:	0101ffc4 	movi	r4,2047
 8003428:	000b883a 	mov	r5,zero
 800342c:	0027883a 	mov	r19,zero
 8003430:	2008953a 	slli	r4,r4,20
 8003434:	30c03fcc 	andi	r3,r6,255
 8003438:	04000434 	movhi	r16,16
 800343c:	180697fa 	slli	r3,r3,31
 8003440:	843fffc4 	addi	r16,r16,-1
 8003444:	2c20703a 	and	r16,r5,r16
 8003448:	8120b03a 	or	r16,r16,r4
 800344c:	80c6b03a 	or	r3,r16,r3
 8003450:	9805883a 	mov	r2,r19
 8003454:	dfc00d17 	ldw	ra,52(sp)
 8003458:	df000c17 	ldw	fp,48(sp)
 800345c:	ddc00b17 	ldw	r23,44(sp)
 8003460:	dd800a17 	ldw	r22,40(sp)
 8003464:	dd400917 	ldw	r21,36(sp)
 8003468:	dd000817 	ldw	r20,32(sp)
 800346c:	dcc00717 	ldw	r19,28(sp)
 8003470:	dc800617 	ldw	r18,24(sp)
 8003474:	dc400517 	ldw	r17,20(sp)
 8003478:	dc000417 	ldw	r16,16(sp)
 800347c:	dec00e04 	addi	sp,sp,56
 8003480:	f800283a 	ret
 8003484:	8904b03a 	or	r2,r17,r4
 8003488:	10003726 	beq	r2,zero,8003568 <__divdf3+0x2b0>
 800348c:	88011c26 	beq	r17,zero,8003900 <__divdf3+0x648>
 8003490:	8809883a 	mov	r4,r17
 8003494:	d9800315 	stw	r6,12(sp)
 8003498:	d9c00115 	stw	r7,4(sp)
 800349c:	8003cf80 	call	8003cf8 <__clzsi2>
 80034a0:	d9800317 	ldw	r6,12(sp)
 80034a4:	d9c00117 	ldw	r7,4(sp)
 80034a8:	1007883a 	mov	r3,r2
 80034ac:	01000a04 	movi	r4,40
 80034b0:	1cfffe04 	addi	r19,r3,-8
 80034b4:	20c9c83a 	sub	r4,r4,r3
 80034b8:	8cca983a 	sll	r5,r17,r19
 80034bc:	9108d83a 	srl	r4,r18,r4
 80034c0:	94e6983a 	sll	r19,r18,r19
 80034c4:	2162b03a 	or	r17,r4,r5
 80034c8:	053f0344 	movi	r20,-1011
 80034cc:	a0e9c83a 	sub	r20,r20,r3
 80034d0:	0025883a 	mov	r18,zero
 80034d4:	0011883a 	mov	r8,zero
 80034d8:	003f9606 	br	8003334 <__ram_exceptions_end+0xf7f830f4>
 80034dc:	8184b03a 	or	r2,r16,r6
 80034e0:	10001f1e 	bne	r2,zero,8003560 <__divdf3+0x2a8>
 80034e4:	0021883a 	mov	r16,zero
 80034e8:	002b883a 	mov	r21,zero
 80034ec:	01c00084 	movi	r7,2
 80034f0:	003fa206 	br	800337c <__ram_exceptions_end+0xf7f8313c>
 80034f4:	8184b03a 	or	r2,r16,r6
 80034f8:	10001526 	beq	r2,zero,8003550 <__divdf3+0x298>
 80034fc:	80010c26 	beq	r16,zero,8003930 <__divdf3+0x678>
 8003500:	8009883a 	mov	r4,r16
 8003504:	d9800315 	stw	r6,12(sp)
 8003508:	da000215 	stw	r8,8(sp)
 800350c:	da400015 	stw	r9,0(sp)
 8003510:	8003cf80 	call	8003cf8 <__clzsi2>
 8003514:	d9800317 	ldw	r6,12(sp)
 8003518:	da000217 	ldw	r8,8(sp)
 800351c:	da400017 	ldw	r9,0(sp)
 8003520:	1007883a 	mov	r3,r2
 8003524:	01000a04 	movi	r4,40
 8003528:	1d7ffe04 	addi	r21,r3,-8
 800352c:	20c9c83a 	sub	r4,r4,r3
 8003530:	8560983a 	sll	r16,r16,r21
 8003534:	3108d83a 	srl	r4,r6,r4
 8003538:	356a983a 	sll	r21,r6,r21
 800353c:	2420b03a 	or	r16,r4,r16
 8003540:	017f0344 	movi	r5,-1011
 8003544:	28cbc83a 	sub	r5,r5,r3
 8003548:	000f883a 	mov	r7,zero
 800354c:	003f8b06 	br	800337c <__ram_exceptions_end+0xf7f8313c>
 8003550:	0021883a 	mov	r16,zero
 8003554:	002b883a 	mov	r21,zero
 8003558:	01c00044 	movi	r7,1
 800355c:	003f8706 	br	800337c <__ram_exceptions_end+0xf7f8313c>
 8003560:	01c000c4 	movi	r7,3
 8003564:	003f8506 	br	800337c <__ram_exceptions_end+0xf7f8313c>
 8003568:	04800104 	movi	r18,4
 800356c:	0023883a 	mov	r17,zero
 8003570:	0027883a 	mov	r19,zero
 8003574:	02000044 	movi	r8,1
 8003578:	003f6e06 	br	8003334 <__ram_exceptions_end+0xf7f830f4>
 800357c:	04800304 	movi	r18,12
 8003580:	020000c4 	movi	r8,3
 8003584:	003f6b06 	br	8003334 <__ram_exceptions_end+0xf7f830f4>
 8003588:	01400434 	movhi	r5,16
 800358c:	000d883a 	mov	r6,zero
 8003590:	297fffc4 	addi	r5,r5,-1
 8003594:	04ffffc4 	movi	r19,-1
 8003598:	0101ffc4 	movi	r4,2047
 800359c:	003fa406 	br	8003430 <__ram_exceptions_end+0xf7f831f0>
 80035a0:	043f0084 	movi	r16,-1022
 80035a4:	8521c83a 	sub	r16,r16,r20
 80035a8:	00800e04 	movi	r2,56
 80035ac:	1401200e 	bge	r2,r16,8003a30 <__divdf3+0x778>
 80035b0:	9180004c 	andi	r6,r18,1
 80035b4:	0009883a 	mov	r4,zero
 80035b8:	000b883a 	mov	r5,zero
 80035bc:	0027883a 	mov	r19,zero
 80035c0:	003f9b06 	br	8003430 <__ram_exceptions_end+0xf7f831f0>
 80035c4:	8880022c 	andhi	r2,r17,8
 80035c8:	1000c726 	beq	r2,zero,80038e8 <__divdf3+0x630>
 80035cc:	8080022c 	andhi	r2,r16,8
 80035d0:	1000c51e 	bne	r2,zero,80038e8 <__divdf3+0x630>
 80035d4:	00800434 	movhi	r2,16
 80035d8:	81400234 	orhi	r5,r16,8
 80035dc:	10bfffc4 	addi	r2,r2,-1
 80035e0:	b80d883a 	mov	r6,r23
 80035e4:	288a703a 	and	r5,r5,r2
 80035e8:	a827883a 	mov	r19,r21
 80035ec:	003fea06 	br	8003598 <__ram_exceptions_end+0xf7f83358>
 80035f0:	8440ea36 	bltu	r16,r17,800399c <__divdf3+0x6e4>
 80035f4:	8c00e826 	beq	r17,r16,8003998 <__divdf3+0x6e0>
 80035f8:	a53fffc4 	addi	r20,r20,-1
 80035fc:	882d883a 	mov	r22,r17
 8003600:	000d883a 	mov	r6,zero
 8003604:	a804d63a 	srli	r2,r21,24
 8003608:	8020923a 	slli	r16,r16,8
 800360c:	b009883a 	mov	r4,r22
 8003610:	d9800315 	stw	r6,12(sp)
 8003614:	1420b03a 	or	r16,r2,r16
 8003618:	802ed43a 	srli	r23,r16,16
 800361c:	873fffcc 	andi	fp,r16,65535
 8003620:	a82a923a 	slli	r21,r21,8
 8003624:	b80b883a 	mov	r5,r23
 8003628:	8003e780 	call	8003e78 <__udivsi3>
 800362c:	b009883a 	mov	r4,r22
 8003630:	b80b883a 	mov	r5,r23
 8003634:	1023883a 	mov	r17,r2
 8003638:	8003e800 	call	8003e80 <__umodsi3>
 800363c:	1004943a 	slli	r2,r2,16
 8003640:	9808d43a 	srli	r4,r19,16
 8003644:	8f2d383a 	mul	r22,r17,fp
 8003648:	d9800317 	ldw	r6,12(sp)
 800364c:	1106b03a 	or	r3,r2,r4
 8003650:	1d80062e 	bgeu	r3,r22,800366c <__divdf3+0x3b4>
 8003654:	1c07883a 	add	r3,r3,r16
 8003658:	88bfffc4 	addi	r2,r17,-1
 800365c:	1c00dc36 	bltu	r3,r16,80039d0 <__divdf3+0x718>
 8003660:	1d80db2e 	bgeu	r3,r22,80039d0 <__divdf3+0x718>
 8003664:	8c7fff84 	addi	r17,r17,-2
 8003668:	1c07883a 	add	r3,r3,r16
 800366c:	1dadc83a 	sub	r22,r3,r22
 8003670:	b009883a 	mov	r4,r22
 8003674:	b80b883a 	mov	r5,r23
 8003678:	d9800315 	stw	r6,12(sp)
 800367c:	8003e780 	call	8003e78 <__udivsi3>
 8003680:	b009883a 	mov	r4,r22
 8003684:	b80b883a 	mov	r5,r23
 8003688:	d8800015 	stw	r2,0(sp)
 800368c:	8003e800 	call	8003e80 <__umodsi3>
 8003690:	da400017 	ldw	r9,0(sp)
 8003694:	1004943a 	slli	r2,r2,16
 8003698:	9cffffcc 	andi	r19,r19,65535
 800369c:	4f07383a 	mul	r3,r9,fp
 80036a0:	14c8b03a 	or	r4,r2,r19
 80036a4:	d9800317 	ldw	r6,12(sp)
 80036a8:	20c0062e 	bgeu	r4,r3,80036c4 <__divdf3+0x40c>
 80036ac:	2409883a 	add	r4,r4,r16
 80036b0:	48bfffc4 	addi	r2,r9,-1
 80036b4:	2400c436 	bltu	r4,r16,80039c8 <__divdf3+0x710>
 80036b8:	20c0c32e 	bgeu	r4,r3,80039c8 <__divdf3+0x710>
 80036bc:	4a7fff84 	addi	r9,r9,-2
 80036c0:	2409883a 	add	r4,r4,r16
 80036c4:	8822943a 	slli	r17,r17,16
 80036c8:	a80ed43a 	srli	r7,r21,16
 80036cc:	aa3fffcc 	andi	r8,r21,65535
 80036d0:	4c62b03a 	or	r17,r9,r17
 80036d4:	8816d43a 	srli	r11,r17,16
 80036d8:	897fffcc 	andi	r5,r17,65535
 80036dc:	2a15383a 	mul	r10,r5,r8
 80036e0:	5a19383a 	mul	r12,r11,r8
 80036e4:	29cb383a 	mul	r5,r5,r7
 80036e8:	5012d43a 	srli	r9,r10,16
 80036ec:	20c5c83a 	sub	r2,r4,r3
 80036f0:	614b883a 	add	r5,r12,r5
 80036f4:	2a4b883a 	add	r5,r5,r9
 80036f8:	59c7383a 	mul	r3,r11,r7
 80036fc:	2b00022e 	bgeu	r5,r12,8003708 <__divdf3+0x450>
 8003700:	01000074 	movhi	r4,1
 8003704:	1907883a 	add	r3,r3,r4
 8003708:	2808d43a 	srli	r4,r5,16
 800370c:	280a943a 	slli	r5,r5,16
 8003710:	54ffffcc 	andi	r19,r10,65535
 8003714:	1907883a 	add	r3,r3,r4
 8003718:	2ccb883a 	add	r5,r5,r19
 800371c:	10c09336 	bltu	r2,r3,800396c <__divdf3+0x6b4>
 8003720:	10c0ad26 	beq	r2,r3,80039d8 <__divdf3+0x720>
 8003724:	10c7c83a 	sub	r3,r2,r3
 8003728:	3167c83a 	sub	r19,r6,r5
 800372c:	34ed803a 	cmpltu	r22,r6,r19
 8003730:	1dadc83a 	sub	r22,r3,r22
 8003734:	b400b226 	beq	r22,r16,8003a00 <__divdf3+0x748>
 8003738:	b009883a 	mov	r4,r22
 800373c:	b80b883a 	mov	r5,r23
 8003740:	d9c00115 	stw	r7,4(sp)
 8003744:	da000215 	stw	r8,8(sp)
 8003748:	8003e780 	call	8003e78 <__udivsi3>
 800374c:	b009883a 	mov	r4,r22
 8003750:	b80b883a 	mov	r5,r23
 8003754:	d8800315 	stw	r2,12(sp)
 8003758:	8003e800 	call	8003e80 <__umodsi3>
 800375c:	d9800317 	ldw	r6,12(sp)
 8003760:	1004943a 	slli	r2,r2,16
 8003764:	9808d43a 	srli	r4,r19,16
 8003768:	372d383a 	mul	r22,r6,fp
 800376c:	d9c00117 	ldw	r7,4(sp)
 8003770:	1106b03a 	or	r3,r2,r4
 8003774:	da000217 	ldw	r8,8(sp)
 8003778:	1d80062e 	bgeu	r3,r22,8003794 <__divdf3+0x4dc>
 800377c:	1c07883a 	add	r3,r3,r16
 8003780:	30bfffc4 	addi	r2,r6,-1
 8003784:	1c00a036 	bltu	r3,r16,8003a08 <__divdf3+0x750>
 8003788:	1d809f2e 	bgeu	r3,r22,8003a08 <__divdf3+0x750>
 800378c:	31bfff84 	addi	r6,r6,-2
 8003790:	1c07883a 	add	r3,r3,r16
 8003794:	1dadc83a 	sub	r22,r3,r22
 8003798:	b009883a 	mov	r4,r22
 800379c:	b80b883a 	mov	r5,r23
 80037a0:	d9800315 	stw	r6,12(sp)
 80037a4:	d9c00115 	stw	r7,4(sp)
 80037a8:	da000215 	stw	r8,8(sp)
 80037ac:	8003e780 	call	8003e78 <__udivsi3>
 80037b0:	b009883a 	mov	r4,r22
 80037b4:	b80b883a 	mov	r5,r23
 80037b8:	d8800015 	stw	r2,0(sp)
 80037bc:	8003e800 	call	8003e80 <__umodsi3>
 80037c0:	da400017 	ldw	r9,0(sp)
 80037c4:	1004943a 	slli	r2,r2,16
 80037c8:	993fffcc 	andi	r4,r19,65535
 80037cc:	4f39383a 	mul	fp,r9,fp
 80037d0:	1106b03a 	or	r3,r2,r4
 80037d4:	d9800317 	ldw	r6,12(sp)
 80037d8:	d9c00117 	ldw	r7,4(sp)
 80037dc:	da000217 	ldw	r8,8(sp)
 80037e0:	1f00062e 	bgeu	r3,fp,80037fc <__divdf3+0x544>
 80037e4:	1c07883a 	add	r3,r3,r16
 80037e8:	48bfffc4 	addi	r2,r9,-1
 80037ec:	1c008836 	bltu	r3,r16,8003a10 <__divdf3+0x758>
 80037f0:	1f00872e 	bgeu	r3,fp,8003a10 <__divdf3+0x758>
 80037f4:	4a7fff84 	addi	r9,r9,-2
 80037f8:	1c07883a 	add	r3,r3,r16
 80037fc:	3008943a 	slli	r4,r6,16
 8003800:	1f07c83a 	sub	r3,r3,fp
 8003804:	4926b03a 	or	r19,r9,r4
 8003808:	993fffcc 	andi	r4,r19,65535
 800380c:	980cd43a 	srli	r6,r19,16
 8003810:	220b383a 	mul	r5,r4,r8
 8003814:	21c5383a 	mul	r2,r4,r7
 8003818:	3211383a 	mul	r8,r6,r8
 800381c:	2808d43a 	srli	r4,r5,16
 8003820:	31cf383a 	mul	r7,r6,r7
 8003824:	4085883a 	add	r2,r8,r2
 8003828:	1105883a 	add	r2,r2,r4
 800382c:	1200022e 	bgeu	r2,r8,8003838 <__divdf3+0x580>
 8003830:	01000074 	movhi	r4,1
 8003834:	390f883a 	add	r7,r7,r4
 8003838:	1008d43a 	srli	r4,r2,16
 800383c:	1004943a 	slli	r2,r2,16
 8003840:	297fffcc 	andi	r5,r5,65535
 8003844:	390f883a 	add	r7,r7,r4
 8003848:	1145883a 	add	r2,r2,r5
 800384c:	19c06536 	bltu	r3,r7,80039e4 <__divdf3+0x72c>
 8003850:	19c09f26 	beq	r3,r7,8003ad0 <__divdf3+0x818>
 8003854:	9cc00054 	ori	r19,r19,1
 8003858:	a100ffc4 	addi	r4,r20,1023
 800385c:	013f500e 	bge	zero,r4,80035a0 <__ram_exceptions_end+0xf7f83360>
 8003860:	988001cc 	andi	r2,r19,7
 8003864:	10000726 	beq	r2,zero,8003884 <__divdf3+0x5cc>
 8003868:	98c003cc 	andi	r3,r19,15
 800386c:	00800104 	movi	r2,4
 8003870:	18800426 	beq	r3,r2,8003884 <__divdf3+0x5cc>
 8003874:	9885883a 	add	r2,r19,r2
 8003878:	14e1803a 	cmpltu	r16,r2,r19
 800387c:	8c23883a 	add	r17,r17,r16
 8003880:	1027883a 	mov	r19,r2
 8003884:	8880402c 	andhi	r2,r17,256
 8003888:	10000426 	beq	r2,zero,800389c <__divdf3+0x5e4>
 800388c:	00bfc034 	movhi	r2,65280
 8003890:	10bfffc4 	addi	r2,r2,-1
 8003894:	a1010004 	addi	r4,r20,1024
 8003898:	88a2703a 	and	r17,r17,r2
 800389c:	0081ff84 	movi	r2,2046
 80038a0:	113edf16 	blt	r2,r4,8003420 <__ram_exceptions_end+0xf7f831e0>
 80038a4:	9826d0fa 	srli	r19,r19,3
 80038a8:	8804977a 	slli	r2,r17,29
 80038ac:	8820927a 	slli	r16,r17,9
 80038b0:	2101ffcc 	andi	r4,r4,2047
 80038b4:	14e6b03a 	or	r19,r2,r19
 80038b8:	800ad33a 	srli	r5,r16,12
 80038bc:	9180004c 	andi	r6,r18,1
 80038c0:	003edb06 	br	8003430 <__ram_exceptions_end+0xf7f831f0>
 80038c4:	008000c4 	movi	r2,3
 80038c8:	4080a826 	beq	r8,r2,8003b6c <__divdf3+0x8b4>
 80038cc:	00800044 	movi	r2,1
 80038d0:	4080551e 	bne	r8,r2,8003a28 <__divdf3+0x770>
 80038d4:	e00d883a 	mov	r6,fp
 80038d8:	0009883a 	mov	r4,zero
 80038dc:	000b883a 	mov	r5,zero
 80038e0:	0027883a 	mov	r19,zero
 80038e4:	003ed206 	br	8003430 <__ram_exceptions_end+0xf7f831f0>
 80038e8:	00800434 	movhi	r2,16
 80038ec:	89400234 	orhi	r5,r17,8
 80038f0:	10bfffc4 	addi	r2,r2,-1
 80038f4:	b00d883a 	mov	r6,r22
 80038f8:	288a703a 	and	r5,r5,r2
 80038fc:	003f2606 	br	8003598 <__ram_exceptions_end+0xf7f83358>
 8003900:	d9800315 	stw	r6,12(sp)
 8003904:	d9c00115 	stw	r7,4(sp)
 8003908:	8003cf80 	call	8003cf8 <__clzsi2>
 800390c:	10c00804 	addi	r3,r2,32
 8003910:	010009c4 	movi	r4,39
 8003914:	d9800317 	ldw	r6,12(sp)
 8003918:	d9c00117 	ldw	r7,4(sp)
 800391c:	20fee30e 	bge	r4,r3,80034ac <__ram_exceptions_end+0xf7f8326c>
 8003920:	117ffe04 	addi	r5,r2,-8
 8003924:	9162983a 	sll	r17,r18,r5
 8003928:	0027883a 	mov	r19,zero
 800392c:	003ee606 	br	80034c8 <__ram_exceptions_end+0xf7f83288>
 8003930:	3009883a 	mov	r4,r6
 8003934:	d9800315 	stw	r6,12(sp)
 8003938:	da000215 	stw	r8,8(sp)
 800393c:	da400015 	stw	r9,0(sp)
 8003940:	8003cf80 	call	8003cf8 <__clzsi2>
 8003944:	10c00804 	addi	r3,r2,32
 8003948:	010009c4 	movi	r4,39
 800394c:	d9800317 	ldw	r6,12(sp)
 8003950:	da000217 	ldw	r8,8(sp)
 8003954:	da400017 	ldw	r9,0(sp)
 8003958:	20fef20e 	bge	r4,r3,8003524 <__ram_exceptions_end+0xf7f832e4>
 800395c:	10bffe04 	addi	r2,r2,-8
 8003960:	a8a0983a 	sll	r16,r21,r2
 8003964:	002b883a 	mov	r21,zero
 8003968:	003ef506 	br	8003540 <__ram_exceptions_end+0xf7f83300>
 800396c:	354d883a 	add	r6,r6,r21
 8003970:	3549803a 	cmpltu	r4,r6,r21
 8003974:	2409883a 	add	r4,r4,r16
 8003978:	2089883a 	add	r4,r4,r2
 800397c:	88bfffc4 	addi	r2,r17,-1
 8003980:	81000c2e 	bgeu	r16,r4,80039b4 <__divdf3+0x6fc>
 8003984:	20c04436 	bltu	r4,r3,8003a98 <__divdf3+0x7e0>
 8003988:	19006f26 	beq	r3,r4,8003b48 <__divdf3+0x890>
 800398c:	20c7c83a 	sub	r3,r4,r3
 8003990:	1023883a 	mov	r17,r2
 8003994:	003f6406 	br	8003728 <__ram_exceptions_end+0xf7f834e8>
 8003998:	9d7f1736 	bltu	r19,r21,80035f8 <__ram_exceptions_end+0xf7f833b8>
 800399c:	9806d07a 	srli	r3,r19,1
 80039a0:	880497fa 	slli	r2,r17,31
 80039a4:	980c97fa 	slli	r6,r19,31
 80039a8:	882cd07a 	srli	r22,r17,1
 80039ac:	18a6b03a 	or	r19,r3,r2
 80039b0:	003f1406 	br	8003604 <__ram_exceptions_end+0xf7f833c4>
 80039b4:	243ff51e 	bne	r4,r16,800398c <__ram_exceptions_end+0xf7f8374c>
 80039b8:	357ff22e 	bgeu	r6,r21,8003984 <__ram_exceptions_end+0xf7f83744>
 80039bc:	80c7c83a 	sub	r3,r16,r3
 80039c0:	1023883a 	mov	r17,r2
 80039c4:	003f5806 	br	8003728 <__ram_exceptions_end+0xf7f834e8>
 80039c8:	1013883a 	mov	r9,r2
 80039cc:	003f3d06 	br	80036c4 <__ram_exceptions_end+0xf7f83484>
 80039d0:	1023883a 	mov	r17,r2
 80039d4:	003f2506 	br	800366c <__ram_exceptions_end+0xf7f8342c>
 80039d8:	317fe436 	bltu	r6,r5,800396c <__ram_exceptions_end+0xf7f8372c>
 80039dc:	0007883a 	mov	r3,zero
 80039e0:	003f5106 	br	8003728 <__ram_exceptions_end+0xf7f834e8>
 80039e4:	1c07883a 	add	r3,r3,r16
 80039e8:	993fffc4 	addi	r4,r19,-1
 80039ec:	1c000a2e 	bgeu	r3,r16,8003a18 <__divdf3+0x760>
 80039f0:	2027883a 	mov	r19,r4
 80039f4:	19ff971e 	bne	r3,r7,8003854 <__ram_exceptions_end+0xf7f83614>
 80039f8:	a8bf961e 	bne	r21,r2,8003854 <__ram_exceptions_end+0xf7f83614>
 80039fc:	003f9606 	br	8003858 <__ram_exceptions_end+0xf7f83618>
 8003a00:	04ffffc4 	movi	r19,-1
 8003a04:	003f9406 	br	8003858 <__ram_exceptions_end+0xf7f83618>
 8003a08:	100d883a 	mov	r6,r2
 8003a0c:	003f6106 	br	8003794 <__ram_exceptions_end+0xf7f83554>
 8003a10:	1013883a 	mov	r9,r2
 8003a14:	003f7906 	br	80037fc <__ram_exceptions_end+0xf7f835bc>
 8003a18:	19c02636 	bltu	r3,r7,8003ab4 <__divdf3+0x7fc>
 8003a1c:	38c04d26 	beq	r7,r3,8003b54 <__divdf3+0x89c>
 8003a20:	2027883a 	mov	r19,r4
 8003a24:	003f8b06 	br	8003854 <__ram_exceptions_end+0xf7f83614>
 8003a28:	e025883a 	mov	r18,fp
 8003a2c:	003f8a06 	br	8003858 <__ram_exceptions_end+0xf7f83618>
 8003a30:	008007c4 	movi	r2,31
 8003a34:	14002a16 	blt	r2,r16,8003ae0 <__divdf3+0x828>
 8003a38:	a5010784 	addi	r20,r20,1054
 8003a3c:	8d04983a 	sll	r2,r17,r20
 8003a40:	9c06d83a 	srl	r3,r19,r16
 8003a44:	9d28983a 	sll	r20,r19,r20
 8003a48:	8c20d83a 	srl	r16,r17,r16
 8003a4c:	1886b03a 	or	r3,r3,r2
 8003a50:	a004c03a 	cmpne	r2,r20,zero
 8003a54:	1884b03a 	or	r2,r3,r2
 8003a58:	10c001cc 	andi	r3,r2,7
 8003a5c:	18000726 	beq	r3,zero,8003a7c <__divdf3+0x7c4>
 8003a60:	110003cc 	andi	r4,r2,15
 8003a64:	00c00104 	movi	r3,4
 8003a68:	20c00426 	beq	r4,r3,8003a7c <__divdf3+0x7c4>
 8003a6c:	10c00104 	addi	r3,r2,4
 8003a70:	1885803a 	cmpltu	r2,r3,r2
 8003a74:	80a1883a 	add	r16,r16,r2
 8003a78:	1805883a 	mov	r2,r3
 8003a7c:	80c0202c 	andhi	r3,r16,128
 8003a80:	18002d26 	beq	r3,zero,8003b38 <__divdf3+0x880>
 8003a84:	9180004c 	andi	r6,r18,1
 8003a88:	01000044 	movi	r4,1
 8003a8c:	000b883a 	mov	r5,zero
 8003a90:	0027883a 	mov	r19,zero
 8003a94:	003e6606 	br	8003430 <__ram_exceptions_end+0xf7f831f0>
 8003a98:	354d883a 	add	r6,r6,r21
 8003a9c:	356d803a 	cmpltu	r22,r6,r21
 8003aa0:	b42d883a 	add	r22,r22,r16
 8003aa4:	b12d883a 	add	r22,r22,r4
 8003aa8:	8c7fff84 	addi	r17,r17,-2
 8003aac:	b0c7c83a 	sub	r3,r22,r3
 8003ab0:	003f1d06 	br	8003728 <__ram_exceptions_end+0xf7f834e8>
 8003ab4:	ad4b883a 	add	r5,r21,r21
 8003ab8:	2d6b803a 	cmpltu	r21,r5,r21
 8003abc:	ac2b883a 	add	r21,r21,r16
 8003ac0:	1d47883a 	add	r3,r3,r21
 8003ac4:	993fff84 	addi	r4,r19,-2
 8003ac8:	282b883a 	mov	r21,r5
 8003acc:	003fc806 	br	80039f0 <__ram_exceptions_end+0xf7f837b0>
 8003ad0:	103fc41e 	bne	r2,zero,80039e4 <__ram_exceptions_end+0xf7f837a4>
 8003ad4:	002b883a 	mov	r21,zero
 8003ad8:	a8bf5e1e 	bne	r21,r2,8003854 <__ram_exceptions_end+0xf7f83614>
 8003adc:	003f5e06 	br	8003858 <__ram_exceptions_end+0xf7f83618>
 8003ae0:	00bef884 	movi	r2,-1054
 8003ae4:	1505c83a 	sub	r2,r2,r20
 8003ae8:	00c00804 	movi	r3,32
 8003aec:	8884d83a 	srl	r2,r17,r2
 8003af0:	80c01c26 	beq	r16,r3,8003b64 <__divdf3+0x8ac>
 8003af4:	a0c10f84 	addi	r3,r20,1086
 8003af8:	88c6983a 	sll	r3,r17,r3
 8003afc:	1cc6b03a 	or	r3,r3,r19
 8003b00:	1806c03a 	cmpne	r3,r3,zero
 8003b04:	1884b03a 	or	r2,r3,r2
 8003b08:	140001cc 	andi	r16,r2,7
 8003b0c:	8000061e 	bne	r16,zero,8003b28 <__divdf3+0x870>
 8003b10:	000b883a 	mov	r5,zero
 8003b14:	1004d0fa 	srli	r2,r2,3
 8003b18:	9180004c 	andi	r6,r18,1
 8003b1c:	0009883a 	mov	r4,zero
 8003b20:	1426b03a 	or	r19,r2,r16
 8003b24:	003e4206 	br	8003430 <__ram_exceptions_end+0xf7f831f0>
 8003b28:	110003cc 	andi	r4,r2,15
 8003b2c:	00c00104 	movi	r3,4
 8003b30:	0021883a 	mov	r16,zero
 8003b34:	20ffcd1e 	bne	r4,r3,8003a6c <__ram_exceptions_end+0xf7f8382c>
 8003b38:	800a927a 	slli	r5,r16,9
 8003b3c:	8020977a 	slli	r16,r16,29
 8003b40:	280ad33a 	srli	r5,r5,12
 8003b44:	003ff306 	br	8003b14 <__ram_exceptions_end+0xf7f838d4>
 8003b48:	317fd336 	bltu	r6,r5,8003a98 <__ram_exceptions_end+0xf7f83858>
 8003b4c:	1023883a 	mov	r17,r2
 8003b50:	003fa206 	br	80039dc <__ram_exceptions_end+0xf7f8379c>
 8003b54:	a8bfd736 	bltu	r21,r2,8003ab4 <__ram_exceptions_end+0xf7f83874>
 8003b58:	2027883a 	mov	r19,r4
 8003b5c:	a8bf3d1e 	bne	r21,r2,8003854 <__ram_exceptions_end+0xf7f83614>
 8003b60:	003f3d06 	br	8003858 <__ram_exceptions_end+0xf7f83618>
 8003b64:	0007883a 	mov	r3,zero
 8003b68:	003fe406 	br	8003afc <__ram_exceptions_end+0xf7f838bc>
 8003b6c:	00800434 	movhi	r2,16
 8003b70:	89400234 	orhi	r5,r17,8
 8003b74:	10bfffc4 	addi	r2,r2,-1
 8003b78:	e00d883a 	mov	r6,fp
 8003b7c:	288a703a 	and	r5,r5,r2
 8003b80:	003e8506 	br	8003598 <__ram_exceptions_end+0xf7f83358>

08003b84 <__floatsidf>:
 8003b84:	defffd04 	addi	sp,sp,-12
 8003b88:	dc400115 	stw	r17,4(sp)
 8003b8c:	dfc00215 	stw	ra,8(sp)
 8003b90:	dc000015 	stw	r16,0(sp)
 8003b94:	2023883a 	mov	r17,r4
 8003b98:	20001426 	beq	r4,zero,8003bec <__floatsidf+0x68>
 8003b9c:	2020d7fa 	srli	r16,r4,31
 8003ba0:	80000126 	beq	r16,zero,8003ba8 <__floatsidf+0x24>
 8003ba4:	0123c83a 	sub	r17,zero,r4
 8003ba8:	8809883a 	mov	r4,r17
 8003bac:	8003cf80 	call	8003cf8 <__clzsi2>
 8003bb0:	01410784 	movi	r5,1054
 8003bb4:	00c00284 	movi	r3,10
 8003bb8:	288bc83a 	sub	r5,r5,r2
 8003bbc:	18801c16 	blt	r3,r2,8003c30 <__floatsidf+0xac>
 8003bc0:	00c002c4 	movi	r3,11
 8003bc4:	1887c83a 	sub	r3,r3,r2
 8003bc8:	88c8d83a 	srl	r4,r17,r3
 8003bcc:	00c00434 	movhi	r3,16
 8003bd0:	18ffffc4 	addi	r3,r3,-1
 8003bd4:	10800544 	addi	r2,r2,21
 8003bd8:	20c8703a 	and	r4,r4,r3
 8003bdc:	8884983a 	sll	r2,r17,r2
 8003be0:	28c1ffcc 	andi	r3,r5,2047
 8003be4:	800d883a 	mov	r6,r16
 8003be8:	00000406 	br	8003bfc <__floatsidf+0x78>
 8003bec:	000d883a 	mov	r6,zero
 8003bf0:	0007883a 	mov	r3,zero
 8003bf4:	0009883a 	mov	r4,zero
 8003bf8:	0005883a 	mov	r2,zero
 8003bfc:	180a953a 	slli	r5,r3,20
 8003c00:	31803fcc 	andi	r6,r6,255
 8003c04:	00c00434 	movhi	r3,16
 8003c08:	300c97fa 	slli	r6,r6,31
 8003c0c:	18ffffc4 	addi	r3,r3,-1
 8003c10:	20c6703a 	and	r3,r4,r3
 8003c14:	1946b03a 	or	r3,r3,r5
 8003c18:	1986b03a 	or	r3,r3,r6
 8003c1c:	dfc00217 	ldw	ra,8(sp)
 8003c20:	dc400117 	ldw	r17,4(sp)
 8003c24:	dc000017 	ldw	r16,0(sp)
 8003c28:	dec00304 	addi	sp,sp,12
 8003c2c:	f800283a 	ret
 8003c30:	10fffd44 	addi	r3,r2,-11
 8003c34:	88c8983a 	sll	r4,r17,r3
 8003c38:	00800434 	movhi	r2,16
 8003c3c:	10bfffc4 	addi	r2,r2,-1
 8003c40:	2088703a 	and	r4,r4,r2
 8003c44:	28c1ffcc 	andi	r3,r5,2047
 8003c48:	800d883a 	mov	r6,r16
 8003c4c:	0005883a 	mov	r2,zero
 8003c50:	003fea06 	br	8003bfc <__ram_exceptions_end+0xf7f839bc>

08003c54 <__floatunsidf>:
 8003c54:	defffe04 	addi	sp,sp,-8
 8003c58:	dc000015 	stw	r16,0(sp)
 8003c5c:	dfc00115 	stw	ra,4(sp)
 8003c60:	2021883a 	mov	r16,r4
 8003c64:	20001026 	beq	r4,zero,8003ca8 <__floatunsidf+0x54>
 8003c68:	8003cf80 	call	8003cf8 <__clzsi2>
 8003c6c:	01410784 	movi	r5,1054
 8003c70:	100d883a 	mov	r6,r2
 8003c74:	288bc83a 	sub	r5,r5,r2
 8003c78:	00800284 	movi	r2,10
 8003c7c:	11801616 	blt	r2,r6,8003cd8 <__floatunsidf+0x84>
 8003c80:	008002c4 	movi	r2,11
 8003c84:	1185c83a 	sub	r2,r2,r6
 8003c88:	8084d83a 	srl	r2,r16,r2
 8003c8c:	00c00434 	movhi	r3,16
 8003c90:	31c00544 	addi	r7,r6,21
 8003c94:	18ffffc4 	addi	r3,r3,-1
 8003c98:	81e0983a 	sll	r16,r16,r7
 8003c9c:	10cc703a 	and	r6,r2,r3
 8003ca0:	2941ffcc 	andi	r5,r5,2047
 8003ca4:	00000206 	br	8003cb0 <__floatunsidf+0x5c>
 8003ca8:	000b883a 	mov	r5,zero
 8003cac:	000d883a 	mov	r6,zero
 8003cb0:	280a953a 	slli	r5,r5,20
 8003cb4:	00c00434 	movhi	r3,16
 8003cb8:	18ffffc4 	addi	r3,r3,-1
 8003cbc:	30c6703a 	and	r3,r6,r3
 8003cc0:	8005883a 	mov	r2,r16
 8003cc4:	1946b03a 	or	r3,r3,r5
 8003cc8:	dfc00117 	ldw	ra,4(sp)
 8003ccc:	dc000017 	ldw	r16,0(sp)
 8003cd0:	dec00204 	addi	sp,sp,8
 8003cd4:	f800283a 	ret
 8003cd8:	31bffd44 	addi	r6,r6,-11
 8003cdc:	818c983a 	sll	r6,r16,r6
 8003ce0:	00800434 	movhi	r2,16
 8003ce4:	10bfffc4 	addi	r2,r2,-1
 8003ce8:	2941ffcc 	andi	r5,r5,2047
 8003cec:	0021883a 	mov	r16,zero
 8003cf0:	308c703a 	and	r6,r6,r2
 8003cf4:	003fee06 	br	8003cb0 <__ram_exceptions_end+0xf7f83a70>

08003cf8 <__clzsi2>:
 8003cf8:	00bfffd4 	movui	r2,65535
 8003cfc:	11000b36 	bltu	r2,r4,8003d2c <__clzsi2+0x34>
 8003d00:	00803fc4 	movi	r2,255
 8003d04:	1100122e 	bgeu	r2,r4,8003d50 <__clzsi2+0x58>
 8003d08:	00c00204 	movi	r3,8
 8003d0c:	01400604 	movi	r5,24
 8003d10:	20c8d83a 	srl	r4,r4,r3
 8003d14:	00820074 	movhi	r2,2049
 8003d18:	1089d204 	addi	r2,r2,10056
 8003d1c:	1109883a 	add	r4,r2,r4
 8003d20:	20800003 	ldbu	r2,0(r4)
 8003d24:	2885c83a 	sub	r2,r5,r2
 8003d28:	f800283a 	ret
 8003d2c:	00804034 	movhi	r2,256
 8003d30:	10bfffc4 	addi	r2,r2,-1
 8003d34:	11000336 	bltu	r2,r4,8003d44 <__clzsi2+0x4c>
 8003d38:	00c00404 	movi	r3,16
 8003d3c:	180b883a 	mov	r5,r3
 8003d40:	003ff306 	br	8003d10 <__ram_exceptions_end+0xf7f83ad0>
 8003d44:	00c00604 	movi	r3,24
 8003d48:	01400204 	movi	r5,8
 8003d4c:	003ff006 	br	8003d10 <__ram_exceptions_end+0xf7f83ad0>
 8003d50:	0007883a 	mov	r3,zero
 8003d54:	01400804 	movi	r5,32
 8003d58:	003fed06 	br	8003d10 <__ram_exceptions_end+0xf7f83ad0>

08003d5c <udivmodsi4>:
 8003d5c:	2900182e 	bgeu	r5,r4,8003dc0 <udivmodsi4+0x64>
 8003d60:	28001716 	blt	r5,zero,8003dc0 <udivmodsi4+0x64>
 8003d64:	00800804 	movi	r2,32
 8003d68:	00c00044 	movi	r3,1
 8003d6c:	00000206 	br	8003d78 <udivmodsi4+0x1c>
 8003d70:	10001126 	beq	r2,zero,8003db8 <udivmodsi4+0x5c>
 8003d74:	28000516 	blt	r5,zero,8003d8c <udivmodsi4+0x30>
 8003d78:	294b883a 	add	r5,r5,r5
 8003d7c:	10bfffc4 	addi	r2,r2,-1
 8003d80:	18c7883a 	add	r3,r3,r3
 8003d84:	293ffa36 	bltu	r5,r4,8003d70 <__ram_exceptions_end+0xf7f83b30>
 8003d88:	18000b26 	beq	r3,zero,8003db8 <udivmodsi4+0x5c>
 8003d8c:	0005883a 	mov	r2,zero
 8003d90:	21400236 	bltu	r4,r5,8003d9c <udivmodsi4+0x40>
 8003d94:	2149c83a 	sub	r4,r4,r5
 8003d98:	10c4b03a 	or	r2,r2,r3
 8003d9c:	1806d07a 	srli	r3,r3,1
 8003da0:	280ad07a 	srli	r5,r5,1
 8003da4:	183ffa1e 	bne	r3,zero,8003d90 <__ram_exceptions_end+0xf7f83b50>
 8003da8:	3000011e 	bne	r6,zero,8003db0 <udivmodsi4+0x54>
 8003dac:	f800283a 	ret
 8003db0:	2005883a 	mov	r2,r4
 8003db4:	f800283a 	ret
 8003db8:	0005883a 	mov	r2,zero
 8003dbc:	003ffa06 	br	8003da8 <__ram_exceptions_end+0xf7f83b68>
 8003dc0:	00c00044 	movi	r3,1
 8003dc4:	003ff106 	br	8003d8c <__ram_exceptions_end+0xf7f83b4c>

08003dc8 <__divsi3>:
 8003dc8:	defffe04 	addi	sp,sp,-8
 8003dcc:	dfc00115 	stw	ra,4(sp)
 8003dd0:	dc000015 	stw	r16,0(sp)
 8003dd4:	20000b16 	blt	r4,zero,8003e04 <__divsi3+0x3c>
 8003dd8:	0021883a 	mov	r16,zero
 8003ddc:	28000c16 	blt	r5,zero,8003e10 <__divsi3+0x48>
 8003de0:	000d883a 	mov	r6,zero
 8003de4:	8003d5c0 	call	8003d5c <udivmodsi4>
 8003de8:	0407c83a 	sub	r3,zero,r16
 8003dec:	1884f03a 	xor	r2,r3,r2
 8003df0:	1405883a 	add	r2,r2,r16
 8003df4:	dfc00117 	ldw	ra,4(sp)
 8003df8:	dc000017 	ldw	r16,0(sp)
 8003dfc:	dec00204 	addi	sp,sp,8
 8003e00:	f800283a 	ret
 8003e04:	0109c83a 	sub	r4,zero,r4
 8003e08:	04000044 	movi	r16,1
 8003e0c:	283ff40e 	bge	r5,zero,8003de0 <__ram_exceptions_end+0xf7f83ba0>
 8003e10:	014bc83a 	sub	r5,zero,r5
 8003e14:	8400005c 	xori	r16,r16,1
 8003e18:	003ff106 	br	8003de0 <__ram_exceptions_end+0xf7f83ba0>

08003e1c <__modsi3>:
 8003e1c:	defffd04 	addi	sp,sp,-12
 8003e20:	dfc00215 	stw	ra,8(sp)
 8003e24:	dc400115 	stw	r17,4(sp)
 8003e28:	dc000015 	stw	r16,0(sp)
 8003e2c:	20000c16 	blt	r4,zero,8003e60 <__modsi3+0x44>
 8003e30:	0023883a 	mov	r17,zero
 8003e34:	0021883a 	mov	r16,zero
 8003e38:	28000d16 	blt	r5,zero,8003e70 <__modsi3+0x54>
 8003e3c:	01800044 	movi	r6,1
 8003e40:	8003d5c0 	call	8003d5c <udivmodsi4>
 8003e44:	1404f03a 	xor	r2,r2,r16
 8003e48:	8885883a 	add	r2,r17,r2
 8003e4c:	dfc00217 	ldw	ra,8(sp)
 8003e50:	dc400117 	ldw	r17,4(sp)
 8003e54:	dc000017 	ldw	r16,0(sp)
 8003e58:	dec00304 	addi	sp,sp,12
 8003e5c:	f800283a 	ret
 8003e60:	0109c83a 	sub	r4,zero,r4
 8003e64:	04400044 	movi	r17,1
 8003e68:	043fffc4 	movi	r16,-1
 8003e6c:	283ff30e 	bge	r5,zero,8003e3c <__ram_exceptions_end+0xf7f83bfc>
 8003e70:	014bc83a 	sub	r5,zero,r5
 8003e74:	003ff106 	br	8003e3c <__ram_exceptions_end+0xf7f83bfc>

08003e78 <__udivsi3>:
 8003e78:	000d883a 	mov	r6,zero
 8003e7c:	8003d5c1 	jmpi	8003d5c <udivmodsi4>

08003e80 <__umodsi3>:
 8003e80:	01800044 	movi	r6,1
 8003e84:	8003d5c1 	jmpi	8003d5c <udivmodsi4>

08003e88 <memset>:
 8003e88:	20c000cc 	andi	r3,r4,3
 8003e8c:	2005883a 	mov	r2,r4
 8003e90:	18004326 	beq	r3,zero,8003fa0 <memset+0x118>
 8003e94:	31ffffc4 	addi	r7,r6,-1
 8003e98:	30004026 	beq	r6,zero,8003f9c <memset+0x114>
 8003e9c:	2813883a 	mov	r9,r5
 8003ea0:	200d883a 	mov	r6,r4
 8003ea4:	2007883a 	mov	r3,r4
 8003ea8:	00000406 	br	8003ebc <memset+0x34>
 8003eac:	3a3fffc4 	addi	r8,r7,-1
 8003eb0:	31800044 	addi	r6,r6,1
 8003eb4:	38003926 	beq	r7,zero,8003f9c <memset+0x114>
 8003eb8:	400f883a 	mov	r7,r8
 8003ebc:	18c00044 	addi	r3,r3,1
 8003ec0:	32400005 	stb	r9,0(r6)
 8003ec4:	1a0000cc 	andi	r8,r3,3
 8003ec8:	403ff81e 	bne	r8,zero,8003eac <__ram_exceptions_end+0xf7f83c6c>
 8003ecc:	010000c4 	movi	r4,3
 8003ed0:	21c02d2e 	bgeu	r4,r7,8003f88 <memset+0x100>
 8003ed4:	29803fcc 	andi	r6,r5,255
 8003ed8:	3008923a 	slli	r4,r6,8
 8003edc:	218cb03a 	or	r6,r4,r6
 8003ee0:	3008943a 	slli	r4,r6,16
 8003ee4:	218cb03a 	or	r6,r4,r6
 8003ee8:	010003c4 	movi	r4,15
 8003eec:	21c0182e 	bgeu	r4,r7,8003f50 <memset+0xc8>
 8003ef0:	3b3ffc04 	addi	r12,r7,-16
 8003ef4:	6018d13a 	srli	r12,r12,4
 8003ef8:	1a000104 	addi	r8,r3,4
 8003efc:	1ac00204 	addi	r11,r3,8
 8003f00:	6008913a 	slli	r4,r12,4
 8003f04:	1a800304 	addi	r10,r3,12
 8003f08:	1813883a 	mov	r9,r3
 8003f0c:	21000504 	addi	r4,r4,20
 8003f10:	1909883a 	add	r4,r3,r4
 8003f14:	49800015 	stw	r6,0(r9)
 8003f18:	41800015 	stw	r6,0(r8)
 8003f1c:	59800015 	stw	r6,0(r11)
 8003f20:	51800015 	stw	r6,0(r10)
 8003f24:	42000404 	addi	r8,r8,16
 8003f28:	4a400404 	addi	r9,r9,16
 8003f2c:	5ac00404 	addi	r11,r11,16
 8003f30:	52800404 	addi	r10,r10,16
 8003f34:	413ff71e 	bne	r8,r4,8003f14 <__ram_exceptions_end+0xf7f83cd4>
 8003f38:	63000044 	addi	r12,r12,1
 8003f3c:	6018913a 	slli	r12,r12,4
 8003f40:	39c003cc 	andi	r7,r7,15
 8003f44:	010000c4 	movi	r4,3
 8003f48:	1b07883a 	add	r3,r3,r12
 8003f4c:	21c00e2e 	bgeu	r4,r7,8003f88 <memset+0x100>
 8003f50:	1813883a 	mov	r9,r3
 8003f54:	3811883a 	mov	r8,r7
 8003f58:	010000c4 	movi	r4,3
 8003f5c:	49800015 	stw	r6,0(r9)
 8003f60:	423fff04 	addi	r8,r8,-4
 8003f64:	4a400104 	addi	r9,r9,4
 8003f68:	223ffc36 	bltu	r4,r8,8003f5c <__ram_exceptions_end+0xf7f83d1c>
 8003f6c:	393fff04 	addi	r4,r7,-4
 8003f70:	2008d0ba 	srli	r4,r4,2
 8003f74:	39c000cc 	andi	r7,r7,3
 8003f78:	21000044 	addi	r4,r4,1
 8003f7c:	2109883a 	add	r4,r4,r4
 8003f80:	2109883a 	add	r4,r4,r4
 8003f84:	1907883a 	add	r3,r3,r4
 8003f88:	38000426 	beq	r7,zero,8003f9c <memset+0x114>
 8003f8c:	19cf883a 	add	r7,r3,r7
 8003f90:	19400005 	stb	r5,0(r3)
 8003f94:	18c00044 	addi	r3,r3,1
 8003f98:	19fffd1e 	bne	r3,r7,8003f90 <__ram_exceptions_end+0xf7f83d50>
 8003f9c:	f800283a 	ret
 8003fa0:	2007883a 	mov	r3,r4
 8003fa4:	300f883a 	mov	r7,r6
 8003fa8:	003fc806 	br	8003ecc <__ram_exceptions_end+0xf7f83c8c>

08003fac <_printf_r>:
 8003fac:	defffd04 	addi	sp,sp,-12
 8003fb0:	dfc00015 	stw	ra,0(sp)
 8003fb4:	d9800115 	stw	r6,4(sp)
 8003fb8:	d9c00215 	stw	r7,8(sp)
 8003fbc:	280d883a 	mov	r6,r5
 8003fc0:	21400217 	ldw	r5,8(r4)
 8003fc4:	d9c00104 	addi	r7,sp,4
 8003fc8:	80041980 	call	8004198 <___vfprintf_internal_r>
 8003fcc:	dfc00017 	ldw	ra,0(sp)
 8003fd0:	dec00304 	addi	sp,sp,12
 8003fd4:	f800283a 	ret

08003fd8 <printf>:
 8003fd8:	defffc04 	addi	sp,sp,-16
 8003fdc:	dfc00015 	stw	ra,0(sp)
 8003fe0:	d9400115 	stw	r5,4(sp)
 8003fe4:	d9800215 	stw	r6,8(sp)
 8003fe8:	d9c00315 	stw	r7,12(sp)
 8003fec:	00820074 	movhi	r2,2049
 8003ff0:	10914804 	addi	r2,r2,17696
 8003ff4:	10800017 	ldw	r2,0(r2)
 8003ff8:	200b883a 	mov	r5,r4
 8003ffc:	d9800104 	addi	r6,sp,4
 8004000:	11000217 	ldw	r4,8(r2)
 8004004:	80061940 	call	8006194 <__vfprintf_internal>
 8004008:	dfc00017 	ldw	ra,0(sp)
 800400c:	dec00404 	addi	sp,sp,16
 8004010:	f800283a 	ret

08004014 <_putchar_r>:
 8004014:	21800217 	ldw	r6,8(r4)
 8004018:	800a9781 	jmpi	800a978 <_putc_r>

0800401c <putchar>:
 800401c:	00820074 	movhi	r2,2049
 8004020:	10914804 	addi	r2,r2,17696
 8004024:	200b883a 	mov	r5,r4
 8004028:	11000017 	ldw	r4,0(r2)
 800402c:	21800217 	ldw	r6,8(r4)
 8004030:	800a9781 	jmpi	800a978 <_putc_r>

08004034 <_puts_r>:
 8004034:	defff604 	addi	sp,sp,-40
 8004038:	dc000715 	stw	r16,28(sp)
 800403c:	2021883a 	mov	r16,r4
 8004040:	2809883a 	mov	r4,r5
 8004044:	dc400815 	stw	r17,32(sp)
 8004048:	dfc00915 	stw	ra,36(sp)
 800404c:	2823883a 	mov	r17,r5
 8004050:	80041000 	call	8004100 <strlen>
 8004054:	00c20074 	movhi	r3,2049
 8004058:	18d14804 	addi	r3,r3,17696
 800405c:	18c00017 	ldw	r3,0(r3)
 8004060:	11000044 	addi	r4,r2,1
 8004064:	d8800115 	stw	r2,4(sp)
 8004068:	18c00217 	ldw	r3,8(r3)
 800406c:	01420074 	movhi	r5,2049
 8004070:	294a1204 	addi	r5,r5,10312
 8004074:	1880030b 	ldhu	r2,12(r3)
 8004078:	d9400215 	stw	r5,8(sp)
 800407c:	d9000615 	stw	r4,24(sp)
 8004080:	01400044 	movi	r5,1
 8004084:	01000084 	movi	r4,2
 8004088:	d9000515 	stw	r4,20(sp)
 800408c:	dc400015 	stw	r17,0(sp)
 8004090:	d9400315 	stw	r5,12(sp)
 8004094:	dec00415 	stw	sp,16(sp)
 8004098:	1108000c 	andi	r4,r2,8192
 800409c:	2000061e 	bne	r4,zero,80040b8 <_puts_r+0x84>
 80040a0:	19401917 	ldw	r5,100(r3)
 80040a4:	0137ffc4 	movi	r4,-8193
 80040a8:	10880014 	ori	r2,r2,8192
 80040ac:	2908703a 	and	r4,r5,r4
 80040b0:	1880030d 	sth	r2,12(r3)
 80040b4:	19001915 	stw	r4,100(r3)
 80040b8:	81400217 	ldw	r5,8(r16)
 80040bc:	8009883a 	mov	r4,r16
 80040c0:	d9800404 	addi	r6,sp,16
 80040c4:	800861c0 	call	800861c <__sfvwrite_r>
 80040c8:	1000061e 	bne	r2,zero,80040e4 <_puts_r+0xb0>
 80040cc:	00800284 	movi	r2,10
 80040d0:	dfc00917 	ldw	ra,36(sp)
 80040d4:	dc400817 	ldw	r17,32(sp)
 80040d8:	dc000717 	ldw	r16,28(sp)
 80040dc:	dec00a04 	addi	sp,sp,40
 80040e0:	f800283a 	ret
 80040e4:	00bfffc4 	movi	r2,-1
 80040e8:	003ff906 	br	80040d0 <__ram_exceptions_end+0xf7f83e90>

080040ec <puts>:
 80040ec:	00820074 	movhi	r2,2049
 80040f0:	10914804 	addi	r2,r2,17696
 80040f4:	200b883a 	mov	r5,r4
 80040f8:	11000017 	ldw	r4,0(r2)
 80040fc:	80040341 	jmpi	8004034 <_puts_r>

08004100 <strlen>:
 8004100:	208000cc 	andi	r2,r4,3
 8004104:	10002026 	beq	r2,zero,8004188 <strlen+0x88>
 8004108:	20800007 	ldb	r2,0(r4)
 800410c:	10002026 	beq	r2,zero,8004190 <strlen+0x90>
 8004110:	2005883a 	mov	r2,r4
 8004114:	00000206 	br	8004120 <strlen+0x20>
 8004118:	10c00007 	ldb	r3,0(r2)
 800411c:	18001826 	beq	r3,zero,8004180 <strlen+0x80>
 8004120:	10800044 	addi	r2,r2,1
 8004124:	10c000cc 	andi	r3,r2,3
 8004128:	183ffb1e 	bne	r3,zero,8004118 <__ram_exceptions_end+0xf7f83ed8>
 800412c:	10c00017 	ldw	r3,0(r2)
 8004130:	01ffbff4 	movhi	r7,65279
 8004134:	39ffbfc4 	addi	r7,r7,-257
 8004138:	00ca303a 	nor	r5,zero,r3
 800413c:	01a02074 	movhi	r6,32897
 8004140:	19c7883a 	add	r3,r3,r7
 8004144:	31a02004 	addi	r6,r6,-32640
 8004148:	1946703a 	and	r3,r3,r5
 800414c:	1986703a 	and	r3,r3,r6
 8004150:	1800091e 	bne	r3,zero,8004178 <strlen+0x78>
 8004154:	10800104 	addi	r2,r2,4
 8004158:	10c00017 	ldw	r3,0(r2)
 800415c:	19cb883a 	add	r5,r3,r7
 8004160:	00c6303a 	nor	r3,zero,r3
 8004164:	28c6703a 	and	r3,r5,r3
 8004168:	1986703a 	and	r3,r3,r6
 800416c:	183ff926 	beq	r3,zero,8004154 <__ram_exceptions_end+0xf7f83f14>
 8004170:	00000106 	br	8004178 <strlen+0x78>
 8004174:	10800044 	addi	r2,r2,1
 8004178:	10c00007 	ldb	r3,0(r2)
 800417c:	183ffd1e 	bne	r3,zero,8004174 <__ram_exceptions_end+0xf7f83f34>
 8004180:	1105c83a 	sub	r2,r2,r4
 8004184:	f800283a 	ret
 8004188:	2005883a 	mov	r2,r4
 800418c:	003fe706 	br	800412c <__ram_exceptions_end+0xf7f83eec>
 8004190:	0005883a 	mov	r2,zero
 8004194:	f800283a 	ret

08004198 <___vfprintf_internal_r>:
 8004198:	defeb604 	addi	sp,sp,-1320
 800419c:	dfc14915 	stw	ra,1316(sp)
 80041a0:	ddc14715 	stw	r23,1308(sp)
 80041a4:	dd814615 	stw	r22,1304(sp)
 80041a8:	282f883a 	mov	r23,r5
 80041ac:	202d883a 	mov	r22,r4
 80041b0:	d9812a15 	stw	r6,1192(sp)
 80041b4:	d9c12d15 	stw	r7,1204(sp)
 80041b8:	df014815 	stw	fp,1312(sp)
 80041bc:	dd414515 	stw	r21,1300(sp)
 80041c0:	dd014415 	stw	r20,1296(sp)
 80041c4:	dcc14315 	stw	r19,1292(sp)
 80041c8:	dc814215 	stw	r18,1288(sp)
 80041cc:	dc414115 	stw	r17,1284(sp)
 80041d0:	dc014015 	stw	r16,1280(sp)
 80041d4:	8008cdc0 	call	8008cdc <_localeconv_r>
 80041d8:	10800017 	ldw	r2,0(r2)
 80041dc:	1009883a 	mov	r4,r2
 80041e0:	d8813515 	stw	r2,1236(sp)
 80041e4:	80041000 	call	8004100 <strlen>
 80041e8:	d8813815 	stw	r2,1248(sp)
 80041ec:	b0000226 	beq	r22,zero,80041f8 <___vfprintf_internal_r+0x60>
 80041f0:	b0800e17 	ldw	r2,56(r22)
 80041f4:	10010426 	beq	r2,zero,8004608 <___vfprintf_internal_r+0x470>
 80041f8:	b8c0030b 	ldhu	r3,12(r23)
 80041fc:	1908000c 	andi	r4,r3,8192
 8004200:	1805883a 	mov	r2,r3
 8004204:	2000071e 	bne	r4,zero,8004224 <___vfprintf_internal_r+0x8c>
 8004208:	b9001917 	ldw	r4,100(r23)
 800420c:	18880014 	ori	r2,r3,8192
 8004210:	00f7ffc4 	movi	r3,-8193
 8004214:	20c8703a 	and	r4,r4,r3
 8004218:	b880030d 	sth	r2,12(r23)
 800421c:	1007883a 	mov	r3,r2
 8004220:	b9001915 	stw	r4,100(r23)
 8004224:	1100020c 	andi	r4,r2,8
 8004228:	2000a726 	beq	r4,zero,80044c8 <___vfprintf_internal_r+0x330>
 800422c:	b9000417 	ldw	r4,16(r23)
 8004230:	2000a526 	beq	r4,zero,80044c8 <___vfprintf_internal_r+0x330>
 8004234:	1080068c 	andi	r2,r2,26
 8004238:	01000284 	movi	r4,10
 800423c:	1100ab26 	beq	r2,r4,80044ec <___vfprintf_internal_r+0x354>
 8004240:	dac10e04 	addi	r11,sp,1080
 8004244:	db010dc4 	addi	r12,sp,1079
 8004248:	d8800404 	addi	r2,sp,16
 800424c:	05020074 	movhi	r20,2049
 8004250:	dac12815 	stw	r11,1184(sp)
 8004254:	5b17c83a 	sub	r11,r11,r12
 8004258:	a50a2384 	addi	r20,r20,10382
 800425c:	db012915 	stw	r12,1188(sp)
 8004260:	d8811e15 	stw	r2,1144(sp)
 8004264:	d8012015 	stw	zero,1152(sp)
 8004268:	d8011f15 	stw	zero,1148(sp)
 800426c:	d8013315 	stw	zero,1228(sp)
 8004270:	d8013715 	stw	zero,1244(sp)
 8004274:	d8013915 	stw	zero,1252(sp)
 8004278:	d8013b15 	stw	zero,1260(sp)
 800427c:	d8013a15 	stw	zero,1256(sp)
 8004280:	d8012f15 	stw	zero,1212(sp)
 8004284:	1011883a 	mov	r8,r2
 8004288:	dac13c15 	stw	r11,1264(sp)
 800428c:	db012a17 	ldw	r12,1192(sp)
 8004290:	60800007 	ldb	r2,0(r12)
 8004294:	1000df26 	beq	r2,zero,8004614 <___vfprintf_internal_r+0x47c>
 8004298:	00c00944 	movi	r3,37
 800429c:	10c0dd26 	beq	r2,r3,8004614 <___vfprintf_internal_r+0x47c>
 80042a0:	6021883a 	mov	r16,r12
 80042a4:	00000106 	br	80042ac <___vfprintf_internal_r+0x114>
 80042a8:	10c08426 	beq	r2,r3,80044bc <___vfprintf_internal_r+0x324>
 80042ac:	84000044 	addi	r16,r16,1
 80042b0:	80800007 	ldb	r2,0(r16)
 80042b4:	103ffc1e 	bne	r2,zero,80042a8 <__ram_exceptions_end+0xf7f84068>
 80042b8:	dac12a17 	ldw	r11,1192(sp)
 80042bc:	82e3c83a 	sub	r17,r16,r11
 80042c0:	88000f26 	beq	r17,zero,8004300 <___vfprintf_internal_r+0x168>
 80042c4:	d8c12017 	ldw	r3,1152(sp)
 80042c8:	d8811f17 	ldw	r2,1148(sp)
 80042cc:	dac12a17 	ldw	r11,1192(sp)
 80042d0:	1c47883a 	add	r3,r3,r17
 80042d4:	10800044 	addi	r2,r2,1
 80042d8:	d8c12015 	stw	r3,1152(sp)
 80042dc:	42c00015 	stw	r11,0(r8)
 80042e0:	44400115 	stw	r17,4(r8)
 80042e4:	d8811f15 	stw	r2,1148(sp)
 80042e8:	00c001c4 	movi	r3,7
 80042ec:	1880b416 	blt	r3,r2,80045c0 <___vfprintf_internal_r+0x428>
 80042f0:	42000204 	addi	r8,r8,8
 80042f4:	db012f17 	ldw	r12,1212(sp)
 80042f8:	6459883a 	add	r12,r12,r17
 80042fc:	db012f15 	stw	r12,1212(sp)
 8004300:	80800007 	ldb	r2,0(r16)
 8004304:	1000b526 	beq	r2,zero,80045dc <___vfprintf_internal_r+0x444>
 8004308:	80800044 	addi	r2,r16,1
 800430c:	84000047 	ldb	r16,1(r16)
 8004310:	d8012785 	stb	zero,1182(sp)
 8004314:	000d883a 	mov	r6,zero
 8004318:	027fffc4 	movi	r9,-1
 800431c:	d8012e15 	stw	zero,1208(sp)
 8004320:	0023883a 	mov	r17,zero
 8004324:	01001604 	movi	r4,88
 8004328:	01400244 	movi	r5,9
 800432c:	02800a84 	movi	r10,42
 8004330:	01c01b04 	movi	r7,108
 8004334:	10c00044 	addi	r3,r2,1
 8004338:	80bff804 	addi	r2,r16,-32
 800433c:	2082f236 	bltu	r4,r2,8004f08 <___vfprintf_internal_r+0xd70>
 8004340:	100490ba 	slli	r2,r2,2
 8004344:	02c20034 	movhi	r11,2048
 8004348:	5ad0d604 	addi	r11,r11,17240
 800434c:	12c5883a 	add	r2,r2,r11
 8004350:	10800017 	ldw	r2,0(r2)
 8004354:	1000683a 	jmp	r2
 8004358:	08004d50 	cmplti	zero,at,309
 800435c:	08004f08 	cmpgei	zero,at,316
 8004360:	08004f08 	cmpgei	zero,at,316
 8004364:	08004d70 	cmpltui	zero,at,309
 8004368:	08004f08 	cmpgei	zero,at,316
 800436c:	08004f08 	cmpgei	zero,at,316
 8004370:	08004f08 	cmpgei	zero,at,316
 8004374:	08004f08 	cmpgei	zero,at,316
 8004378:	08004f08 	cmpgei	zero,at,316
 800437c:	08004f08 	cmpgei	zero,at,316
 8004380:	08004ecc 	andi	zero,at,315
 8004384:	08004ef8 	rdprs	zero,at,315
 8004388:	08004f08 	cmpgei	zero,at,316
 800438c:	0800461c 	xori	zero,at,280
 8004390:	0800462c 	andhi	zero,at,280
 8004394:	08004f08 	cmpgei	zero,at,316
 8004398:	0800466c 	andhi	zero,at,281
 800439c:	08004b60 	cmpeqi	zero,at,301
 80043a0:	08004b60 	cmpeqi	zero,at,301
 80043a4:	08004b60 	cmpeqi	zero,at,301
 80043a8:	08004b60 	cmpeqi	zero,at,301
 80043ac:	08004b60 	cmpeqi	zero,at,301
 80043b0:	08004b60 	cmpeqi	zero,at,301
 80043b4:	08004b60 	cmpeqi	zero,at,301
 80043b8:	08004b60 	cmpeqi	zero,at,301
 80043bc:	08004b60 	cmpeqi	zero,at,301
 80043c0:	08004f08 	cmpgei	zero,at,316
 80043c4:	08004f08 	cmpgei	zero,at,316
 80043c8:	08004f08 	cmpgei	zero,at,316
 80043cc:	08004f08 	cmpgei	zero,at,316
 80043d0:	08004f08 	cmpgei	zero,at,316
 80043d4:	08004f08 	cmpgei	zero,at,316
 80043d8:	08004f08 	cmpgei	zero,at,316
 80043dc:	08004f08 	cmpgei	zero,at,316
 80043e0:	08004f08 	cmpgei	zero,at,316
 80043e4:	08004f08 	cmpgei	zero,at,316
 80043e8:	08004b94 	ori	zero,at,302
 80043ec:	0800467c 	xorhi	zero,at,281
 80043f0:	08004f08 	cmpgei	zero,at,316
 80043f4:	0800467c 	xorhi	zero,at,281
 80043f8:	08004f08 	cmpgei	zero,at,316
 80043fc:	08004f08 	cmpgei	zero,at,316
 8004400:	08004f08 	cmpgei	zero,at,316
 8004404:	08004f08 	cmpgei	zero,at,316
 8004408:	08004720 	cmpeqi	zero,at,284
 800440c:	08004f08 	cmpgei	zero,at,316
 8004410:	08004f08 	cmpgei	zero,at,316
 8004414:	08004730 	cmpltui	zero,at,284
 8004418:	08004f08 	cmpgei	zero,at,316
 800441c:	08004f08 	cmpgei	zero,at,316
 8004420:	08004f08 	cmpgei	zero,at,316
 8004424:	08004f08 	cmpgei	zero,at,316
 8004428:	08004f08 	cmpgei	zero,at,316
 800442c:	08004b2c 	andhi	zero,at,300
 8004430:	08004f08 	cmpgei	zero,at,316
 8004434:	08004f08 	cmpgei	zero,at,316
 8004438:	08004bdc 	xori	zero,at,303
 800443c:	08004f08 	cmpgei	zero,at,316
 8004440:	08004f08 	cmpgei	zero,at,316
 8004444:	08004f08 	cmpgei	zero,at,316
 8004448:	08004f08 	cmpgei	zero,at,316
 800444c:	08004f08 	cmpgei	zero,at,316
 8004450:	08004f08 	cmpgei	zero,at,316
 8004454:	08004f08 	cmpgei	zero,at,316
 8004458:	08004f08 	cmpgei	zero,at,316
 800445c:	08004f08 	cmpgei	zero,at,316
 8004460:	08004f08 	cmpgei	zero,at,316
 8004464:	08004dd0 	cmplti	zero,at,311
 8004468:	08004d80 	call	8004d8 <__alt_mem_sdram_control-0x77ffb28>
 800446c:	0800467c 	xorhi	zero,at,281
 8004470:	0800467c 	xorhi	zero,at,281
 8004474:	0800467c 	xorhi	zero,at,281
 8004478:	08004dc0 	call	8004dc <__alt_mem_sdram_control-0x77ffb24>
 800447c:	08004d80 	call	8004d8 <__alt_mem_sdram_control-0x77ffb28>
 8004480:	08004f08 	cmpgei	zero,at,316
 8004484:	08004f08 	cmpgei	zero,at,316
 8004488:	08004cc8 	cmpgei	zero,at,307
 800448c:	08004f08 	cmpgei	zero,at,316
 8004490:	08004cdc 	xori	zero,at,307
 8004494:	08004d10 	cmplti	zero,at,308
 8004498:	08004e10 	cmplti	zero,at,312
 800449c:	08004c38 	rdprs	zero,at,304
 80044a0:	08004f08 	cmpgei	zero,at,316
 80044a4:	08004e58 	cmpnei	zero,at,313
 80044a8:	08004f08 	cmpgei	zero,at,316
 80044ac:	08004c48 	cmpgei	zero,at,305
 80044b0:	08004f08 	cmpgei	zero,at,316
 80044b4:	08004f08 	cmpgei	zero,at,316
 80044b8:	08004c88 	cmpgei	zero,at,306
 80044bc:	db012a17 	ldw	r12,1192(sp)
 80044c0:	8323c83a 	sub	r17,r16,r12
 80044c4:	003f7e06 	br	80042c0 <__ram_exceptions_end+0xf7f84080>
 80044c8:	b009883a 	mov	r4,r22
 80044cc:	b80b883a 	mov	r5,r23
 80044d0:	80061b80 	call	80061b8 <__swsetup_r>
 80044d4:	10002d1e 	bne	r2,zero,800458c <___vfprintf_internal_r+0x3f4>
 80044d8:	b8c0030b 	ldhu	r3,12(r23)
 80044dc:	01000284 	movi	r4,10
 80044e0:	1805883a 	mov	r2,r3
 80044e4:	1080068c 	andi	r2,r2,26
 80044e8:	113f551e 	bne	r2,r4,8004240 <__ram_exceptions_end+0xf7f84000>
 80044ec:	b880038b 	ldhu	r2,14(r23)
 80044f0:	113fffcc 	andi	r4,r2,65535
 80044f4:	2120001c 	xori	r4,r4,32768
 80044f8:	21200004 	addi	r4,r4,-32768
 80044fc:	203f5016 	blt	r4,zero,8004240 <__ram_exceptions_end+0xf7f84000>
 8004500:	bac01917 	ldw	r11,100(r23)
 8004504:	ba800717 	ldw	r10,28(r23)
 8004508:	ba400917 	ldw	r9,36(r23)
 800450c:	d9812a17 	ldw	r6,1192(sp)
 8004510:	d9c12d17 	ldw	r7,1204(sp)
 8004514:	02010004 	movi	r8,1024
 8004518:	18ffff4c 	andi	r3,r3,65533
 800451c:	d881078d 	sth	r2,1054(sp)
 8004520:	b009883a 	mov	r4,r22
 8004524:	d8800404 	addi	r2,sp,16
 8004528:	d9410404 	addi	r5,sp,1040
 800452c:	d8c1070d 	sth	r3,1052(sp)
 8004530:	dac11d15 	stw	r11,1140(sp)
 8004534:	da810b15 	stw	r10,1068(sp)
 8004538:	da410d15 	stw	r9,1076(sp)
 800453c:	d8810415 	stw	r2,1040(sp)
 8004540:	d8810815 	stw	r2,1056(sp)
 8004544:	da010615 	stw	r8,1048(sp)
 8004548:	da010915 	stw	r8,1060(sp)
 800454c:	d8010a15 	stw	zero,1064(sp)
 8004550:	80041980 	call	8004198 <___vfprintf_internal_r>
 8004554:	1021883a 	mov	r16,r2
 8004558:	10000416 	blt	r2,zero,800456c <___vfprintf_internal_r+0x3d4>
 800455c:	b009883a 	mov	r4,r22
 8004560:	d9410404 	addi	r5,sp,1040
 8004564:	8007c100 	call	8007c10 <_fflush_r>
 8004568:	1006ee1e 	bne	r2,zero,8006124 <___vfprintf_internal_r+0x1f8c>
 800456c:	d881070b 	ldhu	r2,1052(sp)
 8004570:	1080100c 	andi	r2,r2,64
 8004574:	10000326 	beq	r2,zero,8004584 <___vfprintf_internal_r+0x3ec>
 8004578:	b880030b 	ldhu	r2,12(r23)
 800457c:	10801014 	ori	r2,r2,64
 8004580:	b880030d 	sth	r2,12(r23)
 8004584:	8005883a 	mov	r2,r16
 8004588:	00000106 	br	8004590 <___vfprintf_internal_r+0x3f8>
 800458c:	00bfffc4 	movi	r2,-1
 8004590:	dfc14917 	ldw	ra,1316(sp)
 8004594:	df014817 	ldw	fp,1312(sp)
 8004598:	ddc14717 	ldw	r23,1308(sp)
 800459c:	dd814617 	ldw	r22,1304(sp)
 80045a0:	dd414517 	ldw	r21,1300(sp)
 80045a4:	dd014417 	ldw	r20,1296(sp)
 80045a8:	dcc14317 	ldw	r19,1292(sp)
 80045ac:	dc814217 	ldw	r18,1288(sp)
 80045b0:	dc414117 	ldw	r17,1284(sp)
 80045b4:	dc014017 	ldw	r16,1280(sp)
 80045b8:	dec14a04 	addi	sp,sp,1320
 80045bc:	f800283a 	ret
 80045c0:	b009883a 	mov	r4,r22
 80045c4:	b80b883a 	mov	r5,r23
 80045c8:	d9811e04 	addi	r6,sp,1144
 80045cc:	800b4240 	call	800b424 <__sprint_r>
 80045d0:	1000081e 	bne	r2,zero,80045f4 <___vfprintf_internal_r+0x45c>
 80045d4:	da000404 	addi	r8,sp,16
 80045d8:	003f4606 	br	80042f4 <__ram_exceptions_end+0xf7f840b4>
 80045dc:	d8812017 	ldw	r2,1152(sp)
 80045e0:	10000426 	beq	r2,zero,80045f4 <___vfprintf_internal_r+0x45c>
 80045e4:	b009883a 	mov	r4,r22
 80045e8:	b80b883a 	mov	r5,r23
 80045ec:	d9811e04 	addi	r6,sp,1144
 80045f0:	800b4240 	call	800b424 <__sprint_r>
 80045f4:	b880030b 	ldhu	r2,12(r23)
 80045f8:	1080100c 	andi	r2,r2,64
 80045fc:	103fe31e 	bne	r2,zero,800458c <__ram_exceptions_end+0xf7f8434c>
 8004600:	d8812f17 	ldw	r2,1212(sp)
 8004604:	003fe206 	br	8004590 <__ram_exceptions_end+0xf7f84350>
 8004608:	b009883a 	mov	r4,r22
 800460c:	80081b80 	call	80081b8 <__sinit>
 8004610:	003ef906 	br	80041f8 <__ram_exceptions_end+0xf7f83fb8>
 8004614:	dc012a17 	ldw	r16,1192(sp)
 8004618:	003f3906 	br	8004300 <__ram_exceptions_end+0xf7f840c0>
 800461c:	1805883a 	mov	r2,r3
 8004620:	8c400114 	ori	r17,r17,4
 8004624:	1c000007 	ldb	r16,0(r3)
 8004628:	003f4206 	br	8004334 <__ram_exceptions_end+0xf7f840f4>
 800462c:	1c000007 	ldb	r16,0(r3)
 8004630:	18800044 	addi	r2,r3,1
 8004634:	8286b326 	beq	r16,r10,8006104 <___vfprintf_internal_r+0x1f6c>
 8004638:	82fff404 	addi	r11,r16,-48
 800463c:	1007883a 	mov	r3,r2
 8004640:	0013883a 	mov	r9,zero
 8004644:	2aff3c36 	bltu	r5,r11,8004338 <__ram_exceptions_end+0xf7f840f8>
 8004648:	1c000007 	ldb	r16,0(r3)
 800464c:	4a4002a4 	muli	r9,r9,10
 8004650:	18c00044 	addi	r3,r3,1
 8004654:	5a53883a 	add	r9,r11,r9
 8004658:	82fff404 	addi	r11,r16,-48
 800465c:	2afffa2e 	bgeu	r5,r11,8004648 <__ram_exceptions_end+0xf7f84408>
 8004660:	483f350e 	bge	r9,zero,8004338 <__ram_exceptions_end+0xf7f840f8>
 8004664:	027fffc4 	movi	r9,-1
 8004668:	003f3306 	br	8004338 <__ram_exceptions_end+0xf7f840f8>
 800466c:	8c402014 	ori	r17,r17,128
 8004670:	1805883a 	mov	r2,r3
 8004674:	1c000007 	ldb	r16,0(r3)
 8004678:	003f2e06 	br	8004334 <__ram_exceptions_end+0xf7f840f4>
 800467c:	db012d17 	ldw	r12,1204(sp)
 8004680:	dac12d17 	ldw	r11,1204(sp)
 8004684:	d8c12a15 	stw	r3,1192(sp)
 8004688:	63000017 	ldw	r12,0(r12)
 800468c:	5ac00117 	ldw	r11,4(r11)
 8004690:	d9812785 	stb	r6,1182(sp)
 8004694:	6009883a 	mov	r4,r12
 8004698:	580b883a 	mov	r5,r11
 800469c:	db013715 	stw	r12,1244(sp)
 80046a0:	da013f15 	stw	r8,1276(sp)
 80046a4:	da413e15 	stw	r9,1272(sp)
 80046a8:	dac13915 	stw	r11,1252(sp)
 80046ac:	800b0800 	call	800b080 <__fpclassifyd>
 80046b0:	db012d17 	ldw	r12,1204(sp)
 80046b4:	04800044 	movi	r18,1
 80046b8:	da013f17 	ldw	r8,1276(sp)
 80046bc:	64c00204 	addi	r19,r12,8
 80046c0:	da413e17 	ldw	r9,1272(sp)
 80046c4:	d9013717 	ldw	r4,1244(sp)
 80046c8:	d9413917 	ldw	r5,1252(sp)
 80046cc:	1484581e 	bne	r2,r18,8005830 <___vfprintf_internal_r+0x1698>
 80046d0:	000d883a 	mov	r6,zero
 80046d4:	000f883a 	mov	r7,zero
 80046d8:	800e6440 	call	800e644 <__ledf2>
 80046dc:	da013f17 	ldw	r8,1276(sp)
 80046e0:	1005ef16 	blt	r2,zero,8005ea0 <___vfprintf_internal_r+0x1d08>
 80046e4:	dd412783 	ldbu	r21,1182(sp)
 80046e8:	008011c4 	movi	r2,71
 80046ec:	14053b0e 	bge	r2,r16,8005bdc <___vfprintf_internal_r+0x1a44>
 80046f0:	00c20074 	movhi	r3,2049
 80046f4:	18ca1404 	addi	r3,r3,10320
 80046f8:	d8c13115 	stw	r3,1220(sp)
 80046fc:	02c000c4 	movi	r11,3
 8004700:	00bfdfc4 	movi	r2,-129
 8004704:	dac12b15 	stw	r11,1196(sp)
 8004708:	88a2703a 	and	r17,r17,r2
 800470c:	dcc12d15 	stw	r19,1204(sp)
 8004710:	5825883a 	mov	r18,r11
 8004714:	d8013215 	stw	zero,1224(sp)
 8004718:	d8013415 	stw	zero,1232(sp)
 800471c:	00003206 	br	80047e8 <___vfprintf_internal_r+0x650>
 8004720:	8c400214 	ori	r17,r17,8
 8004724:	1805883a 	mov	r2,r3
 8004728:	1c000007 	ldb	r16,0(r3)
 800472c:	003f0106 	br	8004334 <__ram_exceptions_end+0xf7f840f4>
 8004730:	8c400414 	ori	r17,r17,16
 8004734:	d8c12a15 	stw	r3,1192(sp)
 8004738:	88c0080c 	andi	r3,r17,32
 800473c:	d8812d17 	ldw	r2,1204(sp)
 8004740:	18017726 	beq	r3,zero,8004d20 <___vfprintf_internal_r+0xb88>
 8004744:	db012d17 	ldw	r12,1204(sp)
 8004748:	14c00017 	ldw	r19,0(r2)
 800474c:	17000117 	ldw	fp,4(r2)
 8004750:	63000204 	addi	r12,r12,8
 8004754:	db012d15 	stw	r12,1204(sp)
 8004758:	0005883a 	mov	r2,zero
 800475c:	9f06b03a 	or	r3,r19,fp
 8004760:	d8012785 	stb	zero,1182(sp)
 8004764:	da413215 	stw	r9,1224(sp)
 8004768:	002b883a 	mov	r21,zero
 800476c:	48000216 	blt	r9,zero,8004778 <___vfprintf_internal_r+0x5e0>
 8004770:	013fdfc4 	movi	r4,-129
 8004774:	8922703a 	and	r17,r17,r4
 8004778:	1801ed1e 	bne	r3,zero,8004f30 <___vfprintf_internal_r+0xd98>
 800477c:	4802e026 	beq	r9,zero,8005300 <___vfprintf_internal_r+0x1168>
 8004780:	10803fcc 	andi	r2,r2,255
 8004784:	00c00044 	movi	r3,1
 8004788:	10c20f26 	beq	r2,r3,8004fc8 <___vfprintf_internal_r+0xe30>
 800478c:	00c00084 	movi	r3,2
 8004790:	10c2fd26 	beq	r2,r3,8005388 <___vfprintf_internal_r+0x11f0>
 8004794:	d8c10e04 	addi	r3,sp,1080
 8004798:	9808d0fa 	srli	r4,r19,3
 800479c:	e00a977a 	slli	r5,fp,29
 80047a0:	e038d0fa 	srli	fp,fp,3
 80047a4:	9cc001cc 	andi	r19,r19,7
 80047a8:	98800c04 	addi	r2,r19,48
 80047ac:	18ffffc4 	addi	r3,r3,-1
 80047b0:	2926b03a 	or	r19,r5,r4
 80047b4:	18800005 	stb	r2,0(r3)
 80047b8:	9f08b03a 	or	r4,r19,fp
 80047bc:	203ff61e 	bne	r4,zero,8004798 <__ram_exceptions_end+0xf7f84558>
 80047c0:	8900004c 	andi	r4,r17,1
 80047c4:	d8c13115 	stw	r3,1220(sp)
 80047c8:	2003791e 	bne	r4,zero,80055b0 <___vfprintf_internal_r+0x1418>
 80047cc:	dac12817 	ldw	r11,1184(sp)
 80047d0:	58e5c83a 	sub	r18,r11,r3
 80047d4:	9005883a 	mov	r2,r18
 80047d8:	9240010e 	bge	r18,r9,80047e0 <___vfprintf_internal_r+0x648>
 80047dc:	4805883a 	mov	r2,r9
 80047e0:	d8812b15 	stw	r2,1196(sp)
 80047e4:	d8013415 	stw	zero,1232(sp)
 80047e8:	a8803fcc 	andi	r2,r21,255
 80047ec:	1080201c 	xori	r2,r2,128
 80047f0:	10bfe004 	addi	r2,r2,-128
 80047f4:	10000326 	beq	r2,zero,8004804 <___vfprintf_internal_r+0x66c>
 80047f8:	db012b17 	ldw	r12,1196(sp)
 80047fc:	63000044 	addi	r12,r12,1
 8004800:	db012b15 	stw	r12,1196(sp)
 8004804:	88c0008c 	andi	r3,r17,2
 8004808:	d8c12c15 	stw	r3,1200(sp)
 800480c:	18000326 	beq	r3,zero,800481c <___vfprintf_internal_r+0x684>
 8004810:	dac12b17 	ldw	r11,1196(sp)
 8004814:	5ac00084 	addi	r11,r11,2
 8004818:	dac12b15 	stw	r11,1196(sp)
 800481c:	8b00210c 	andi	r12,r17,132
 8004820:	db013015 	stw	r12,1216(sp)
 8004824:	6001c01e 	bne	r12,zero,8004f28 <___vfprintf_internal_r+0xd90>
 8004828:	dac12e17 	ldw	r11,1208(sp)
 800482c:	db012b17 	ldw	r12,1196(sp)
 8004830:	5b39c83a 	sub	fp,r11,r12
 8004834:	0701bc0e 	bge	zero,fp,8004f28 <___vfprintf_internal_r+0xd90>
 8004838:	02400404 	movi	r9,16
 800483c:	d8c12017 	ldw	r3,1152(sp)
 8004840:	d8811f17 	ldw	r2,1148(sp)
 8004844:	4f05220e 	bge	r9,fp,8005cd0 <___vfprintf_internal_r+0x1b38>
 8004848:	01420074 	movhi	r5,2049
 800484c:	294a2784 	addi	r5,r5,10398
 8004850:	d9413615 	stw	r5,1240(sp)
 8004854:	482b883a 	mov	r21,r9
 8004858:	04c001c4 	movi	r19,7
 800485c:	00000306 	br	800486c <___vfprintf_internal_r+0x6d4>
 8004860:	e73ffc04 	addi	fp,fp,-16
 8004864:	42000204 	addi	r8,r8,8
 8004868:	af00130e 	bge	r21,fp,80048b8 <___vfprintf_internal_r+0x720>
 800486c:	02c20074 	movhi	r11,2049
 8004870:	18c00404 	addi	r3,r3,16
 8004874:	10800044 	addi	r2,r2,1
 8004878:	5aca2784 	addi	r11,r11,10398
 800487c:	42c00015 	stw	r11,0(r8)
 8004880:	45400115 	stw	r21,4(r8)
 8004884:	d8c12015 	stw	r3,1152(sp)
 8004888:	d8811f15 	stw	r2,1148(sp)
 800488c:	98bff40e 	bge	r19,r2,8004860 <__ram_exceptions_end+0xf7f84620>
 8004890:	b009883a 	mov	r4,r22
 8004894:	b80b883a 	mov	r5,r23
 8004898:	d9811e04 	addi	r6,sp,1144
 800489c:	800b4240 	call	800b424 <__sprint_r>
 80048a0:	103f541e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 80048a4:	e73ffc04 	addi	fp,fp,-16
 80048a8:	d8c12017 	ldw	r3,1152(sp)
 80048ac:	d8811f17 	ldw	r2,1148(sp)
 80048b0:	da000404 	addi	r8,sp,16
 80048b4:	af3fed16 	blt	r21,fp,800486c <__ram_exceptions_end+0xf7f8462c>
 80048b8:	db013617 	ldw	r12,1240(sp)
 80048bc:	e0c7883a 	add	r3,fp,r3
 80048c0:	10800044 	addi	r2,r2,1
 80048c4:	43000015 	stw	r12,0(r8)
 80048c8:	47000115 	stw	fp,4(r8)
 80048cc:	d8c12015 	stw	r3,1152(sp)
 80048d0:	d8811f15 	stw	r2,1148(sp)
 80048d4:	010001c4 	movi	r4,7
 80048d8:	2082f416 	blt	r4,r2,80054ac <___vfprintf_internal_r+0x1314>
 80048dc:	d8812787 	ldb	r2,1182(sp)
 80048e0:	42000204 	addi	r8,r8,8
 80048e4:	10000c26 	beq	r2,zero,8004918 <___vfprintf_internal_r+0x780>
 80048e8:	d8811f17 	ldw	r2,1148(sp)
 80048ec:	d9012784 	addi	r4,sp,1182
 80048f0:	18c00044 	addi	r3,r3,1
 80048f4:	10800044 	addi	r2,r2,1
 80048f8:	41000015 	stw	r4,0(r8)
 80048fc:	01000044 	movi	r4,1
 8004900:	41000115 	stw	r4,4(r8)
 8004904:	d8c12015 	stw	r3,1152(sp)
 8004908:	d8811f15 	stw	r2,1148(sp)
 800490c:	010001c4 	movi	r4,7
 8004910:	20828d16 	blt	r4,r2,8005348 <___vfprintf_internal_r+0x11b0>
 8004914:	42000204 	addi	r8,r8,8
 8004918:	dac12c17 	ldw	r11,1200(sp)
 800491c:	58000c26 	beq	r11,zero,8004950 <___vfprintf_internal_r+0x7b8>
 8004920:	d8811f17 	ldw	r2,1148(sp)
 8004924:	d9012704 	addi	r4,sp,1180
 8004928:	18c00084 	addi	r3,r3,2
 800492c:	10800044 	addi	r2,r2,1
 8004930:	41000015 	stw	r4,0(r8)
 8004934:	01000084 	movi	r4,2
 8004938:	41000115 	stw	r4,4(r8)
 800493c:	d8c12015 	stw	r3,1152(sp)
 8004940:	d8811f15 	stw	r2,1148(sp)
 8004944:	010001c4 	movi	r4,7
 8004948:	20828716 	blt	r4,r2,8005368 <___vfprintf_internal_r+0x11d0>
 800494c:	42000204 	addi	r8,r8,8
 8004950:	db013017 	ldw	r12,1216(sp)
 8004954:	00802004 	movi	r2,128
 8004958:	6081e926 	beq	r12,r2,8005100 <___vfprintf_internal_r+0xf68>
 800495c:	db013217 	ldw	r12,1224(sp)
 8004960:	64abc83a 	sub	r21,r12,r18
 8004964:	0540260e 	bge	zero,r21,8004a00 <___vfprintf_internal_r+0x868>
 8004968:	07000404 	movi	fp,16
 800496c:	d8811f17 	ldw	r2,1148(sp)
 8004970:	e5443d0e 	bge	fp,r21,8005a68 <___vfprintf_internal_r+0x18d0>
 8004974:	01420074 	movhi	r5,2049
 8004978:	294a2384 	addi	r5,r5,10382
 800497c:	d9412c15 	stw	r5,1200(sp)
 8004980:	04c001c4 	movi	r19,7
 8004984:	00000306 	br	8004994 <___vfprintf_internal_r+0x7fc>
 8004988:	ad7ffc04 	addi	r21,r21,-16
 800498c:	42000204 	addi	r8,r8,8
 8004990:	e540110e 	bge	fp,r21,80049d8 <___vfprintf_internal_r+0x840>
 8004994:	18c00404 	addi	r3,r3,16
 8004998:	10800044 	addi	r2,r2,1
 800499c:	45000015 	stw	r20,0(r8)
 80049a0:	47000115 	stw	fp,4(r8)
 80049a4:	d8c12015 	stw	r3,1152(sp)
 80049a8:	d8811f15 	stw	r2,1148(sp)
 80049ac:	98bff60e 	bge	r19,r2,8004988 <__ram_exceptions_end+0xf7f84748>
 80049b0:	b009883a 	mov	r4,r22
 80049b4:	b80b883a 	mov	r5,r23
 80049b8:	d9811e04 	addi	r6,sp,1144
 80049bc:	800b4240 	call	800b424 <__sprint_r>
 80049c0:	103f0c1e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 80049c4:	ad7ffc04 	addi	r21,r21,-16
 80049c8:	d8c12017 	ldw	r3,1152(sp)
 80049cc:	d8811f17 	ldw	r2,1148(sp)
 80049d0:	da000404 	addi	r8,sp,16
 80049d4:	e57fef16 	blt	fp,r21,8004994 <__ram_exceptions_end+0xf7f84754>
 80049d8:	dac12c17 	ldw	r11,1200(sp)
 80049dc:	1d47883a 	add	r3,r3,r21
 80049e0:	10800044 	addi	r2,r2,1
 80049e4:	42c00015 	stw	r11,0(r8)
 80049e8:	45400115 	stw	r21,4(r8)
 80049ec:	d8c12015 	stw	r3,1152(sp)
 80049f0:	d8811f15 	stw	r2,1148(sp)
 80049f4:	010001c4 	movi	r4,7
 80049f8:	20824b16 	blt	r4,r2,8005328 <___vfprintf_internal_r+0x1190>
 80049fc:	42000204 	addi	r8,r8,8
 8004a00:	8880400c 	andi	r2,r17,256
 8004a04:	1001761e 	bne	r2,zero,8004fe0 <___vfprintf_internal_r+0xe48>
 8004a08:	d8811f17 	ldw	r2,1148(sp)
 8004a0c:	db013117 	ldw	r12,1220(sp)
 8004a10:	1c87883a 	add	r3,r3,r18
 8004a14:	10800044 	addi	r2,r2,1
 8004a18:	43000015 	stw	r12,0(r8)
 8004a1c:	44800115 	stw	r18,4(r8)
 8004a20:	d8c12015 	stw	r3,1152(sp)
 8004a24:	d8811f15 	stw	r2,1148(sp)
 8004a28:	010001c4 	movi	r4,7
 8004a2c:	20822616 	blt	r4,r2,80052c8 <___vfprintf_internal_r+0x1130>
 8004a30:	42000204 	addi	r8,r8,8
 8004a34:	8c40010c 	andi	r17,r17,4
 8004a38:	88003126 	beq	r17,zero,8004b00 <___vfprintf_internal_r+0x968>
 8004a3c:	db012e17 	ldw	r12,1208(sp)
 8004a40:	dac12b17 	ldw	r11,1196(sp)
 8004a44:	62e1c83a 	sub	r16,r12,r11
 8004a48:	04002d0e 	bge	zero,r16,8004b00 <___vfprintf_internal_r+0x968>
 8004a4c:	04400404 	movi	r17,16
 8004a50:	d8811f17 	ldw	r2,1148(sp)
 8004a54:	8c04df0e 	bge	r17,r16,8005dd4 <___vfprintf_internal_r+0x1c3c>
 8004a58:	01020074 	movhi	r4,2049
 8004a5c:	210a2784 	addi	r4,r4,10398
 8004a60:	d9013615 	stw	r4,1240(sp)
 8004a64:	048001c4 	movi	r18,7
 8004a68:	00000306 	br	8004a78 <___vfprintf_internal_r+0x8e0>
 8004a6c:	843ffc04 	addi	r16,r16,-16
 8004a70:	42000204 	addi	r8,r8,8
 8004a74:	8c00130e 	bge	r17,r16,8004ac4 <___vfprintf_internal_r+0x92c>
 8004a78:	01420074 	movhi	r5,2049
 8004a7c:	18c00404 	addi	r3,r3,16
 8004a80:	10800044 	addi	r2,r2,1
 8004a84:	294a2784 	addi	r5,r5,10398
 8004a88:	41400015 	stw	r5,0(r8)
 8004a8c:	44400115 	stw	r17,4(r8)
 8004a90:	d8c12015 	stw	r3,1152(sp)
 8004a94:	d8811f15 	stw	r2,1148(sp)
 8004a98:	90bff40e 	bge	r18,r2,8004a6c <__ram_exceptions_end+0xf7f8482c>
 8004a9c:	b009883a 	mov	r4,r22
 8004aa0:	b80b883a 	mov	r5,r23
 8004aa4:	d9811e04 	addi	r6,sp,1144
 8004aa8:	800b4240 	call	800b424 <__sprint_r>
 8004aac:	103ed11e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 8004ab0:	843ffc04 	addi	r16,r16,-16
 8004ab4:	d8c12017 	ldw	r3,1152(sp)
 8004ab8:	d8811f17 	ldw	r2,1148(sp)
 8004abc:	da000404 	addi	r8,sp,16
 8004ac0:	8c3fed16 	blt	r17,r16,8004a78 <__ram_exceptions_end+0xf7f84838>
 8004ac4:	dac13617 	ldw	r11,1240(sp)
 8004ac8:	1c07883a 	add	r3,r3,r16
 8004acc:	10800044 	addi	r2,r2,1
 8004ad0:	42c00015 	stw	r11,0(r8)
 8004ad4:	44000115 	stw	r16,4(r8)
 8004ad8:	d8c12015 	stw	r3,1152(sp)
 8004adc:	d8811f15 	stw	r2,1148(sp)
 8004ae0:	010001c4 	movi	r4,7
 8004ae4:	2080060e 	bge	r4,r2,8004b00 <___vfprintf_internal_r+0x968>
 8004ae8:	b009883a 	mov	r4,r22
 8004aec:	b80b883a 	mov	r5,r23
 8004af0:	d9811e04 	addi	r6,sp,1144
 8004af4:	800b4240 	call	800b424 <__sprint_r>
 8004af8:	103ebe1e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 8004afc:	d8c12017 	ldw	r3,1152(sp)
 8004b00:	d8812b17 	ldw	r2,1196(sp)
 8004b04:	db012e17 	ldw	r12,1208(sp)
 8004b08:	1300010e 	bge	r2,r12,8004b10 <___vfprintf_internal_r+0x978>
 8004b0c:	6005883a 	mov	r2,r12
 8004b10:	dac12f17 	ldw	r11,1212(sp)
 8004b14:	5897883a 	add	r11,r11,r2
 8004b18:	dac12f15 	stw	r11,1212(sp)
 8004b1c:	1801f21e 	bne	r3,zero,80052e8 <___vfprintf_internal_r+0x1150>
 8004b20:	d8011f15 	stw	zero,1148(sp)
 8004b24:	da000404 	addi	r8,sp,16
 8004b28:	003dd806 	br	800428c <__ram_exceptions_end+0xf7f8404c>
 8004b2c:	8c400414 	ori	r17,r17,16
 8004b30:	d8c12a15 	stw	r3,1192(sp)
 8004b34:	88c0080c 	andi	r3,r17,32
 8004b38:	d8812d17 	ldw	r2,1204(sp)
 8004b3c:	18004626 	beq	r3,zero,8004c58 <___vfprintf_internal_r+0xac0>
 8004b40:	dac12d17 	ldw	r11,1204(sp)
 8004b44:	14c00017 	ldw	r19,0(r2)
 8004b48:	17000117 	ldw	fp,4(r2)
 8004b4c:	5ac00204 	addi	r11,r11,8
 8004b50:	dac12d15 	stw	r11,1204(sp)
 8004b54:	00800044 	movi	r2,1
 8004b58:	9f06b03a 	or	r3,r19,fp
 8004b5c:	003f0006 	br	8004760 <__ram_exceptions_end+0xf7f84520>
 8004b60:	1805883a 	mov	r2,r3
 8004b64:	d8012e15 	stw	zero,1208(sp)
 8004b68:	82fff404 	addi	r11,r16,-48
 8004b6c:	0019883a 	mov	r12,zero
 8004b70:	14000007 	ldb	r16,0(r2)
 8004b74:	630002a4 	muli	r12,r12,10
 8004b78:	18c00044 	addi	r3,r3,1
 8004b7c:	1805883a 	mov	r2,r3
 8004b80:	62d9883a 	add	r12,r12,r11
 8004b84:	82fff404 	addi	r11,r16,-48
 8004b88:	2afff92e 	bgeu	r5,r11,8004b70 <__ram_exceptions_end+0xf7f84930>
 8004b8c:	db012e15 	stw	r12,1208(sp)
 8004b90:	003de906 	br	8004338 <__ram_exceptions_end+0xf7f840f8>
 8004b94:	8c400414 	ori	r17,r17,16
 8004b98:	d8c12a15 	stw	r3,1192(sp)
 8004b9c:	d9812785 	stb	r6,1182(sp)
 8004ba0:	8880080c 	andi	r2,r17,32
 8004ba4:	d8c12d17 	ldw	r3,1204(sp)
 8004ba8:	10007a26 	beq	r2,zero,8004d94 <___vfprintf_internal_r+0xbfc>
 8004bac:	db012d17 	ldw	r12,1204(sp)
 8004bb0:	18800117 	ldw	r2,4(r3)
 8004bb4:	1cc00017 	ldw	r19,0(r3)
 8004bb8:	63000204 	addi	r12,r12,8
 8004bbc:	db012d15 	stw	r12,1204(sp)
 8004bc0:	1039883a 	mov	fp,r2
 8004bc4:	10031016 	blt	r2,zero,8005808 <___vfprintf_internal_r+0x1670>
 8004bc8:	dd412783 	ldbu	r21,1182(sp)
 8004bcc:	da413215 	stw	r9,1224(sp)
 8004bd0:	00800044 	movi	r2,1
 8004bd4:	9f06b03a 	or	r3,r19,fp
 8004bd8:	003ee406 	br	800476c <__ram_exceptions_end+0xf7f8452c>
 8004bdc:	03020074 	movhi	r12,2049
 8004be0:	630a1704 	addi	r12,r12,10332
 8004be4:	d8c12a15 	stw	r3,1192(sp)
 8004be8:	d9812785 	stb	r6,1182(sp)
 8004bec:	db013b15 	stw	r12,1260(sp)
 8004bf0:	88c0080c 	andi	r3,r17,32
 8004bf4:	d8812d17 	ldw	r2,1204(sp)
 8004bf8:	18002b26 	beq	r3,zero,8004ca8 <___vfprintf_internal_r+0xb10>
 8004bfc:	dac12d17 	ldw	r11,1204(sp)
 8004c00:	14c00017 	ldw	r19,0(r2)
 8004c04:	17000117 	ldw	fp,4(r2)
 8004c08:	5ac00204 	addi	r11,r11,8
 8004c0c:	dac12d15 	stw	r11,1204(sp)
 8004c10:	8880004c 	andi	r2,r17,1
 8004c14:	10025b26 	beq	r2,zero,8005584 <___vfprintf_internal_r+0x13ec>
 8004c18:	9f06b03a 	or	r3,r19,fp
 8004c1c:	18037026 	beq	r3,zero,80059e0 <___vfprintf_internal_r+0x1848>
 8004c20:	00800c04 	movi	r2,48
 8004c24:	d8812705 	stb	r2,1180(sp)
 8004c28:	dc012745 	stb	r16,1181(sp)
 8004c2c:	8c400094 	ori	r17,r17,2
 8004c30:	00800084 	movi	r2,2
 8004c34:	003eca06 	br	8004760 <__ram_exceptions_end+0xf7f84520>
 8004c38:	8c400814 	ori	r17,r17,32
 8004c3c:	1805883a 	mov	r2,r3
 8004c40:	1c000007 	ldb	r16,0(r3)
 8004c44:	003dbb06 	br	8004334 <__ram_exceptions_end+0xf7f840f4>
 8004c48:	d8c12a15 	stw	r3,1192(sp)
 8004c4c:	88c0080c 	andi	r3,r17,32
 8004c50:	d8812d17 	ldw	r2,1204(sp)
 8004c54:	183fba1e 	bne	r3,zero,8004b40 <__ram_exceptions_end+0xf7f84900>
 8004c58:	88c0040c 	andi	r3,r17,16
 8004c5c:	18024c1e 	bne	r3,zero,8005590 <___vfprintf_internal_r+0x13f8>
 8004c60:	88c0100c 	andi	r3,r17,64
 8004c64:	18024a26 	beq	r3,zero,8005590 <___vfprintf_internal_r+0x13f8>
 8004c68:	dac12d17 	ldw	r11,1204(sp)
 8004c6c:	14c0000b 	ldhu	r19,0(r2)
 8004c70:	0039883a 	mov	fp,zero
 8004c74:	5ac00104 	addi	r11,r11,4
 8004c78:	dac12d15 	stw	r11,1204(sp)
 8004c7c:	00800044 	movi	r2,1
 8004c80:	9807883a 	mov	r3,r19
 8004c84:	003eb606 	br	8004760 <__ram_exceptions_end+0xf7f84520>
 8004c88:	00820074 	movhi	r2,2049
 8004c8c:	108a1c04 	addi	r2,r2,10352
 8004c90:	d8c12a15 	stw	r3,1192(sp)
 8004c94:	d8813b15 	stw	r2,1260(sp)
 8004c98:	d9812785 	stb	r6,1182(sp)
 8004c9c:	88c0080c 	andi	r3,r17,32
 8004ca0:	d8812d17 	ldw	r2,1204(sp)
 8004ca4:	183fd51e 	bne	r3,zero,8004bfc <__ram_exceptions_end+0xf7f849bc>
 8004ca8:	88c0040c 	andi	r3,r17,16
 8004cac:	18034126 	beq	r3,zero,80059b4 <___vfprintf_internal_r+0x181c>
 8004cb0:	db012d17 	ldw	r12,1204(sp)
 8004cb4:	14c00017 	ldw	r19,0(r2)
 8004cb8:	0039883a 	mov	fp,zero
 8004cbc:	63000104 	addi	r12,r12,4
 8004cc0:	db012d15 	stw	r12,1204(sp)
 8004cc4:	003fd206 	br	8004c10 <__ram_exceptions_end+0xf7f849d0>
 8004cc8:	1c000007 	ldb	r16,0(r3)
 8004ccc:	81c3d626 	beq	r16,r7,8005c28 <___vfprintf_internal_r+0x1a90>
 8004cd0:	8c400414 	ori	r17,r17,16
 8004cd4:	1805883a 	mov	r2,r3
 8004cd8:	003d9606 	br	8004334 <__ram_exceptions_end+0xf7f840f4>
 8004cdc:	d8c12a15 	stw	r3,1192(sp)
 8004ce0:	d9812785 	stb	r6,1182(sp)
 8004ce4:	8880080c 	andi	r2,r17,32
 8004ce8:	10033f26 	beq	r2,zero,80059e8 <___vfprintf_internal_r+0x1850>
 8004cec:	db012d17 	ldw	r12,1204(sp)
 8004cf0:	dac12f17 	ldw	r11,1212(sp)
 8004cf4:	60800017 	ldw	r2,0(r12)
 8004cf8:	5807d7fa 	srai	r3,r11,31
 8004cfc:	63000104 	addi	r12,r12,4
 8004d00:	db012d15 	stw	r12,1204(sp)
 8004d04:	12c00015 	stw	r11,0(r2)
 8004d08:	10c00115 	stw	r3,4(r2)
 8004d0c:	003d5f06 	br	800428c <__ram_exceptions_end+0xf7f8404c>
 8004d10:	d8c12a15 	stw	r3,1192(sp)
 8004d14:	88c0080c 	andi	r3,r17,32
 8004d18:	d8812d17 	ldw	r2,1204(sp)
 8004d1c:	183e891e 	bne	r3,zero,8004744 <__ram_exceptions_end+0xf7f84504>
 8004d20:	88c0040c 	andi	r3,r17,16
 8004d24:	1801ea1e 	bne	r3,zero,80054d0 <___vfprintf_internal_r+0x1338>
 8004d28:	88c0100c 	andi	r3,r17,64
 8004d2c:	1801e826 	beq	r3,zero,80054d0 <___vfprintf_internal_r+0x1338>
 8004d30:	db012d17 	ldw	r12,1204(sp)
 8004d34:	14c0000b 	ldhu	r19,0(r2)
 8004d38:	0039883a 	mov	fp,zero
 8004d3c:	63000104 	addi	r12,r12,4
 8004d40:	db012d15 	stw	r12,1204(sp)
 8004d44:	0005883a 	mov	r2,zero
 8004d48:	9807883a 	mov	r3,r19
 8004d4c:	003e8406 	br	8004760 <__ram_exceptions_end+0xf7f84520>
 8004d50:	30803fcc 	andi	r2,r6,255
 8004d54:	1080201c 	xori	r2,r2,128
 8004d58:	10bfe004 	addi	r2,r2,-128
 8004d5c:	10031d1e 	bne	r2,zero,80059d4 <___vfprintf_internal_r+0x183c>
 8004d60:	1805883a 	mov	r2,r3
 8004d64:	01800804 	movi	r6,32
 8004d68:	1c000007 	ldb	r16,0(r3)
 8004d6c:	003d7106 	br	8004334 <__ram_exceptions_end+0xf7f840f4>
 8004d70:	8c400054 	ori	r17,r17,1
 8004d74:	1805883a 	mov	r2,r3
 8004d78:	1c000007 	ldb	r16,0(r3)
 8004d7c:	003d6d06 	br	8004334 <__ram_exceptions_end+0xf7f840f4>
 8004d80:	d8c12a15 	stw	r3,1192(sp)
 8004d84:	d9812785 	stb	r6,1182(sp)
 8004d88:	8880080c 	andi	r2,r17,32
 8004d8c:	d8c12d17 	ldw	r3,1204(sp)
 8004d90:	103f861e 	bne	r2,zero,8004bac <__ram_exceptions_end+0xf7f8496c>
 8004d94:	8880040c 	andi	r2,r17,16
 8004d98:	1001f31e 	bne	r2,zero,8005568 <___vfprintf_internal_r+0x13d0>
 8004d9c:	8880100c 	andi	r2,r17,64
 8004da0:	1001f126 	beq	r2,zero,8005568 <___vfprintf_internal_r+0x13d0>
 8004da4:	1cc0000f 	ldh	r19,0(r3)
 8004da8:	db012d17 	ldw	r12,1204(sp)
 8004dac:	9839d7fa 	srai	fp,r19,31
 8004db0:	63000104 	addi	r12,r12,4
 8004db4:	db012d15 	stw	r12,1204(sp)
 8004db8:	e005883a 	mov	r2,fp
 8004dbc:	003f8106 	br	8004bc4 <__ram_exceptions_end+0xf7f84984>
 8004dc0:	8c401014 	ori	r17,r17,64
 8004dc4:	1805883a 	mov	r2,r3
 8004dc8:	1c000007 	ldb	r16,0(r3)
 8004dcc:	003d5906 	br	8004334 <__ram_exceptions_end+0xf7f840f4>
 8004dd0:	db012d17 	ldw	r12,1204(sp)
 8004dd4:	d8c12a15 	stw	r3,1192(sp)
 8004dd8:	00c00044 	movi	r3,1
 8004ddc:	60800017 	ldw	r2,0(r12)
 8004de0:	63000104 	addi	r12,r12,4
 8004de4:	d8c12b15 	stw	r3,1196(sp)
 8004de8:	d8012785 	stb	zero,1182(sp)
 8004dec:	d8810405 	stb	r2,1040(sp)
 8004df0:	db012d15 	stw	r12,1204(sp)
 8004df4:	dac10404 	addi	r11,sp,1040
 8004df8:	1825883a 	mov	r18,r3
 8004dfc:	d8013215 	stw	zero,1224(sp)
 8004e00:	d8013415 	stw	zero,1232(sp)
 8004e04:	dac13115 	stw	r11,1220(sp)
 8004e08:	0005883a 	mov	r2,zero
 8004e0c:	003e7d06 	br	8004804 <__ram_exceptions_end+0xf7f845c4>
 8004e10:	db012d17 	ldw	r12,1204(sp)
 8004e14:	00800c04 	movi	r2,48
 8004e18:	d8812705 	stb	r2,1180(sp)
 8004e1c:	64c00017 	ldw	r19,0(r12)
 8004e20:	00801e04 	movi	r2,120
 8004e24:	d8812745 	stb	r2,1181(sp)
 8004e28:	00820074 	movhi	r2,2049
 8004e2c:	108a1c04 	addi	r2,r2,10352
 8004e30:	63000104 	addi	r12,r12,4
 8004e34:	d8c12a15 	stw	r3,1192(sp)
 8004e38:	d8813b15 	stw	r2,1260(sp)
 8004e3c:	0039883a 	mov	fp,zero
 8004e40:	8c400094 	ori	r17,r17,2
 8004e44:	db012d15 	stw	r12,1204(sp)
 8004e48:	00800084 	movi	r2,2
 8004e4c:	04001e04 	movi	r16,120
 8004e50:	9807883a 	mov	r3,r19
 8004e54:	003e4206 	br	8004760 <__ram_exceptions_end+0xf7f84520>
 8004e58:	dac12d17 	ldw	r11,1204(sp)
 8004e5c:	db012d17 	ldw	r12,1204(sp)
 8004e60:	d8c12a15 	stw	r3,1192(sp)
 8004e64:	5ac00017 	ldw	r11,0(r11)
 8004e68:	d8012785 	stb	zero,1182(sp)
 8004e6c:	64c00104 	addi	r19,r12,4
 8004e70:	dac13115 	stw	r11,1220(sp)
 8004e74:	5803e826 	beq	r11,zero,8005e18 <___vfprintf_internal_r+0x1c80>
 8004e78:	d9013117 	ldw	r4,1220(sp)
 8004e7c:	48037a16 	blt	r9,zero,8005c68 <___vfprintf_internal_r+0x1ad0>
 8004e80:	480d883a 	mov	r6,r9
 8004e84:	000b883a 	mov	r5,zero
 8004e88:	da013f15 	stw	r8,1276(sp)
 8004e8c:	da413e15 	stw	r9,1272(sp)
 8004e90:	80096700 	call	8009670 <memchr>
 8004e94:	da013f17 	ldw	r8,1276(sp)
 8004e98:	da413e17 	ldw	r9,1272(sp)
 8004e9c:	10044426 	beq	r2,zero,8005fb0 <___vfprintf_internal_r+0x1e18>
 8004ea0:	d8c13117 	ldw	r3,1220(sp)
 8004ea4:	10e5c83a 	sub	r18,r2,r3
 8004ea8:	4c834416 	blt	r9,r18,8005bbc <___vfprintf_internal_r+0x1a24>
 8004eac:	9005883a 	mov	r2,r18
 8004eb0:	90037216 	blt	r18,zero,8005c7c <___vfprintf_internal_r+0x1ae4>
 8004eb4:	dd412783 	ldbu	r21,1182(sp)
 8004eb8:	d8812b15 	stw	r2,1196(sp)
 8004ebc:	dcc12d15 	stw	r19,1204(sp)
 8004ec0:	d8013215 	stw	zero,1224(sp)
 8004ec4:	d8013415 	stw	zero,1232(sp)
 8004ec8:	003e4706 	br	80047e8 <__ram_exceptions_end+0xf7f845a8>
 8004ecc:	dac12d17 	ldw	r11,1204(sp)
 8004ed0:	db012d17 	ldw	r12,1204(sp)
 8004ed4:	5ac00017 	ldw	r11,0(r11)
 8004ed8:	dac12e15 	stw	r11,1208(sp)
 8004edc:	62c00104 	addi	r11,r12,4
 8004ee0:	db012e17 	ldw	r12,1208(sp)
 8004ee4:	60034a16 	blt	r12,zero,8005c10 <___vfprintf_internal_r+0x1a78>
 8004ee8:	dac12d15 	stw	r11,1204(sp)
 8004eec:	1805883a 	mov	r2,r3
 8004ef0:	1c000007 	ldb	r16,0(r3)
 8004ef4:	003d0f06 	br	8004334 <__ram_exceptions_end+0xf7f840f4>
 8004ef8:	1805883a 	mov	r2,r3
 8004efc:	01800ac4 	movi	r6,43
 8004f00:	1c000007 	ldb	r16,0(r3)
 8004f04:	003d0b06 	br	8004334 <__ram_exceptions_end+0xf7f840f4>
 8004f08:	d8c12a15 	stw	r3,1192(sp)
 8004f0c:	d9812785 	stb	r6,1182(sp)
 8004f10:	803db226 	beq	r16,zero,80045dc <__ram_exceptions_end+0xf7f8439c>
 8004f14:	00c00044 	movi	r3,1
 8004f18:	d8c12b15 	stw	r3,1196(sp)
 8004f1c:	dc010405 	stb	r16,1040(sp)
 8004f20:	d8012785 	stb	zero,1182(sp)
 8004f24:	003fb306 	br	8004df4 <__ram_exceptions_end+0xf7f84bb4>
 8004f28:	d8c12017 	ldw	r3,1152(sp)
 8004f2c:	003e6d06 	br	80048e4 <__ram_exceptions_end+0xf7f846a4>
 8004f30:	10803fcc 	andi	r2,r2,255
 8004f34:	00c00044 	movi	r3,1
 8004f38:	10fe141e 	bne	r2,r3,800478c <__ram_exceptions_end+0xf7f8454c>
 8004f3c:	e000021e 	bne	fp,zero,8004f48 <___vfprintf_internal_r+0xdb0>
 8004f40:	00800244 	movi	r2,9
 8004f44:	14c0202e 	bgeu	r2,r19,8004fc8 <___vfprintf_internal_r+0xe30>
 8004f48:	dc012b15 	stw	r16,1196(sp)
 8004f4c:	dc412c15 	stw	r17,1200(sp)
 8004f50:	9821883a 	mov	r16,r19
 8004f54:	e023883a 	mov	r17,fp
 8004f58:	dc810e04 	addi	r18,sp,1080
 8004f5c:	4027883a 	mov	r19,r8
 8004f60:	4839883a 	mov	fp,r9
 8004f64:	8009883a 	mov	r4,r16
 8004f68:	880b883a 	mov	r5,r17
 8004f6c:	01800284 	movi	r6,10
 8004f70:	000f883a 	mov	r7,zero
 8004f74:	800d6b40 	call	800d6b4 <__umoddi3>
 8004f78:	10800c04 	addi	r2,r2,48
 8004f7c:	94bfffc4 	addi	r18,r18,-1
 8004f80:	8009883a 	mov	r4,r16
 8004f84:	880b883a 	mov	r5,r17
 8004f88:	01800284 	movi	r6,10
 8004f8c:	000f883a 	mov	r7,zero
 8004f90:	90800005 	stb	r2,0(r18)
 8004f94:	800d0f40 	call	800d0f4 <__udivdi3>
 8004f98:	1021883a 	mov	r16,r2
 8004f9c:	10c4b03a 	or	r2,r2,r3
 8004fa0:	1823883a 	mov	r17,r3
 8004fa4:	103fef1e 	bne	r2,zero,8004f64 <__ram_exceptions_end+0xf7f84d24>
 8004fa8:	dac12817 	ldw	r11,1184(sp)
 8004fac:	dc813115 	stw	r18,1220(sp)
 8004fb0:	dc012b17 	ldw	r16,1196(sp)
 8004fb4:	9811883a 	mov	r8,r19
 8004fb8:	dc412c17 	ldw	r17,1200(sp)
 8004fbc:	e013883a 	mov	r9,fp
 8004fc0:	5ca5c83a 	sub	r18,r11,r18
 8004fc4:	003e0306 	br	80047d4 <__ram_exceptions_end+0xf7f84594>
 8004fc8:	9cc00c04 	addi	r19,r19,48
 8004fcc:	d8c10dc4 	addi	r3,sp,1079
 8004fd0:	dcc10dc5 	stb	r19,1079(sp)
 8004fd4:	dc813c17 	ldw	r18,1264(sp)
 8004fd8:	d8c13115 	stw	r3,1220(sp)
 8004fdc:	003dfd06 	br	80047d4 <__ram_exceptions_end+0xf7f84594>
 8004fe0:	00801944 	movi	r2,101
 8004fe4:	1400710e 	bge	r2,r16,80051ac <___vfprintf_internal_r+0x1014>
 8004fe8:	d9013717 	ldw	r4,1244(sp)
 8004fec:	d9413917 	ldw	r5,1252(sp)
 8004ff0:	000d883a 	mov	r6,zero
 8004ff4:	000f883a 	mov	r7,zero
 8004ff8:	d8c13d15 	stw	r3,1268(sp)
 8004ffc:	da013f15 	stw	r8,1276(sp)
 8005000:	800e4e00 	call	800e4e0 <__eqdf2>
 8005004:	d8c13d17 	ldw	r3,1268(sp)
 8005008:	da013f17 	ldw	r8,1276(sp)
 800500c:	1000ef1e 	bne	r2,zero,80053cc <___vfprintf_internal_r+0x1234>
 8005010:	d8811f17 	ldw	r2,1148(sp)
 8005014:	01020074 	movhi	r4,2049
 8005018:	210a2304 	addi	r4,r4,10380
 800501c:	18c00044 	addi	r3,r3,1
 8005020:	10800044 	addi	r2,r2,1
 8005024:	41000015 	stw	r4,0(r8)
 8005028:	01000044 	movi	r4,1
 800502c:	41000115 	stw	r4,4(r8)
 8005030:	d8c12015 	stw	r3,1152(sp)
 8005034:	d8811f15 	stw	r2,1148(sp)
 8005038:	010001c4 	movi	r4,7
 800503c:	20828e16 	blt	r4,r2,8005a78 <___vfprintf_internal_r+0x18e0>
 8005040:	42000204 	addi	r8,r8,8
 8005044:	d8812617 	ldw	r2,1176(sp)
 8005048:	dac13317 	ldw	r11,1228(sp)
 800504c:	12c00216 	blt	r2,r11,8005058 <___vfprintf_internal_r+0xec0>
 8005050:	8880004c 	andi	r2,r17,1
 8005054:	103e7726 	beq	r2,zero,8004a34 <__ram_exceptions_end+0xf7f847f4>
 8005058:	db013817 	ldw	r12,1248(sp)
 800505c:	d8811f17 	ldw	r2,1148(sp)
 8005060:	dac13517 	ldw	r11,1236(sp)
 8005064:	1b07883a 	add	r3,r3,r12
 8005068:	10800044 	addi	r2,r2,1
 800506c:	42c00015 	stw	r11,0(r8)
 8005070:	43000115 	stw	r12,4(r8)
 8005074:	d8c12015 	stw	r3,1152(sp)
 8005078:	d8811f15 	stw	r2,1148(sp)
 800507c:	010001c4 	movi	r4,7
 8005080:	2082ed16 	blt	r4,r2,8005c38 <___vfprintf_internal_r+0x1aa0>
 8005084:	42000204 	addi	r8,r8,8
 8005088:	db013317 	ldw	r12,1228(sp)
 800508c:	643fffc4 	addi	r16,r12,-1
 8005090:	043e680e 	bge	zero,r16,8004a34 <__ram_exceptions_end+0xf7f847f4>
 8005094:	04800404 	movi	r18,16
 8005098:	d8811f17 	ldw	r2,1148(sp)
 800509c:	94007e0e 	bge	r18,r16,8005298 <___vfprintf_internal_r+0x1100>
 80050a0:	01420074 	movhi	r5,2049
 80050a4:	294a2384 	addi	r5,r5,10382
 80050a8:	d9412c15 	stw	r5,1200(sp)
 80050ac:	054001c4 	movi	r21,7
 80050b0:	00000306 	br	80050c0 <___vfprintf_internal_r+0xf28>
 80050b4:	42000204 	addi	r8,r8,8
 80050b8:	843ffc04 	addi	r16,r16,-16
 80050bc:	9400790e 	bge	r18,r16,80052a4 <___vfprintf_internal_r+0x110c>
 80050c0:	18c00404 	addi	r3,r3,16
 80050c4:	10800044 	addi	r2,r2,1
 80050c8:	45000015 	stw	r20,0(r8)
 80050cc:	44800115 	stw	r18,4(r8)
 80050d0:	d8c12015 	stw	r3,1152(sp)
 80050d4:	d8811f15 	stw	r2,1148(sp)
 80050d8:	a8bff60e 	bge	r21,r2,80050b4 <__ram_exceptions_end+0xf7f84e74>
 80050dc:	b009883a 	mov	r4,r22
 80050e0:	b80b883a 	mov	r5,r23
 80050e4:	d9811e04 	addi	r6,sp,1144
 80050e8:	800b4240 	call	800b424 <__sprint_r>
 80050ec:	103d411e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 80050f0:	d8c12017 	ldw	r3,1152(sp)
 80050f4:	d8811f17 	ldw	r2,1148(sp)
 80050f8:	da000404 	addi	r8,sp,16
 80050fc:	003fee06 	br	80050b8 <__ram_exceptions_end+0xf7f84e78>
 8005100:	dac12e17 	ldw	r11,1208(sp)
 8005104:	db012b17 	ldw	r12,1196(sp)
 8005108:	5b2bc83a 	sub	r21,r11,r12
 800510c:	057e130e 	bge	zero,r21,800495c <__ram_exceptions_end+0xf7f8471c>
 8005110:	07000404 	movi	fp,16
 8005114:	d8811f17 	ldw	r2,1148(sp)
 8005118:	e543640e 	bge	fp,r21,8005eac <___vfprintf_internal_r+0x1d14>
 800511c:	01420074 	movhi	r5,2049
 8005120:	294a2384 	addi	r5,r5,10382
 8005124:	d9412c15 	stw	r5,1200(sp)
 8005128:	04c001c4 	movi	r19,7
 800512c:	00000306 	br	800513c <___vfprintf_internal_r+0xfa4>
 8005130:	ad7ffc04 	addi	r21,r21,-16
 8005134:	42000204 	addi	r8,r8,8
 8005138:	e540110e 	bge	fp,r21,8005180 <___vfprintf_internal_r+0xfe8>
 800513c:	18c00404 	addi	r3,r3,16
 8005140:	10800044 	addi	r2,r2,1
 8005144:	45000015 	stw	r20,0(r8)
 8005148:	47000115 	stw	fp,4(r8)
 800514c:	d8c12015 	stw	r3,1152(sp)
 8005150:	d8811f15 	stw	r2,1148(sp)
 8005154:	98bff60e 	bge	r19,r2,8005130 <__ram_exceptions_end+0xf7f84ef0>
 8005158:	b009883a 	mov	r4,r22
 800515c:	b80b883a 	mov	r5,r23
 8005160:	d9811e04 	addi	r6,sp,1144
 8005164:	800b4240 	call	800b424 <__sprint_r>
 8005168:	103d221e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 800516c:	ad7ffc04 	addi	r21,r21,-16
 8005170:	d8c12017 	ldw	r3,1152(sp)
 8005174:	d8811f17 	ldw	r2,1148(sp)
 8005178:	da000404 	addi	r8,sp,16
 800517c:	e57fef16 	blt	fp,r21,800513c <__ram_exceptions_end+0xf7f84efc>
 8005180:	dac12c17 	ldw	r11,1200(sp)
 8005184:	1d47883a 	add	r3,r3,r21
 8005188:	10800044 	addi	r2,r2,1
 800518c:	42c00015 	stw	r11,0(r8)
 8005190:	45400115 	stw	r21,4(r8)
 8005194:	d8c12015 	stw	r3,1152(sp)
 8005198:	d8811f15 	stw	r2,1148(sp)
 800519c:	010001c4 	movi	r4,7
 80051a0:	20819116 	blt	r4,r2,80057e8 <___vfprintf_internal_r+0x1650>
 80051a4:	42000204 	addi	r8,r8,8
 80051a8:	003dec06 	br	800495c <__ram_exceptions_end+0xf7f8471c>
 80051ac:	db013317 	ldw	r12,1228(sp)
 80051b0:	00800044 	movi	r2,1
 80051b4:	18c00044 	addi	r3,r3,1
 80051b8:	1301530e 	bge	r2,r12,8005708 <___vfprintf_internal_r+0x1570>
 80051bc:	dc011f17 	ldw	r16,1148(sp)
 80051c0:	dac13117 	ldw	r11,1220(sp)
 80051c4:	00800044 	movi	r2,1
 80051c8:	84000044 	addi	r16,r16,1
 80051cc:	40800115 	stw	r2,4(r8)
 80051d0:	42c00015 	stw	r11,0(r8)
 80051d4:	d8c12015 	stw	r3,1152(sp)
 80051d8:	dc011f15 	stw	r16,1148(sp)
 80051dc:	008001c4 	movi	r2,7
 80051e0:	14016b16 	blt	r2,r16,8005790 <___vfprintf_internal_r+0x15f8>
 80051e4:	42000204 	addi	r8,r8,8
 80051e8:	db013817 	ldw	r12,1248(sp)
 80051ec:	dac13517 	ldw	r11,1236(sp)
 80051f0:	84000044 	addi	r16,r16,1
 80051f4:	1b07883a 	add	r3,r3,r12
 80051f8:	42c00015 	stw	r11,0(r8)
 80051fc:	43000115 	stw	r12,4(r8)
 8005200:	d8c12015 	stw	r3,1152(sp)
 8005204:	dc011f15 	stw	r16,1148(sp)
 8005208:	008001c4 	movi	r2,7
 800520c:	14016916 	blt	r2,r16,80057b4 <___vfprintf_internal_r+0x161c>
 8005210:	44800204 	addi	r18,r8,8
 8005214:	d9013717 	ldw	r4,1244(sp)
 8005218:	d9413917 	ldw	r5,1252(sp)
 800521c:	000d883a 	mov	r6,zero
 8005220:	000f883a 	mov	r7,zero
 8005224:	d8c13d15 	stw	r3,1268(sp)
 8005228:	800e4e00 	call	800e4e0 <__eqdf2>
 800522c:	d8c13d17 	ldw	r3,1268(sp)
 8005230:	db013317 	ldw	r12,1228(sp)
 8005234:	1000ae26 	beq	r2,zero,80054f0 <___vfprintf_internal_r+0x1358>
 8005238:	dac13117 	ldw	r11,1220(sp)
 800523c:	60bfffc4 	addi	r2,r12,-1
 8005240:	1887883a 	add	r3,r3,r2
 8005244:	59000044 	addi	r4,r11,1
 8005248:	84000044 	addi	r16,r16,1
 800524c:	90800115 	stw	r2,4(r18)
 8005250:	91000015 	stw	r4,0(r18)
 8005254:	d8c12015 	stw	r3,1152(sp)
 8005258:	dc011f15 	stw	r16,1148(sp)
 800525c:	008001c4 	movi	r2,7
 8005260:	14014216 	blt	r2,r16,800576c <___vfprintf_internal_r+0x15d4>
 8005264:	94800204 	addi	r18,r18,8
 8005268:	dac13a17 	ldw	r11,1256(sp)
 800526c:	dd4122c4 	addi	r21,sp,1163
 8005270:	84000044 	addi	r16,r16,1
 8005274:	58c7883a 	add	r3,r11,r3
 8005278:	95400015 	stw	r21,0(r18)
 800527c:	92c00115 	stw	r11,4(r18)
 8005280:	d8c12015 	stw	r3,1152(sp)
 8005284:	dc011f15 	stw	r16,1148(sp)
 8005288:	008001c4 	movi	r2,7
 800528c:	14000e16 	blt	r2,r16,80052c8 <___vfprintf_internal_r+0x1130>
 8005290:	92000204 	addi	r8,r18,8
 8005294:	003de706 	br	8004a34 <__ram_exceptions_end+0xf7f847f4>
 8005298:	01020074 	movhi	r4,2049
 800529c:	210a2384 	addi	r4,r4,10382
 80052a0:	d9012c15 	stw	r4,1200(sp)
 80052a4:	dac12c17 	ldw	r11,1200(sp)
 80052a8:	1c07883a 	add	r3,r3,r16
 80052ac:	44000115 	stw	r16,4(r8)
 80052b0:	42c00015 	stw	r11,0(r8)
 80052b4:	10800044 	addi	r2,r2,1
 80052b8:	d8c12015 	stw	r3,1152(sp)
 80052bc:	d8811f15 	stw	r2,1148(sp)
 80052c0:	010001c4 	movi	r4,7
 80052c4:	20bdda0e 	bge	r4,r2,8004a30 <__ram_exceptions_end+0xf7f847f0>
 80052c8:	b009883a 	mov	r4,r22
 80052cc:	b80b883a 	mov	r5,r23
 80052d0:	d9811e04 	addi	r6,sp,1144
 80052d4:	800b4240 	call	800b424 <__sprint_r>
 80052d8:	103cc61e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 80052dc:	d8c12017 	ldw	r3,1152(sp)
 80052e0:	da000404 	addi	r8,sp,16
 80052e4:	003dd306 	br	8004a34 <__ram_exceptions_end+0xf7f847f4>
 80052e8:	b009883a 	mov	r4,r22
 80052ec:	b80b883a 	mov	r5,r23
 80052f0:	d9811e04 	addi	r6,sp,1144
 80052f4:	800b4240 	call	800b424 <__sprint_r>
 80052f8:	103e0926 	beq	r2,zero,8004b20 <__ram_exceptions_end+0xf7f848e0>
 80052fc:	003cbd06 	br	80045f4 <__ram_exceptions_end+0xf7f843b4>
 8005300:	10803fcc 	andi	r2,r2,255
 8005304:	1000651e 	bne	r2,zero,800549c <___vfprintf_internal_r+0x1304>
 8005308:	8880004c 	andi	r2,r17,1
 800530c:	10013226 	beq	r2,zero,80057d8 <___vfprintf_internal_r+0x1640>
 8005310:	00800c04 	movi	r2,48
 8005314:	d8c10dc4 	addi	r3,sp,1079
 8005318:	d8810dc5 	stb	r2,1079(sp)
 800531c:	dc813c17 	ldw	r18,1264(sp)
 8005320:	d8c13115 	stw	r3,1220(sp)
 8005324:	003d2b06 	br	80047d4 <__ram_exceptions_end+0xf7f84594>
 8005328:	b009883a 	mov	r4,r22
 800532c:	b80b883a 	mov	r5,r23
 8005330:	d9811e04 	addi	r6,sp,1144
 8005334:	800b4240 	call	800b424 <__sprint_r>
 8005338:	103cae1e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 800533c:	d8c12017 	ldw	r3,1152(sp)
 8005340:	da000404 	addi	r8,sp,16
 8005344:	003dae06 	br	8004a00 <__ram_exceptions_end+0xf7f847c0>
 8005348:	b009883a 	mov	r4,r22
 800534c:	b80b883a 	mov	r5,r23
 8005350:	d9811e04 	addi	r6,sp,1144
 8005354:	800b4240 	call	800b424 <__sprint_r>
 8005358:	103ca61e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 800535c:	d8c12017 	ldw	r3,1152(sp)
 8005360:	da000404 	addi	r8,sp,16
 8005364:	003d6c06 	br	8004918 <__ram_exceptions_end+0xf7f846d8>
 8005368:	b009883a 	mov	r4,r22
 800536c:	b80b883a 	mov	r5,r23
 8005370:	d9811e04 	addi	r6,sp,1144
 8005374:	800b4240 	call	800b424 <__sprint_r>
 8005378:	103c9e1e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 800537c:	d8c12017 	ldw	r3,1152(sp)
 8005380:	da000404 	addi	r8,sp,16
 8005384:	003d7206 	br	8004950 <__ram_exceptions_end+0xf7f84710>
 8005388:	d9413b17 	ldw	r5,1260(sp)
 800538c:	d8c10e04 	addi	r3,sp,1080
 8005390:	988003cc 	andi	r2,r19,15
 8005394:	e008973a 	slli	r4,fp,28
 8005398:	2885883a 	add	r2,r5,r2
 800539c:	9826d13a 	srli	r19,r19,4
 80053a0:	10800003 	ldbu	r2,0(r2)
 80053a4:	e038d13a 	srli	fp,fp,4
 80053a8:	18ffffc4 	addi	r3,r3,-1
 80053ac:	24e6b03a 	or	r19,r4,r19
 80053b0:	18800005 	stb	r2,0(r3)
 80053b4:	9f04b03a 	or	r2,r19,fp
 80053b8:	103ff51e 	bne	r2,zero,8005390 <__ram_exceptions_end+0xf7f85150>
 80053bc:	db012817 	ldw	r12,1184(sp)
 80053c0:	d8c13115 	stw	r3,1220(sp)
 80053c4:	60e5c83a 	sub	r18,r12,r3
 80053c8:	003d0206 	br	80047d4 <__ram_exceptions_end+0xf7f84594>
 80053cc:	dc012617 	ldw	r16,1176(sp)
 80053d0:	0401b10e 	bge	zero,r16,8005a98 <___vfprintf_internal_r+0x1900>
 80053d4:	db013117 	ldw	r12,1220(sp)
 80053d8:	dac13317 	ldw	r11,1228(sp)
 80053dc:	62e1883a 	add	r16,r12,r11
 80053e0:	db013417 	ldw	r12,1232(sp)
 80053e4:	5825883a 	mov	r18,r11
 80053e8:	62c0010e 	bge	r12,r11,80053f0 <___vfprintf_internal_r+0x1258>
 80053ec:	6025883a 	mov	r18,r12
 80053f0:	04800b0e 	bge	zero,r18,8005420 <___vfprintf_internal_r+0x1288>
 80053f4:	d8811f17 	ldw	r2,1148(sp)
 80053f8:	dac13117 	ldw	r11,1220(sp)
 80053fc:	1c87883a 	add	r3,r3,r18
 8005400:	10800044 	addi	r2,r2,1
 8005404:	42c00015 	stw	r11,0(r8)
 8005408:	44800115 	stw	r18,4(r8)
 800540c:	d8c12015 	stw	r3,1152(sp)
 8005410:	d8811f15 	stw	r2,1148(sp)
 8005414:	010001c4 	movi	r4,7
 8005418:	20824f16 	blt	r4,r2,8005d58 <___vfprintf_internal_r+0x1bc0>
 800541c:	42000204 	addi	r8,r8,8
 8005420:	90024b16 	blt	r18,zero,8005d50 <___vfprintf_internal_r+0x1bb8>
 8005424:	db013417 	ldw	r12,1232(sp)
 8005428:	64a5c83a 	sub	r18,r12,r18
 800542c:	0480730e 	bge	zero,r18,80055fc <___vfprintf_internal_r+0x1464>
 8005430:	05400404 	movi	r21,16
 8005434:	d8811f17 	ldw	r2,1148(sp)
 8005438:	ac817d0e 	bge	r21,r18,8005a30 <___vfprintf_internal_r+0x1898>
 800543c:	01420074 	movhi	r5,2049
 8005440:	294a2384 	addi	r5,r5,10382
 8005444:	d9412c15 	stw	r5,1200(sp)
 8005448:	070001c4 	movi	fp,7
 800544c:	00000306 	br	800545c <___vfprintf_internal_r+0x12c4>
 8005450:	42000204 	addi	r8,r8,8
 8005454:	94bffc04 	addi	r18,r18,-16
 8005458:	ac81780e 	bge	r21,r18,8005a3c <___vfprintf_internal_r+0x18a4>
 800545c:	18c00404 	addi	r3,r3,16
 8005460:	10800044 	addi	r2,r2,1
 8005464:	45000015 	stw	r20,0(r8)
 8005468:	45400115 	stw	r21,4(r8)
 800546c:	d8c12015 	stw	r3,1152(sp)
 8005470:	d8811f15 	stw	r2,1148(sp)
 8005474:	e0bff60e 	bge	fp,r2,8005450 <__ram_exceptions_end+0xf7f85210>
 8005478:	b009883a 	mov	r4,r22
 800547c:	b80b883a 	mov	r5,r23
 8005480:	d9811e04 	addi	r6,sp,1144
 8005484:	800b4240 	call	800b424 <__sprint_r>
 8005488:	103c5a1e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 800548c:	d8c12017 	ldw	r3,1152(sp)
 8005490:	d8811f17 	ldw	r2,1148(sp)
 8005494:	da000404 	addi	r8,sp,16
 8005498:	003fee06 	br	8005454 <__ram_exceptions_end+0xf7f85214>
 800549c:	dac10e04 	addi	r11,sp,1080
 80054a0:	0025883a 	mov	r18,zero
 80054a4:	dac13115 	stw	r11,1220(sp)
 80054a8:	003cca06 	br	80047d4 <__ram_exceptions_end+0xf7f84594>
 80054ac:	b009883a 	mov	r4,r22
 80054b0:	b80b883a 	mov	r5,r23
 80054b4:	d9811e04 	addi	r6,sp,1144
 80054b8:	800b4240 	call	800b424 <__sprint_r>
 80054bc:	103c4d1e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 80054c0:	d8c12017 	ldw	r3,1152(sp)
 80054c4:	d8812787 	ldb	r2,1182(sp)
 80054c8:	da000404 	addi	r8,sp,16
 80054cc:	003d0506 	br	80048e4 <__ram_exceptions_end+0xf7f846a4>
 80054d0:	dac12d17 	ldw	r11,1204(sp)
 80054d4:	14c00017 	ldw	r19,0(r2)
 80054d8:	0039883a 	mov	fp,zero
 80054dc:	5ac00104 	addi	r11,r11,4
 80054e0:	dac12d15 	stw	r11,1204(sp)
 80054e4:	0005883a 	mov	r2,zero
 80054e8:	9807883a 	mov	r3,r19
 80054ec:	003c9c06 	br	8004760 <__ram_exceptions_end+0xf7f84520>
 80054f0:	657fffc4 	addi	r21,r12,-1
 80054f4:	057f5c0e 	bge	zero,r21,8005268 <__ram_exceptions_end+0xf7f85028>
 80054f8:	07000404 	movi	fp,16
 80054fc:	e5408f0e 	bge	fp,r21,800573c <___vfprintf_internal_r+0x15a4>
 8005500:	01020074 	movhi	r4,2049
 8005504:	210a2384 	addi	r4,r4,10382
 8005508:	d9012c15 	stw	r4,1200(sp)
 800550c:	01c001c4 	movi	r7,7
 8005510:	00000306 	br	8005520 <___vfprintf_internal_r+0x1388>
 8005514:	94800204 	addi	r18,r18,8
 8005518:	ad7ffc04 	addi	r21,r21,-16
 800551c:	e5408a0e 	bge	fp,r21,8005748 <___vfprintf_internal_r+0x15b0>
 8005520:	18c00404 	addi	r3,r3,16
 8005524:	84000044 	addi	r16,r16,1
 8005528:	95000015 	stw	r20,0(r18)
 800552c:	97000115 	stw	fp,4(r18)
 8005530:	d8c12015 	stw	r3,1152(sp)
 8005534:	dc011f15 	stw	r16,1148(sp)
 8005538:	3c3ff60e 	bge	r7,r16,8005514 <__ram_exceptions_end+0xf7f852d4>
 800553c:	b009883a 	mov	r4,r22
 8005540:	b80b883a 	mov	r5,r23
 8005544:	d9811e04 	addi	r6,sp,1144
 8005548:	d9c13d15 	stw	r7,1268(sp)
 800554c:	800b4240 	call	800b424 <__sprint_r>
 8005550:	d9c13d17 	ldw	r7,1268(sp)
 8005554:	103c271e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 8005558:	d8c12017 	ldw	r3,1152(sp)
 800555c:	dc011f17 	ldw	r16,1148(sp)
 8005560:	dc800404 	addi	r18,sp,16
 8005564:	003fec06 	br	8005518 <__ram_exceptions_end+0xf7f852d8>
 8005568:	1cc00017 	ldw	r19,0(r3)
 800556c:	dac12d17 	ldw	r11,1204(sp)
 8005570:	9839d7fa 	srai	fp,r19,31
 8005574:	5ac00104 	addi	r11,r11,4
 8005578:	dac12d15 	stw	r11,1204(sp)
 800557c:	e005883a 	mov	r2,fp
 8005580:	003d9006 	br	8004bc4 <__ram_exceptions_end+0xf7f84984>
 8005584:	00800084 	movi	r2,2
 8005588:	9f06b03a 	or	r3,r19,fp
 800558c:	003c7406 	br	8004760 <__ram_exceptions_end+0xf7f84520>
 8005590:	db012d17 	ldw	r12,1204(sp)
 8005594:	14c00017 	ldw	r19,0(r2)
 8005598:	0039883a 	mov	fp,zero
 800559c:	63000104 	addi	r12,r12,4
 80055a0:	db012d15 	stw	r12,1204(sp)
 80055a4:	00800044 	movi	r2,1
 80055a8:	9807883a 	mov	r3,r19
 80055ac:	003c6c06 	br	8004760 <__ram_exceptions_end+0xf7f84520>
 80055b0:	10803fcc 	andi	r2,r2,255
 80055b4:	1080201c 	xori	r2,r2,128
 80055b8:	10bfe004 	addi	r2,r2,-128
 80055bc:	01000c04 	movi	r4,48
 80055c0:	1101a526 	beq	r2,r4,8005c58 <___vfprintf_internal_r+0x1ac0>
 80055c4:	dac13117 	ldw	r11,1220(sp)
 80055c8:	db012817 	ldw	r12,1184(sp)
 80055cc:	193fffc5 	stb	r4,-1(r3)
 80055d0:	5affffc4 	addi	r11,r11,-1
 80055d4:	dac13115 	stw	r11,1220(sp)
 80055d8:	62e5c83a 	sub	r18,r12,r11
 80055dc:	003c7d06 	br	80047d4 <__ram_exceptions_end+0xf7f84594>
 80055e0:	b009883a 	mov	r4,r22
 80055e4:	b80b883a 	mov	r5,r23
 80055e8:	d9811e04 	addi	r6,sp,1144
 80055ec:	800b4240 	call	800b424 <__sprint_r>
 80055f0:	103c001e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 80055f4:	d8c12017 	ldw	r3,1152(sp)
 80055f8:	da000404 	addi	r8,sp,16
 80055fc:	db013117 	ldw	r12,1220(sp)
 8005600:	dac13417 	ldw	r11,1232(sp)
 8005604:	d8812617 	ldw	r2,1176(sp)
 8005608:	62e5883a 	add	r18,r12,r11
 800560c:	db013317 	ldw	r12,1228(sp)
 8005610:	13000216 	blt	r2,r12,800561c <___vfprintf_internal_r+0x1484>
 8005614:	8900004c 	andi	r4,r17,1
 8005618:	20000c26 	beq	r4,zero,800564c <___vfprintf_internal_r+0x14b4>
 800561c:	dac13817 	ldw	r11,1248(sp)
 8005620:	d9011f17 	ldw	r4,1148(sp)
 8005624:	db013517 	ldw	r12,1236(sp)
 8005628:	1ac7883a 	add	r3,r3,r11
 800562c:	21000044 	addi	r4,r4,1
 8005630:	43000015 	stw	r12,0(r8)
 8005634:	42c00115 	stw	r11,4(r8)
 8005638:	d8c12015 	stw	r3,1152(sp)
 800563c:	d9011f15 	stw	r4,1148(sp)
 8005640:	014001c4 	movi	r5,7
 8005644:	2901cc16 	blt	r5,r4,8005d78 <___vfprintf_internal_r+0x1be0>
 8005648:	42000204 	addi	r8,r8,8
 800564c:	dac13317 	ldw	r11,1228(sp)
 8005650:	8489c83a 	sub	r4,r16,r18
 8005654:	5885c83a 	sub	r2,r11,r2
 8005658:	1021883a 	mov	r16,r2
 800565c:	2080010e 	bge	r4,r2,8005664 <___vfprintf_internal_r+0x14cc>
 8005660:	2021883a 	mov	r16,r4
 8005664:	04000a0e 	bge	zero,r16,8005690 <___vfprintf_internal_r+0x14f8>
 8005668:	d9011f17 	ldw	r4,1148(sp)
 800566c:	1c07883a 	add	r3,r3,r16
 8005670:	44800015 	stw	r18,0(r8)
 8005674:	21000044 	addi	r4,r4,1
 8005678:	44000115 	stw	r16,4(r8)
 800567c:	d8c12015 	stw	r3,1152(sp)
 8005680:	d9011f15 	stw	r4,1148(sp)
 8005684:	014001c4 	movi	r5,7
 8005688:	2901d616 	blt	r5,r4,8005de4 <___vfprintf_internal_r+0x1c4c>
 800568c:	42000204 	addi	r8,r8,8
 8005690:	8001df16 	blt	r16,zero,8005e10 <___vfprintf_internal_r+0x1c78>
 8005694:	1421c83a 	sub	r16,r2,r16
 8005698:	043ce60e 	bge	zero,r16,8004a34 <__ram_exceptions_end+0xf7f847f4>
 800569c:	04800404 	movi	r18,16
 80056a0:	d8811f17 	ldw	r2,1148(sp)
 80056a4:	943efc0e 	bge	r18,r16,8005298 <__ram_exceptions_end+0xf7f85058>
 80056a8:	01420074 	movhi	r5,2049
 80056ac:	294a2384 	addi	r5,r5,10382
 80056b0:	d9412c15 	stw	r5,1200(sp)
 80056b4:	054001c4 	movi	r21,7
 80056b8:	00000306 	br	80056c8 <___vfprintf_internal_r+0x1530>
 80056bc:	42000204 	addi	r8,r8,8
 80056c0:	843ffc04 	addi	r16,r16,-16
 80056c4:	943ef70e 	bge	r18,r16,80052a4 <__ram_exceptions_end+0xf7f85064>
 80056c8:	18c00404 	addi	r3,r3,16
 80056cc:	10800044 	addi	r2,r2,1
 80056d0:	45000015 	stw	r20,0(r8)
 80056d4:	44800115 	stw	r18,4(r8)
 80056d8:	d8c12015 	stw	r3,1152(sp)
 80056dc:	d8811f15 	stw	r2,1148(sp)
 80056e0:	a8bff60e 	bge	r21,r2,80056bc <__ram_exceptions_end+0xf7f8547c>
 80056e4:	b009883a 	mov	r4,r22
 80056e8:	b80b883a 	mov	r5,r23
 80056ec:	d9811e04 	addi	r6,sp,1144
 80056f0:	800b4240 	call	800b424 <__sprint_r>
 80056f4:	103bbf1e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 80056f8:	d8c12017 	ldw	r3,1152(sp)
 80056fc:	d8811f17 	ldw	r2,1148(sp)
 8005700:	da000404 	addi	r8,sp,16
 8005704:	003fee06 	br	80056c0 <__ram_exceptions_end+0xf7f85480>
 8005708:	8888703a 	and	r4,r17,r2
 800570c:	203eab1e 	bne	r4,zero,80051bc <__ram_exceptions_end+0xf7f84f7c>
 8005710:	dc011f17 	ldw	r16,1148(sp)
 8005714:	db013117 	ldw	r12,1220(sp)
 8005718:	40800115 	stw	r2,4(r8)
 800571c:	84000044 	addi	r16,r16,1
 8005720:	43000015 	stw	r12,0(r8)
 8005724:	d8c12015 	stw	r3,1152(sp)
 8005728:	dc011f15 	stw	r16,1148(sp)
 800572c:	008001c4 	movi	r2,7
 8005730:	14000e16 	blt	r2,r16,800576c <___vfprintf_internal_r+0x15d4>
 8005734:	44800204 	addi	r18,r8,8
 8005738:	003ecb06 	br	8005268 <__ram_exceptions_end+0xf7f85028>
 800573c:	00820074 	movhi	r2,2049
 8005740:	108a2384 	addi	r2,r2,10382
 8005744:	d8812c15 	stw	r2,1200(sp)
 8005748:	dac12c17 	ldw	r11,1200(sp)
 800574c:	1d47883a 	add	r3,r3,r21
 8005750:	84000044 	addi	r16,r16,1
 8005754:	92c00015 	stw	r11,0(r18)
 8005758:	95400115 	stw	r21,4(r18)
 800575c:	d8c12015 	stw	r3,1152(sp)
 8005760:	dc011f15 	stw	r16,1148(sp)
 8005764:	008001c4 	movi	r2,7
 8005768:	143ebe0e 	bge	r2,r16,8005264 <__ram_exceptions_end+0xf7f85024>
 800576c:	b009883a 	mov	r4,r22
 8005770:	b80b883a 	mov	r5,r23
 8005774:	d9811e04 	addi	r6,sp,1144
 8005778:	800b4240 	call	800b424 <__sprint_r>
 800577c:	103b9d1e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 8005780:	d8c12017 	ldw	r3,1152(sp)
 8005784:	dc011f17 	ldw	r16,1148(sp)
 8005788:	dc800404 	addi	r18,sp,16
 800578c:	003eb606 	br	8005268 <__ram_exceptions_end+0xf7f85028>
 8005790:	b009883a 	mov	r4,r22
 8005794:	b80b883a 	mov	r5,r23
 8005798:	d9811e04 	addi	r6,sp,1144
 800579c:	800b4240 	call	800b424 <__sprint_r>
 80057a0:	103b941e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 80057a4:	d8c12017 	ldw	r3,1152(sp)
 80057a8:	dc011f17 	ldw	r16,1148(sp)
 80057ac:	da000404 	addi	r8,sp,16
 80057b0:	003e8d06 	br	80051e8 <__ram_exceptions_end+0xf7f84fa8>
 80057b4:	b009883a 	mov	r4,r22
 80057b8:	b80b883a 	mov	r5,r23
 80057bc:	d9811e04 	addi	r6,sp,1144
 80057c0:	800b4240 	call	800b424 <__sprint_r>
 80057c4:	103b8b1e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 80057c8:	d8c12017 	ldw	r3,1152(sp)
 80057cc:	dc011f17 	ldw	r16,1148(sp)
 80057d0:	dc800404 	addi	r18,sp,16
 80057d4:	003e8f06 	br	8005214 <__ram_exceptions_end+0xf7f84fd4>
 80057d8:	db010e04 	addi	r12,sp,1080
 80057dc:	0025883a 	mov	r18,zero
 80057e0:	db013115 	stw	r12,1220(sp)
 80057e4:	003bfb06 	br	80047d4 <__ram_exceptions_end+0xf7f84594>
 80057e8:	b009883a 	mov	r4,r22
 80057ec:	b80b883a 	mov	r5,r23
 80057f0:	d9811e04 	addi	r6,sp,1144
 80057f4:	800b4240 	call	800b424 <__sprint_r>
 80057f8:	103b7e1e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 80057fc:	d8c12017 	ldw	r3,1152(sp)
 8005800:	da000404 	addi	r8,sp,16
 8005804:	003c5506 	br	800495c <__ram_exceptions_end+0xf7f8471c>
 8005808:	04e7c83a 	sub	r19,zero,r19
 800580c:	9804c03a 	cmpne	r2,r19,zero
 8005810:	0739c83a 	sub	fp,zero,fp
 8005814:	e0b9c83a 	sub	fp,fp,r2
 8005818:	05400b44 	movi	r21,45
 800581c:	dd412785 	stb	r21,1182(sp)
 8005820:	da413215 	stw	r9,1224(sp)
 8005824:	00800044 	movi	r2,1
 8005828:	9f06b03a 	or	r3,r19,fp
 800582c:	003bcf06 	br	800476c <__ram_exceptions_end+0xf7f8452c>
 8005830:	da013f15 	stw	r8,1276(sp)
 8005834:	da413e15 	stw	r9,1272(sp)
 8005838:	800b0800 	call	800b080 <__fpclassifyd>
 800583c:	da013f17 	ldw	r8,1276(sp)
 8005840:	da413e17 	ldw	r9,1272(sp)
 8005844:	1000ce26 	beq	r2,zero,8005b80 <___vfprintf_internal_r+0x19e8>
 8005848:	057ff7c4 	movi	r21,-33
 800584c:	00bfffc4 	movi	r2,-1
 8005850:	856a703a 	and	r21,r16,r21
 8005854:	4881f026 	beq	r9,r2,8006018 <___vfprintf_internal_r+0x1e80>
 8005858:	008011c4 	movi	r2,71
 800585c:	a881e526 	beq	r21,r2,8005ff4 <___vfprintf_internal_r+0x1e5c>
 8005860:	db013917 	ldw	r12,1252(sp)
 8005864:	8ac04014 	ori	r11,r17,256
 8005868:	dac12d15 	stw	r11,1204(sp)
 800586c:	6001e416 	blt	r12,zero,8006000 <___vfprintf_internal_r+0x1e68>
 8005870:	dc813917 	ldw	r18,1252(sp)
 8005874:	d8012b05 	stb	zero,1196(sp)
 8005878:	00801984 	movi	r2,102
 800587c:	80811826 	beq	r16,r2,8005ce0 <___vfprintf_internal_r+0x1b48>
 8005880:	00801184 	movi	r2,70
 8005884:	80811626 	beq	r16,r2,8005ce0 <___vfprintf_internal_r+0x1b48>
 8005888:	00801144 	movi	r2,69
 800588c:	a881e026 	beq	r21,r2,8006010 <___vfprintf_internal_r+0x1e78>
 8005890:	4839883a 	mov	fp,r9
 8005894:	d8812604 	addi	r2,sp,1176
 8005898:	d8800115 	stw	r2,4(sp)
 800589c:	d9413717 	ldw	r5,1244(sp)
 80058a0:	d8812504 	addi	r2,sp,1172
 80058a4:	d8800215 	stw	r2,8(sp)
 80058a8:	d8812104 	addi	r2,sp,1156
 80058ac:	df000015 	stw	fp,0(sp)
 80058b0:	d8800315 	stw	r2,12(sp)
 80058b4:	b009883a 	mov	r4,r22
 80058b8:	900d883a 	mov	r6,r18
 80058bc:	01c00084 	movi	r7,2
 80058c0:	da013f15 	stw	r8,1276(sp)
 80058c4:	da413e15 	stw	r9,1272(sp)
 80058c8:	80064e80 	call	80064e8 <_dtoa_r>
 80058cc:	d8813115 	stw	r2,1220(sp)
 80058d0:	008019c4 	movi	r2,103
 80058d4:	da013f17 	ldw	r8,1276(sp)
 80058d8:	da413e17 	ldw	r9,1272(sp)
 80058dc:	80800226 	beq	r16,r2,80058e8 <___vfprintf_internal_r+0x1750>
 80058e0:	008011c4 	movi	r2,71
 80058e4:	8081101e 	bne	r16,r2,8005d28 <___vfprintf_internal_r+0x1b90>
 80058e8:	8880004c 	andi	r2,r17,1
 80058ec:	1001df26 	beq	r2,zero,800606c <___vfprintf_internal_r+0x1ed4>
 80058f0:	db013117 	ldw	r12,1220(sp)
 80058f4:	6715883a 	add	r10,r12,fp
 80058f8:	d9013717 	ldw	r4,1244(sp)
 80058fc:	900b883a 	mov	r5,r18
 8005900:	000d883a 	mov	r6,zero
 8005904:	000f883a 	mov	r7,zero
 8005908:	da013f15 	stw	r8,1276(sp)
 800590c:	da413e15 	stw	r9,1272(sp)
 8005910:	da813d15 	stw	r10,1268(sp)
 8005914:	800e4e00 	call	800e4e0 <__eqdf2>
 8005918:	da013f17 	ldw	r8,1276(sp)
 800591c:	da413e17 	ldw	r9,1272(sp)
 8005920:	da813d17 	ldw	r10,1268(sp)
 8005924:	10016526 	beq	r2,zero,8005ebc <___vfprintf_internal_r+0x1d24>
 8005928:	d8812117 	ldw	r2,1156(sp)
 800592c:	1280062e 	bgeu	r2,r10,8005948 <___vfprintf_internal_r+0x17b0>
 8005930:	01000c04 	movi	r4,48
 8005934:	10c00044 	addi	r3,r2,1
 8005938:	d8c12115 	stw	r3,1156(sp)
 800593c:	11000005 	stb	r4,0(r2)
 8005940:	d8812117 	ldw	r2,1156(sp)
 8005944:	12bffb36 	bltu	r2,r10,8005934 <__ram_exceptions_end+0xf7f856f4>
 8005948:	db013117 	ldw	r12,1220(sp)
 800594c:	1305c83a 	sub	r2,r2,r12
 8005950:	d8813315 	stw	r2,1228(sp)
 8005954:	008011c4 	movi	r2,71
 8005958:	a8814a26 	beq	r21,r2,8005e84 <___vfprintf_internal_r+0x1cec>
 800595c:	00801944 	movi	r2,101
 8005960:	14020a0e 	bge	r2,r16,800618c <___vfprintf_internal_r+0x1ff4>
 8005964:	00801984 	movi	r2,102
 8005968:	8081b626 	beq	r16,r2,8006044 <___vfprintf_internal_r+0x1eac>
 800596c:	db012617 	ldw	r12,1176(sp)
 8005970:	db013415 	stw	r12,1232(sp)
 8005974:	db013417 	ldw	r12,1232(sp)
 8005978:	dac13317 	ldw	r11,1228(sp)
 800597c:	62c1a816 	blt	r12,r11,8006020 <___vfprintf_internal_r+0x1e88>
 8005980:	8c40004c 	andi	r17,r17,1
 8005984:	8801ca1e 	bne	r17,zero,80060b0 <___vfprintf_internal_r+0x1f18>
 8005988:	6005883a 	mov	r2,r12
 800598c:	6001b516 	blt	r12,zero,8006064 <___vfprintf_internal_r+0x1ecc>
 8005990:	dc813417 	ldw	r18,1232(sp)
 8005994:	df012b07 	ldb	fp,1196(sp)
 8005998:	e001321e 	bne	fp,zero,8005e64 <___vfprintf_internal_r+0x1ccc>
 800599c:	dc412d17 	ldw	r17,1204(sp)
 80059a0:	dd412783 	ldbu	r21,1182(sp)
 80059a4:	d8812b15 	stw	r2,1196(sp)
 80059a8:	dcc12d15 	stw	r19,1204(sp)
 80059ac:	d8013215 	stw	zero,1224(sp)
 80059b0:	003b8d06 	br	80047e8 <__ram_exceptions_end+0xf7f845a8>
 80059b4:	88c0100c 	andi	r3,r17,64
 80059b8:	18008226 	beq	r3,zero,8005bc4 <___vfprintf_internal_r+0x1a2c>
 80059bc:	dac12d17 	ldw	r11,1204(sp)
 80059c0:	14c0000b 	ldhu	r19,0(r2)
 80059c4:	0039883a 	mov	fp,zero
 80059c8:	5ac00104 	addi	r11,r11,4
 80059cc:	dac12d15 	stw	r11,1204(sp)
 80059d0:	003c8f06 	br	8004c10 <__ram_exceptions_end+0xf7f849d0>
 80059d4:	1c000007 	ldb	r16,0(r3)
 80059d8:	1805883a 	mov	r2,r3
 80059dc:	003a5506 	br	8004334 <__ram_exceptions_end+0xf7f840f4>
 80059e0:	00800084 	movi	r2,2
 80059e4:	003b5e06 	br	8004760 <__ram_exceptions_end+0xf7f84520>
 80059e8:	8880040c 	andi	r2,r17,16
 80059ec:	1000091e 	bne	r2,zero,8005a14 <___vfprintf_internal_r+0x187c>
 80059f0:	8c40100c 	andi	r17,r17,64
 80059f4:	88000726 	beq	r17,zero,8005a14 <___vfprintf_internal_r+0x187c>
 80059f8:	db012d17 	ldw	r12,1204(sp)
 80059fc:	dac12f17 	ldw	r11,1212(sp)
 8005a00:	60800017 	ldw	r2,0(r12)
 8005a04:	63000104 	addi	r12,r12,4
 8005a08:	db012d15 	stw	r12,1204(sp)
 8005a0c:	12c0000d 	sth	r11,0(r2)
 8005a10:	003a1e06 	br	800428c <__ram_exceptions_end+0xf7f8404c>
 8005a14:	db012d17 	ldw	r12,1204(sp)
 8005a18:	dac12f17 	ldw	r11,1212(sp)
 8005a1c:	60800017 	ldw	r2,0(r12)
 8005a20:	63000104 	addi	r12,r12,4
 8005a24:	db012d15 	stw	r12,1204(sp)
 8005a28:	12c00015 	stw	r11,0(r2)
 8005a2c:	003a1706 	br	800428c <__ram_exceptions_end+0xf7f8404c>
 8005a30:	01020074 	movhi	r4,2049
 8005a34:	210a2384 	addi	r4,r4,10382
 8005a38:	d9012c15 	stw	r4,1200(sp)
 8005a3c:	dac12c17 	ldw	r11,1200(sp)
 8005a40:	1c87883a 	add	r3,r3,r18
 8005a44:	10800044 	addi	r2,r2,1
 8005a48:	42c00015 	stw	r11,0(r8)
 8005a4c:	44800115 	stw	r18,4(r8)
 8005a50:	d8c12015 	stw	r3,1152(sp)
 8005a54:	d8811f15 	stw	r2,1148(sp)
 8005a58:	010001c4 	movi	r4,7
 8005a5c:	20bee016 	blt	r4,r2,80055e0 <__ram_exceptions_end+0xf7f853a0>
 8005a60:	42000204 	addi	r8,r8,8
 8005a64:	003ee506 	br	80055fc <__ram_exceptions_end+0xf7f853bc>
 8005a68:	01020074 	movhi	r4,2049
 8005a6c:	210a2384 	addi	r4,r4,10382
 8005a70:	d9012c15 	stw	r4,1200(sp)
 8005a74:	003bd806 	br	80049d8 <__ram_exceptions_end+0xf7f84798>
 8005a78:	b009883a 	mov	r4,r22
 8005a7c:	b80b883a 	mov	r5,r23
 8005a80:	d9811e04 	addi	r6,sp,1144
 8005a84:	800b4240 	call	800b424 <__sprint_r>
 8005a88:	103ada1e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 8005a8c:	d8c12017 	ldw	r3,1152(sp)
 8005a90:	da000404 	addi	r8,sp,16
 8005a94:	003d6b06 	br	8005044 <__ram_exceptions_end+0xf7f84e04>
 8005a98:	d8811f17 	ldw	r2,1148(sp)
 8005a9c:	03020074 	movhi	r12,2049
 8005aa0:	01000044 	movi	r4,1
 8005aa4:	18c00044 	addi	r3,r3,1
 8005aa8:	10800044 	addi	r2,r2,1
 8005aac:	630a2304 	addi	r12,r12,10380
 8005ab0:	41000115 	stw	r4,4(r8)
 8005ab4:	43000015 	stw	r12,0(r8)
 8005ab8:	d8c12015 	stw	r3,1152(sp)
 8005abc:	d8811f15 	stw	r2,1148(sp)
 8005ac0:	010001c4 	movi	r4,7
 8005ac4:	20804916 	blt	r4,r2,8005bec <___vfprintf_internal_r+0x1a54>
 8005ac8:	42000204 	addi	r8,r8,8
 8005acc:	8000041e 	bne	r16,zero,8005ae0 <___vfprintf_internal_r+0x1948>
 8005ad0:	dac13317 	ldw	r11,1228(sp)
 8005ad4:	5800021e 	bne	r11,zero,8005ae0 <___vfprintf_internal_r+0x1948>
 8005ad8:	8880004c 	andi	r2,r17,1
 8005adc:	103bd526 	beq	r2,zero,8004a34 <__ram_exceptions_end+0xf7f847f4>
 8005ae0:	db013817 	ldw	r12,1248(sp)
 8005ae4:	d8811f17 	ldw	r2,1148(sp)
 8005ae8:	dac13517 	ldw	r11,1236(sp)
 8005aec:	1b07883a 	add	r3,r3,r12
 8005af0:	10800044 	addi	r2,r2,1
 8005af4:	42c00015 	stw	r11,0(r8)
 8005af8:	43000115 	stw	r12,4(r8)
 8005afc:	d8c12015 	stw	r3,1152(sp)
 8005b00:	d8811f15 	stw	r2,1148(sp)
 8005b04:	010001c4 	movi	r4,7
 8005b08:	20813016 	blt	r4,r2,8005fcc <___vfprintf_internal_r+0x1e34>
 8005b0c:	42000204 	addi	r8,r8,8
 8005b10:	0421c83a 	sub	r16,zero,r16
 8005b14:	0400630e 	bge	zero,r16,8005ca4 <___vfprintf_internal_r+0x1b0c>
 8005b18:	04800404 	movi	r18,16
 8005b1c:	94009f0e 	bge	r18,r16,8005d9c <___vfprintf_internal_r+0x1c04>
 8005b20:	01020074 	movhi	r4,2049
 8005b24:	210a2384 	addi	r4,r4,10382
 8005b28:	d9012c15 	stw	r4,1200(sp)
 8005b2c:	054001c4 	movi	r21,7
 8005b30:	00000306 	br	8005b40 <___vfprintf_internal_r+0x19a8>
 8005b34:	42000204 	addi	r8,r8,8
 8005b38:	843ffc04 	addi	r16,r16,-16
 8005b3c:	94009a0e 	bge	r18,r16,8005da8 <___vfprintf_internal_r+0x1c10>
 8005b40:	18c00404 	addi	r3,r3,16
 8005b44:	10800044 	addi	r2,r2,1
 8005b48:	45000015 	stw	r20,0(r8)
 8005b4c:	44800115 	stw	r18,4(r8)
 8005b50:	d8c12015 	stw	r3,1152(sp)
 8005b54:	d8811f15 	stw	r2,1148(sp)
 8005b58:	a8bff60e 	bge	r21,r2,8005b34 <__ram_exceptions_end+0xf7f858f4>
 8005b5c:	b009883a 	mov	r4,r22
 8005b60:	b80b883a 	mov	r5,r23
 8005b64:	d9811e04 	addi	r6,sp,1144
 8005b68:	800b4240 	call	800b424 <__sprint_r>
 8005b6c:	103aa11e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 8005b70:	d8c12017 	ldw	r3,1152(sp)
 8005b74:	d8811f17 	ldw	r2,1148(sp)
 8005b78:	da000404 	addi	r8,sp,16
 8005b7c:	003fee06 	br	8005b38 <__ram_exceptions_end+0xf7f858f8>
 8005b80:	008011c4 	movi	r2,71
 8005b84:	1400b316 	blt	r2,r16,8005e54 <___vfprintf_internal_r+0x1cbc>
 8005b88:	03020074 	movhi	r12,2049
 8005b8c:	630a1504 	addi	r12,r12,10324
 8005b90:	db013115 	stw	r12,1220(sp)
 8005b94:	00c000c4 	movi	r3,3
 8005b98:	00bfdfc4 	movi	r2,-129
 8005b9c:	d8c12b15 	stw	r3,1196(sp)
 8005ba0:	88a2703a 	and	r17,r17,r2
 8005ba4:	dd412783 	ldbu	r21,1182(sp)
 8005ba8:	dcc12d15 	stw	r19,1204(sp)
 8005bac:	1825883a 	mov	r18,r3
 8005bb0:	d8013215 	stw	zero,1224(sp)
 8005bb4:	d8013415 	stw	zero,1232(sp)
 8005bb8:	003b0b06 	br	80047e8 <__ram_exceptions_end+0xf7f845a8>
 8005bbc:	4825883a 	mov	r18,r9
 8005bc0:	003cba06 	br	8004eac <__ram_exceptions_end+0xf7f84c6c>
 8005bc4:	db012d17 	ldw	r12,1204(sp)
 8005bc8:	14c00017 	ldw	r19,0(r2)
 8005bcc:	0039883a 	mov	fp,zero
 8005bd0:	63000104 	addi	r12,r12,4
 8005bd4:	db012d15 	stw	r12,1204(sp)
 8005bd8:	003c0d06 	br	8004c10 <__ram_exceptions_end+0xf7f849d0>
 8005bdc:	00820074 	movhi	r2,2049
 8005be0:	108a1304 	addi	r2,r2,10316
 8005be4:	d8813115 	stw	r2,1220(sp)
 8005be8:	003ac406 	br	80046fc <__ram_exceptions_end+0xf7f844bc>
 8005bec:	b009883a 	mov	r4,r22
 8005bf0:	b80b883a 	mov	r5,r23
 8005bf4:	d9811e04 	addi	r6,sp,1144
 8005bf8:	800b4240 	call	800b424 <__sprint_r>
 8005bfc:	103a7d1e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 8005c00:	dc012617 	ldw	r16,1176(sp)
 8005c04:	d8c12017 	ldw	r3,1152(sp)
 8005c08:	da000404 	addi	r8,sp,16
 8005c0c:	003faf06 	br	8005acc <__ram_exceptions_end+0xf7f8588c>
 8005c10:	db012e17 	ldw	r12,1208(sp)
 8005c14:	1805883a 	mov	r2,r3
 8005c18:	dac12d15 	stw	r11,1204(sp)
 8005c1c:	0319c83a 	sub	r12,zero,r12
 8005c20:	db012e15 	stw	r12,1208(sp)
 8005c24:	003a7e06 	br	8004620 <__ram_exceptions_end+0xf7f843e0>
 8005c28:	18800044 	addi	r2,r3,1
 8005c2c:	8c400814 	ori	r17,r17,32
 8005c30:	1c000047 	ldb	r16,1(r3)
 8005c34:	0039bf06 	br	8004334 <__ram_exceptions_end+0xf7f840f4>
 8005c38:	b009883a 	mov	r4,r22
 8005c3c:	b80b883a 	mov	r5,r23
 8005c40:	d9811e04 	addi	r6,sp,1144
 8005c44:	800b4240 	call	800b424 <__sprint_r>
 8005c48:	103a6a1e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 8005c4c:	d8c12017 	ldw	r3,1152(sp)
 8005c50:	da000404 	addi	r8,sp,16
 8005c54:	003d0c06 	br	8005088 <__ram_exceptions_end+0xf7f84e48>
 8005c58:	db012817 	ldw	r12,1184(sp)
 8005c5c:	d8c13117 	ldw	r3,1220(sp)
 8005c60:	60e5c83a 	sub	r18,r12,r3
 8005c64:	003adb06 	br	80047d4 <__ram_exceptions_end+0xf7f84594>
 8005c68:	da013f15 	stw	r8,1276(sp)
 8005c6c:	80041000 	call	8004100 <strlen>
 8005c70:	1025883a 	mov	r18,r2
 8005c74:	da013f17 	ldw	r8,1276(sp)
 8005c78:	903c8e0e 	bge	r18,zero,8004eb4 <__ram_exceptions_end+0xf7f84c74>
 8005c7c:	0005883a 	mov	r2,zero
 8005c80:	003c8c06 	br	8004eb4 <__ram_exceptions_end+0xf7f84c74>
 8005c84:	b009883a 	mov	r4,r22
 8005c88:	b80b883a 	mov	r5,r23
 8005c8c:	d9811e04 	addi	r6,sp,1144
 8005c90:	800b4240 	call	800b424 <__sprint_r>
 8005c94:	103a571e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 8005c98:	d8c12017 	ldw	r3,1152(sp)
 8005c9c:	d8811f17 	ldw	r2,1148(sp)
 8005ca0:	da000404 	addi	r8,sp,16
 8005ca4:	db013317 	ldw	r12,1228(sp)
 8005ca8:	dac13117 	ldw	r11,1220(sp)
 8005cac:	10800044 	addi	r2,r2,1
 8005cb0:	60c7883a 	add	r3,r12,r3
 8005cb4:	42c00015 	stw	r11,0(r8)
 8005cb8:	43000115 	stw	r12,4(r8)
 8005cbc:	d8c12015 	stw	r3,1152(sp)
 8005cc0:	d8811f15 	stw	r2,1148(sp)
 8005cc4:	010001c4 	movi	r4,7
 8005cc8:	20bb590e 	bge	r4,r2,8004a30 <__ram_exceptions_end+0xf7f847f0>
 8005ccc:	003d7e06 	br	80052c8 <__ram_exceptions_end+0xf7f85088>
 8005cd0:	01020074 	movhi	r4,2049
 8005cd4:	210a2784 	addi	r4,r4,10398
 8005cd8:	d9013615 	stw	r4,1240(sp)
 8005cdc:	003af606 	br	80048b8 <__ram_exceptions_end+0xf7f84678>
 8005ce0:	d8812604 	addi	r2,sp,1176
 8005ce4:	d8800115 	stw	r2,4(sp)
 8005ce8:	d9413717 	ldw	r5,1244(sp)
 8005cec:	d8812504 	addi	r2,sp,1172
 8005cf0:	d8800215 	stw	r2,8(sp)
 8005cf4:	d8812104 	addi	r2,sp,1156
 8005cf8:	da400015 	stw	r9,0(sp)
 8005cfc:	d8800315 	stw	r2,12(sp)
 8005d00:	b009883a 	mov	r4,r22
 8005d04:	900d883a 	mov	r6,r18
 8005d08:	01c000c4 	movi	r7,3
 8005d0c:	da013f15 	stw	r8,1276(sp)
 8005d10:	da413e15 	stw	r9,1272(sp)
 8005d14:	80064e80 	call	80064e8 <_dtoa_r>
 8005d18:	da413e17 	ldw	r9,1272(sp)
 8005d1c:	da013f17 	ldw	r8,1276(sp)
 8005d20:	d8813115 	stw	r2,1220(sp)
 8005d24:	4839883a 	mov	fp,r9
 8005d28:	dac13117 	ldw	r11,1220(sp)
 8005d2c:	00801184 	movi	r2,70
 8005d30:	5f15883a 	add	r10,r11,fp
 8005d34:	a8bef01e 	bne	r21,r2,80058f8 <__ram_exceptions_end+0xf7f856b8>
 8005d38:	59000007 	ldb	r4,0(r11)
 8005d3c:	00800c04 	movi	r2,48
 8005d40:	2080e026 	beq	r4,r2,80060c4 <___vfprintf_internal_r+0x1f2c>
 8005d44:	d8c12617 	ldw	r3,1176(sp)
 8005d48:	50d5883a 	add	r10,r10,r3
 8005d4c:	003eea06 	br	80058f8 <__ram_exceptions_end+0xf7f856b8>
 8005d50:	0025883a 	mov	r18,zero
 8005d54:	003db306 	br	8005424 <__ram_exceptions_end+0xf7f851e4>
 8005d58:	b009883a 	mov	r4,r22
 8005d5c:	b80b883a 	mov	r5,r23
 8005d60:	d9811e04 	addi	r6,sp,1144
 8005d64:	800b4240 	call	800b424 <__sprint_r>
 8005d68:	103a221e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 8005d6c:	d8c12017 	ldw	r3,1152(sp)
 8005d70:	da000404 	addi	r8,sp,16
 8005d74:	003daa06 	br	8005420 <__ram_exceptions_end+0xf7f851e0>
 8005d78:	b009883a 	mov	r4,r22
 8005d7c:	b80b883a 	mov	r5,r23
 8005d80:	d9811e04 	addi	r6,sp,1144
 8005d84:	800b4240 	call	800b424 <__sprint_r>
 8005d88:	103a1a1e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 8005d8c:	d8812617 	ldw	r2,1176(sp)
 8005d90:	d8c12017 	ldw	r3,1152(sp)
 8005d94:	da000404 	addi	r8,sp,16
 8005d98:	003e2c06 	br	800564c <__ram_exceptions_end+0xf7f8540c>
 8005d9c:	03020074 	movhi	r12,2049
 8005da0:	630a2384 	addi	r12,r12,10382
 8005da4:	db012c15 	stw	r12,1200(sp)
 8005da8:	dac12c17 	ldw	r11,1200(sp)
 8005dac:	1c07883a 	add	r3,r3,r16
 8005db0:	10800044 	addi	r2,r2,1
 8005db4:	42c00015 	stw	r11,0(r8)
 8005db8:	44000115 	stw	r16,4(r8)
 8005dbc:	d8c12015 	stw	r3,1152(sp)
 8005dc0:	d8811f15 	stw	r2,1148(sp)
 8005dc4:	010001c4 	movi	r4,7
 8005dc8:	20bfae16 	blt	r4,r2,8005c84 <__ram_exceptions_end+0xf7f85a44>
 8005dcc:	42000204 	addi	r8,r8,8
 8005dd0:	003fb406 	br	8005ca4 <__ram_exceptions_end+0xf7f85a64>
 8005dd4:	03020074 	movhi	r12,2049
 8005dd8:	630a2784 	addi	r12,r12,10398
 8005ddc:	db013615 	stw	r12,1240(sp)
 8005de0:	003b3806 	br	8004ac4 <__ram_exceptions_end+0xf7f84884>
 8005de4:	b009883a 	mov	r4,r22
 8005de8:	b80b883a 	mov	r5,r23
 8005dec:	d9811e04 	addi	r6,sp,1144
 8005df0:	800b4240 	call	800b424 <__sprint_r>
 8005df4:	1039ff1e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 8005df8:	d8812617 	ldw	r2,1176(sp)
 8005dfc:	db013317 	ldw	r12,1228(sp)
 8005e00:	d8c12017 	ldw	r3,1152(sp)
 8005e04:	da000404 	addi	r8,sp,16
 8005e08:	6085c83a 	sub	r2,r12,r2
 8005e0c:	003e2006 	br	8005690 <__ram_exceptions_end+0xf7f85450>
 8005e10:	0021883a 	mov	r16,zero
 8005e14:	003e1f06 	br	8005694 <__ram_exceptions_end+0xf7f85454>
 8005e18:	00800184 	movi	r2,6
 8005e1c:	1240012e 	bgeu	r2,r9,8005e24 <___vfprintf_internal_r+0x1c8c>
 8005e20:	1013883a 	mov	r9,r2
 8005e24:	4825883a 	mov	r18,r9
 8005e28:	4805883a 	mov	r2,r9
 8005e2c:	48009e16 	blt	r9,zero,80060a8 <___vfprintf_internal_r+0x1f10>
 8005e30:	d8812b15 	stw	r2,1196(sp)
 8005e34:	00820074 	movhi	r2,2049
 8005e38:	108a2104 	addi	r2,r2,10372
 8005e3c:	d8813115 	stw	r2,1220(sp)
 8005e40:	dcc12d15 	stw	r19,1204(sp)
 8005e44:	d8013215 	stw	zero,1224(sp)
 8005e48:	d8013415 	stw	zero,1232(sp)
 8005e4c:	0005883a 	mov	r2,zero
 8005e50:	003a6c06 	br	8004804 <__ram_exceptions_end+0xf7f845c4>
 8005e54:	00820074 	movhi	r2,2049
 8005e58:	108a1604 	addi	r2,r2,10328
 8005e5c:	d8813115 	stw	r2,1220(sp)
 8005e60:	003f4c06 	br	8005b94 <__ram_exceptions_end+0xf7f85954>
 8005e64:	00c00b44 	movi	r3,45
 8005e68:	d8812b15 	stw	r2,1196(sp)
 8005e6c:	dc412d17 	ldw	r17,1204(sp)
 8005e70:	d8c12785 	stb	r3,1182(sp)
 8005e74:	dcc12d15 	stw	r19,1204(sp)
 8005e78:	d8013215 	stw	zero,1224(sp)
 8005e7c:	00800b44 	movi	r2,45
 8005e80:	003a5d06 	br	80047f8 <__ram_exceptions_end+0xf7f845b8>
 8005e84:	d8c12617 	ldw	r3,1176(sp)
 8005e88:	00bfff44 	movi	r2,-3
 8005e8c:	18800d16 	blt	r3,r2,8005ec4 <___vfprintf_internal_r+0x1d2c>
 8005e90:	48c00c16 	blt	r9,r3,8005ec4 <___vfprintf_internal_r+0x1d2c>
 8005e94:	d8c13415 	stw	r3,1232(sp)
 8005e98:	040019c4 	movi	r16,103
 8005e9c:	003eb506 	br	8005974 <__ram_exceptions_end+0xf7f85734>
 8005ea0:	05400b44 	movi	r21,45
 8005ea4:	dd412785 	stb	r21,1182(sp)
 8005ea8:	003a0f06 	br	80046e8 <__ram_exceptions_end+0xf7f844a8>
 8005eac:	01020074 	movhi	r4,2049
 8005eb0:	210a2384 	addi	r4,r4,10382
 8005eb4:	d9012c15 	stw	r4,1200(sp)
 8005eb8:	003cb106 	br	8005180 <__ram_exceptions_end+0xf7f84f40>
 8005ebc:	5005883a 	mov	r2,r10
 8005ec0:	003ea106 	br	8005948 <__ram_exceptions_end+0xf7f85708>
 8005ec4:	843fff84 	addi	r16,r16,-2
 8005ec8:	1f3fffc4 	addi	fp,r3,-1
 8005ecc:	df012615 	stw	fp,1176(sp)
 8005ed0:	dc0122c5 	stb	r16,1163(sp)
 8005ed4:	e0009516 	blt	fp,zero,800612c <___vfprintf_internal_r+0x1f94>
 8005ed8:	00800ac4 	movi	r2,43
 8005edc:	d8812305 	stb	r2,1164(sp)
 8005ee0:	00800244 	movi	r2,9
 8005ee4:	1700690e 	bge	r2,fp,800608c <___vfprintf_internal_r+0x1ef4>
 8005ee8:	dd4122c4 	addi	r21,sp,1163
 8005eec:	dc012c15 	stw	r16,1200(sp)
 8005ef0:	8825883a 	mov	r18,r17
 8005ef4:	a821883a 	mov	r16,r21
 8005ef8:	4023883a 	mov	r17,r8
 8005efc:	e009883a 	mov	r4,fp
 8005f00:	01400284 	movi	r5,10
 8005f04:	8003e1c0 	call	8003e1c <__modsi3>
 8005f08:	10800c04 	addi	r2,r2,48
 8005f0c:	843fffc4 	addi	r16,r16,-1
 8005f10:	e009883a 	mov	r4,fp
 8005f14:	01400284 	movi	r5,10
 8005f18:	80800005 	stb	r2,0(r16)
 8005f1c:	8003dc80 	call	8003dc8 <__divsi3>
 8005f20:	1039883a 	mov	fp,r2
 8005f24:	00800244 	movi	r2,9
 8005f28:	173ff416 	blt	r2,fp,8005efc <__ram_exceptions_end+0xf7f85cbc>
 8005f2c:	8811883a 	mov	r8,r17
 8005f30:	e0800c04 	addi	r2,fp,48
 8005f34:	9023883a 	mov	r17,r18
 8005f38:	8025883a 	mov	r18,r16
 8005f3c:	913fffc4 	addi	r4,r18,-1
 8005f40:	90bfffc5 	stb	r2,-1(r18)
 8005f44:	dc012c17 	ldw	r16,1200(sp)
 8005f48:	25408e2e 	bgeu	r4,r21,8006184 <___vfprintf_internal_r+0x1fec>
 8005f4c:	d9412384 	addi	r5,sp,1166
 8005f50:	2c8bc83a 	sub	r5,r5,r18
 8005f54:	d8c12344 	addi	r3,sp,1165
 8005f58:	a94b883a 	add	r5,r21,r5
 8005f5c:	00000106 	br	8005f64 <___vfprintf_internal_r+0x1dcc>
 8005f60:	20800003 	ldbu	r2,0(r4)
 8005f64:	18800005 	stb	r2,0(r3)
 8005f68:	18c00044 	addi	r3,r3,1
 8005f6c:	21000044 	addi	r4,r4,1
 8005f70:	197ffb1e 	bne	r3,r5,8005f60 <__ram_exceptions_end+0xf7f85d20>
 8005f74:	d8812304 	addi	r2,sp,1164
 8005f78:	1485c83a 	sub	r2,r2,r18
 8005f7c:	d8c12344 	addi	r3,sp,1165
 8005f80:	1885883a 	add	r2,r3,r2
 8005f84:	dac13317 	ldw	r11,1228(sp)
 8005f88:	156bc83a 	sub	r21,r2,r21
 8005f8c:	dd413a15 	stw	r21,1256(sp)
 8005f90:	00800044 	movi	r2,1
 8005f94:	5d65883a 	add	r18,r11,r21
 8005f98:	12c0770e 	bge	r2,r11,8006178 <___vfprintf_internal_r+0x1fe0>
 8005f9c:	94800044 	addi	r18,r18,1
 8005fa0:	9005883a 	mov	r2,r18
 8005fa4:	90007216 	blt	r18,zero,8006170 <___vfprintf_internal_r+0x1fd8>
 8005fa8:	d8013415 	stw	zero,1232(sp)
 8005fac:	003e7906 	br	8005994 <__ram_exceptions_end+0xf7f85754>
 8005fb0:	da412b15 	stw	r9,1196(sp)
 8005fb4:	dd412783 	ldbu	r21,1182(sp)
 8005fb8:	4825883a 	mov	r18,r9
 8005fbc:	dcc12d15 	stw	r19,1204(sp)
 8005fc0:	d8013215 	stw	zero,1224(sp)
 8005fc4:	d8013415 	stw	zero,1232(sp)
 8005fc8:	003a0706 	br	80047e8 <__ram_exceptions_end+0xf7f845a8>
 8005fcc:	b009883a 	mov	r4,r22
 8005fd0:	b80b883a 	mov	r5,r23
 8005fd4:	d9811e04 	addi	r6,sp,1144
 8005fd8:	800b4240 	call	800b424 <__sprint_r>
 8005fdc:	1039851e 	bne	r2,zero,80045f4 <__ram_exceptions_end+0xf7f843b4>
 8005fe0:	dc012617 	ldw	r16,1176(sp)
 8005fe4:	d8c12017 	ldw	r3,1152(sp)
 8005fe8:	d8811f17 	ldw	r2,1148(sp)
 8005fec:	da000404 	addi	r8,sp,16
 8005ff0:	003ec706 	br	8005b10 <__ram_exceptions_end+0xf7f858d0>
 8005ff4:	483e1a1e 	bne	r9,zero,8005860 <__ram_exceptions_end+0xf7f85620>
 8005ff8:	9013883a 	mov	r9,r18
 8005ffc:	003e1806 	br	8005860 <__ram_exceptions_end+0xf7f85620>
 8006000:	00c00b44 	movi	r3,45
 8006004:	64a0003c 	xorhi	r18,r12,32768
 8006008:	d8c12b05 	stb	r3,1196(sp)
 800600c:	003e1a06 	br	8005878 <__ram_exceptions_end+0xf7f85638>
 8006010:	4f000044 	addi	fp,r9,1
 8006014:	003e1f06 	br	8005894 <__ram_exceptions_end+0xf7f85654>
 8006018:	02400184 	movi	r9,6
 800601c:	003e1006 	br	8005860 <__ram_exceptions_end+0xf7f85620>
 8006020:	d8c13417 	ldw	r3,1232(sp)
 8006024:	00c04b0e 	bge	zero,r3,8006154 <___vfprintf_internal_r+0x1fbc>
 8006028:	04800044 	movi	r18,1
 800602c:	dac13317 	ldw	r11,1228(sp)
 8006030:	92e5883a 	add	r18,r18,r11
 8006034:	9005883a 	mov	r2,r18
 8006038:	903e560e 	bge	r18,zero,8005994 <__ram_exceptions_end+0xf7f85754>
 800603c:	0005883a 	mov	r2,zero
 8006040:	003e5406 	br	8005994 <__ram_exceptions_end+0xf7f85754>
 8006044:	d8c12617 	ldw	r3,1176(sp)
 8006048:	d8c13415 	stw	r3,1232(sp)
 800604c:	00c03b0e 	bge	zero,r3,800613c <___vfprintf_internal_r+0x1fa4>
 8006050:	4800081e 	bne	r9,zero,8006074 <___vfprintf_internal_r+0x1edc>
 8006054:	8c40004c 	andi	r17,r17,1
 8006058:	8800061e 	bne	r17,zero,8006074 <___vfprintf_internal_r+0x1edc>
 800605c:	1805883a 	mov	r2,r3
 8006060:	183e4b0e 	bge	r3,zero,8005990 <__ram_exceptions_end+0xf7f85750>
 8006064:	0005883a 	mov	r2,zero
 8006068:	003e4906 	br	8005990 <__ram_exceptions_end+0xf7f85750>
 800606c:	d8812117 	ldw	r2,1156(sp)
 8006070:	003e3506 	br	8005948 <__ram_exceptions_end+0xf7f85708>
 8006074:	dac13417 	ldw	r11,1232(sp)
 8006078:	4a400044 	addi	r9,r9,1
 800607c:	5a65883a 	add	r18,r11,r9
 8006080:	9005883a 	mov	r2,r18
 8006084:	903e430e 	bge	r18,zero,8005994 <__ram_exceptions_end+0xf7f85754>
 8006088:	003fec06 	br	800603c <__ram_exceptions_end+0xf7f85dfc>
 800608c:	00800c04 	movi	r2,48
 8006090:	e0c00c04 	addi	r3,fp,48
 8006094:	d8812345 	stb	r2,1165(sp)
 8006098:	d8c12385 	stb	r3,1166(sp)
 800609c:	d88123c4 	addi	r2,sp,1167
 80060a0:	dd4122c4 	addi	r21,sp,1163
 80060a4:	003fb706 	br	8005f84 <__ram_exceptions_end+0xf7f85d44>
 80060a8:	0005883a 	mov	r2,zero
 80060ac:	003f6006 	br	8005e30 <__ram_exceptions_end+0xf7f85bf0>
 80060b0:	db013417 	ldw	r12,1232(sp)
 80060b4:	64800044 	addi	r18,r12,1
 80060b8:	9005883a 	mov	r2,r18
 80060bc:	903e350e 	bge	r18,zero,8005994 <__ram_exceptions_end+0xf7f85754>
 80060c0:	003fde06 	br	800603c <__ram_exceptions_end+0xf7f85dfc>
 80060c4:	d9013717 	ldw	r4,1244(sp)
 80060c8:	900b883a 	mov	r5,r18
 80060cc:	000d883a 	mov	r6,zero
 80060d0:	000f883a 	mov	r7,zero
 80060d4:	da013f15 	stw	r8,1276(sp)
 80060d8:	da413e15 	stw	r9,1272(sp)
 80060dc:	da813d15 	stw	r10,1268(sp)
 80060e0:	800e4e00 	call	800e4e0 <__eqdf2>
 80060e4:	da013f17 	ldw	r8,1276(sp)
 80060e8:	da413e17 	ldw	r9,1272(sp)
 80060ec:	da813d17 	ldw	r10,1268(sp)
 80060f0:	103f1426 	beq	r2,zero,8005d44 <__ram_exceptions_end+0xf7f85b04>
 80060f4:	00800044 	movi	r2,1
 80060f8:	1707c83a 	sub	r3,r2,fp
 80060fc:	d8c12615 	stw	r3,1176(sp)
 8006100:	003f1106 	br	8005d48 <__ram_exceptions_end+0xf7f85b08>
 8006104:	dac12d17 	ldw	r11,1204(sp)
 8006108:	5a400017 	ldw	r9,0(r11)
 800610c:	5ac00104 	addi	r11,r11,4
 8006110:	dac12d15 	stw	r11,1204(sp)
 8006114:	483ec60e 	bge	r9,zero,8005c30 <__ram_exceptions_end+0xf7f859f0>
 8006118:	027fffc4 	movi	r9,-1
 800611c:	1c000047 	ldb	r16,1(r3)
 8006120:	00388406 	br	8004334 <__ram_exceptions_end+0xf7f840f4>
 8006124:	043fffc4 	movi	r16,-1
 8006128:	00391006 	br	800456c <__ram_exceptions_end+0xf7f8432c>
 800612c:	00800b44 	movi	r2,45
 8006130:	0739c83a 	sub	fp,zero,fp
 8006134:	d8812305 	stb	r2,1164(sp)
 8006138:	003f6906 	br	8005ee0 <__ram_exceptions_end+0xf7f85ca0>
 800613c:	4800081e 	bne	r9,zero,8006160 <___vfprintf_internal_r+0x1fc8>
 8006140:	8c40004c 	andi	r17,r17,1
 8006144:	8800061e 	bne	r17,zero,8006160 <___vfprintf_internal_r+0x1fc8>
 8006148:	00800044 	movi	r2,1
 800614c:	1025883a 	mov	r18,r2
 8006150:	003e1006 	br	8005994 <__ram_exceptions_end+0xf7f85754>
 8006154:	04800084 	movi	r18,2
 8006158:	90e5c83a 	sub	r18,r18,r3
 800615c:	003fb306 	br	800602c <__ram_exceptions_end+0xf7f85dec>
 8006160:	4c800084 	addi	r18,r9,2
 8006164:	9005883a 	mov	r2,r18
 8006168:	903e0a0e 	bge	r18,zero,8005994 <__ram_exceptions_end+0xf7f85754>
 800616c:	003fb306 	br	800603c <__ram_exceptions_end+0xf7f85dfc>
 8006170:	0005883a 	mov	r2,zero
 8006174:	003f8c06 	br	8005fa8 <__ram_exceptions_end+0xf7f85d68>
 8006178:	88a2703a 	and	r17,r17,r2
 800617c:	883f8826 	beq	r17,zero,8005fa0 <__ram_exceptions_end+0xf7f85d60>
 8006180:	003f8606 	br	8005f9c <__ram_exceptions_end+0xf7f85d5c>
 8006184:	d8812344 	addi	r2,sp,1165
 8006188:	003f7e06 	br	8005f84 <__ram_exceptions_end+0xf7f85d44>
 800618c:	d8c12617 	ldw	r3,1176(sp)
 8006190:	003f4d06 	br	8005ec8 <__ram_exceptions_end+0xf7f85c88>

08006194 <__vfprintf_internal>:
 8006194:	2007883a 	mov	r3,r4
 8006198:	01020074 	movhi	r4,2049
 800619c:	21114804 	addi	r4,r4,17696
 80061a0:	21000017 	ldw	r4,0(r4)
 80061a4:	2805883a 	mov	r2,r5
 80061a8:	300f883a 	mov	r7,r6
 80061ac:	180b883a 	mov	r5,r3
 80061b0:	100d883a 	mov	r6,r2
 80061b4:	80041981 	jmpi	8004198 <___vfprintf_internal_r>

080061b8 <__swsetup_r>:
 80061b8:	00820074 	movhi	r2,2049
 80061bc:	defffd04 	addi	sp,sp,-12
 80061c0:	10914804 	addi	r2,r2,17696
 80061c4:	dc400115 	stw	r17,4(sp)
 80061c8:	2023883a 	mov	r17,r4
 80061cc:	11000017 	ldw	r4,0(r2)
 80061d0:	dc000015 	stw	r16,0(sp)
 80061d4:	dfc00215 	stw	ra,8(sp)
 80061d8:	2821883a 	mov	r16,r5
 80061dc:	20000226 	beq	r4,zero,80061e8 <__swsetup_r+0x30>
 80061e0:	20c00e17 	ldw	r3,56(r4)
 80061e4:	18002e26 	beq	r3,zero,80062a0 <__swsetup_r+0xe8>
 80061e8:	8080030b 	ldhu	r2,12(r16)
 80061ec:	10c0020c 	andi	r3,r2,8
 80061f0:	100d883a 	mov	r6,r2
 80061f4:	18000f26 	beq	r3,zero,8006234 <__swsetup_r+0x7c>
 80061f8:	80c00417 	ldw	r3,16(r16)
 80061fc:	18001526 	beq	r3,zero,8006254 <__swsetup_r+0x9c>
 8006200:	1100004c 	andi	r4,r2,1
 8006204:	20001c1e 	bne	r4,zero,8006278 <__swsetup_r+0xc0>
 8006208:	1080008c 	andi	r2,r2,2
 800620c:	1000261e 	bne	r2,zero,80062a8 <__swsetup_r+0xf0>
 8006210:	80800517 	ldw	r2,20(r16)
 8006214:	80800215 	stw	r2,8(r16)
 8006218:	18001c26 	beq	r3,zero,800628c <__swsetup_r+0xd4>
 800621c:	0005883a 	mov	r2,zero
 8006220:	dfc00217 	ldw	ra,8(sp)
 8006224:	dc400117 	ldw	r17,4(sp)
 8006228:	dc000017 	ldw	r16,0(sp)
 800622c:	dec00304 	addi	sp,sp,12
 8006230:	f800283a 	ret
 8006234:	3080040c 	andi	r2,r6,16
 8006238:	10001726 	beq	r2,zero,8006298 <__swsetup_r+0xe0>
 800623c:	3080010c 	andi	r2,r6,4
 8006240:	10001b1e 	bne	r2,zero,80062b0 <__swsetup_r+0xf8>
 8006244:	80c00417 	ldw	r3,16(r16)
 8006248:	30800214 	ori	r2,r6,8
 800624c:	8080030d 	sth	r2,12(r16)
 8006250:	183feb1e 	bne	r3,zero,8006200 <__ram_exceptions_end+0xf7f85fc0>
 8006254:	1140a00c 	andi	r5,r2,640
 8006258:	01008004 	movi	r4,512
 800625c:	293fe826 	beq	r5,r4,8006200 <__ram_exceptions_end+0xf7f85fc0>
 8006260:	8809883a 	mov	r4,r17
 8006264:	800b883a 	mov	r5,r16
 8006268:	8008d100 	call	8008d10 <__smakebuf_r>
 800626c:	8080030b 	ldhu	r2,12(r16)
 8006270:	80c00417 	ldw	r3,16(r16)
 8006274:	003fe206 	br	8006200 <__ram_exceptions_end+0xf7f85fc0>
 8006278:	80800517 	ldw	r2,20(r16)
 800627c:	80000215 	stw	zero,8(r16)
 8006280:	0085c83a 	sub	r2,zero,r2
 8006284:	80800615 	stw	r2,24(r16)
 8006288:	183fe41e 	bne	r3,zero,800621c <__ram_exceptions_end+0xf7f85fdc>
 800628c:	8080030b 	ldhu	r2,12(r16)
 8006290:	1080200c 	andi	r2,r2,128
 8006294:	103fe226 	beq	r2,zero,8006220 <__ram_exceptions_end+0xf7f85fe0>
 8006298:	00bfffc4 	movi	r2,-1
 800629c:	003fe006 	br	8006220 <__ram_exceptions_end+0xf7f85fe0>
 80062a0:	80081b80 	call	80081b8 <__sinit>
 80062a4:	003fd006 	br	80061e8 <__ram_exceptions_end+0xf7f85fa8>
 80062a8:	0005883a 	mov	r2,zero
 80062ac:	003fd906 	br	8006214 <__ram_exceptions_end+0xf7f85fd4>
 80062b0:	81400c17 	ldw	r5,48(r16)
 80062b4:	28000626 	beq	r5,zero,80062d0 <__swsetup_r+0x118>
 80062b8:	80801004 	addi	r2,r16,64
 80062bc:	28800326 	beq	r5,r2,80062cc <__swsetup_r+0x114>
 80062c0:	8809883a 	mov	r4,r17
 80062c4:	800832c0 	call	800832c <_free_r>
 80062c8:	8180030b 	ldhu	r6,12(r16)
 80062cc:	80000c15 	stw	zero,48(r16)
 80062d0:	80c00417 	ldw	r3,16(r16)
 80062d4:	00bff6c4 	movi	r2,-37
 80062d8:	118c703a 	and	r6,r2,r6
 80062dc:	80000115 	stw	zero,4(r16)
 80062e0:	80c00015 	stw	r3,0(r16)
 80062e4:	003fd806 	br	8006248 <__ram_exceptions_end+0xf7f86008>

080062e8 <quorem>:
 80062e8:	defff704 	addi	sp,sp,-36
 80062ec:	dc800215 	stw	r18,8(sp)
 80062f0:	20800417 	ldw	r2,16(r4)
 80062f4:	2c800417 	ldw	r18,16(r5)
 80062f8:	dfc00815 	stw	ra,32(sp)
 80062fc:	ddc00715 	stw	r23,28(sp)
 8006300:	dd800615 	stw	r22,24(sp)
 8006304:	dd400515 	stw	r21,20(sp)
 8006308:	dd000415 	stw	r20,16(sp)
 800630c:	dcc00315 	stw	r19,12(sp)
 8006310:	dc400115 	stw	r17,4(sp)
 8006314:	dc000015 	stw	r16,0(sp)
 8006318:	14807116 	blt	r2,r18,80064e0 <quorem+0x1f8>
 800631c:	94bfffc4 	addi	r18,r18,-1
 8006320:	94ad883a 	add	r22,r18,r18
 8006324:	b5ad883a 	add	r22,r22,r22
 8006328:	2c400504 	addi	r17,r5,20
 800632c:	8da9883a 	add	r20,r17,r22
 8006330:	25400504 	addi	r21,r4,20
 8006334:	282f883a 	mov	r23,r5
 8006338:	adad883a 	add	r22,r21,r22
 800633c:	a1400017 	ldw	r5,0(r20)
 8006340:	2021883a 	mov	r16,r4
 8006344:	b1000017 	ldw	r4,0(r22)
 8006348:	29400044 	addi	r5,r5,1
 800634c:	8003e780 	call	8003e78 <__udivsi3>
 8006350:	1027883a 	mov	r19,r2
 8006354:	10002c26 	beq	r2,zero,8006408 <quorem+0x120>
 8006358:	a813883a 	mov	r9,r21
 800635c:	8811883a 	mov	r8,r17
 8006360:	0009883a 	mov	r4,zero
 8006364:	000d883a 	mov	r6,zero
 8006368:	41c00017 	ldw	r7,0(r8)
 800636c:	49400017 	ldw	r5,0(r9)
 8006370:	42000104 	addi	r8,r8,4
 8006374:	38bfffcc 	andi	r2,r7,65535
 8006378:	14c5383a 	mul	r2,r2,r19
 800637c:	380ed43a 	srli	r7,r7,16
 8006380:	28ffffcc 	andi	r3,r5,65535
 8006384:	2085883a 	add	r2,r4,r2
 8006388:	1008d43a 	srli	r4,r2,16
 800638c:	3ccf383a 	mul	r7,r7,r19
 8006390:	198d883a 	add	r6,r3,r6
 8006394:	10ffffcc 	andi	r3,r2,65535
 8006398:	30c7c83a 	sub	r3,r6,r3
 800639c:	280ad43a 	srli	r5,r5,16
 80063a0:	21c9883a 	add	r4,r4,r7
 80063a4:	180dd43a 	srai	r6,r3,16
 80063a8:	20bfffcc 	andi	r2,r4,65535
 80063ac:	288bc83a 	sub	r5,r5,r2
 80063b0:	298b883a 	add	r5,r5,r6
 80063b4:	280e943a 	slli	r7,r5,16
 80063b8:	18ffffcc 	andi	r3,r3,65535
 80063bc:	2008d43a 	srli	r4,r4,16
 80063c0:	38ceb03a 	or	r7,r7,r3
 80063c4:	49c00015 	stw	r7,0(r9)
 80063c8:	280dd43a 	srai	r6,r5,16
 80063cc:	4a400104 	addi	r9,r9,4
 80063d0:	a23fe52e 	bgeu	r20,r8,8006368 <__ram_exceptions_end+0xf7f86128>
 80063d4:	b0800017 	ldw	r2,0(r22)
 80063d8:	10000b1e 	bne	r2,zero,8006408 <quorem+0x120>
 80063dc:	b0bfff04 	addi	r2,r22,-4
 80063e0:	a880082e 	bgeu	r21,r2,8006404 <quorem+0x11c>
 80063e4:	b0ffff17 	ldw	r3,-4(r22)
 80063e8:	18000326 	beq	r3,zero,80063f8 <quorem+0x110>
 80063ec:	00000506 	br	8006404 <quorem+0x11c>
 80063f0:	10c00017 	ldw	r3,0(r2)
 80063f4:	1800031e 	bne	r3,zero,8006404 <quorem+0x11c>
 80063f8:	10bfff04 	addi	r2,r2,-4
 80063fc:	94bfffc4 	addi	r18,r18,-1
 8006400:	a8bffb36 	bltu	r21,r2,80063f0 <__ram_exceptions_end+0xf7f861b0>
 8006404:	84800415 	stw	r18,16(r16)
 8006408:	8009883a 	mov	r4,r16
 800640c:	b80b883a 	mov	r5,r23
 8006410:	800a2ac0 	call	800a2ac <__mcmp>
 8006414:	10002616 	blt	r2,zero,80064b0 <quorem+0x1c8>
 8006418:	9cc00044 	addi	r19,r19,1
 800641c:	a80d883a 	mov	r6,r21
 8006420:	000b883a 	mov	r5,zero
 8006424:	31000017 	ldw	r4,0(r6)
 8006428:	88800017 	ldw	r2,0(r17)
 800642c:	31800104 	addi	r6,r6,4
 8006430:	20ffffcc 	andi	r3,r4,65535
 8006434:	194b883a 	add	r5,r3,r5
 8006438:	10ffffcc 	andi	r3,r2,65535
 800643c:	28c7c83a 	sub	r3,r5,r3
 8006440:	1004d43a 	srli	r2,r2,16
 8006444:	2008d43a 	srli	r4,r4,16
 8006448:	180bd43a 	srai	r5,r3,16
 800644c:	18ffffcc 	andi	r3,r3,65535
 8006450:	2089c83a 	sub	r4,r4,r2
 8006454:	2149883a 	add	r4,r4,r5
 8006458:	2004943a 	slli	r2,r4,16
 800645c:	8c400104 	addi	r17,r17,4
 8006460:	200bd43a 	srai	r5,r4,16
 8006464:	10c6b03a 	or	r3,r2,r3
 8006468:	30ffff15 	stw	r3,-4(r6)
 800646c:	a47fed2e 	bgeu	r20,r17,8006424 <__ram_exceptions_end+0xf7f861e4>
 8006470:	9485883a 	add	r2,r18,r18
 8006474:	1085883a 	add	r2,r2,r2
 8006478:	a887883a 	add	r3,r21,r2
 800647c:	18800017 	ldw	r2,0(r3)
 8006480:	10000b1e 	bne	r2,zero,80064b0 <quorem+0x1c8>
 8006484:	18bfff04 	addi	r2,r3,-4
 8006488:	a880082e 	bgeu	r21,r2,80064ac <quorem+0x1c4>
 800648c:	18ffff17 	ldw	r3,-4(r3)
 8006490:	18000326 	beq	r3,zero,80064a0 <quorem+0x1b8>
 8006494:	00000506 	br	80064ac <quorem+0x1c4>
 8006498:	10c00017 	ldw	r3,0(r2)
 800649c:	1800031e 	bne	r3,zero,80064ac <quorem+0x1c4>
 80064a0:	10bfff04 	addi	r2,r2,-4
 80064a4:	94bfffc4 	addi	r18,r18,-1
 80064a8:	a8bffb36 	bltu	r21,r2,8006498 <__ram_exceptions_end+0xf7f86258>
 80064ac:	84800415 	stw	r18,16(r16)
 80064b0:	9805883a 	mov	r2,r19
 80064b4:	dfc00817 	ldw	ra,32(sp)
 80064b8:	ddc00717 	ldw	r23,28(sp)
 80064bc:	dd800617 	ldw	r22,24(sp)
 80064c0:	dd400517 	ldw	r21,20(sp)
 80064c4:	dd000417 	ldw	r20,16(sp)
 80064c8:	dcc00317 	ldw	r19,12(sp)
 80064cc:	dc800217 	ldw	r18,8(sp)
 80064d0:	dc400117 	ldw	r17,4(sp)
 80064d4:	dc000017 	ldw	r16,0(sp)
 80064d8:	dec00904 	addi	sp,sp,36
 80064dc:	f800283a 	ret
 80064e0:	0005883a 	mov	r2,zero
 80064e4:	003ff306 	br	80064b4 <__ram_exceptions_end+0xf7f86274>

080064e8 <_dtoa_r>:
 80064e8:	20801017 	ldw	r2,64(r4)
 80064ec:	deffde04 	addi	sp,sp,-136
 80064f0:	dd401d15 	stw	r21,116(sp)
 80064f4:	dcc01b15 	stw	r19,108(sp)
 80064f8:	dc801a15 	stw	r18,104(sp)
 80064fc:	dc401915 	stw	r17,100(sp)
 8006500:	dc001815 	stw	r16,96(sp)
 8006504:	dfc02115 	stw	ra,132(sp)
 8006508:	df002015 	stw	fp,128(sp)
 800650c:	ddc01f15 	stw	r23,124(sp)
 8006510:	dd801e15 	stw	r22,120(sp)
 8006514:	dd001c15 	stw	r20,112(sp)
 8006518:	d9c00315 	stw	r7,12(sp)
 800651c:	2021883a 	mov	r16,r4
 8006520:	302b883a 	mov	r21,r6
 8006524:	2825883a 	mov	r18,r5
 8006528:	dc402417 	ldw	r17,144(sp)
 800652c:	3027883a 	mov	r19,r6
 8006530:	10000826 	beq	r2,zero,8006554 <_dtoa_r+0x6c>
 8006534:	21801117 	ldw	r6,68(r4)
 8006538:	00c00044 	movi	r3,1
 800653c:	100b883a 	mov	r5,r2
 8006540:	1986983a 	sll	r3,r3,r6
 8006544:	11800115 	stw	r6,4(r2)
 8006548:	10c00215 	stw	r3,8(r2)
 800654c:	8009a940 	call	8009a94 <_Bfree>
 8006550:	80001015 	stw	zero,64(r16)
 8006554:	a8002d16 	blt	r21,zero,800660c <_dtoa_r+0x124>
 8006558:	88000015 	stw	zero,0(r17)
 800655c:	a8dffc2c 	andhi	r3,r21,32752
 8006560:	009ffc34 	movhi	r2,32752
 8006564:	18801b26 	beq	r3,r2,80065d4 <_dtoa_r+0xec>
 8006568:	9009883a 	mov	r4,r18
 800656c:	980b883a 	mov	r5,r19
 8006570:	000d883a 	mov	r6,zero
 8006574:	000f883a 	mov	r7,zero
 8006578:	800e4e00 	call	800e4e0 <__eqdf2>
 800657c:	10002a1e 	bne	r2,zero,8006628 <_dtoa_r+0x140>
 8006580:	d8c02317 	ldw	r3,140(sp)
 8006584:	d9002517 	ldw	r4,148(sp)
 8006588:	00800044 	movi	r2,1
 800658c:	18800015 	stw	r2,0(r3)
 8006590:	2001a226 	beq	r4,zero,8006c1c <_dtoa_r+0x734>
 8006594:	00820074 	movhi	r2,2049
 8006598:	108a2344 	addi	r2,r2,10381
 800659c:	20800015 	stw	r2,0(r4)
 80065a0:	10bfffc4 	addi	r2,r2,-1
 80065a4:	dfc02117 	ldw	ra,132(sp)
 80065a8:	df002017 	ldw	fp,128(sp)
 80065ac:	ddc01f17 	ldw	r23,124(sp)
 80065b0:	dd801e17 	ldw	r22,120(sp)
 80065b4:	dd401d17 	ldw	r21,116(sp)
 80065b8:	dd001c17 	ldw	r20,112(sp)
 80065bc:	dcc01b17 	ldw	r19,108(sp)
 80065c0:	dc801a17 	ldw	r18,104(sp)
 80065c4:	dc401917 	ldw	r17,100(sp)
 80065c8:	dc001817 	ldw	r16,96(sp)
 80065cc:	dec02204 	addi	sp,sp,136
 80065d0:	f800283a 	ret
 80065d4:	d8c02317 	ldw	r3,140(sp)
 80065d8:	0089c3c4 	movi	r2,9999
 80065dc:	18800015 	stw	r2,0(r3)
 80065e0:	90017c26 	beq	r18,zero,8006bd4 <_dtoa_r+0x6ec>
 80065e4:	00820074 	movhi	r2,2049
 80065e8:	108a2f04 	addi	r2,r2,10428
 80065ec:	d9002517 	ldw	r4,148(sp)
 80065f0:	203fec26 	beq	r4,zero,80065a4 <__ram_exceptions_end+0xf7f86364>
 80065f4:	10c000c7 	ldb	r3,3(r2)
 80065f8:	18017d1e 	bne	r3,zero,8006bf0 <_dtoa_r+0x708>
 80065fc:	10c000c4 	addi	r3,r2,3
 8006600:	d9802517 	ldw	r6,148(sp)
 8006604:	30c00015 	stw	r3,0(r6)
 8006608:	003fe606 	br	80065a4 <__ram_exceptions_end+0xf7f86364>
 800660c:	04e00034 	movhi	r19,32768
 8006610:	9cffffc4 	addi	r19,r19,-1
 8006614:	00800044 	movi	r2,1
 8006618:	ace6703a 	and	r19,r21,r19
 800661c:	88800015 	stw	r2,0(r17)
 8006620:	982b883a 	mov	r21,r19
 8006624:	003fcd06 	br	800655c <__ram_exceptions_end+0xf7f8631c>
 8006628:	d8800204 	addi	r2,sp,8
 800662c:	a822d53a 	srli	r17,r21,20
 8006630:	d8800015 	stw	r2,0(sp)
 8006634:	8009883a 	mov	r4,r16
 8006638:	900b883a 	mov	r5,r18
 800663c:	980d883a 	mov	r6,r19
 8006640:	d9c00104 	addi	r7,sp,4
 8006644:	800a6200 	call	800a620 <__d2b>
 8006648:	1039883a 	mov	fp,r2
 800664c:	88016a1e 	bne	r17,zero,8006bf8 <_dtoa_r+0x710>
 8006650:	dd000217 	ldw	r20,8(sp)
 8006654:	dc400117 	ldw	r17,4(sp)
 8006658:	00befbc4 	movi	r2,-1041
 800665c:	a463883a 	add	r17,r20,r17
 8006660:	8882ea16 	blt	r17,r2,800720c <_dtoa_r+0xd24>
 8006664:	00bf0384 	movi	r2,-1010
 8006668:	1445c83a 	sub	r2,r2,r17
 800666c:	89010484 	addi	r4,r17,1042
 8006670:	a8aa983a 	sll	r21,r21,r2
 8006674:	9108d83a 	srl	r4,r18,r4
 8006678:	a908b03a 	or	r4,r21,r4
 800667c:	8003c540 	call	8003c54 <__floatunsidf>
 8006680:	017f8434 	movhi	r5,65040
 8006684:	01800044 	movi	r6,1
 8006688:	1009883a 	mov	r4,r2
 800668c:	194b883a 	add	r5,r3,r5
 8006690:	8c7fffc4 	addi	r17,r17,-1
 8006694:	d9800f15 	stw	r6,60(sp)
 8006698:	000d883a 	mov	r6,zero
 800669c:	01cffe34 	movhi	r7,16376
 80066a0:	800ee480 	call	800ee48 <__subdf3>
 80066a4:	0198dbf4 	movhi	r6,25455
 80066a8:	01cff4f4 	movhi	r7,16339
 80066ac:	1009883a 	mov	r4,r2
 80066b0:	180b883a 	mov	r5,r3
 80066b4:	3190d844 	addi	r6,r6,17249
 80066b8:	39e1e9c4 	addi	r7,r7,-30809
 80066bc:	800e7240 	call	800e724 <__muldf3>
 80066c0:	01a2d874 	movhi	r6,35681
 80066c4:	01cff1f4 	movhi	r7,16327
 80066c8:	180b883a 	mov	r5,r3
 80066cc:	31b22cc4 	addi	r6,r6,-14157
 80066d0:	39e28a04 	addi	r7,r7,-30168
 80066d4:	1009883a 	mov	r4,r2
 80066d8:	800dc440 	call	800dc44 <__adddf3>
 80066dc:	8809883a 	mov	r4,r17
 80066e0:	102d883a 	mov	r22,r2
 80066e4:	182b883a 	mov	r21,r3
 80066e8:	8003b840 	call	8003b84 <__floatsidf>
 80066ec:	019427f4 	movhi	r6,20639
 80066f0:	01cff4f4 	movhi	r7,16339
 80066f4:	1009883a 	mov	r4,r2
 80066f8:	180b883a 	mov	r5,r3
 80066fc:	319e7ec4 	addi	r6,r6,31227
 8006700:	39d104c4 	addi	r7,r7,17427
 8006704:	800e7240 	call	800e724 <__muldf3>
 8006708:	b009883a 	mov	r4,r22
 800670c:	a80b883a 	mov	r5,r21
 8006710:	100d883a 	mov	r6,r2
 8006714:	180f883a 	mov	r7,r3
 8006718:	800dc440 	call	800dc44 <__adddf3>
 800671c:	1009883a 	mov	r4,r2
 8006720:	180b883a 	mov	r5,r3
 8006724:	102d883a 	mov	r22,r2
 8006728:	182b883a 	mov	r21,r3
 800672c:	800f7180 	call	800f718 <__fixdfsi>
 8006730:	b009883a 	mov	r4,r22
 8006734:	a80b883a 	mov	r5,r21
 8006738:	000d883a 	mov	r6,zero
 800673c:	000f883a 	mov	r7,zero
 8006740:	d8800515 	stw	r2,20(sp)
 8006744:	800e6440 	call	800e644 <__ledf2>
 8006748:	10023116 	blt	r2,zero,8007010 <_dtoa_r+0xb28>
 800674c:	d8c00517 	ldw	r3,20(sp)
 8006750:	00800584 	movi	r2,22
 8006754:	10c21f36 	bltu	r2,r3,8006fd4 <_dtoa_r+0xaec>
 8006758:	180490fa 	slli	r2,r3,3
 800675c:	00c20074 	movhi	r3,2049
 8006760:	18ca4b04 	addi	r3,r3,10540
 8006764:	1885883a 	add	r2,r3,r2
 8006768:	11000017 	ldw	r4,0(r2)
 800676c:	11400117 	ldw	r5,4(r2)
 8006770:	900d883a 	mov	r6,r18
 8006774:	980f883a 	mov	r7,r19
 8006778:	800e5640 	call	800e564 <__gedf2>
 800677c:	0082a70e 	bge	zero,r2,800721c <_dtoa_r+0xd34>
 8006780:	d9000517 	ldw	r4,20(sp)
 8006784:	d8000c15 	stw	zero,48(sp)
 8006788:	213fffc4 	addi	r4,r4,-1
 800678c:	d9000515 	stw	r4,20(sp)
 8006790:	a463c83a 	sub	r17,r20,r17
 8006794:	8dbfffc4 	addi	r22,r17,-1
 8006798:	b0021916 	blt	r22,zero,8007000 <_dtoa_r+0xb18>
 800679c:	d8000815 	stw	zero,32(sp)
 80067a0:	d8800517 	ldw	r2,20(sp)
 80067a4:	10020e16 	blt	r2,zero,8006fe0 <_dtoa_r+0xaf8>
 80067a8:	b0ad883a 	add	r22,r22,r2
 80067ac:	d8800a15 	stw	r2,40(sp)
 80067b0:	d8000915 	stw	zero,36(sp)
 80067b4:	d8c00317 	ldw	r3,12(sp)
 80067b8:	00800244 	movi	r2,9
 80067bc:	10c11a36 	bltu	r2,r3,8006c28 <_dtoa_r+0x740>
 80067c0:	00800144 	movi	r2,5
 80067c4:	10c4fc0e 	bge	r2,r3,8007bb8 <_dtoa_r+0x16d0>
 80067c8:	18ffff04 	addi	r3,r3,-4
 80067cc:	d8c00315 	stw	r3,12(sp)
 80067d0:	0029883a 	mov	r20,zero
 80067d4:	d9800317 	ldw	r6,12(sp)
 80067d8:	008000c4 	movi	r2,3
 80067dc:	3083bd26 	beq	r6,r2,80076d4 <_dtoa_r+0x11ec>
 80067e0:	1183670e 	bge	r2,r6,8007580 <_dtoa_r+0x1098>
 80067e4:	d8c00317 	ldw	r3,12(sp)
 80067e8:	00800104 	movi	r2,4
 80067ec:	1882e726 	beq	r3,r2,800738c <_dtoa_r+0xea4>
 80067f0:	00800144 	movi	r2,5
 80067f4:	1884f21e 	bne	r3,r2,8007bc0 <_dtoa_r+0x16d8>
 80067f8:	00800044 	movi	r2,1
 80067fc:	d8800b15 	stw	r2,44(sp)
 8006800:	d8c02217 	ldw	r3,136(sp)
 8006804:	d9000517 	ldw	r4,20(sp)
 8006808:	1907883a 	add	r3,r3,r4
 800680c:	19800044 	addi	r6,r3,1
 8006810:	d8c00d15 	stw	r3,52(sp)
 8006814:	d9800615 	stw	r6,24(sp)
 8006818:	0183c30e 	bge	zero,r6,8007728 <_dtoa_r+0x1240>
 800681c:	d9800617 	ldw	r6,24(sp)
 8006820:	3023883a 	mov	r17,r6
 8006824:	80001115 	stw	zero,68(r16)
 8006828:	008005c4 	movi	r2,23
 800682c:	1184f62e 	bgeu	r2,r6,8007c08 <_dtoa_r+0x1720>
 8006830:	00c00044 	movi	r3,1
 8006834:	00800104 	movi	r2,4
 8006838:	1085883a 	add	r2,r2,r2
 800683c:	11000504 	addi	r4,r2,20
 8006840:	180b883a 	mov	r5,r3
 8006844:	18c00044 	addi	r3,r3,1
 8006848:	313ffb2e 	bgeu	r6,r4,8006838 <__ram_exceptions_end+0xf7f865f8>
 800684c:	81401115 	stw	r5,68(r16)
 8006850:	8009883a 	mov	r4,r16
 8006854:	80099ec0 	call	80099ec <_Balloc>
 8006858:	d8800715 	stw	r2,28(sp)
 800685c:	80801015 	stw	r2,64(r16)
 8006860:	00800384 	movi	r2,14
 8006864:	1440fd36 	bltu	r2,r17,8006c5c <_dtoa_r+0x774>
 8006868:	a000fc26 	beq	r20,zero,8006c5c <_dtoa_r+0x774>
 800686c:	d8800517 	ldw	r2,20(sp)
 8006870:	0083b90e 	bge	zero,r2,8007758 <_dtoa_r+0x1270>
 8006874:	d8c00517 	ldw	r3,20(sp)
 8006878:	108003cc 	andi	r2,r2,15
 800687c:	100490fa 	slli	r2,r2,3
 8006880:	182fd13a 	srai	r23,r3,4
 8006884:	00c20074 	movhi	r3,2049
 8006888:	18ca4b04 	addi	r3,r3,10540
 800688c:	1885883a 	add	r2,r3,r2
 8006890:	b8c0040c 	andi	r3,r23,16
 8006894:	12c00017 	ldw	r11,0(r2)
 8006898:	12800117 	ldw	r10,4(r2)
 800689c:	18039726 	beq	r3,zero,80076fc <_dtoa_r+0x1214>
 80068a0:	00820074 	movhi	r2,2049
 80068a4:	108a4104 	addi	r2,r2,10500
 80068a8:	11800817 	ldw	r6,32(r2)
 80068ac:	11c00917 	ldw	r7,36(r2)
 80068b0:	9009883a 	mov	r4,r18
 80068b4:	980b883a 	mov	r5,r19
 80068b8:	da801615 	stw	r10,88(sp)
 80068bc:	dac01515 	stw	r11,84(sp)
 80068c0:	80032b80 	call	80032b8 <__divdf3>
 80068c4:	da801617 	ldw	r10,88(sp)
 80068c8:	dac01517 	ldw	r11,84(sp)
 80068cc:	bdc003cc 	andi	r23,r23,15
 80068d0:	044000c4 	movi	r17,3
 80068d4:	d8800e15 	stw	r2,56(sp)
 80068d8:	182b883a 	mov	r21,r3
 80068dc:	b8001126 	beq	r23,zero,8006924 <_dtoa_r+0x43c>
 80068e0:	05020074 	movhi	r20,2049
 80068e4:	a50a4104 	addi	r20,r20,10500
 80068e8:	5805883a 	mov	r2,r11
 80068ec:	5007883a 	mov	r3,r10
 80068f0:	b980004c 	andi	r6,r23,1
 80068f4:	1009883a 	mov	r4,r2
 80068f8:	b82fd07a 	srai	r23,r23,1
 80068fc:	180b883a 	mov	r5,r3
 8006900:	30000426 	beq	r6,zero,8006914 <_dtoa_r+0x42c>
 8006904:	a1800017 	ldw	r6,0(r20)
 8006908:	a1c00117 	ldw	r7,4(r20)
 800690c:	8c400044 	addi	r17,r17,1
 8006910:	800e7240 	call	800e724 <__muldf3>
 8006914:	a5000204 	addi	r20,r20,8
 8006918:	b83ff51e 	bne	r23,zero,80068f0 <__ram_exceptions_end+0xf7f866b0>
 800691c:	1017883a 	mov	r11,r2
 8006920:	1815883a 	mov	r10,r3
 8006924:	d9000e17 	ldw	r4,56(sp)
 8006928:	a80b883a 	mov	r5,r21
 800692c:	580d883a 	mov	r6,r11
 8006930:	500f883a 	mov	r7,r10
 8006934:	80032b80 	call	80032b8 <__divdf3>
 8006938:	1029883a 	mov	r20,r2
 800693c:	182b883a 	mov	r21,r3
 8006940:	d9800c17 	ldw	r6,48(sp)
 8006944:	30000626 	beq	r6,zero,8006960 <_dtoa_r+0x478>
 8006948:	a009883a 	mov	r4,r20
 800694c:	a80b883a 	mov	r5,r21
 8006950:	000d883a 	mov	r6,zero
 8006954:	01cffc34 	movhi	r7,16368
 8006958:	800e6440 	call	800e644 <__ledf2>
 800695c:	10043216 	blt	r2,zero,8007a28 <_dtoa_r+0x1540>
 8006960:	8809883a 	mov	r4,r17
 8006964:	8003b840 	call	8003b84 <__floatsidf>
 8006968:	1009883a 	mov	r4,r2
 800696c:	180b883a 	mov	r5,r3
 8006970:	a00d883a 	mov	r6,r20
 8006974:	a80f883a 	mov	r7,r21
 8006978:	800e7240 	call	800e724 <__muldf3>
 800697c:	000d883a 	mov	r6,zero
 8006980:	1009883a 	mov	r4,r2
 8006984:	180b883a 	mov	r5,r3
 8006988:	01d00734 	movhi	r7,16412
 800698c:	800dc440 	call	800dc44 <__adddf3>
 8006990:	1023883a 	mov	r17,r2
 8006994:	d9800617 	ldw	r6,24(sp)
 8006998:	00bf3034 	movhi	r2,64704
 800699c:	1885883a 	add	r2,r3,r2
 80069a0:	d8800e15 	stw	r2,56(sp)
 80069a4:	30032e26 	beq	r6,zero,8007660 <_dtoa_r+0x1178>
 80069a8:	d8c00517 	ldw	r3,20(sp)
 80069ac:	da800617 	ldw	r10,24(sp)
 80069b0:	d8c01215 	stw	r3,72(sp)
 80069b4:	d9000b17 	ldw	r4,44(sp)
 80069b8:	2003b026 	beq	r4,zero,800787c <_dtoa_r+0x1394>
 80069bc:	50bfffc4 	addi	r2,r10,-1
 80069c0:	100490fa 	slli	r2,r2,3
 80069c4:	00c20074 	movhi	r3,2049
 80069c8:	18ca4b04 	addi	r3,r3,10540
 80069cc:	1885883a 	add	r2,r3,r2
 80069d0:	11800017 	ldw	r6,0(r2)
 80069d4:	11c00117 	ldw	r7,4(r2)
 80069d8:	d8800717 	ldw	r2,28(sp)
 80069dc:	0009883a 	mov	r4,zero
 80069e0:	014ff834 	movhi	r5,16352
 80069e4:	da801615 	stw	r10,88(sp)
 80069e8:	15c00044 	addi	r23,r2,1
 80069ec:	80032b80 	call	80032b8 <__divdf3>
 80069f0:	d9c00e17 	ldw	r7,56(sp)
 80069f4:	880d883a 	mov	r6,r17
 80069f8:	1009883a 	mov	r4,r2
 80069fc:	180b883a 	mov	r5,r3
 8006a00:	800ee480 	call	800ee48 <__subdf3>
 8006a04:	a80b883a 	mov	r5,r21
 8006a08:	a009883a 	mov	r4,r20
 8006a0c:	d8c01015 	stw	r3,64(sp)
 8006a10:	d8800e15 	stw	r2,56(sp)
 8006a14:	800f7180 	call	800f718 <__fixdfsi>
 8006a18:	1009883a 	mov	r4,r2
 8006a1c:	d8801715 	stw	r2,92(sp)
 8006a20:	8003b840 	call	8003b84 <__floatsidf>
 8006a24:	a009883a 	mov	r4,r20
 8006a28:	a80b883a 	mov	r5,r21
 8006a2c:	100d883a 	mov	r6,r2
 8006a30:	180f883a 	mov	r7,r3
 8006a34:	800ee480 	call	800ee48 <__subdf3>
 8006a38:	da001717 	ldw	r8,92(sp)
 8006a3c:	1829883a 	mov	r20,r3
 8006a40:	d8c00717 	ldw	r3,28(sp)
 8006a44:	d9000e17 	ldw	r4,56(sp)
 8006a48:	d9401017 	ldw	r5,64(sp)
 8006a4c:	42000c04 	addi	r8,r8,48
 8006a50:	1023883a 	mov	r17,r2
 8006a54:	1a000005 	stb	r8,0(r3)
 8006a58:	880d883a 	mov	r6,r17
 8006a5c:	a00f883a 	mov	r7,r20
 8006a60:	402b883a 	mov	r21,r8
 8006a64:	800e5640 	call	800e564 <__gedf2>
 8006a68:	00844516 	blt	zero,r2,8007b80 <_dtoa_r+0x1698>
 8006a6c:	0009883a 	mov	r4,zero
 8006a70:	014ffc34 	movhi	r5,16368
 8006a74:	880d883a 	mov	r6,r17
 8006a78:	a00f883a 	mov	r7,r20
 8006a7c:	800ee480 	call	800ee48 <__subdf3>
 8006a80:	d9000e17 	ldw	r4,56(sp)
 8006a84:	d9401017 	ldw	r5,64(sp)
 8006a88:	100d883a 	mov	r6,r2
 8006a8c:	180f883a 	mov	r7,r3
 8006a90:	800e5640 	call	800e564 <__gedf2>
 8006a94:	da801617 	ldw	r10,88(sp)
 8006a98:	00843616 	blt	zero,r2,8007b74 <_dtoa_r+0x168c>
 8006a9c:	00800044 	movi	r2,1
 8006aa0:	12806e0e 	bge	r2,r10,8006c5c <_dtoa_r+0x774>
 8006aa4:	d9000717 	ldw	r4,28(sp)
 8006aa8:	dd801315 	stw	r22,76(sp)
 8006aac:	dc001115 	stw	r16,68(sp)
 8006ab0:	2295883a 	add	r10,r4,r10
 8006ab4:	dcc01415 	stw	r19,80(sp)
 8006ab8:	502d883a 	mov	r22,r10
 8006abc:	dcc01017 	ldw	r19,64(sp)
 8006ac0:	b821883a 	mov	r16,r23
 8006ac4:	dc801015 	stw	r18,64(sp)
 8006ac8:	dc800e17 	ldw	r18,56(sp)
 8006acc:	00000906 	br	8006af4 <_dtoa_r+0x60c>
 8006ad0:	800ee480 	call	800ee48 <__subdf3>
 8006ad4:	1009883a 	mov	r4,r2
 8006ad8:	180b883a 	mov	r5,r3
 8006adc:	900d883a 	mov	r6,r18
 8006ae0:	980f883a 	mov	r7,r19
 8006ae4:	800e6440 	call	800e644 <__ledf2>
 8006ae8:	10040e16 	blt	r2,zero,8007b24 <_dtoa_r+0x163c>
 8006aec:	b821883a 	mov	r16,r23
 8006af0:	bd841026 	beq	r23,r22,8007b34 <_dtoa_r+0x164c>
 8006af4:	9009883a 	mov	r4,r18
 8006af8:	980b883a 	mov	r5,r19
 8006afc:	000d883a 	mov	r6,zero
 8006b00:	01d00934 	movhi	r7,16420
 8006b04:	800e7240 	call	800e724 <__muldf3>
 8006b08:	000d883a 	mov	r6,zero
 8006b0c:	01d00934 	movhi	r7,16420
 8006b10:	8809883a 	mov	r4,r17
 8006b14:	a00b883a 	mov	r5,r20
 8006b18:	1025883a 	mov	r18,r2
 8006b1c:	1827883a 	mov	r19,r3
 8006b20:	800e7240 	call	800e724 <__muldf3>
 8006b24:	180b883a 	mov	r5,r3
 8006b28:	1009883a 	mov	r4,r2
 8006b2c:	1823883a 	mov	r17,r3
 8006b30:	1029883a 	mov	r20,r2
 8006b34:	800f7180 	call	800f718 <__fixdfsi>
 8006b38:	1009883a 	mov	r4,r2
 8006b3c:	102b883a 	mov	r21,r2
 8006b40:	8003b840 	call	8003b84 <__floatsidf>
 8006b44:	a009883a 	mov	r4,r20
 8006b48:	880b883a 	mov	r5,r17
 8006b4c:	100d883a 	mov	r6,r2
 8006b50:	180f883a 	mov	r7,r3
 8006b54:	800ee480 	call	800ee48 <__subdf3>
 8006b58:	ad400c04 	addi	r21,r21,48
 8006b5c:	1009883a 	mov	r4,r2
 8006b60:	180b883a 	mov	r5,r3
 8006b64:	900d883a 	mov	r6,r18
 8006b68:	980f883a 	mov	r7,r19
 8006b6c:	85400005 	stb	r21,0(r16)
 8006b70:	1023883a 	mov	r17,r2
 8006b74:	1829883a 	mov	r20,r3
 8006b78:	800e6440 	call	800e644 <__ledf2>
 8006b7c:	bdc00044 	addi	r23,r23,1
 8006b80:	0009883a 	mov	r4,zero
 8006b84:	014ffc34 	movhi	r5,16368
 8006b88:	880d883a 	mov	r6,r17
 8006b8c:	a00f883a 	mov	r7,r20
 8006b90:	103fcf0e 	bge	r2,zero,8006ad0 <__ram_exceptions_end+0xf7f86890>
 8006b94:	d9801217 	ldw	r6,72(sp)
 8006b98:	dc001117 	ldw	r16,68(sp)
 8006b9c:	d9800515 	stw	r6,20(sp)
 8006ba0:	8009883a 	mov	r4,r16
 8006ba4:	e00b883a 	mov	r5,fp
 8006ba8:	8009a940 	call	8009a94 <_Bfree>
 8006bac:	d8c00517 	ldw	r3,20(sp)
 8006bb0:	d9002317 	ldw	r4,140(sp)
 8006bb4:	d9802517 	ldw	r6,148(sp)
 8006bb8:	b8000005 	stb	zero,0(r23)
 8006bbc:	18800044 	addi	r2,r3,1
 8006bc0:	20800015 	stw	r2,0(r4)
 8006bc4:	30027226 	beq	r6,zero,8007590 <_dtoa_r+0x10a8>
 8006bc8:	35c00015 	stw	r23,0(r6)
 8006bcc:	d8800717 	ldw	r2,28(sp)
 8006bd0:	003e7406 	br	80065a4 <__ram_exceptions_end+0xf7f86364>
 8006bd4:	00800434 	movhi	r2,16
 8006bd8:	10bfffc4 	addi	r2,r2,-1
 8006bdc:	a8aa703a 	and	r21,r21,r2
 8006be0:	a83e801e 	bne	r21,zero,80065e4 <__ram_exceptions_end+0xf7f863a4>
 8006be4:	00820074 	movhi	r2,2049
 8006be8:	108a2c04 	addi	r2,r2,10416
 8006bec:	003e7f06 	br	80065ec <__ram_exceptions_end+0xf7f863ac>
 8006bf0:	10c00204 	addi	r3,r2,8
 8006bf4:	003e8206 	br	8006600 <__ram_exceptions_end+0xf7f863c0>
 8006bf8:	01400434 	movhi	r5,16
 8006bfc:	297fffc4 	addi	r5,r5,-1
 8006c00:	994a703a 	and	r5,r19,r5
 8006c04:	9009883a 	mov	r4,r18
 8006c08:	8c7f0044 	addi	r17,r17,-1023
 8006c0c:	294ffc34 	orhi	r5,r5,16368
 8006c10:	dd000217 	ldw	r20,8(sp)
 8006c14:	d8000f15 	stw	zero,60(sp)
 8006c18:	003e9f06 	br	8006698 <__ram_exceptions_end+0xf7f86458>
 8006c1c:	00820074 	movhi	r2,2049
 8006c20:	108a2304 	addi	r2,r2,10380
 8006c24:	003e5f06 	br	80065a4 <__ram_exceptions_end+0xf7f86364>
 8006c28:	80001115 	stw	zero,68(r16)
 8006c2c:	8009883a 	mov	r4,r16
 8006c30:	000b883a 	mov	r5,zero
 8006c34:	80099ec0 	call	80099ec <_Balloc>
 8006c38:	01bfffc4 	movi	r6,-1
 8006c3c:	d8800715 	stw	r2,28(sp)
 8006c40:	80801015 	stw	r2,64(r16)
 8006c44:	00800044 	movi	r2,1
 8006c48:	d9800615 	stw	r6,24(sp)
 8006c4c:	d8800b15 	stw	r2,44(sp)
 8006c50:	d8002215 	stw	zero,136(sp)
 8006c54:	d9800d15 	stw	r6,52(sp)
 8006c58:	d8000315 	stw	zero,12(sp)
 8006c5c:	d8800117 	ldw	r2,4(sp)
 8006c60:	10008e16 	blt	r2,zero,8006e9c <_dtoa_r+0x9b4>
 8006c64:	d9000517 	ldw	r4,20(sp)
 8006c68:	00c00384 	movi	r3,14
 8006c6c:	19008b16 	blt	r3,r4,8006e9c <_dtoa_r+0x9b4>
 8006c70:	200490fa 	slli	r2,r4,3
 8006c74:	00c20074 	movhi	r3,2049
 8006c78:	d9802217 	ldw	r6,136(sp)
 8006c7c:	18ca4b04 	addi	r3,r3,10540
 8006c80:	1885883a 	add	r2,r3,r2
 8006c84:	14400017 	ldw	r17,0(r2)
 8006c88:	15000117 	ldw	r20,4(r2)
 8006c8c:	3001c716 	blt	r6,zero,80073ac <_dtoa_r+0xec4>
 8006c90:	880d883a 	mov	r6,r17
 8006c94:	a00f883a 	mov	r7,r20
 8006c98:	9009883a 	mov	r4,r18
 8006c9c:	980b883a 	mov	r5,r19
 8006ca0:	80032b80 	call	80032b8 <__divdf3>
 8006ca4:	180b883a 	mov	r5,r3
 8006ca8:	1009883a 	mov	r4,r2
 8006cac:	800f7180 	call	800f718 <__fixdfsi>
 8006cb0:	1009883a 	mov	r4,r2
 8006cb4:	102d883a 	mov	r22,r2
 8006cb8:	8003b840 	call	8003b84 <__floatsidf>
 8006cbc:	1009883a 	mov	r4,r2
 8006cc0:	180b883a 	mov	r5,r3
 8006cc4:	880d883a 	mov	r6,r17
 8006cc8:	a00f883a 	mov	r7,r20
 8006ccc:	800e7240 	call	800e724 <__muldf3>
 8006cd0:	9009883a 	mov	r4,r18
 8006cd4:	980b883a 	mov	r5,r19
 8006cd8:	100d883a 	mov	r6,r2
 8006cdc:	180f883a 	mov	r7,r3
 8006ce0:	800ee480 	call	800ee48 <__subdf3>
 8006ce4:	d9000717 	ldw	r4,28(sp)
 8006ce8:	d9800617 	ldw	r6,24(sp)
 8006cec:	180b883a 	mov	r5,r3
 8006cf0:	b0c00c04 	addi	r3,r22,48
 8006cf4:	20c00005 	stb	r3,0(r4)
 8006cf8:	25c00044 	addi	r23,r4,1
 8006cfc:	01000044 	movi	r4,1
 8006d00:	1011883a 	mov	r8,r2
 8006d04:	2807883a 	mov	r3,r5
 8006d08:	31003d26 	beq	r6,r4,8006e00 <_dtoa_r+0x918>
 8006d0c:	000d883a 	mov	r6,zero
 8006d10:	01d00934 	movhi	r7,16420
 8006d14:	1009883a 	mov	r4,r2
 8006d18:	800e7240 	call	800e724 <__muldf3>
 8006d1c:	1009883a 	mov	r4,r2
 8006d20:	180b883a 	mov	r5,r3
 8006d24:	000d883a 	mov	r6,zero
 8006d28:	000f883a 	mov	r7,zero
 8006d2c:	1027883a 	mov	r19,r2
 8006d30:	182b883a 	mov	r21,r3
 8006d34:	800e4e00 	call	800e4e0 <__eqdf2>
 8006d38:	103f9926 	beq	r2,zero,8006ba0 <__ram_exceptions_end+0xf7f86960>
 8006d3c:	d8c00617 	ldw	r3,24(sp)
 8006d40:	d9000717 	ldw	r4,28(sp)
 8006d44:	b825883a 	mov	r18,r23
 8006d48:	18bfffc4 	addi	r2,r3,-1
 8006d4c:	20ad883a 	add	r22,r4,r2
 8006d50:	dc000315 	stw	r16,12(sp)
 8006d54:	00000a06 	br	8006d80 <_dtoa_r+0x898>
 8006d58:	800e7240 	call	800e724 <__muldf3>
 8006d5c:	1009883a 	mov	r4,r2
 8006d60:	180b883a 	mov	r5,r3
 8006d64:	000d883a 	mov	r6,zero
 8006d68:	000f883a 	mov	r7,zero
 8006d6c:	1027883a 	mov	r19,r2
 8006d70:	182b883a 	mov	r21,r3
 8006d74:	b825883a 	mov	r18,r23
 8006d78:	800e4e00 	call	800e4e0 <__eqdf2>
 8006d7c:	10022626 	beq	r2,zero,8007618 <_dtoa_r+0x1130>
 8006d80:	880d883a 	mov	r6,r17
 8006d84:	a00f883a 	mov	r7,r20
 8006d88:	9809883a 	mov	r4,r19
 8006d8c:	a80b883a 	mov	r5,r21
 8006d90:	80032b80 	call	80032b8 <__divdf3>
 8006d94:	180b883a 	mov	r5,r3
 8006d98:	1009883a 	mov	r4,r2
 8006d9c:	800f7180 	call	800f718 <__fixdfsi>
 8006da0:	1009883a 	mov	r4,r2
 8006da4:	1021883a 	mov	r16,r2
 8006da8:	8003b840 	call	8003b84 <__floatsidf>
 8006dac:	1009883a 	mov	r4,r2
 8006db0:	180b883a 	mov	r5,r3
 8006db4:	880d883a 	mov	r6,r17
 8006db8:	a00f883a 	mov	r7,r20
 8006dbc:	800e7240 	call	800e724 <__muldf3>
 8006dc0:	9809883a 	mov	r4,r19
 8006dc4:	a80b883a 	mov	r5,r21
 8006dc8:	100d883a 	mov	r6,r2
 8006dcc:	180f883a 	mov	r7,r3
 8006dd0:	800ee480 	call	800ee48 <__subdf3>
 8006dd4:	82000c04 	addi	r8,r16,48
 8006dd8:	92000005 	stb	r8,0(r18)
 8006ddc:	1009883a 	mov	r4,r2
 8006de0:	180b883a 	mov	r5,r3
 8006de4:	000d883a 	mov	r6,zero
 8006de8:	01d00934 	movhi	r7,16420
 8006dec:	1011883a 	mov	r8,r2
 8006df0:	bdc00044 	addi	r23,r23,1
 8006df4:	95bfd81e 	bne	r18,r22,8006d58 <__ram_exceptions_end+0xf7f86b18>
 8006df8:	802d883a 	mov	r22,r16
 8006dfc:	dc000317 	ldw	r16,12(sp)
 8006e00:	4009883a 	mov	r4,r8
 8006e04:	180b883a 	mov	r5,r3
 8006e08:	400d883a 	mov	r6,r8
 8006e0c:	180f883a 	mov	r7,r3
 8006e10:	800dc440 	call	800dc44 <__adddf3>
 8006e14:	8809883a 	mov	r4,r17
 8006e18:	a00b883a 	mov	r5,r20
 8006e1c:	100d883a 	mov	r6,r2
 8006e20:	180f883a 	mov	r7,r3
 8006e24:	1027883a 	mov	r19,r2
 8006e28:	1825883a 	mov	r18,r3
 8006e2c:	800e6440 	call	800e644 <__ledf2>
 8006e30:	10000816 	blt	r2,zero,8006e54 <_dtoa_r+0x96c>
 8006e34:	8809883a 	mov	r4,r17
 8006e38:	a00b883a 	mov	r5,r20
 8006e3c:	980d883a 	mov	r6,r19
 8006e40:	900f883a 	mov	r7,r18
 8006e44:	800e4e00 	call	800e4e0 <__eqdf2>
 8006e48:	103f551e 	bne	r2,zero,8006ba0 <__ram_exceptions_end+0xf7f86960>
 8006e4c:	b580004c 	andi	r22,r22,1
 8006e50:	b03f5326 	beq	r22,zero,8006ba0 <__ram_exceptions_end+0xf7f86960>
 8006e54:	bd7fffc3 	ldbu	r21,-1(r23)
 8006e58:	b8bfffc4 	addi	r2,r23,-1
 8006e5c:	1007883a 	mov	r3,r2
 8006e60:	01400e44 	movi	r5,57
 8006e64:	d9800717 	ldw	r6,28(sp)
 8006e68:	00000506 	br	8006e80 <_dtoa_r+0x998>
 8006e6c:	18ffffc4 	addi	r3,r3,-1
 8006e70:	30825e26 	beq	r6,r2,80077ec <_dtoa_r+0x1304>
 8006e74:	1d400003 	ldbu	r21,0(r3)
 8006e78:	102f883a 	mov	r23,r2
 8006e7c:	10bfffc4 	addi	r2,r2,-1
 8006e80:	a9003fcc 	andi	r4,r21,255
 8006e84:	2100201c 	xori	r4,r4,128
 8006e88:	213fe004 	addi	r4,r4,-128
 8006e8c:	217ff726 	beq	r4,r5,8006e6c <__ram_exceptions_end+0xf7f86c2c>
 8006e90:	aa000044 	addi	r8,r21,1
 8006e94:	12000005 	stb	r8,0(r2)
 8006e98:	003f4106 	br	8006ba0 <__ram_exceptions_end+0xf7f86960>
 8006e9c:	d8c00b17 	ldw	r3,44(sp)
 8006ea0:	18006726 	beq	r3,zero,8007040 <_dtoa_r+0xb58>
 8006ea4:	d9000317 	ldw	r4,12(sp)
 8006ea8:	00c00044 	movi	r3,1
 8006eac:	19016a0e 	bge	r3,r4,8007458 <_dtoa_r+0xf70>
 8006eb0:	d8800617 	ldw	r2,24(sp)
 8006eb4:	d8c00917 	ldw	r3,36(sp)
 8006eb8:	157fffc4 	addi	r21,r2,-1
 8006ebc:	1d420716 	blt	r3,r21,80076dc <_dtoa_r+0x11f4>
 8006ec0:	1d6bc83a 	sub	r21,r3,r21
 8006ec4:	d8800617 	ldw	r2,24(sp)
 8006ec8:	1002c716 	blt	r2,zero,80079e8 <_dtoa_r+0x1500>
 8006ecc:	dd000817 	ldw	r20,32(sp)
 8006ed0:	d8800617 	ldw	r2,24(sp)
 8006ed4:	d9800817 	ldw	r6,32(sp)
 8006ed8:	8009883a 	mov	r4,r16
 8006edc:	01400044 	movi	r5,1
 8006ee0:	308d883a 	add	r6,r6,r2
 8006ee4:	d9800815 	stw	r6,32(sp)
 8006ee8:	b0ad883a 	add	r22,r22,r2
 8006eec:	8009dec0 	call	8009dec <__i2b>
 8006ef0:	1023883a 	mov	r17,r2
 8006ef4:	a0000826 	beq	r20,zero,8006f18 <_dtoa_r+0xa30>
 8006ef8:	0580070e 	bge	zero,r22,8006f18 <_dtoa_r+0xa30>
 8006efc:	b005883a 	mov	r2,r22
 8006f00:	a5812016 	blt	r20,r22,8007384 <_dtoa_r+0xe9c>
 8006f04:	d8c00817 	ldw	r3,32(sp)
 8006f08:	a0a9c83a 	sub	r20,r20,r2
 8006f0c:	b0adc83a 	sub	r22,r22,r2
 8006f10:	1887c83a 	sub	r3,r3,r2
 8006f14:	d8c00815 	stw	r3,32(sp)
 8006f18:	d9000917 	ldw	r4,36(sp)
 8006f1c:	0100140e 	bge	zero,r4,8006f70 <_dtoa_r+0xa88>
 8006f20:	d9800b17 	ldw	r6,44(sp)
 8006f24:	3001e526 	beq	r6,zero,80076bc <_dtoa_r+0x11d4>
 8006f28:	05400e0e 	bge	zero,r21,8006f64 <_dtoa_r+0xa7c>
 8006f2c:	880b883a 	mov	r5,r17
 8006f30:	8009883a 	mov	r4,r16
 8006f34:	a80d883a 	mov	r6,r21
 8006f38:	800a0240 	call	800a024 <__pow5mult>
 8006f3c:	e00d883a 	mov	r6,fp
 8006f40:	8009883a 	mov	r4,r16
 8006f44:	100b883a 	mov	r5,r2
 8006f48:	1023883a 	mov	r17,r2
 8006f4c:	8009e280 	call	8009e28 <__multiply>
 8006f50:	102f883a 	mov	r23,r2
 8006f54:	e00b883a 	mov	r5,fp
 8006f58:	8009883a 	mov	r4,r16
 8006f5c:	8009a940 	call	8009a94 <_Bfree>
 8006f60:	b839883a 	mov	fp,r23
 8006f64:	d8800917 	ldw	r2,36(sp)
 8006f68:	154dc83a 	sub	r6,r2,r21
 8006f6c:	3001281e 	bne	r6,zero,8007410 <_dtoa_r+0xf28>
 8006f70:	05c00044 	movi	r23,1
 8006f74:	8009883a 	mov	r4,r16
 8006f78:	b80b883a 	mov	r5,r23
 8006f7c:	8009dec0 	call	8009dec <__i2b>
 8006f80:	d8c00a17 	ldw	r3,40(sp)
 8006f84:	102b883a 	mov	r21,r2
 8006f88:	00c0310e 	bge	zero,r3,8007050 <_dtoa_r+0xb68>
 8006f8c:	8009883a 	mov	r4,r16
 8006f90:	100b883a 	mov	r5,r2
 8006f94:	180d883a 	mov	r6,r3
 8006f98:	800a0240 	call	800a024 <__pow5mult>
 8006f9c:	d9000317 	ldw	r4,12(sp)
 8006fa0:	102b883a 	mov	r21,r2
 8006fa4:	b9011f0e 	bge	r23,r4,8007424 <_dtoa_r+0xf3c>
 8006fa8:	0027883a 	mov	r19,zero
 8006fac:	a8800417 	ldw	r2,16(r21)
 8006fb0:	10800104 	addi	r2,r2,4
 8006fb4:	1085883a 	add	r2,r2,r2
 8006fb8:	1085883a 	add	r2,r2,r2
 8006fbc:	a885883a 	add	r2,r21,r2
 8006fc0:	11000017 	ldw	r4,0(r2)
 8006fc4:	8009cd40 	call	8009cd4 <__hi0bits>
 8006fc8:	00c00804 	movi	r3,32
 8006fcc:	1885c83a 	sub	r2,r3,r2
 8006fd0:	00002506 	br	8007068 <_dtoa_r+0xb80>
 8006fd4:	01800044 	movi	r6,1
 8006fd8:	d9800c15 	stw	r6,48(sp)
 8006fdc:	003dec06 	br	8006790 <__ram_exceptions_end+0xf7f86550>
 8006fe0:	d8c00817 	ldw	r3,32(sp)
 8006fe4:	d9000517 	ldw	r4,20(sp)
 8006fe8:	d8000a15 	stw	zero,40(sp)
 8006fec:	1907c83a 	sub	r3,r3,r4
 8006ff0:	010dc83a 	sub	r6,zero,r4
 8006ff4:	d8c00815 	stw	r3,32(sp)
 8006ff8:	d9800915 	stw	r6,36(sp)
 8006ffc:	003ded06 	br	80067b4 <__ram_exceptions_end+0xf7f86574>
 8007000:	05adc83a 	sub	r22,zero,r22
 8007004:	dd800815 	stw	r22,32(sp)
 8007008:	002d883a 	mov	r22,zero
 800700c:	003de406 	br	80067a0 <__ram_exceptions_end+0xf7f86560>
 8007010:	d9000517 	ldw	r4,20(sp)
 8007014:	8003b840 	call	8003b84 <__floatsidf>
 8007018:	1009883a 	mov	r4,r2
 800701c:	180b883a 	mov	r5,r3
 8007020:	b00d883a 	mov	r6,r22
 8007024:	a80f883a 	mov	r7,r21
 8007028:	800e4e00 	call	800e4e0 <__eqdf2>
 800702c:	103dc726 	beq	r2,zero,800674c <__ram_exceptions_end+0xf7f8650c>
 8007030:	d8800517 	ldw	r2,20(sp)
 8007034:	10bfffc4 	addi	r2,r2,-1
 8007038:	d8800515 	stw	r2,20(sp)
 800703c:	003dc306 	br	800674c <__ram_exceptions_end+0xf7f8650c>
 8007040:	dd400917 	ldw	r21,36(sp)
 8007044:	dd000817 	ldw	r20,32(sp)
 8007048:	0023883a 	mov	r17,zero
 800704c:	003fa906 	br	8006ef4 <__ram_exceptions_end+0xf7f86cb4>
 8007050:	d9800317 	ldw	r6,12(sp)
 8007054:	b981670e 	bge	r23,r6,80075f4 <_dtoa_r+0x110c>
 8007058:	0027883a 	mov	r19,zero
 800705c:	d8c00a17 	ldw	r3,40(sp)
 8007060:	183fd21e 	bne	r3,zero,8006fac <__ram_exceptions_end+0xf7f86d6c>
 8007064:	00800044 	movi	r2,1
 8007068:	1585883a 	add	r2,r2,r22
 800706c:	108007cc 	andi	r2,r2,31
 8007070:	10005f26 	beq	r2,zero,80071f0 <_dtoa_r+0xd08>
 8007074:	00c00804 	movi	r3,32
 8007078:	1887c83a 	sub	r3,r3,r2
 800707c:	01000104 	movi	r4,4
 8007080:	20c2dd0e 	bge	r4,r3,8007bf8 <_dtoa_r+0x1710>
 8007084:	d9000817 	ldw	r4,32(sp)
 8007088:	00c00704 	movi	r3,28
 800708c:	1885c83a 	sub	r2,r3,r2
 8007090:	2089883a 	add	r4,r4,r2
 8007094:	d9000815 	stw	r4,32(sp)
 8007098:	a0a9883a 	add	r20,r20,r2
 800709c:	b0ad883a 	add	r22,r22,r2
 80070a0:	d8800817 	ldw	r2,32(sp)
 80070a4:	0080050e 	bge	zero,r2,80070bc <_dtoa_r+0xbd4>
 80070a8:	e00b883a 	mov	r5,fp
 80070ac:	8009883a 	mov	r4,r16
 80070b0:	100d883a 	mov	r6,r2
 80070b4:	800a1640 	call	800a164 <__lshift>
 80070b8:	1039883a 	mov	fp,r2
 80070bc:	0580050e 	bge	zero,r22,80070d4 <_dtoa_r+0xbec>
 80070c0:	a80b883a 	mov	r5,r21
 80070c4:	8009883a 	mov	r4,r16
 80070c8:	b00d883a 	mov	r6,r22
 80070cc:	800a1640 	call	800a164 <__lshift>
 80070d0:	102b883a 	mov	r21,r2
 80070d4:	d8c00c17 	ldw	r3,48(sp)
 80070d8:	1801161e 	bne	r3,zero,8007534 <_dtoa_r+0x104c>
 80070dc:	d8c00617 	ldw	r3,24(sp)
 80070e0:	00c12d0e 	bge	zero,r3,8007598 <_dtoa_r+0x10b0>
 80070e4:	d8c00b17 	ldw	r3,44(sp)
 80070e8:	1800571e 	bne	r3,zero,8007248 <_dtoa_r+0xd60>
 80070ec:	dc800717 	ldw	r18,28(sp)
 80070f0:	dcc00617 	ldw	r19,24(sp)
 80070f4:	9029883a 	mov	r20,r18
 80070f8:	00000206 	br	8007104 <_dtoa_r+0xc1c>
 80070fc:	8009abc0 	call	8009abc <__multadd>
 8007100:	1039883a 	mov	fp,r2
 8007104:	e009883a 	mov	r4,fp
 8007108:	a80b883a 	mov	r5,r21
 800710c:	80062e80 	call	80062e8 <quorem>
 8007110:	10800c04 	addi	r2,r2,48
 8007114:	90800005 	stb	r2,0(r18)
 8007118:	94800044 	addi	r18,r18,1
 800711c:	9507c83a 	sub	r3,r18,r20
 8007120:	8009883a 	mov	r4,r16
 8007124:	e00b883a 	mov	r5,fp
 8007128:	01800284 	movi	r6,10
 800712c:	000f883a 	mov	r7,zero
 8007130:	1cfff216 	blt	r3,r19,80070fc <__ram_exceptions_end+0xf7f86ebc>
 8007134:	1011883a 	mov	r8,r2
 8007138:	d8800617 	ldw	r2,24(sp)
 800713c:	00822e0e 	bge	zero,r2,80079f8 <_dtoa_r+0x1510>
 8007140:	d9000717 	ldw	r4,28(sp)
 8007144:	0025883a 	mov	r18,zero
 8007148:	20af883a 	add	r23,r4,r2
 800714c:	e00b883a 	mov	r5,fp
 8007150:	01800044 	movi	r6,1
 8007154:	8009883a 	mov	r4,r16
 8007158:	da001715 	stw	r8,92(sp)
 800715c:	800a1640 	call	800a164 <__lshift>
 8007160:	1009883a 	mov	r4,r2
 8007164:	a80b883a 	mov	r5,r21
 8007168:	1039883a 	mov	fp,r2
 800716c:	800a2ac0 	call	800a2ac <__mcmp>
 8007170:	da001717 	ldw	r8,92(sp)
 8007174:	00816e0e 	bge	zero,r2,8007730 <_dtoa_r+0x1248>
 8007178:	b93fffc3 	ldbu	r4,-1(r23)
 800717c:	b8bfffc4 	addi	r2,r23,-1
 8007180:	1007883a 	mov	r3,r2
 8007184:	01800e44 	movi	r6,57
 8007188:	d9c00717 	ldw	r7,28(sp)
 800718c:	00000506 	br	80071a4 <_dtoa_r+0xcbc>
 8007190:	18ffffc4 	addi	r3,r3,-1
 8007194:	38811926 	beq	r7,r2,80075fc <_dtoa_r+0x1114>
 8007198:	19000003 	ldbu	r4,0(r3)
 800719c:	102f883a 	mov	r23,r2
 80071a0:	10bfffc4 	addi	r2,r2,-1
 80071a4:	21403fcc 	andi	r5,r4,255
 80071a8:	2940201c 	xori	r5,r5,128
 80071ac:	297fe004 	addi	r5,r5,-128
 80071b0:	29bff726 	beq	r5,r6,8007190 <__ram_exceptions_end+0xf7f86f50>
 80071b4:	21000044 	addi	r4,r4,1
 80071b8:	11000005 	stb	r4,0(r2)
 80071bc:	8009883a 	mov	r4,r16
 80071c0:	a80b883a 	mov	r5,r21
 80071c4:	8009a940 	call	8009a94 <_Bfree>
 80071c8:	883e7526 	beq	r17,zero,8006ba0 <__ram_exceptions_end+0xf7f86960>
 80071cc:	90000426 	beq	r18,zero,80071e0 <_dtoa_r+0xcf8>
 80071d0:	94400326 	beq	r18,r17,80071e0 <_dtoa_r+0xcf8>
 80071d4:	8009883a 	mov	r4,r16
 80071d8:	900b883a 	mov	r5,r18
 80071dc:	8009a940 	call	8009a94 <_Bfree>
 80071e0:	8009883a 	mov	r4,r16
 80071e4:	880b883a 	mov	r5,r17
 80071e8:	8009a940 	call	8009a94 <_Bfree>
 80071ec:	003e6c06 	br	8006ba0 <__ram_exceptions_end+0xf7f86960>
 80071f0:	00800704 	movi	r2,28
 80071f4:	d9800817 	ldw	r6,32(sp)
 80071f8:	a0a9883a 	add	r20,r20,r2
 80071fc:	b0ad883a 	add	r22,r22,r2
 8007200:	308d883a 	add	r6,r6,r2
 8007204:	d9800815 	stw	r6,32(sp)
 8007208:	003fa506 	br	80070a0 <__ram_exceptions_end+0xf7f86e60>
 800720c:	013efb84 	movi	r4,-1042
 8007210:	246bc83a 	sub	r21,r4,r17
 8007214:	9548983a 	sll	r4,r18,r21
 8007218:	003d1806 	br	800667c <__ram_exceptions_end+0xf7f8643c>
 800721c:	d8000c15 	stw	zero,48(sp)
 8007220:	003d5b06 	br	8006790 <__ram_exceptions_end+0xf7f86550>
 8007224:	880b883a 	mov	r5,r17
 8007228:	8009883a 	mov	r4,r16
 800722c:	01800284 	movi	r6,10
 8007230:	000f883a 	mov	r7,zero
 8007234:	8009abc0 	call	8009abc <__multadd>
 8007238:	1023883a 	mov	r17,r2
 800723c:	d8800d17 	ldw	r2,52(sp)
 8007240:	0082550e 	bge	zero,r2,8007b98 <_dtoa_r+0x16b0>
 8007244:	d8800615 	stw	r2,24(sp)
 8007248:	0500050e 	bge	zero,r20,8007260 <_dtoa_r+0xd78>
 800724c:	880b883a 	mov	r5,r17
 8007250:	8009883a 	mov	r4,r16
 8007254:	a00d883a 	mov	r6,r20
 8007258:	800a1640 	call	800a164 <__lshift>
 800725c:	1023883a 	mov	r17,r2
 8007260:	98016a1e 	bne	r19,zero,800780c <_dtoa_r+0x1324>
 8007264:	8829883a 	mov	r20,r17
 8007268:	d9000617 	ldw	r4,24(sp)
 800726c:	dcc00717 	ldw	r19,28(sp)
 8007270:	9480004c 	andi	r18,r18,1
 8007274:	20bfffc4 	addi	r2,r4,-1
 8007278:	9885883a 	add	r2,r19,r2
 800727c:	d8800415 	stw	r2,16(sp)
 8007280:	dc800615 	stw	r18,24(sp)
 8007284:	e009883a 	mov	r4,fp
 8007288:	a80b883a 	mov	r5,r21
 800728c:	80062e80 	call	80062e8 <quorem>
 8007290:	e009883a 	mov	r4,fp
 8007294:	880b883a 	mov	r5,r17
 8007298:	102f883a 	mov	r23,r2
 800729c:	800a2ac0 	call	800a2ac <__mcmp>
 80072a0:	8009883a 	mov	r4,r16
 80072a4:	a80b883a 	mov	r5,r21
 80072a8:	a00d883a 	mov	r6,r20
 80072ac:	102d883a 	mov	r22,r2
 80072b0:	800a30c0 	call	800a30c <__mdiff>
 80072b4:	1007883a 	mov	r3,r2
 80072b8:	10800317 	ldw	r2,12(r2)
 80072bc:	bc800c04 	addi	r18,r23,48
 80072c0:	1000971e 	bne	r2,zero,8007520 <_dtoa_r+0x1038>
 80072c4:	180b883a 	mov	r5,r3
 80072c8:	e009883a 	mov	r4,fp
 80072cc:	d8c01515 	stw	r3,84(sp)
 80072d0:	800a2ac0 	call	800a2ac <__mcmp>
 80072d4:	d8c01517 	ldw	r3,84(sp)
 80072d8:	8009883a 	mov	r4,r16
 80072dc:	d8801515 	stw	r2,84(sp)
 80072e0:	180b883a 	mov	r5,r3
 80072e4:	8009a940 	call	8009a94 <_Bfree>
 80072e8:	d8801517 	ldw	r2,84(sp)
 80072ec:	1000041e 	bne	r2,zero,8007300 <_dtoa_r+0xe18>
 80072f0:	d9800317 	ldw	r6,12(sp)
 80072f4:	3000021e 	bne	r6,zero,8007300 <_dtoa_r+0xe18>
 80072f8:	d8c00617 	ldw	r3,24(sp)
 80072fc:	18007626 	beq	r3,zero,80074d8 <_dtoa_r+0xff0>
 8007300:	b0005b16 	blt	r22,zero,8007470 <_dtoa_r+0xf88>
 8007304:	b000041e 	bne	r22,zero,8007318 <_dtoa_r+0xe30>
 8007308:	d9000317 	ldw	r4,12(sp)
 800730c:	2000021e 	bne	r4,zero,8007318 <_dtoa_r+0xe30>
 8007310:	d8c00617 	ldw	r3,24(sp)
 8007314:	18005626 	beq	r3,zero,8007470 <_dtoa_r+0xf88>
 8007318:	00814d16 	blt	zero,r2,8007850 <_dtoa_r+0x1368>
 800731c:	d8c00417 	ldw	r3,16(sp)
 8007320:	9d800044 	addi	r22,r19,1
 8007324:	9c800005 	stb	r18,0(r19)
 8007328:	b02f883a 	mov	r23,r22
 800732c:	98c14c26 	beq	r19,r3,8007860 <_dtoa_r+0x1378>
 8007330:	e00b883a 	mov	r5,fp
 8007334:	8009883a 	mov	r4,r16
 8007338:	01800284 	movi	r6,10
 800733c:	000f883a 	mov	r7,zero
 8007340:	8009abc0 	call	8009abc <__multadd>
 8007344:	1039883a 	mov	fp,r2
 8007348:	8d006d26 	beq	r17,r20,8007500 <_dtoa_r+0x1018>
 800734c:	880b883a 	mov	r5,r17
 8007350:	01800284 	movi	r6,10
 8007354:	000f883a 	mov	r7,zero
 8007358:	8009883a 	mov	r4,r16
 800735c:	8009abc0 	call	8009abc <__multadd>
 8007360:	a00b883a 	mov	r5,r20
 8007364:	8009883a 	mov	r4,r16
 8007368:	01800284 	movi	r6,10
 800736c:	000f883a 	mov	r7,zero
 8007370:	1023883a 	mov	r17,r2
 8007374:	8009abc0 	call	8009abc <__multadd>
 8007378:	1029883a 	mov	r20,r2
 800737c:	b027883a 	mov	r19,r22
 8007380:	003fc006 	br	8007284 <__ram_exceptions_end+0xf7f87044>
 8007384:	a005883a 	mov	r2,r20
 8007388:	003ede06 	br	8006f04 <__ram_exceptions_end+0xf7f86cc4>
 800738c:	01000044 	movi	r4,1
 8007390:	d9000b15 	stw	r4,44(sp)
 8007394:	d9802217 	ldw	r6,136(sp)
 8007398:	0180dc0e 	bge	zero,r6,800770c <_dtoa_r+0x1224>
 800739c:	3023883a 	mov	r17,r6
 80073a0:	d9800d15 	stw	r6,52(sp)
 80073a4:	d9800615 	stw	r6,24(sp)
 80073a8:	003d1e06 	br	8006824 <__ram_exceptions_end+0xf7f865e4>
 80073ac:	d8800617 	ldw	r2,24(sp)
 80073b0:	00be3716 	blt	zero,r2,8006c90 <__ram_exceptions_end+0xf7f86a50>
 80073b4:	1000be1e 	bne	r2,zero,80076b0 <_dtoa_r+0x11c8>
 80073b8:	8809883a 	mov	r4,r17
 80073bc:	a00b883a 	mov	r5,r20
 80073c0:	000d883a 	mov	r6,zero
 80073c4:	01d00534 	movhi	r7,16404
 80073c8:	800e7240 	call	800e724 <__muldf3>
 80073cc:	1009883a 	mov	r4,r2
 80073d0:	180b883a 	mov	r5,r3
 80073d4:	900d883a 	mov	r6,r18
 80073d8:	980f883a 	mov	r7,r19
 80073dc:	800e5640 	call	800e564 <__gedf2>
 80073e0:	002b883a 	mov	r21,zero
 80073e4:	0023883a 	mov	r17,zero
 80073e8:	10007a16 	blt	r2,zero,80075d4 <_dtoa_r+0x10ec>
 80073ec:	d9002217 	ldw	r4,136(sp)
 80073f0:	ddc00717 	ldw	r23,28(sp)
 80073f4:	0108303a 	nor	r4,zero,r4
 80073f8:	d9000515 	stw	r4,20(sp)
 80073fc:	8009883a 	mov	r4,r16
 8007400:	a80b883a 	mov	r5,r21
 8007404:	8009a940 	call	8009a94 <_Bfree>
 8007408:	883f751e 	bne	r17,zero,80071e0 <__ram_exceptions_end+0xf7f86fa0>
 800740c:	003de406 	br	8006ba0 <__ram_exceptions_end+0xf7f86960>
 8007410:	e00b883a 	mov	r5,fp
 8007414:	8009883a 	mov	r4,r16
 8007418:	800a0240 	call	800a024 <__pow5mult>
 800741c:	1039883a 	mov	fp,r2
 8007420:	003ed306 	br	8006f70 <__ram_exceptions_end+0xf7f86d30>
 8007424:	903ee01e 	bne	r18,zero,8006fa8 <__ram_exceptions_end+0xf7f86d68>
 8007428:	00800434 	movhi	r2,16
 800742c:	10bfffc4 	addi	r2,r2,-1
 8007430:	9884703a 	and	r2,r19,r2
 8007434:	103f081e 	bne	r2,zero,8007058 <__ram_exceptions_end+0xf7f86e18>
 8007438:	9cdffc2c 	andhi	r19,r19,32752
 800743c:	983f0626 	beq	r19,zero,8007058 <__ram_exceptions_end+0xf7f86e18>
 8007440:	d8800817 	ldw	r2,32(sp)
 8007444:	b5800044 	addi	r22,r22,1
 8007448:	04c00044 	movi	r19,1
 800744c:	10800044 	addi	r2,r2,1
 8007450:	d8800815 	stw	r2,32(sp)
 8007454:	003f0106 	br	800705c <__ram_exceptions_end+0xf7f86e1c>
 8007458:	d9800f17 	ldw	r6,60(sp)
 800745c:	30016826 	beq	r6,zero,8007a00 <_dtoa_r+0x1518>
 8007460:	10810cc4 	addi	r2,r2,1075
 8007464:	dd400917 	ldw	r21,36(sp)
 8007468:	dd000817 	ldw	r20,32(sp)
 800746c:	003e9906 	br	8006ed4 <__ram_exceptions_end+0xf7f86c94>
 8007470:	9011883a 	mov	r8,r18
 8007474:	4007883a 	mov	r3,r8
 8007478:	e02d883a 	mov	r22,fp
 800747c:	0080100e 	bge	zero,r2,80074c0 <_dtoa_r+0xfd8>
 8007480:	01800044 	movi	r6,1
 8007484:	8009883a 	mov	r4,r16
 8007488:	e00b883a 	mov	r5,fp
 800748c:	da001515 	stw	r8,84(sp)
 8007490:	da001715 	stw	r8,92(sp)
 8007494:	800a1640 	call	800a164 <__lshift>
 8007498:	1009883a 	mov	r4,r2
 800749c:	a80b883a 	mov	r5,r21
 80074a0:	102d883a 	mov	r22,r2
 80074a4:	800a2ac0 	call	800a2ac <__mcmp>
 80074a8:	d8c01517 	ldw	r3,84(sp)
 80074ac:	da001717 	ldw	r8,92(sp)
 80074b0:	0081a50e 	bge	zero,r2,8007b48 <_dtoa_r+0x1660>
 80074b4:	00800e44 	movi	r2,57
 80074b8:	40817b26 	beq	r8,r2,8007aa8 <_dtoa_r+0x15c0>
 80074bc:	40c00044 	addi	r3,r8,1
 80074c0:	8825883a 	mov	r18,r17
 80074c4:	9dc00044 	addi	r23,r19,1
 80074c8:	98c00005 	stb	r3,0(r19)
 80074cc:	a023883a 	mov	r17,r20
 80074d0:	b039883a 	mov	fp,r22
 80074d4:	003f3906 	br	80071bc <__ram_exceptions_end+0xf7f86f7c>
 80074d8:	00800e44 	movi	r2,57
 80074dc:	9011883a 	mov	r8,r18
 80074e0:	90817226 	beq	r18,r2,8007aac <_dtoa_r+0x15c4>
 80074e4:	0580010e 	bge	zero,r22,80074ec <_dtoa_r+0x1004>
 80074e8:	ba000c44 	addi	r8,r23,49
 80074ec:	8825883a 	mov	r18,r17
 80074f0:	9dc00044 	addi	r23,r19,1
 80074f4:	9a000005 	stb	r8,0(r19)
 80074f8:	a023883a 	mov	r17,r20
 80074fc:	003f2f06 	br	80071bc <__ram_exceptions_end+0xf7f86f7c>
 8007500:	880b883a 	mov	r5,r17
 8007504:	8009883a 	mov	r4,r16
 8007508:	01800284 	movi	r6,10
 800750c:	000f883a 	mov	r7,zero
 8007510:	8009abc0 	call	8009abc <__multadd>
 8007514:	1023883a 	mov	r17,r2
 8007518:	1029883a 	mov	r20,r2
 800751c:	003f9706 	br	800737c <__ram_exceptions_end+0xf7f8713c>
 8007520:	8009883a 	mov	r4,r16
 8007524:	180b883a 	mov	r5,r3
 8007528:	8009a940 	call	8009a94 <_Bfree>
 800752c:	00800044 	movi	r2,1
 8007530:	003f7306 	br	8007300 <__ram_exceptions_end+0xf7f870c0>
 8007534:	e009883a 	mov	r4,fp
 8007538:	a80b883a 	mov	r5,r21
 800753c:	800a2ac0 	call	800a2ac <__mcmp>
 8007540:	103ee60e 	bge	r2,zero,80070dc <__ram_exceptions_end+0xf7f86e9c>
 8007544:	8009883a 	mov	r4,r16
 8007548:	e00b883a 	mov	r5,fp
 800754c:	01800284 	movi	r6,10
 8007550:	000f883a 	mov	r7,zero
 8007554:	8009abc0 	call	8009abc <__multadd>
 8007558:	d9000517 	ldw	r4,20(sp)
 800755c:	d9800b17 	ldw	r6,44(sp)
 8007560:	1039883a 	mov	fp,r2
 8007564:	213fffc4 	addi	r4,r4,-1
 8007568:	d9000515 	stw	r4,20(sp)
 800756c:	303f2d1e 	bne	r6,zero,8007224 <__ram_exceptions_end+0xf7f86fe4>
 8007570:	d9000d17 	ldw	r4,52(sp)
 8007574:	0101780e 	bge	zero,r4,8007b58 <_dtoa_r+0x1670>
 8007578:	d9000615 	stw	r4,24(sp)
 800757c:	003edb06 	br	80070ec <__ram_exceptions_end+0xf7f86eac>
 8007580:	00800084 	movi	r2,2
 8007584:	30818e1e 	bne	r6,r2,8007bc0 <_dtoa_r+0x16d8>
 8007588:	d8000b15 	stw	zero,44(sp)
 800758c:	003f8106 	br	8007394 <__ram_exceptions_end+0xf7f87154>
 8007590:	d8800717 	ldw	r2,28(sp)
 8007594:	003c0306 	br	80065a4 <__ram_exceptions_end+0xf7f86364>
 8007598:	d9000317 	ldw	r4,12(sp)
 800759c:	00800084 	movi	r2,2
 80075a0:	113ed00e 	bge	r2,r4,80070e4 <__ram_exceptions_end+0xf7f86ea4>
 80075a4:	d8c00617 	ldw	r3,24(sp)
 80075a8:	183f901e 	bne	r3,zero,80073ec <__ram_exceptions_end+0xf7f871ac>
 80075ac:	a80b883a 	mov	r5,r21
 80075b0:	8009883a 	mov	r4,r16
 80075b4:	01800144 	movi	r6,5
 80075b8:	000f883a 	mov	r7,zero
 80075bc:	8009abc0 	call	8009abc <__multadd>
 80075c0:	e009883a 	mov	r4,fp
 80075c4:	100b883a 	mov	r5,r2
 80075c8:	102b883a 	mov	r21,r2
 80075cc:	800a2ac0 	call	800a2ac <__mcmp>
 80075d0:	00bf860e 	bge	zero,r2,80073ec <__ram_exceptions_end+0xf7f871ac>
 80075d4:	d9800717 	ldw	r6,28(sp)
 80075d8:	00800c44 	movi	r2,49
 80075dc:	30800005 	stb	r2,0(r6)
 80075e0:	d8800517 	ldw	r2,20(sp)
 80075e4:	35c00044 	addi	r23,r6,1
 80075e8:	10800044 	addi	r2,r2,1
 80075ec:	d8800515 	stw	r2,20(sp)
 80075f0:	003f8206 	br	80073fc <__ram_exceptions_end+0xf7f871bc>
 80075f4:	903e981e 	bne	r18,zero,8007058 <__ram_exceptions_end+0xf7f86e18>
 80075f8:	003f8b06 	br	8007428 <__ram_exceptions_end+0xf7f871e8>
 80075fc:	d9800517 	ldw	r6,20(sp)
 8007600:	d8c00717 	ldw	r3,28(sp)
 8007604:	00800c44 	movi	r2,49
 8007608:	31800044 	addi	r6,r6,1
 800760c:	d9800515 	stw	r6,20(sp)
 8007610:	18800005 	stb	r2,0(r3)
 8007614:	003ee906 	br	80071bc <__ram_exceptions_end+0xf7f86f7c>
 8007618:	dc000317 	ldw	r16,12(sp)
 800761c:	003d6006 	br	8006ba0 <__ram_exceptions_end+0xf7f86960>
 8007620:	8809883a 	mov	r4,r17
 8007624:	8003b840 	call	8003b84 <__floatsidf>
 8007628:	a009883a 	mov	r4,r20
 800762c:	a80b883a 	mov	r5,r21
 8007630:	100d883a 	mov	r6,r2
 8007634:	180f883a 	mov	r7,r3
 8007638:	800e7240 	call	800e724 <__muldf3>
 800763c:	1009883a 	mov	r4,r2
 8007640:	180b883a 	mov	r5,r3
 8007644:	000d883a 	mov	r6,zero
 8007648:	01d00734 	movhi	r7,16412
 800764c:	800dc440 	call	800dc44 <__adddf3>
 8007650:	1023883a 	mov	r17,r2
 8007654:	00bf3034 	movhi	r2,64704
 8007658:	1885883a 	add	r2,r3,r2
 800765c:	d8800e15 	stw	r2,56(sp)
 8007660:	a009883a 	mov	r4,r20
 8007664:	a80b883a 	mov	r5,r21
 8007668:	000d883a 	mov	r6,zero
 800766c:	01d00534 	movhi	r7,16404
 8007670:	800ee480 	call	800ee48 <__subdf3>
 8007674:	d9c00e17 	ldw	r7,56(sp)
 8007678:	1009883a 	mov	r4,r2
 800767c:	180b883a 	mov	r5,r3
 8007680:	880d883a 	mov	r6,r17
 8007684:	102b883a 	mov	r21,r2
 8007688:	1829883a 	mov	r20,r3
 800768c:	800e5640 	call	800e564 <__gedf2>
 8007690:	00807716 	blt	zero,r2,8007870 <_dtoa_r+0x1388>
 8007694:	d8800e17 	ldw	r2,56(sp)
 8007698:	a809883a 	mov	r4,r21
 800769c:	a00b883a 	mov	r5,r20
 80076a0:	11e0003c 	xorhi	r7,r2,32768
 80076a4:	880d883a 	mov	r6,r17
 80076a8:	800e6440 	call	800e644 <__ledf2>
 80076ac:	103d6b0e 	bge	r2,zero,8006c5c <__ram_exceptions_end+0xf7f86a1c>
 80076b0:	002b883a 	mov	r21,zero
 80076b4:	0023883a 	mov	r17,zero
 80076b8:	003f4c06 	br	80073ec <__ram_exceptions_end+0xf7f871ac>
 80076bc:	d9800917 	ldw	r6,36(sp)
 80076c0:	e00b883a 	mov	r5,fp
 80076c4:	8009883a 	mov	r4,r16
 80076c8:	800a0240 	call	800a024 <__pow5mult>
 80076cc:	1039883a 	mov	fp,r2
 80076d0:	003e2706 	br	8006f70 <__ram_exceptions_end+0xf7f86d30>
 80076d4:	d8000b15 	stw	zero,44(sp)
 80076d8:	003c4906 	br	8006800 <__ram_exceptions_end+0xf7f865c0>
 80076dc:	d9000917 	ldw	r4,36(sp)
 80076e0:	d9800a17 	ldw	r6,40(sp)
 80076e4:	dd400915 	stw	r21,36(sp)
 80076e8:	a905c83a 	sub	r2,r21,r4
 80076ec:	308d883a 	add	r6,r6,r2
 80076f0:	d9800a15 	stw	r6,40(sp)
 80076f4:	002b883a 	mov	r21,zero
 80076f8:	003df206 	br	8006ec4 <__ram_exceptions_end+0xf7f86c84>
 80076fc:	dc800e15 	stw	r18,56(sp)
 8007700:	982b883a 	mov	r21,r19
 8007704:	04400084 	movi	r17,2
 8007708:	003c7406 	br	80068dc <__ram_exceptions_end+0xf7f8669c>
 800770c:	04400044 	movi	r17,1
 8007710:	dc400d15 	stw	r17,52(sp)
 8007714:	dc400615 	stw	r17,24(sp)
 8007718:	dc402215 	stw	r17,136(sp)
 800771c:	80001115 	stw	zero,68(r16)
 8007720:	000b883a 	mov	r5,zero
 8007724:	003c4a06 	br	8006850 <__ram_exceptions_end+0xf7f86610>
 8007728:	3023883a 	mov	r17,r6
 800772c:	003ffb06 	br	800771c <__ram_exceptions_end+0xf7f874dc>
 8007730:	1000021e 	bne	r2,zero,800773c <_dtoa_r+0x1254>
 8007734:	4200004c 	andi	r8,r8,1
 8007738:	403e8f1e 	bne	r8,zero,8007178 <__ram_exceptions_end+0xf7f86f38>
 800773c:	01000c04 	movi	r4,48
 8007740:	00000106 	br	8007748 <_dtoa_r+0x1260>
 8007744:	102f883a 	mov	r23,r2
 8007748:	b8bfffc4 	addi	r2,r23,-1
 800774c:	10c00007 	ldb	r3,0(r2)
 8007750:	193ffc26 	beq	r3,r4,8007744 <__ram_exceptions_end+0xf7f87504>
 8007754:	003e9906 	br	80071bc <__ram_exceptions_end+0xf7f86f7c>
 8007758:	d9000517 	ldw	r4,20(sp)
 800775c:	012fc83a 	sub	r23,zero,r4
 8007760:	b800ad26 	beq	r23,zero,8007a18 <_dtoa_r+0x1530>
 8007764:	b88003cc 	andi	r2,r23,15
 8007768:	100490fa 	slli	r2,r2,3
 800776c:	00c20074 	movhi	r3,2049
 8007770:	18ca4b04 	addi	r3,r3,10540
 8007774:	1885883a 	add	r2,r3,r2
 8007778:	11800017 	ldw	r6,0(r2)
 800777c:	11c00117 	ldw	r7,4(r2)
 8007780:	b82fd13a 	srai	r23,r23,4
 8007784:	9009883a 	mov	r4,r18
 8007788:	980b883a 	mov	r5,r19
 800778c:	800e7240 	call	800e724 <__muldf3>
 8007790:	1029883a 	mov	r20,r2
 8007794:	182b883a 	mov	r21,r3
 8007798:	b800f426 	beq	r23,zero,8007b6c <_dtoa_r+0x1684>
 800779c:	02020074 	movhi	r8,2049
 80077a0:	420a4104 	addi	r8,r8,10500
 80077a4:	8029883a 	mov	r20,r16
 80077a8:	04400084 	movi	r17,2
 80077ac:	4021883a 	mov	r16,r8
 80077b0:	b980004c 	andi	r6,r23,1
 80077b4:	1009883a 	mov	r4,r2
 80077b8:	b82fd07a 	srai	r23,r23,1
 80077bc:	180b883a 	mov	r5,r3
 80077c0:	30000426 	beq	r6,zero,80077d4 <_dtoa_r+0x12ec>
 80077c4:	81800017 	ldw	r6,0(r16)
 80077c8:	81c00117 	ldw	r7,4(r16)
 80077cc:	8c400044 	addi	r17,r17,1
 80077d0:	800e7240 	call	800e724 <__muldf3>
 80077d4:	84000204 	addi	r16,r16,8
 80077d8:	b83ff51e 	bne	r23,zero,80077b0 <__ram_exceptions_end+0xf7f87570>
 80077dc:	a021883a 	mov	r16,r20
 80077e0:	182b883a 	mov	r21,r3
 80077e4:	1029883a 	mov	r20,r2
 80077e8:	003c5506 	br	8006940 <__ram_exceptions_end+0xf7f86700>
 80077ec:	d9800517 	ldw	r6,20(sp)
 80077f0:	d9000717 	ldw	r4,28(sp)
 80077f4:	00c00c04 	movi	r3,48
 80077f8:	31800044 	addi	r6,r6,1
 80077fc:	d9800515 	stw	r6,20(sp)
 8007800:	20c00005 	stb	r3,0(r4)
 8007804:	02000c44 	movi	r8,49
 8007808:	003da206 	br	8006e94 <__ram_exceptions_end+0xf7f86c54>
 800780c:	89400117 	ldw	r5,4(r17)
 8007810:	8009883a 	mov	r4,r16
 8007814:	80099ec0 	call	80099ec <_Balloc>
 8007818:	89800417 	ldw	r6,16(r17)
 800781c:	11000304 	addi	r4,r2,12
 8007820:	89400304 	addi	r5,r17,12
 8007824:	31800084 	addi	r6,r6,2
 8007828:	318d883a 	add	r6,r6,r6
 800782c:	318d883a 	add	r6,r6,r6
 8007830:	1027883a 	mov	r19,r2
 8007834:	80097580 	call	8009758 <memcpy>
 8007838:	8009883a 	mov	r4,r16
 800783c:	980b883a 	mov	r5,r19
 8007840:	01800044 	movi	r6,1
 8007844:	800a1640 	call	800a164 <__lshift>
 8007848:	1029883a 	mov	r20,r2
 800784c:	003e8606 	br	8007268 <__ram_exceptions_end+0xf7f87028>
 8007850:	00800e44 	movi	r2,57
 8007854:	90809526 	beq	r18,r2,8007aac <_dtoa_r+0x15c4>
 8007858:	92000044 	addi	r8,r18,1
 800785c:	003f2306 	br	80074ec <__ram_exceptions_end+0xf7f872ac>
 8007860:	9011883a 	mov	r8,r18
 8007864:	8825883a 	mov	r18,r17
 8007868:	a023883a 	mov	r17,r20
 800786c:	003e3706 	br	800714c <__ram_exceptions_end+0xf7f86f0c>
 8007870:	002b883a 	mov	r21,zero
 8007874:	0023883a 	mov	r17,zero
 8007878:	003f5606 	br	80075d4 <__ram_exceptions_end+0xf7f87394>
 800787c:	51bfffc4 	addi	r6,r10,-1
 8007880:	300490fa 	slli	r2,r6,3
 8007884:	00c20074 	movhi	r3,2049
 8007888:	18ca4b04 	addi	r3,r3,10540
 800788c:	1885883a 	add	r2,r3,r2
 8007890:	d9c00e17 	ldw	r7,56(sp)
 8007894:	11000017 	ldw	r4,0(r2)
 8007898:	11400117 	ldw	r5,4(r2)
 800789c:	d8800717 	ldw	r2,28(sp)
 80078a0:	d9801015 	stw	r6,64(sp)
 80078a4:	880d883a 	mov	r6,r17
 80078a8:	da801615 	stw	r10,88(sp)
 80078ac:	15c00044 	addi	r23,r2,1
 80078b0:	800e7240 	call	800e724 <__muldf3>
 80078b4:	a80b883a 	mov	r5,r21
 80078b8:	a009883a 	mov	r4,r20
 80078bc:	d8c01115 	stw	r3,68(sp)
 80078c0:	d8800e15 	stw	r2,56(sp)
 80078c4:	800f7180 	call	800f718 <__fixdfsi>
 80078c8:	1009883a 	mov	r4,r2
 80078cc:	1023883a 	mov	r17,r2
 80078d0:	8003b840 	call	8003b84 <__floatsidf>
 80078d4:	a009883a 	mov	r4,r20
 80078d8:	a80b883a 	mov	r5,r21
 80078dc:	100d883a 	mov	r6,r2
 80078e0:	180f883a 	mov	r7,r3
 80078e4:	800ee480 	call	800ee48 <__subdf3>
 80078e8:	1813883a 	mov	r9,r3
 80078ec:	d8c00717 	ldw	r3,28(sp)
 80078f0:	8c400c04 	addi	r17,r17,48
 80078f4:	1011883a 	mov	r8,r2
 80078f8:	1c400005 	stb	r17,0(r3)
 80078fc:	da801617 	ldw	r10,88(sp)
 8007900:	00800044 	movi	r2,1
 8007904:	50802326 	beq	r10,r2,8007994 <_dtoa_r+0x14ac>
 8007908:	d8800717 	ldw	r2,28(sp)
 800790c:	b82b883a 	mov	r21,r23
 8007910:	dc001315 	stw	r16,76(sp)
 8007914:	12a9883a 	add	r20,r2,r10
 8007918:	4807883a 	mov	r3,r9
 800791c:	4005883a 	mov	r2,r8
 8007920:	dc801415 	stw	r18,80(sp)
 8007924:	000d883a 	mov	r6,zero
 8007928:	01d00934 	movhi	r7,16420
 800792c:	1009883a 	mov	r4,r2
 8007930:	180b883a 	mov	r5,r3
 8007934:	800e7240 	call	800e724 <__muldf3>
 8007938:	180b883a 	mov	r5,r3
 800793c:	1009883a 	mov	r4,r2
 8007940:	1821883a 	mov	r16,r3
 8007944:	1025883a 	mov	r18,r2
 8007948:	800f7180 	call	800f718 <__fixdfsi>
 800794c:	1009883a 	mov	r4,r2
 8007950:	1023883a 	mov	r17,r2
 8007954:	8003b840 	call	8003b84 <__floatsidf>
 8007958:	9009883a 	mov	r4,r18
 800795c:	800b883a 	mov	r5,r16
 8007960:	100d883a 	mov	r6,r2
 8007964:	180f883a 	mov	r7,r3
 8007968:	8c400c04 	addi	r17,r17,48
 800796c:	800ee480 	call	800ee48 <__subdf3>
 8007970:	ad400044 	addi	r21,r21,1
 8007974:	ac7fffc5 	stb	r17,-1(r21)
 8007978:	ad3fea1e 	bne	r21,r20,8007924 <__ram_exceptions_end+0xf7f876e4>
 800797c:	1813883a 	mov	r9,r3
 8007980:	d8c01017 	ldw	r3,64(sp)
 8007984:	dc001317 	ldw	r16,76(sp)
 8007988:	dc801417 	ldw	r18,80(sp)
 800798c:	1011883a 	mov	r8,r2
 8007990:	b8ef883a 	add	r23,r23,r3
 8007994:	d9000e17 	ldw	r4,56(sp)
 8007998:	d9401117 	ldw	r5,68(sp)
 800799c:	000d883a 	mov	r6,zero
 80079a0:	01cff834 	movhi	r7,16352
 80079a4:	da001715 	stw	r8,92(sp)
 80079a8:	da401515 	stw	r9,84(sp)
 80079ac:	800dc440 	call	800dc44 <__adddf3>
 80079b0:	da001717 	ldw	r8,92(sp)
 80079b4:	da401517 	ldw	r9,84(sp)
 80079b8:	1009883a 	mov	r4,r2
 80079bc:	400d883a 	mov	r6,r8
 80079c0:	480f883a 	mov	r7,r9
 80079c4:	180b883a 	mov	r5,r3
 80079c8:	800e6440 	call	800e644 <__ledf2>
 80079cc:	da001717 	ldw	r8,92(sp)
 80079d0:	da401517 	ldw	r9,84(sp)
 80079d4:	10003b0e 	bge	r2,zero,8007ac4 <_dtoa_r+0x15dc>
 80079d8:	d9001217 	ldw	r4,72(sp)
 80079dc:	bd7fffc3 	ldbu	r21,-1(r23)
 80079e0:	d9000515 	stw	r4,20(sp)
 80079e4:	003d1c06 	br	8006e58 <__ram_exceptions_end+0xf7f86c18>
 80079e8:	d8c00817 	ldw	r3,32(sp)
 80079ec:	18a9c83a 	sub	r20,r3,r2
 80079f0:	0005883a 	mov	r2,zero
 80079f4:	003d3706 	br	8006ed4 <__ram_exceptions_end+0xf7f86c94>
 80079f8:	00800044 	movi	r2,1
 80079fc:	003dd006 	br	8007140 <__ram_exceptions_end+0xf7f86f00>
 8007a00:	d8c00217 	ldw	r3,8(sp)
 8007a04:	00800d84 	movi	r2,54
 8007a08:	dd400917 	ldw	r21,36(sp)
 8007a0c:	10c5c83a 	sub	r2,r2,r3
 8007a10:	dd000817 	ldw	r20,32(sp)
 8007a14:	003d2f06 	br	8006ed4 <__ram_exceptions_end+0xf7f86c94>
 8007a18:	9029883a 	mov	r20,r18
 8007a1c:	982b883a 	mov	r21,r19
 8007a20:	04400084 	movi	r17,2
 8007a24:	003bc606 	br	8006940 <__ram_exceptions_end+0xf7f86700>
 8007a28:	d8800617 	ldw	r2,24(sp)
 8007a2c:	103efc26 	beq	r2,zero,8007620 <__ram_exceptions_end+0xf7f873e0>
 8007a30:	d8c00d17 	ldw	r3,52(sp)
 8007a34:	00fc890e 	bge	zero,r3,8006c5c <__ram_exceptions_end+0xf7f86a1c>
 8007a38:	a80b883a 	mov	r5,r21
 8007a3c:	a009883a 	mov	r4,r20
 8007a40:	000d883a 	mov	r6,zero
 8007a44:	01d00934 	movhi	r7,16420
 8007a48:	800e7240 	call	800e724 <__muldf3>
 8007a4c:	89000044 	addi	r4,r17,1
 8007a50:	1029883a 	mov	r20,r2
 8007a54:	182b883a 	mov	r21,r3
 8007a58:	8003b840 	call	8003b84 <__floatsidf>
 8007a5c:	a009883a 	mov	r4,r20
 8007a60:	a80b883a 	mov	r5,r21
 8007a64:	100d883a 	mov	r6,r2
 8007a68:	180f883a 	mov	r7,r3
 8007a6c:	800e7240 	call	800e724 <__muldf3>
 8007a70:	1009883a 	mov	r4,r2
 8007a74:	180b883a 	mov	r5,r3
 8007a78:	000d883a 	mov	r6,zero
 8007a7c:	01d00734 	movhi	r7,16412
 8007a80:	800dc440 	call	800dc44 <__adddf3>
 8007a84:	d9000517 	ldw	r4,20(sp)
 8007a88:	1023883a 	mov	r17,r2
 8007a8c:	00bf3034 	movhi	r2,64704
 8007a90:	213fffc4 	addi	r4,r4,-1
 8007a94:	1885883a 	add	r2,r3,r2
 8007a98:	d9001215 	stw	r4,72(sp)
 8007a9c:	d8800e15 	stw	r2,56(sp)
 8007aa0:	da800d17 	ldw	r10,52(sp)
 8007aa4:	003bc306 	br	80069b4 <__ram_exceptions_end+0xf7f86774>
 8007aa8:	b039883a 	mov	fp,r22
 8007aac:	01000e44 	movi	r4,57
 8007ab0:	8825883a 	mov	r18,r17
 8007ab4:	9dc00044 	addi	r23,r19,1
 8007ab8:	99000005 	stb	r4,0(r19)
 8007abc:	a023883a 	mov	r17,r20
 8007ac0:	003dae06 	br	800717c <__ram_exceptions_end+0xf7f86f3c>
 8007ac4:	d9800e17 	ldw	r6,56(sp)
 8007ac8:	d9c01117 	ldw	r7,68(sp)
 8007acc:	0009883a 	mov	r4,zero
 8007ad0:	014ff834 	movhi	r5,16352
 8007ad4:	da001715 	stw	r8,92(sp)
 8007ad8:	da401515 	stw	r9,84(sp)
 8007adc:	800ee480 	call	800ee48 <__subdf3>
 8007ae0:	da001717 	ldw	r8,92(sp)
 8007ae4:	da401517 	ldw	r9,84(sp)
 8007ae8:	1009883a 	mov	r4,r2
 8007aec:	180b883a 	mov	r5,r3
 8007af0:	400d883a 	mov	r6,r8
 8007af4:	480f883a 	mov	r7,r9
 8007af8:	800e5640 	call	800e564 <__gedf2>
 8007afc:	00bc570e 	bge	zero,r2,8006c5c <__ram_exceptions_end+0xf7f86a1c>
 8007b00:	01000c04 	movi	r4,48
 8007b04:	00000106 	br	8007b0c <_dtoa_r+0x1624>
 8007b08:	102f883a 	mov	r23,r2
 8007b0c:	b8bfffc4 	addi	r2,r23,-1
 8007b10:	10c00007 	ldb	r3,0(r2)
 8007b14:	193ffc26 	beq	r3,r4,8007b08 <__ram_exceptions_end+0xf7f878c8>
 8007b18:	d9801217 	ldw	r6,72(sp)
 8007b1c:	d9800515 	stw	r6,20(sp)
 8007b20:	003c1f06 	br	8006ba0 <__ram_exceptions_end+0xf7f86960>
 8007b24:	d8801217 	ldw	r2,72(sp)
 8007b28:	dc001117 	ldw	r16,68(sp)
 8007b2c:	d8800515 	stw	r2,20(sp)
 8007b30:	003cc906 	br	8006e58 <__ram_exceptions_end+0xf7f86c18>
 8007b34:	dd801317 	ldw	r22,76(sp)
 8007b38:	dc001117 	ldw	r16,68(sp)
 8007b3c:	dcc01417 	ldw	r19,80(sp)
 8007b40:	dc801017 	ldw	r18,64(sp)
 8007b44:	003c4506 	br	8006c5c <__ram_exceptions_end+0xf7f86a1c>
 8007b48:	103e5d1e 	bne	r2,zero,80074c0 <__ram_exceptions_end+0xf7f87280>
 8007b4c:	4080004c 	andi	r2,r8,1
 8007b50:	103e5b26 	beq	r2,zero,80074c0 <__ram_exceptions_end+0xf7f87280>
 8007b54:	003e5706 	br	80074b4 <__ram_exceptions_end+0xf7f87274>
 8007b58:	d8c00317 	ldw	r3,12(sp)
 8007b5c:	00800084 	movi	r2,2
 8007b60:	10c00a16 	blt	r2,r3,8007b8c <_dtoa_r+0x16a4>
 8007b64:	d9000d17 	ldw	r4,52(sp)
 8007b68:	003e8306 	br	8007578 <__ram_exceptions_end+0xf7f87338>
 8007b6c:	04400084 	movi	r17,2
 8007b70:	003b7306 	br	8006940 <__ram_exceptions_end+0xf7f86700>
 8007b74:	d9801217 	ldw	r6,72(sp)
 8007b78:	d9800515 	stw	r6,20(sp)
 8007b7c:	003cb606 	br	8006e58 <__ram_exceptions_end+0xf7f86c18>
 8007b80:	d9001217 	ldw	r4,72(sp)
 8007b84:	d9000515 	stw	r4,20(sp)
 8007b88:	003c0506 	br	8006ba0 <__ram_exceptions_end+0xf7f86960>
 8007b8c:	d9800d17 	ldw	r6,52(sp)
 8007b90:	d9800615 	stw	r6,24(sp)
 8007b94:	003e8306 	br	80075a4 <__ram_exceptions_end+0xf7f87364>
 8007b98:	d9800317 	ldw	r6,12(sp)
 8007b9c:	00800084 	movi	r2,2
 8007ba0:	11800216 	blt	r2,r6,8007bac <_dtoa_r+0x16c4>
 8007ba4:	d8800d17 	ldw	r2,52(sp)
 8007ba8:	003da606 	br	8007244 <__ram_exceptions_end+0xf7f87004>
 8007bac:	d8800d17 	ldw	r2,52(sp)
 8007bb0:	d8800615 	stw	r2,24(sp)
 8007bb4:	003e7b06 	br	80075a4 <__ram_exceptions_end+0xf7f87364>
 8007bb8:	05000044 	movi	r20,1
 8007bbc:	003b0506 	br	80067d4 <__ram_exceptions_end+0xf7f86594>
 8007bc0:	8009883a 	mov	r4,r16
 8007bc4:	80001115 	stw	zero,68(r16)
 8007bc8:	000b883a 	mov	r5,zero
 8007bcc:	80099ec0 	call	80099ec <_Balloc>
 8007bd0:	d8800715 	stw	r2,28(sp)
 8007bd4:	d8c00717 	ldw	r3,28(sp)
 8007bd8:	00bfffc4 	movi	r2,-1
 8007bdc:	01000044 	movi	r4,1
 8007be0:	d8800615 	stw	r2,24(sp)
 8007be4:	80c01015 	stw	r3,64(r16)
 8007be8:	d9000b15 	stw	r4,44(sp)
 8007bec:	d8002215 	stw	zero,136(sp)
 8007bf0:	d8800d15 	stw	r2,52(sp)
 8007bf4:	003c1906 	br	8006c5c <__ram_exceptions_end+0xf7f86a1c>
 8007bf8:	193d2926 	beq	r3,r4,80070a0 <__ram_exceptions_end+0xf7f86e60>
 8007bfc:	00c00f04 	movi	r3,60
 8007c00:	1885c83a 	sub	r2,r3,r2
 8007c04:	003d7b06 	br	80071f4 <__ram_exceptions_end+0xf7f86fb4>
 8007c08:	000b883a 	mov	r5,zero
 8007c0c:	003b1006 	br	8006850 <__ram_exceptions_end+0xf7f86610>

08007c10 <_fflush_r>:
 8007c10:	defffb04 	addi	sp,sp,-20
 8007c14:	dcc00315 	stw	r19,12(sp)
 8007c18:	dc000015 	stw	r16,0(sp)
 8007c1c:	dfc00415 	stw	ra,16(sp)
 8007c20:	dc800215 	stw	r18,8(sp)
 8007c24:	dc400115 	stw	r17,4(sp)
 8007c28:	2027883a 	mov	r19,r4
 8007c2c:	2821883a 	mov	r16,r5
 8007c30:	20000226 	beq	r4,zero,8007c3c <_fflush_r+0x2c>
 8007c34:	20800e17 	ldw	r2,56(r4)
 8007c38:	10005326 	beq	r2,zero,8007d88 <_fflush_r+0x178>
 8007c3c:	8080030b 	ldhu	r2,12(r16)
 8007c40:	10ffffcc 	andi	r3,r2,65535
 8007c44:	18e0001c 	xori	r3,r3,32768
 8007c48:	18e00004 	addi	r3,r3,-32768
 8007c4c:	18002c26 	beq	r3,zero,8007d00 <_fflush_r+0xf0>
 8007c50:	10c0020c 	andi	r3,r2,8
 8007c54:	1800321e 	bne	r3,zero,8007d20 <_fflush_r+0x110>
 8007c58:	80c00117 	ldw	r3,4(r16)
 8007c5c:	10820014 	ori	r2,r2,2048
 8007c60:	8080030d 	sth	r2,12(r16)
 8007c64:	00c0570e 	bge	zero,r3,8007dc4 <_fflush_r+0x1b4>
 8007c68:	82000a17 	ldw	r8,40(r16)
 8007c6c:	40002426 	beq	r8,zero,8007d00 <_fflush_r+0xf0>
 8007c70:	9c400017 	ldw	r17,0(r19)
 8007c74:	10c4000c 	andi	r3,r2,4096
 8007c78:	98000015 	stw	zero,0(r19)
 8007c7c:	18004626 	beq	r3,zero,8007d98 <_fflush_r+0x188>
 8007c80:	81801417 	ldw	r6,80(r16)
 8007c84:	10c0010c 	andi	r3,r2,4
 8007c88:	18000626 	beq	r3,zero,8007ca4 <_fflush_r+0x94>
 8007c8c:	80c00117 	ldw	r3,4(r16)
 8007c90:	80800c17 	ldw	r2,48(r16)
 8007c94:	30cdc83a 	sub	r6,r6,r3
 8007c98:	10000226 	beq	r2,zero,8007ca4 <_fflush_r+0x94>
 8007c9c:	80800f17 	ldw	r2,60(r16)
 8007ca0:	308dc83a 	sub	r6,r6,r2
 8007ca4:	81400717 	ldw	r5,28(r16)
 8007ca8:	9809883a 	mov	r4,r19
 8007cac:	000f883a 	mov	r7,zero
 8007cb0:	403ee83a 	callr	r8
 8007cb4:	00ffffc4 	movi	r3,-1
 8007cb8:	10c04526 	beq	r2,r3,8007dd0 <_fflush_r+0x1c0>
 8007cbc:	80c0030b 	ldhu	r3,12(r16)
 8007cc0:	81000417 	ldw	r4,16(r16)
 8007cc4:	80000115 	stw	zero,4(r16)
 8007cc8:	197dffcc 	andi	r5,r3,63487
 8007ccc:	8140030d 	sth	r5,12(r16)
 8007cd0:	81000015 	stw	r4,0(r16)
 8007cd4:	18c4000c 	andi	r3,r3,4096
 8007cd8:	18000126 	beq	r3,zero,8007ce0 <_fflush_r+0xd0>
 8007cdc:	80801415 	stw	r2,80(r16)
 8007ce0:	81400c17 	ldw	r5,48(r16)
 8007ce4:	9c400015 	stw	r17,0(r19)
 8007ce8:	28000526 	beq	r5,zero,8007d00 <_fflush_r+0xf0>
 8007cec:	80801004 	addi	r2,r16,64
 8007cf0:	28800226 	beq	r5,r2,8007cfc <_fflush_r+0xec>
 8007cf4:	9809883a 	mov	r4,r19
 8007cf8:	800832c0 	call	800832c <_free_r>
 8007cfc:	80000c15 	stw	zero,48(r16)
 8007d00:	0005883a 	mov	r2,zero
 8007d04:	dfc00417 	ldw	ra,16(sp)
 8007d08:	dcc00317 	ldw	r19,12(sp)
 8007d0c:	dc800217 	ldw	r18,8(sp)
 8007d10:	dc400117 	ldw	r17,4(sp)
 8007d14:	dc000017 	ldw	r16,0(sp)
 8007d18:	dec00504 	addi	sp,sp,20
 8007d1c:	f800283a 	ret
 8007d20:	84800417 	ldw	r18,16(r16)
 8007d24:	903ff626 	beq	r18,zero,8007d00 <__ram_exceptions_end+0xf7f87ac0>
 8007d28:	84400017 	ldw	r17,0(r16)
 8007d2c:	108000cc 	andi	r2,r2,3
 8007d30:	84800015 	stw	r18,0(r16)
 8007d34:	8ca3c83a 	sub	r17,r17,r18
 8007d38:	10001526 	beq	r2,zero,8007d90 <_fflush_r+0x180>
 8007d3c:	0005883a 	mov	r2,zero
 8007d40:	80800215 	stw	r2,8(r16)
 8007d44:	04400316 	blt	zero,r17,8007d54 <_fflush_r+0x144>
 8007d48:	003fed06 	br	8007d00 <__ram_exceptions_end+0xf7f87ac0>
 8007d4c:	90a5883a 	add	r18,r18,r2
 8007d50:	047feb0e 	bge	zero,r17,8007d00 <__ram_exceptions_end+0xf7f87ac0>
 8007d54:	80800917 	ldw	r2,36(r16)
 8007d58:	81400717 	ldw	r5,28(r16)
 8007d5c:	880f883a 	mov	r7,r17
 8007d60:	900d883a 	mov	r6,r18
 8007d64:	9809883a 	mov	r4,r19
 8007d68:	103ee83a 	callr	r2
 8007d6c:	88a3c83a 	sub	r17,r17,r2
 8007d70:	00bff616 	blt	zero,r2,8007d4c <__ram_exceptions_end+0xf7f87b0c>
 8007d74:	80c0030b 	ldhu	r3,12(r16)
 8007d78:	00bfffc4 	movi	r2,-1
 8007d7c:	18c01014 	ori	r3,r3,64
 8007d80:	80c0030d 	sth	r3,12(r16)
 8007d84:	003fdf06 	br	8007d04 <__ram_exceptions_end+0xf7f87ac4>
 8007d88:	80081b80 	call	80081b8 <__sinit>
 8007d8c:	003fab06 	br	8007c3c <__ram_exceptions_end+0xf7f879fc>
 8007d90:	80800517 	ldw	r2,20(r16)
 8007d94:	003fea06 	br	8007d40 <__ram_exceptions_end+0xf7f87b00>
 8007d98:	81400717 	ldw	r5,28(r16)
 8007d9c:	000d883a 	mov	r6,zero
 8007da0:	9809883a 	mov	r4,r19
 8007da4:	01c00044 	movi	r7,1
 8007da8:	403ee83a 	callr	r8
 8007dac:	100d883a 	mov	r6,r2
 8007db0:	00bfffc4 	movi	r2,-1
 8007db4:	30801326 	beq	r6,r2,8007e04 <_fflush_r+0x1f4>
 8007db8:	8080030b 	ldhu	r2,12(r16)
 8007dbc:	82000a17 	ldw	r8,40(r16)
 8007dc0:	003fb006 	br	8007c84 <__ram_exceptions_end+0xf7f87a44>
 8007dc4:	80c00f17 	ldw	r3,60(r16)
 8007dc8:	00ffa716 	blt	zero,r3,8007c68 <__ram_exceptions_end+0xf7f87a28>
 8007dcc:	003fcc06 	br	8007d00 <__ram_exceptions_end+0xf7f87ac0>
 8007dd0:	98c00017 	ldw	r3,0(r19)
 8007dd4:	183fb926 	beq	r3,zero,8007cbc <__ram_exceptions_end+0xf7f87a7c>
 8007dd8:	01000744 	movi	r4,29
 8007ddc:	19000226 	beq	r3,r4,8007de8 <_fflush_r+0x1d8>
 8007de0:	01000584 	movi	r4,22
 8007de4:	1900101e 	bne	r3,r4,8007e28 <_fflush_r+0x218>
 8007de8:	8080030b 	ldhu	r2,12(r16)
 8007dec:	80c00417 	ldw	r3,16(r16)
 8007df0:	80000115 	stw	zero,4(r16)
 8007df4:	10bdffcc 	andi	r2,r2,63487
 8007df8:	8080030d 	sth	r2,12(r16)
 8007dfc:	80c00015 	stw	r3,0(r16)
 8007e00:	003fb706 	br	8007ce0 <__ram_exceptions_end+0xf7f87aa0>
 8007e04:	98800017 	ldw	r2,0(r19)
 8007e08:	103feb26 	beq	r2,zero,8007db8 <__ram_exceptions_end+0xf7f87b78>
 8007e0c:	00c00744 	movi	r3,29
 8007e10:	10c00226 	beq	r2,r3,8007e1c <_fflush_r+0x20c>
 8007e14:	00c00584 	movi	r3,22
 8007e18:	10ffd61e 	bne	r2,r3,8007d74 <__ram_exceptions_end+0xf7f87b34>
 8007e1c:	9c400015 	stw	r17,0(r19)
 8007e20:	0005883a 	mov	r2,zero
 8007e24:	003fb706 	br	8007d04 <__ram_exceptions_end+0xf7f87ac4>
 8007e28:	80c0030b 	ldhu	r3,12(r16)
 8007e2c:	18c01014 	ori	r3,r3,64
 8007e30:	80c0030d 	sth	r3,12(r16)
 8007e34:	003fb306 	br	8007d04 <__ram_exceptions_end+0xf7f87ac4>

08007e38 <fflush>:
 8007e38:	20000526 	beq	r4,zero,8007e50 <fflush+0x18>
 8007e3c:	00820074 	movhi	r2,2049
 8007e40:	10914804 	addi	r2,r2,17696
 8007e44:	200b883a 	mov	r5,r4
 8007e48:	11000017 	ldw	r4,0(r2)
 8007e4c:	8007c101 	jmpi	8007c10 <_fflush_r>
 8007e50:	00820074 	movhi	r2,2049
 8007e54:	10914704 	addi	r2,r2,17692
 8007e58:	11000017 	ldw	r4,0(r2)
 8007e5c:	01420034 	movhi	r5,2048
 8007e60:	295f0404 	addi	r5,r5,31760
 8007e64:	8008b781 	jmpi	8008b78 <_fwalk_reent>

08007e68 <__fp_lock>:
 8007e68:	0005883a 	mov	r2,zero
 8007e6c:	f800283a 	ret

08007e70 <__fp_unlock>:
 8007e70:	0005883a 	mov	r2,zero
 8007e74:	f800283a 	ret

08007e78 <_cleanup_r>:
 8007e78:	01420074 	movhi	r5,2049
 8007e7c:	2972e804 	addi	r5,r5,-13408
 8007e80:	8008ac01 	jmpi	8008ac0 <_fwalk>

08007e84 <__sinit.part.1>:
 8007e84:	defff604 	addi	sp,sp,-40
 8007e88:	00c20034 	movhi	r3,2048
 8007e8c:	dfc00915 	stw	ra,36(sp)
 8007e90:	df000815 	stw	fp,32(sp)
 8007e94:	ddc00715 	stw	r23,28(sp)
 8007e98:	dd800615 	stw	r22,24(sp)
 8007e9c:	dd400515 	stw	r21,20(sp)
 8007ea0:	dd000415 	stw	r20,16(sp)
 8007ea4:	dcc00315 	stw	r19,12(sp)
 8007ea8:	dc800215 	stw	r18,8(sp)
 8007eac:	dc400115 	stw	r17,4(sp)
 8007eb0:	dc000015 	stw	r16,0(sp)
 8007eb4:	18df9e04 	addi	r3,r3,32376
 8007eb8:	24000117 	ldw	r16,4(r4)
 8007ebc:	20c00f15 	stw	r3,60(r4)
 8007ec0:	07000044 	movi	fp,1
 8007ec4:	00c000c4 	movi	r3,3
 8007ec8:	2080bb04 	addi	r2,r4,748
 8007ecc:	20c0b915 	stw	r3,740(r4)
 8007ed0:	27000e15 	stw	fp,56(r4)
 8007ed4:	2080ba15 	stw	r2,744(r4)
 8007ed8:	2000b815 	stw	zero,736(r4)
 8007edc:	05c00204 	movi	r23,8
 8007ee0:	00800104 	movi	r2,4
 8007ee4:	2025883a 	mov	r18,r4
 8007ee8:	b80d883a 	mov	r6,r23
 8007eec:	81001704 	addi	r4,r16,92
 8007ef0:	000b883a 	mov	r5,zero
 8007ef4:	80000015 	stw	zero,0(r16)
 8007ef8:	80000115 	stw	zero,4(r16)
 8007efc:	80000215 	stw	zero,8(r16)
 8007f00:	8080030d 	sth	r2,12(r16)
 8007f04:	80001915 	stw	zero,100(r16)
 8007f08:	8000038d 	sth	zero,14(r16)
 8007f0c:	80000415 	stw	zero,16(r16)
 8007f10:	80000515 	stw	zero,20(r16)
 8007f14:	80000615 	stw	zero,24(r16)
 8007f18:	8003e880 	call	8003e88 <memset>
 8007f1c:	05820074 	movhi	r22,2049
 8007f20:	94400217 	ldw	r17,8(r18)
 8007f24:	05420074 	movhi	r21,2049
 8007f28:	05020074 	movhi	r20,2049
 8007f2c:	04c20074 	movhi	r19,2049
 8007f30:	b5ac5204 	addi	r22,r22,-20152
 8007f34:	ad6c6904 	addi	r21,r21,-20060
 8007f38:	a52c8804 	addi	r20,r20,-19936
 8007f3c:	9cec9f04 	addi	r19,r19,-19844
 8007f40:	85800815 	stw	r22,32(r16)
 8007f44:	85400915 	stw	r21,36(r16)
 8007f48:	85000a15 	stw	r20,40(r16)
 8007f4c:	84c00b15 	stw	r19,44(r16)
 8007f50:	84000715 	stw	r16,28(r16)
 8007f54:	00800284 	movi	r2,10
 8007f58:	89001704 	addi	r4,r17,92
 8007f5c:	b80d883a 	mov	r6,r23
 8007f60:	000b883a 	mov	r5,zero
 8007f64:	88000015 	stw	zero,0(r17)
 8007f68:	88000115 	stw	zero,4(r17)
 8007f6c:	88000215 	stw	zero,8(r17)
 8007f70:	8880030d 	sth	r2,12(r17)
 8007f74:	88001915 	stw	zero,100(r17)
 8007f78:	8f00038d 	sth	fp,14(r17)
 8007f7c:	88000415 	stw	zero,16(r17)
 8007f80:	88000515 	stw	zero,20(r17)
 8007f84:	88000615 	stw	zero,24(r17)
 8007f88:	8003e880 	call	8003e88 <memset>
 8007f8c:	94000317 	ldw	r16,12(r18)
 8007f90:	00800484 	movi	r2,18
 8007f94:	8c400715 	stw	r17,28(r17)
 8007f98:	8d800815 	stw	r22,32(r17)
 8007f9c:	8d400915 	stw	r21,36(r17)
 8007fa0:	8d000a15 	stw	r20,40(r17)
 8007fa4:	8cc00b15 	stw	r19,44(r17)
 8007fa8:	8080030d 	sth	r2,12(r16)
 8007fac:	00800084 	movi	r2,2
 8007fb0:	80000015 	stw	zero,0(r16)
 8007fb4:	80000115 	stw	zero,4(r16)
 8007fb8:	80000215 	stw	zero,8(r16)
 8007fbc:	80001915 	stw	zero,100(r16)
 8007fc0:	8080038d 	sth	r2,14(r16)
 8007fc4:	80000415 	stw	zero,16(r16)
 8007fc8:	80000515 	stw	zero,20(r16)
 8007fcc:	80000615 	stw	zero,24(r16)
 8007fd0:	81001704 	addi	r4,r16,92
 8007fd4:	000b883a 	mov	r5,zero
 8007fd8:	b80d883a 	mov	r6,r23
 8007fdc:	8003e880 	call	8003e88 <memset>
 8007fe0:	84000715 	stw	r16,28(r16)
 8007fe4:	85800815 	stw	r22,32(r16)
 8007fe8:	85400915 	stw	r21,36(r16)
 8007fec:	85000a15 	stw	r20,40(r16)
 8007ff0:	84c00b15 	stw	r19,44(r16)
 8007ff4:	dfc00917 	ldw	ra,36(sp)
 8007ff8:	df000817 	ldw	fp,32(sp)
 8007ffc:	ddc00717 	ldw	r23,28(sp)
 8008000:	dd800617 	ldw	r22,24(sp)
 8008004:	dd400517 	ldw	r21,20(sp)
 8008008:	dd000417 	ldw	r20,16(sp)
 800800c:	dcc00317 	ldw	r19,12(sp)
 8008010:	dc800217 	ldw	r18,8(sp)
 8008014:	dc400117 	ldw	r17,4(sp)
 8008018:	dc000017 	ldw	r16,0(sp)
 800801c:	dec00a04 	addi	sp,sp,40
 8008020:	f800283a 	ret

08008024 <__sfmoreglue>:
 8008024:	defffc04 	addi	sp,sp,-16
 8008028:	dc400115 	stw	r17,4(sp)
 800802c:	2c401a24 	muli	r17,r5,104
 8008030:	dc800215 	stw	r18,8(sp)
 8008034:	2825883a 	mov	r18,r5
 8008038:	89400304 	addi	r5,r17,12
 800803c:	dc000015 	stw	r16,0(sp)
 8008040:	dfc00315 	stw	ra,12(sp)
 8008044:	8008ec80 	call	8008ec8 <_malloc_r>
 8008048:	1021883a 	mov	r16,r2
 800804c:	10000726 	beq	r2,zero,800806c <__sfmoreglue+0x48>
 8008050:	11000304 	addi	r4,r2,12
 8008054:	10000015 	stw	zero,0(r2)
 8008058:	14800115 	stw	r18,4(r2)
 800805c:	11000215 	stw	r4,8(r2)
 8008060:	000b883a 	mov	r5,zero
 8008064:	880d883a 	mov	r6,r17
 8008068:	8003e880 	call	8003e88 <memset>
 800806c:	8005883a 	mov	r2,r16
 8008070:	dfc00317 	ldw	ra,12(sp)
 8008074:	dc800217 	ldw	r18,8(sp)
 8008078:	dc400117 	ldw	r17,4(sp)
 800807c:	dc000017 	ldw	r16,0(sp)
 8008080:	dec00404 	addi	sp,sp,16
 8008084:	f800283a 	ret

08008088 <__sfp>:
 8008088:	00820074 	movhi	r2,2049
 800808c:	defffb04 	addi	sp,sp,-20
 8008090:	10914704 	addi	r2,r2,17692
 8008094:	dc800215 	stw	r18,8(sp)
 8008098:	14800017 	ldw	r18,0(r2)
 800809c:	dcc00315 	stw	r19,12(sp)
 80080a0:	dfc00415 	stw	ra,16(sp)
 80080a4:	90800e17 	ldw	r2,56(r18)
 80080a8:	dc400115 	stw	r17,4(sp)
 80080ac:	dc000015 	stw	r16,0(sp)
 80080b0:	2027883a 	mov	r19,r4
 80080b4:	1000021e 	bne	r2,zero,80080c0 <__sfp+0x38>
 80080b8:	9009883a 	mov	r4,r18
 80080bc:	8007e840 	call	8007e84 <__sinit.part.1>
 80080c0:	9480b804 	addi	r18,r18,736
 80080c4:	047fffc4 	movi	r17,-1
 80080c8:	91400117 	ldw	r5,4(r18)
 80080cc:	94000217 	ldw	r16,8(r18)
 80080d0:	297fffc4 	addi	r5,r5,-1
 80080d4:	28000a16 	blt	r5,zero,8008100 <__sfp+0x78>
 80080d8:	8080030f 	ldh	r2,12(r16)
 80080dc:	10000c26 	beq	r2,zero,8008110 <__sfp+0x88>
 80080e0:	80c01d04 	addi	r3,r16,116
 80080e4:	00000206 	br	80080f0 <__sfp+0x68>
 80080e8:	18bfe60f 	ldh	r2,-104(r3)
 80080ec:	10000826 	beq	r2,zero,8008110 <__sfp+0x88>
 80080f0:	297fffc4 	addi	r5,r5,-1
 80080f4:	1c3ffd04 	addi	r16,r3,-12
 80080f8:	18c01a04 	addi	r3,r3,104
 80080fc:	2c7ffa1e 	bne	r5,r17,80080e8 <__ram_exceptions_end+0xf7f87ea8>
 8008100:	90800017 	ldw	r2,0(r18)
 8008104:	10001d26 	beq	r2,zero,800817c <__sfp+0xf4>
 8008108:	1025883a 	mov	r18,r2
 800810c:	003fee06 	br	80080c8 <__ram_exceptions_end+0xf7f87e88>
 8008110:	00bfffc4 	movi	r2,-1
 8008114:	8080038d 	sth	r2,14(r16)
 8008118:	00800044 	movi	r2,1
 800811c:	8080030d 	sth	r2,12(r16)
 8008120:	80001915 	stw	zero,100(r16)
 8008124:	80000015 	stw	zero,0(r16)
 8008128:	80000215 	stw	zero,8(r16)
 800812c:	80000115 	stw	zero,4(r16)
 8008130:	80000415 	stw	zero,16(r16)
 8008134:	80000515 	stw	zero,20(r16)
 8008138:	80000615 	stw	zero,24(r16)
 800813c:	81001704 	addi	r4,r16,92
 8008140:	000b883a 	mov	r5,zero
 8008144:	01800204 	movi	r6,8
 8008148:	8003e880 	call	8003e88 <memset>
 800814c:	8005883a 	mov	r2,r16
 8008150:	80000c15 	stw	zero,48(r16)
 8008154:	80000d15 	stw	zero,52(r16)
 8008158:	80001115 	stw	zero,68(r16)
 800815c:	80001215 	stw	zero,72(r16)
 8008160:	dfc00417 	ldw	ra,16(sp)
 8008164:	dcc00317 	ldw	r19,12(sp)
 8008168:	dc800217 	ldw	r18,8(sp)
 800816c:	dc400117 	ldw	r17,4(sp)
 8008170:	dc000017 	ldw	r16,0(sp)
 8008174:	dec00504 	addi	sp,sp,20
 8008178:	f800283a 	ret
 800817c:	9809883a 	mov	r4,r19
 8008180:	01400104 	movi	r5,4
 8008184:	80080240 	call	8008024 <__sfmoreglue>
 8008188:	90800015 	stw	r2,0(r18)
 800818c:	103fde1e 	bne	r2,zero,8008108 <__ram_exceptions_end+0xf7f87ec8>
 8008190:	00800304 	movi	r2,12
 8008194:	98800015 	stw	r2,0(r19)
 8008198:	0005883a 	mov	r2,zero
 800819c:	003ff006 	br	8008160 <__ram_exceptions_end+0xf7f87f20>

080081a0 <_cleanup>:
 80081a0:	00820074 	movhi	r2,2049
 80081a4:	10914704 	addi	r2,r2,17692
 80081a8:	11000017 	ldw	r4,0(r2)
 80081ac:	01420074 	movhi	r5,2049
 80081b0:	2972e804 	addi	r5,r5,-13408
 80081b4:	8008ac01 	jmpi	8008ac0 <_fwalk>

080081b8 <__sinit>:
 80081b8:	20800e17 	ldw	r2,56(r4)
 80081bc:	10000126 	beq	r2,zero,80081c4 <__sinit+0xc>
 80081c0:	f800283a 	ret
 80081c4:	8007e841 	jmpi	8007e84 <__sinit.part.1>

080081c8 <__sfp_lock_acquire>:
 80081c8:	f800283a 	ret

080081cc <__sfp_lock_release>:
 80081cc:	f800283a 	ret

080081d0 <__sinit_lock_acquire>:
 80081d0:	f800283a 	ret

080081d4 <__sinit_lock_release>:
 80081d4:	f800283a 	ret

080081d8 <__fp_lock_all>:
 80081d8:	00820074 	movhi	r2,2049
 80081dc:	10914804 	addi	r2,r2,17696
 80081e0:	11000017 	ldw	r4,0(r2)
 80081e4:	01420034 	movhi	r5,2048
 80081e8:	295f9a04 	addi	r5,r5,32360
 80081ec:	8008ac01 	jmpi	8008ac0 <_fwalk>

080081f0 <__fp_unlock_all>:
 80081f0:	00820074 	movhi	r2,2049
 80081f4:	10914804 	addi	r2,r2,17696
 80081f8:	11000017 	ldw	r4,0(r2)
 80081fc:	01420034 	movhi	r5,2048
 8008200:	295f9c04 	addi	r5,r5,32368
 8008204:	8008ac01 	jmpi	8008ac0 <_fwalk>

08008208 <_malloc_trim_r>:
 8008208:	defffb04 	addi	sp,sp,-20
 800820c:	dcc00315 	stw	r19,12(sp)
 8008210:	04c20074 	movhi	r19,2049
 8008214:	dc800215 	stw	r18,8(sp)
 8008218:	dc400115 	stw	r17,4(sp)
 800821c:	dc000015 	stw	r16,0(sp)
 8008220:	dfc00415 	stw	ra,16(sp)
 8008224:	2821883a 	mov	r16,r5
 8008228:	9ccbb904 	addi	r19,r19,12004
 800822c:	2025883a 	mov	r18,r4
 8008230:	800fd600 	call	800fd60 <__malloc_lock>
 8008234:	98800217 	ldw	r2,8(r19)
 8008238:	14400117 	ldw	r17,4(r2)
 800823c:	00bfff04 	movi	r2,-4
 8008240:	88a2703a 	and	r17,r17,r2
 8008244:	8c21c83a 	sub	r16,r17,r16
 8008248:	8403fbc4 	addi	r16,r16,4079
 800824c:	8020d33a 	srli	r16,r16,12
 8008250:	0083ffc4 	movi	r2,4095
 8008254:	843fffc4 	addi	r16,r16,-1
 8008258:	8020933a 	slli	r16,r16,12
 800825c:	1400060e 	bge	r2,r16,8008278 <_malloc_trim_r+0x70>
 8008260:	9009883a 	mov	r4,r18
 8008264:	000b883a 	mov	r5,zero
 8008268:	800b0f40 	call	800b0f4 <_sbrk_r>
 800826c:	98c00217 	ldw	r3,8(r19)
 8008270:	1c47883a 	add	r3,r3,r17
 8008274:	10c00a26 	beq	r2,r3,80082a0 <_malloc_trim_r+0x98>
 8008278:	9009883a 	mov	r4,r18
 800827c:	800fd800 	call	800fd80 <__malloc_unlock>
 8008280:	0005883a 	mov	r2,zero
 8008284:	dfc00417 	ldw	ra,16(sp)
 8008288:	dcc00317 	ldw	r19,12(sp)
 800828c:	dc800217 	ldw	r18,8(sp)
 8008290:	dc400117 	ldw	r17,4(sp)
 8008294:	dc000017 	ldw	r16,0(sp)
 8008298:	dec00504 	addi	sp,sp,20
 800829c:	f800283a 	ret
 80082a0:	9009883a 	mov	r4,r18
 80082a4:	040bc83a 	sub	r5,zero,r16
 80082a8:	800b0f40 	call	800b0f4 <_sbrk_r>
 80082ac:	00ffffc4 	movi	r3,-1
 80082b0:	10c00d26 	beq	r2,r3,80082e8 <_malloc_trim_r+0xe0>
 80082b4:	00c20074 	movhi	r3,2049
 80082b8:	18d82b04 	addi	r3,r3,24748
 80082bc:	18800017 	ldw	r2,0(r3)
 80082c0:	99000217 	ldw	r4,8(r19)
 80082c4:	8c23c83a 	sub	r17,r17,r16
 80082c8:	8c400054 	ori	r17,r17,1
 80082cc:	1421c83a 	sub	r16,r2,r16
 80082d0:	24400115 	stw	r17,4(r4)
 80082d4:	9009883a 	mov	r4,r18
 80082d8:	1c000015 	stw	r16,0(r3)
 80082dc:	800fd800 	call	800fd80 <__malloc_unlock>
 80082e0:	00800044 	movi	r2,1
 80082e4:	003fe706 	br	8008284 <__ram_exceptions_end+0xf7f88044>
 80082e8:	9009883a 	mov	r4,r18
 80082ec:	000b883a 	mov	r5,zero
 80082f0:	800b0f40 	call	800b0f4 <_sbrk_r>
 80082f4:	99000217 	ldw	r4,8(r19)
 80082f8:	014003c4 	movi	r5,15
 80082fc:	1107c83a 	sub	r3,r2,r4
 8008300:	28ffdd0e 	bge	r5,r3,8008278 <__ram_exceptions_end+0xf7f88038>
 8008304:	01420074 	movhi	r5,2049
 8008308:	29514a04 	addi	r5,r5,17704
 800830c:	29400017 	ldw	r5,0(r5)
 8008310:	18c00054 	ori	r3,r3,1
 8008314:	20c00115 	stw	r3,4(r4)
 8008318:	00c20074 	movhi	r3,2049
 800831c:	1145c83a 	sub	r2,r2,r5
 8008320:	18d82b04 	addi	r3,r3,24748
 8008324:	18800015 	stw	r2,0(r3)
 8008328:	003fd306 	br	8008278 <__ram_exceptions_end+0xf7f88038>

0800832c <_free_r>:
 800832c:	28004c26 	beq	r5,zero,8008460 <_free_r+0x134>
 8008330:	defffd04 	addi	sp,sp,-12
 8008334:	dc400115 	stw	r17,4(sp)
 8008338:	dc000015 	stw	r16,0(sp)
 800833c:	2023883a 	mov	r17,r4
 8008340:	2821883a 	mov	r16,r5
 8008344:	dfc00215 	stw	ra,8(sp)
 8008348:	800fd600 	call	800fd60 <__malloc_lock>
 800834c:	813fff17 	ldw	r4,-4(r16)
 8008350:	00bfff84 	movi	r2,-2
 8008354:	02420074 	movhi	r9,2049
 8008358:	81bffe04 	addi	r6,r16,-8
 800835c:	2084703a 	and	r2,r4,r2
 8008360:	4a4bb904 	addi	r9,r9,12004
 8008364:	308b883a 	add	r5,r6,r2
 8008368:	2a000117 	ldw	r8,4(r5)
 800836c:	49c00217 	ldw	r7,8(r9)
 8008370:	00ffff04 	movi	r3,-4
 8008374:	40c6703a 	and	r3,r8,r3
 8008378:	39405326 	beq	r7,r5,80084c8 <_free_r+0x19c>
 800837c:	28c00115 	stw	r3,4(r5)
 8008380:	2100004c 	andi	r4,r4,1
 8008384:	2000091e 	bne	r4,zero,80083ac <_free_r+0x80>
 8008388:	81fffe17 	ldw	r7,-8(r16)
 800838c:	4a000204 	addi	r8,r9,8
 8008390:	31cdc83a 	sub	r6,r6,r7
 8008394:	31000217 	ldw	r4,8(r6)
 8008398:	11c5883a 	add	r2,r2,r7
 800839c:	22006126 	beq	r4,r8,8008524 <_free_r+0x1f8>
 80083a0:	31c00317 	ldw	r7,12(r6)
 80083a4:	21c00315 	stw	r7,12(r4)
 80083a8:	39000215 	stw	r4,8(r7)
 80083ac:	28c9883a 	add	r4,r5,r3
 80083b0:	21c00117 	ldw	r7,4(r4)
 80083b4:	39c0004c 	andi	r7,r7,1
 80083b8:	38000d1e 	bne	r7,zero,80083f0 <_free_r+0xc4>
 80083bc:	29000217 	ldw	r4,8(r5)
 80083c0:	10c5883a 	add	r2,r2,r3
 80083c4:	00c20074 	movhi	r3,2049
 80083c8:	18cbbb04 	addi	r3,r3,12012
 80083cc:	20c07526 	beq	r4,r3,80085a4 <_free_r+0x278>
 80083d0:	29c00317 	ldw	r7,12(r5)
 80083d4:	11400054 	ori	r5,r2,1
 80083d8:	3087883a 	add	r3,r6,r2
 80083dc:	21c00315 	stw	r7,12(r4)
 80083e0:	39000215 	stw	r4,8(r7)
 80083e4:	31400115 	stw	r5,4(r6)
 80083e8:	18800015 	stw	r2,0(r3)
 80083ec:	00000406 	br	8008400 <_free_r+0xd4>
 80083f0:	10c00054 	ori	r3,r2,1
 80083f4:	30c00115 	stw	r3,4(r6)
 80083f8:	3087883a 	add	r3,r6,r2
 80083fc:	18800015 	stw	r2,0(r3)
 8008400:	00c07fc4 	movi	r3,511
 8008404:	18801736 	bltu	r3,r2,8008464 <_free_r+0x138>
 8008408:	1004d0fa 	srli	r2,r2,3
 800840c:	01400044 	movi	r5,1
 8008410:	49000117 	ldw	r4,4(r9)
 8008414:	1087883a 	add	r3,r2,r2
 8008418:	18c7883a 	add	r3,r3,r3
 800841c:	1005d0ba 	srai	r2,r2,2
 8008420:	18c7883a 	add	r3,r3,r3
 8008424:	1a47883a 	add	r3,r3,r9
 8008428:	19c00217 	ldw	r7,8(r3)
 800842c:	2884983a 	sll	r2,r5,r2
 8008430:	30c00315 	stw	r3,12(r6)
 8008434:	31c00215 	stw	r7,8(r6)
 8008438:	1104b03a 	or	r2,r2,r4
 800843c:	19800215 	stw	r6,8(r3)
 8008440:	48800115 	stw	r2,4(r9)
 8008444:	39800315 	stw	r6,12(r7)
 8008448:	8809883a 	mov	r4,r17
 800844c:	dfc00217 	ldw	ra,8(sp)
 8008450:	dc400117 	ldw	r17,4(sp)
 8008454:	dc000017 	ldw	r16,0(sp)
 8008458:	dec00304 	addi	sp,sp,12
 800845c:	800fd801 	jmpi	800fd80 <__malloc_unlock>
 8008460:	f800283a 	ret
 8008464:	1006d27a 	srli	r3,r2,9
 8008468:	01000104 	movi	r4,4
 800846c:	20c04036 	bltu	r4,r3,8008570 <_free_r+0x244>
 8008470:	1006d1ba 	srli	r3,r2,6
 8008474:	19400e04 	addi	r5,r3,56
 8008478:	2947883a 	add	r3,r5,r5
 800847c:	18c7883a 	add	r3,r3,r3
 8008480:	18c7883a 	add	r3,r3,r3
 8008484:	1a49883a 	add	r4,r3,r9
 8008488:	20c00217 	ldw	r3,8(r4)
 800848c:	01c20074 	movhi	r7,2049
 8008490:	39cbb904 	addi	r7,r7,12004
 8008494:	19003b26 	beq	r3,r4,8008584 <_free_r+0x258>
 8008498:	01ffff04 	movi	r7,-4
 800849c:	19400117 	ldw	r5,4(r3)
 80084a0:	29ca703a 	and	r5,r5,r7
 80084a4:	1140022e 	bgeu	r2,r5,80084b0 <_free_r+0x184>
 80084a8:	18c00217 	ldw	r3,8(r3)
 80084ac:	20fffb1e 	bne	r4,r3,800849c <__ram_exceptions_end+0xf7f8825c>
 80084b0:	18800317 	ldw	r2,12(r3)
 80084b4:	30800315 	stw	r2,12(r6)
 80084b8:	30c00215 	stw	r3,8(r6)
 80084bc:	11800215 	stw	r6,8(r2)
 80084c0:	19800315 	stw	r6,12(r3)
 80084c4:	003fe006 	br	8008448 <__ram_exceptions_end+0xf7f88208>
 80084c8:	2100004c 	andi	r4,r4,1
 80084cc:	1885883a 	add	r2,r3,r2
 80084d0:	2000071e 	bne	r4,zero,80084f0 <_free_r+0x1c4>
 80084d4:	817ffe17 	ldw	r5,-8(r16)
 80084d8:	314dc83a 	sub	r6,r6,r5
 80084dc:	30c00317 	ldw	r3,12(r6)
 80084e0:	31000217 	ldw	r4,8(r6)
 80084e4:	1145883a 	add	r2,r2,r5
 80084e8:	20c00315 	stw	r3,12(r4)
 80084ec:	19000215 	stw	r4,8(r3)
 80084f0:	10c00054 	ori	r3,r2,1
 80084f4:	30c00115 	stw	r3,4(r6)
 80084f8:	00c20074 	movhi	r3,2049
 80084fc:	18d14b04 	addi	r3,r3,17708
 8008500:	18c00017 	ldw	r3,0(r3)
 8008504:	49800215 	stw	r6,8(r9)
 8008508:	10ffcf36 	bltu	r2,r3,8008448 <__ram_exceptions_end+0xf7f88208>
 800850c:	00820074 	movhi	r2,2049
 8008510:	10982204 	addi	r2,r2,24712
 8008514:	11400017 	ldw	r5,0(r2)
 8008518:	8809883a 	mov	r4,r17
 800851c:	80082080 	call	8008208 <_malloc_trim_r>
 8008520:	003fc906 	br	8008448 <__ram_exceptions_end+0xf7f88208>
 8008524:	28c9883a 	add	r4,r5,r3
 8008528:	21000117 	ldw	r4,4(r4)
 800852c:	2100004c 	andi	r4,r4,1
 8008530:	20000a1e 	bne	r4,zero,800855c <_free_r+0x230>
 8008534:	29000317 	ldw	r4,12(r5)
 8008538:	29400217 	ldw	r5,8(r5)
 800853c:	10c5883a 	add	r2,r2,r3
 8008540:	10c00054 	ori	r3,r2,1
 8008544:	29000315 	stw	r4,12(r5)
 8008548:	21400215 	stw	r5,8(r4)
 800854c:	30c00115 	stw	r3,4(r6)
 8008550:	308d883a 	add	r6,r6,r2
 8008554:	30800015 	stw	r2,0(r6)
 8008558:	003fbb06 	br	8008448 <__ram_exceptions_end+0xf7f88208>
 800855c:	10c00054 	ori	r3,r2,1
 8008560:	30c00115 	stw	r3,4(r6)
 8008564:	308d883a 	add	r6,r6,r2
 8008568:	30800015 	stw	r2,0(r6)
 800856c:	003fb606 	br	8008448 <__ram_exceptions_end+0xf7f88208>
 8008570:	01000504 	movi	r4,20
 8008574:	20c01436 	bltu	r4,r3,80085c8 <_free_r+0x29c>
 8008578:	194016c4 	addi	r5,r3,91
 800857c:	2947883a 	add	r3,r5,r5
 8008580:	003fbe06 	br	800847c <__ram_exceptions_end+0xf7f8823c>
 8008584:	280bd0ba 	srai	r5,r5,2
 8008588:	00800044 	movi	r2,1
 800858c:	39000117 	ldw	r4,4(r7)
 8008590:	114a983a 	sll	r5,r2,r5
 8008594:	1805883a 	mov	r2,r3
 8008598:	2908b03a 	or	r4,r5,r4
 800859c:	39000115 	stw	r4,4(r7)
 80085a0:	003fc406 	br	80084b4 <__ram_exceptions_end+0xf7f88274>
 80085a4:	49800515 	stw	r6,20(r9)
 80085a8:	49800415 	stw	r6,16(r9)
 80085ac:	10c00054 	ori	r3,r2,1
 80085b0:	31000315 	stw	r4,12(r6)
 80085b4:	31000215 	stw	r4,8(r6)
 80085b8:	30c00115 	stw	r3,4(r6)
 80085bc:	308d883a 	add	r6,r6,r2
 80085c0:	30800015 	stw	r2,0(r6)
 80085c4:	003fa006 	br	8008448 <__ram_exceptions_end+0xf7f88208>
 80085c8:	01001504 	movi	r4,84
 80085cc:	20c00436 	bltu	r4,r3,80085e0 <_free_r+0x2b4>
 80085d0:	1006d33a 	srli	r3,r2,12
 80085d4:	19401b84 	addi	r5,r3,110
 80085d8:	2947883a 	add	r3,r5,r5
 80085dc:	003fa706 	br	800847c <__ram_exceptions_end+0xf7f8823c>
 80085e0:	01005504 	movi	r4,340
 80085e4:	20c00436 	bltu	r4,r3,80085f8 <_free_r+0x2cc>
 80085e8:	1006d3fa 	srli	r3,r2,15
 80085ec:	19401dc4 	addi	r5,r3,119
 80085f0:	2947883a 	add	r3,r5,r5
 80085f4:	003fa106 	br	800847c <__ram_exceptions_end+0xf7f8823c>
 80085f8:	01015504 	movi	r4,1364
 80085fc:	20c00436 	bltu	r4,r3,8008610 <_free_r+0x2e4>
 8008600:	1006d4ba 	srli	r3,r2,18
 8008604:	19401f04 	addi	r5,r3,124
 8008608:	2947883a 	add	r3,r5,r5
 800860c:	003f9b06 	br	800847c <__ram_exceptions_end+0xf7f8823c>
 8008610:	00c03f04 	movi	r3,252
 8008614:	01401f84 	movi	r5,126
 8008618:	003f9806 	br	800847c <__ram_exceptions_end+0xf7f8823c>

0800861c <__sfvwrite_r>:
 800861c:	30800217 	ldw	r2,8(r6)
 8008620:	10004526 	beq	r2,zero,8008738 <__sfvwrite_r+0x11c>
 8008624:	28c0030b 	ldhu	r3,12(r5)
 8008628:	defff404 	addi	sp,sp,-48
 800862c:	dd400715 	stw	r21,28(sp)
 8008630:	dcc00515 	stw	r19,20(sp)
 8008634:	dc000215 	stw	r16,8(sp)
 8008638:	dfc00b15 	stw	ra,44(sp)
 800863c:	df000a15 	stw	fp,40(sp)
 8008640:	ddc00915 	stw	r23,36(sp)
 8008644:	dd800815 	stw	r22,32(sp)
 8008648:	dd000615 	stw	r20,24(sp)
 800864c:	dc800415 	stw	r18,16(sp)
 8008650:	dc400315 	stw	r17,12(sp)
 8008654:	1880020c 	andi	r2,r3,8
 8008658:	2821883a 	mov	r16,r5
 800865c:	202b883a 	mov	r21,r4
 8008660:	3027883a 	mov	r19,r6
 8008664:	10002526 	beq	r2,zero,80086fc <__sfvwrite_r+0xe0>
 8008668:	28800417 	ldw	r2,16(r5)
 800866c:	10002326 	beq	r2,zero,80086fc <__sfvwrite_r+0xe0>
 8008670:	1880008c 	andi	r2,r3,2
 8008674:	9c400017 	ldw	r17,0(r19)
 8008678:	10003126 	beq	r2,zero,8008740 <__sfvwrite_r+0x124>
 800867c:	0029883a 	mov	r20,zero
 8008680:	0025883a 	mov	r18,zero
 8008684:	05810004 	movi	r22,1024
 8008688:	a00d883a 	mov	r6,r20
 800868c:	a809883a 	mov	r4,r21
 8008690:	90002526 	beq	r18,zero,8008728 <__sfvwrite_r+0x10c>
 8008694:	900f883a 	mov	r7,r18
 8008698:	81400717 	ldw	r5,28(r16)
 800869c:	b480012e 	bgeu	r22,r18,80086a4 <__sfvwrite_r+0x88>
 80086a0:	01c10004 	movi	r7,1024
 80086a4:	80800917 	ldw	r2,36(r16)
 80086a8:	103ee83a 	callr	r2
 80086ac:	0080510e 	bge	zero,r2,80087f4 <__sfvwrite_r+0x1d8>
 80086b0:	98c00217 	ldw	r3,8(r19)
 80086b4:	a0a9883a 	add	r20,r20,r2
 80086b8:	90a5c83a 	sub	r18,r18,r2
 80086bc:	1885c83a 	sub	r2,r3,r2
 80086c0:	98800215 	stw	r2,8(r19)
 80086c4:	103ff01e 	bne	r2,zero,8008688 <__ram_exceptions_end+0xf7f88448>
 80086c8:	0005883a 	mov	r2,zero
 80086cc:	dfc00b17 	ldw	ra,44(sp)
 80086d0:	df000a17 	ldw	fp,40(sp)
 80086d4:	ddc00917 	ldw	r23,36(sp)
 80086d8:	dd800817 	ldw	r22,32(sp)
 80086dc:	dd400717 	ldw	r21,28(sp)
 80086e0:	dd000617 	ldw	r20,24(sp)
 80086e4:	dcc00517 	ldw	r19,20(sp)
 80086e8:	dc800417 	ldw	r18,16(sp)
 80086ec:	dc400317 	ldw	r17,12(sp)
 80086f0:	dc000217 	ldw	r16,8(sp)
 80086f4:	dec00c04 	addi	sp,sp,48
 80086f8:	f800283a 	ret
 80086fc:	a809883a 	mov	r4,r21
 8008700:	800b883a 	mov	r5,r16
 8008704:	80061b80 	call	80061b8 <__swsetup_r>
 8008708:	80c0030b 	ldhu	r3,12(r16)
 800870c:	103fd826 	beq	r2,zero,8008670 <__ram_exceptions_end+0xf7f88430>
 8008710:	18c01014 	ori	r3,r3,64
 8008714:	80c0030d 	sth	r3,12(r16)
 8008718:	00c00244 	movi	r3,9
 800871c:	00bfffc4 	movi	r2,-1
 8008720:	a8c00015 	stw	r3,0(r21)
 8008724:	003fe906 	br	80086cc <__ram_exceptions_end+0xf7f8848c>
 8008728:	8d000017 	ldw	r20,0(r17)
 800872c:	8c800117 	ldw	r18,4(r17)
 8008730:	8c400204 	addi	r17,r17,8
 8008734:	003fd406 	br	8008688 <__ram_exceptions_end+0xf7f88448>
 8008738:	0005883a 	mov	r2,zero
 800873c:	f800283a 	ret
 8008740:	1880004c 	andi	r2,r3,1
 8008744:	1000301e 	bne	r2,zero,8008808 <__sfvwrite_r+0x1ec>
 8008748:	002f883a 	mov	r23,zero
 800874c:	0025883a 	mov	r18,zero
 8008750:	90001c26 	beq	r18,zero,80087c4 <__sfvwrite_r+0x1a8>
 8008754:	1880800c 	andi	r2,r3,512
 8008758:	85000217 	ldw	r20,8(r16)
 800875c:	10006c26 	beq	r2,zero,8008910 <__sfvwrite_r+0x2f4>
 8008760:	a02d883a 	mov	r22,r20
 8008764:	95008536 	bltu	r18,r20,800897c <__sfvwrite_r+0x360>
 8008768:	1881200c 	andi	r2,r3,1152
 800876c:	10009d1e 	bne	r2,zero,80089e4 <__sfvwrite_r+0x3c8>
 8008770:	81000017 	ldw	r4,0(r16)
 8008774:	a039883a 	mov	fp,r20
 8008778:	9029883a 	mov	r20,r18
 800877c:	b80b883a 	mov	r5,r23
 8008780:	b00d883a 	mov	r6,r22
 8008784:	80098900 	call	8009890 <memmove>
 8008788:	80c00217 	ldw	r3,8(r16)
 800878c:	81000017 	ldw	r4,0(r16)
 8008790:	9005883a 	mov	r2,r18
 8008794:	1f39c83a 	sub	fp,r3,fp
 8008798:	258f883a 	add	r7,r4,r22
 800879c:	87000215 	stw	fp,8(r16)
 80087a0:	81c00015 	stw	r7,0(r16)
 80087a4:	98c00217 	ldw	r3,8(r19)
 80087a8:	b8af883a 	add	r23,r23,r2
 80087ac:	90a5c83a 	sub	r18,r18,r2
 80087b0:	1d05c83a 	sub	r2,r3,r20
 80087b4:	98800215 	stw	r2,8(r19)
 80087b8:	103fc326 	beq	r2,zero,80086c8 <__ram_exceptions_end+0xf7f88488>
 80087bc:	80c0030b 	ldhu	r3,12(r16)
 80087c0:	903fe41e 	bne	r18,zero,8008754 <__ram_exceptions_end+0xf7f88514>
 80087c4:	8dc00017 	ldw	r23,0(r17)
 80087c8:	8c800117 	ldw	r18,4(r17)
 80087cc:	8c400204 	addi	r17,r17,8
 80087d0:	003fdf06 	br	8008750 <__ram_exceptions_end+0xf7f88510>
 80087d4:	800aae00 	call	800aae0 <_realloc_r>
 80087d8:	102d883a 	mov	r22,r2
 80087dc:	1000a01e 	bne	r2,zero,8008a60 <__sfvwrite_r+0x444>
 80087e0:	81400417 	ldw	r5,16(r16)
 80087e4:	a809883a 	mov	r4,r21
 80087e8:	800832c0 	call	800832c <_free_r>
 80087ec:	00800304 	movi	r2,12
 80087f0:	a8800015 	stw	r2,0(r21)
 80087f4:	80c0030b 	ldhu	r3,12(r16)
 80087f8:	00bfffc4 	movi	r2,-1
 80087fc:	18c01014 	ori	r3,r3,64
 8008800:	80c0030d 	sth	r3,12(r16)
 8008804:	003fb106 	br	80086cc <__ram_exceptions_end+0xf7f8848c>
 8008808:	0029883a 	mov	r20,zero
 800880c:	0011883a 	mov	r8,zero
 8008810:	0039883a 	mov	fp,zero
 8008814:	0025883a 	mov	r18,zero
 8008818:	90001f26 	beq	r18,zero,8008898 <__sfvwrite_r+0x27c>
 800881c:	40006826 	beq	r8,zero,80089c0 <__sfvwrite_r+0x3a4>
 8008820:	a02f883a 	mov	r23,r20
 8008824:	9500012e 	bgeu	r18,r20,800882c <__sfvwrite_r+0x210>
 8008828:	902f883a 	mov	r23,r18
 800882c:	81000017 	ldw	r4,0(r16)
 8008830:	80800417 	ldw	r2,16(r16)
 8008834:	b82d883a 	mov	r22,r23
 8008838:	81800217 	ldw	r6,8(r16)
 800883c:	81c00517 	ldw	r7,20(r16)
 8008840:	1100022e 	bgeu	r2,r4,800884c <__sfvwrite_r+0x230>
 8008844:	31c7883a 	add	r3,r6,r7
 8008848:	1dc01816 	blt	r3,r23,80088ac <__sfvwrite_r+0x290>
 800884c:	b9c03f16 	blt	r23,r7,800894c <__sfvwrite_r+0x330>
 8008850:	80800917 	ldw	r2,36(r16)
 8008854:	81400717 	ldw	r5,28(r16)
 8008858:	a809883a 	mov	r4,r21
 800885c:	da000115 	stw	r8,4(sp)
 8008860:	e00d883a 	mov	r6,fp
 8008864:	103ee83a 	callr	r2
 8008868:	102d883a 	mov	r22,r2
 800886c:	da000117 	ldw	r8,4(sp)
 8008870:	00bfe00e 	bge	zero,r2,80087f4 <__ram_exceptions_end+0xf7f885b4>
 8008874:	a5a9c83a 	sub	r20,r20,r22
 8008878:	a0001f26 	beq	r20,zero,80088f8 <__sfvwrite_r+0x2dc>
 800887c:	98800217 	ldw	r2,8(r19)
 8008880:	e5b9883a 	add	fp,fp,r22
 8008884:	95a5c83a 	sub	r18,r18,r22
 8008888:	15adc83a 	sub	r22,r2,r22
 800888c:	9d800215 	stw	r22,8(r19)
 8008890:	b03f8d26 	beq	r22,zero,80086c8 <__ram_exceptions_end+0xf7f88488>
 8008894:	903fe11e 	bne	r18,zero,800881c <__ram_exceptions_end+0xf7f885dc>
 8008898:	8f000017 	ldw	fp,0(r17)
 800889c:	8c800117 	ldw	r18,4(r17)
 80088a0:	0011883a 	mov	r8,zero
 80088a4:	8c400204 	addi	r17,r17,8
 80088a8:	003fdb06 	br	8008818 <__ram_exceptions_end+0xf7f885d8>
 80088ac:	180d883a 	mov	r6,r3
 80088b0:	e00b883a 	mov	r5,fp
 80088b4:	da000115 	stw	r8,4(sp)
 80088b8:	d8c00015 	stw	r3,0(sp)
 80088bc:	80098900 	call	8009890 <memmove>
 80088c0:	d8c00017 	ldw	r3,0(sp)
 80088c4:	80800017 	ldw	r2,0(r16)
 80088c8:	a809883a 	mov	r4,r21
 80088cc:	800b883a 	mov	r5,r16
 80088d0:	10c5883a 	add	r2,r2,r3
 80088d4:	80800015 	stw	r2,0(r16)
 80088d8:	d8c00015 	stw	r3,0(sp)
 80088dc:	8007c100 	call	8007c10 <_fflush_r>
 80088e0:	d8c00017 	ldw	r3,0(sp)
 80088e4:	da000117 	ldw	r8,4(sp)
 80088e8:	103fc21e 	bne	r2,zero,80087f4 <__ram_exceptions_end+0xf7f885b4>
 80088ec:	182d883a 	mov	r22,r3
 80088f0:	a5a9c83a 	sub	r20,r20,r22
 80088f4:	a03fe11e 	bne	r20,zero,800887c <__ram_exceptions_end+0xf7f8863c>
 80088f8:	a809883a 	mov	r4,r21
 80088fc:	800b883a 	mov	r5,r16
 8008900:	8007c100 	call	8007c10 <_fflush_r>
 8008904:	103fbb1e 	bne	r2,zero,80087f4 <__ram_exceptions_end+0xf7f885b4>
 8008908:	0011883a 	mov	r8,zero
 800890c:	003fdb06 	br	800887c <__ram_exceptions_end+0xf7f8863c>
 8008910:	81000017 	ldw	r4,0(r16)
 8008914:	80800417 	ldw	r2,16(r16)
 8008918:	1100012e 	bgeu	r2,r4,8008920 <__sfvwrite_r+0x304>
 800891c:	a4805a36 	bltu	r20,r18,8008a88 <__sfvwrite_r+0x46c>
 8008920:	81c00517 	ldw	r7,20(r16)
 8008924:	91c01a36 	bltu	r18,r7,8008990 <__sfvwrite_r+0x374>
 8008928:	80800917 	ldw	r2,36(r16)
 800892c:	81400717 	ldw	r5,28(r16)
 8008930:	a809883a 	mov	r4,r21
 8008934:	b80d883a 	mov	r6,r23
 8008938:	103ee83a 	callr	r2
 800893c:	1029883a 	mov	r20,r2
 8008940:	00bfac0e 	bge	zero,r2,80087f4 <__ram_exceptions_end+0xf7f885b4>
 8008944:	a005883a 	mov	r2,r20
 8008948:	003f9606 	br	80087a4 <__ram_exceptions_end+0xf7f88564>
 800894c:	b80d883a 	mov	r6,r23
 8008950:	e00b883a 	mov	r5,fp
 8008954:	da000115 	stw	r8,4(sp)
 8008958:	80098900 	call	8009890 <memmove>
 800895c:	80800217 	ldw	r2,8(r16)
 8008960:	80c00017 	ldw	r3,0(r16)
 8008964:	da000117 	ldw	r8,4(sp)
 8008968:	15c5c83a 	sub	r2,r2,r23
 800896c:	1def883a 	add	r23,r3,r23
 8008970:	80800215 	stw	r2,8(r16)
 8008974:	85c00015 	stw	r23,0(r16)
 8008978:	003fbe06 	br	8008874 <__ram_exceptions_end+0xf7f88634>
 800897c:	81000017 	ldw	r4,0(r16)
 8008980:	9039883a 	mov	fp,r18
 8008984:	9029883a 	mov	r20,r18
 8008988:	902d883a 	mov	r22,r18
 800898c:	003f7b06 	br	800877c <__ram_exceptions_end+0xf7f8853c>
 8008990:	b80b883a 	mov	r5,r23
 8008994:	900d883a 	mov	r6,r18
 8008998:	80098900 	call	8009890 <memmove>
 800899c:	80c00217 	ldw	r3,8(r16)
 80089a0:	80800017 	ldw	r2,0(r16)
 80089a4:	9029883a 	mov	r20,r18
 80089a8:	1c87c83a 	sub	r3,r3,r18
 80089ac:	1485883a 	add	r2,r2,r18
 80089b0:	80800015 	stw	r2,0(r16)
 80089b4:	80c00215 	stw	r3,8(r16)
 80089b8:	9005883a 	mov	r2,r18
 80089bc:	003f7906 	br	80087a4 <__ram_exceptions_end+0xf7f88564>
 80089c0:	e009883a 	mov	r4,fp
 80089c4:	01400284 	movi	r5,10
 80089c8:	900d883a 	mov	r6,r18
 80089cc:	80096700 	call	8009670 <memchr>
 80089d0:	10003826 	beq	r2,zero,8008ab4 <__sfvwrite_r+0x498>
 80089d4:	10800044 	addi	r2,r2,1
 80089d8:	1729c83a 	sub	r20,r2,fp
 80089dc:	02000044 	movi	r8,1
 80089e0:	003f8f06 	br	8008820 <__ram_exceptions_end+0xf7f885e0>
 80089e4:	80800517 	ldw	r2,20(r16)
 80089e8:	81400417 	ldw	r5,16(r16)
 80089ec:	87000017 	ldw	fp,0(r16)
 80089f0:	10a9883a 	add	r20,r2,r2
 80089f4:	a085883a 	add	r2,r20,r2
 80089f8:	1028d7fa 	srli	r20,r2,31
 80089fc:	e179c83a 	sub	fp,fp,r5
 8008a00:	e1000044 	addi	r4,fp,1
 8008a04:	a085883a 	add	r2,r20,r2
 8008a08:	1029d07a 	srai	r20,r2,1
 8008a0c:	2485883a 	add	r2,r4,r18
 8008a10:	a00d883a 	mov	r6,r20
 8008a14:	a080022e 	bgeu	r20,r2,8008a20 <__sfvwrite_r+0x404>
 8008a18:	1029883a 	mov	r20,r2
 8008a1c:	100d883a 	mov	r6,r2
 8008a20:	18c1000c 	andi	r3,r3,1024
 8008a24:	a809883a 	mov	r4,r21
 8008a28:	183f6a26 	beq	r3,zero,80087d4 <__ram_exceptions_end+0xf7f88594>
 8008a2c:	300b883a 	mov	r5,r6
 8008a30:	8008ec80 	call	8008ec8 <_malloc_r>
 8008a34:	102d883a 	mov	r22,r2
 8008a38:	103f6c26 	beq	r2,zero,80087ec <__ram_exceptions_end+0xf7f885ac>
 8008a3c:	81400417 	ldw	r5,16(r16)
 8008a40:	1009883a 	mov	r4,r2
 8008a44:	e00d883a 	mov	r6,fp
 8008a48:	80097580 	call	8009758 <memcpy>
 8008a4c:	8080030b 	ldhu	r2,12(r16)
 8008a50:	00fedfc4 	movi	r3,-1153
 8008a54:	10c4703a 	and	r2,r2,r3
 8008a58:	10802014 	ori	r2,r2,128
 8008a5c:	8080030d 	sth	r2,12(r16)
 8008a60:	b709883a 	add	r4,r22,fp
 8008a64:	a707c83a 	sub	r3,r20,fp
 8008a68:	85800415 	stw	r22,16(r16)
 8008a6c:	85000515 	stw	r20,20(r16)
 8008a70:	81000015 	stw	r4,0(r16)
 8008a74:	9039883a 	mov	fp,r18
 8008a78:	80c00215 	stw	r3,8(r16)
 8008a7c:	9029883a 	mov	r20,r18
 8008a80:	902d883a 	mov	r22,r18
 8008a84:	003f3d06 	br	800877c <__ram_exceptions_end+0xf7f8853c>
 8008a88:	b80b883a 	mov	r5,r23
 8008a8c:	a00d883a 	mov	r6,r20
 8008a90:	80098900 	call	8009890 <memmove>
 8008a94:	80800017 	ldw	r2,0(r16)
 8008a98:	a809883a 	mov	r4,r21
 8008a9c:	800b883a 	mov	r5,r16
 8008aa0:	1505883a 	add	r2,r2,r20
 8008aa4:	80800015 	stw	r2,0(r16)
 8008aa8:	8007c100 	call	8007c10 <_fflush_r>
 8008aac:	103fa526 	beq	r2,zero,8008944 <__ram_exceptions_end+0xf7f88704>
 8008ab0:	003f5006 	br	80087f4 <__ram_exceptions_end+0xf7f885b4>
 8008ab4:	95000044 	addi	r20,r18,1
 8008ab8:	02000044 	movi	r8,1
 8008abc:	003f5806 	br	8008820 <__ram_exceptions_end+0xf7f885e0>

08008ac0 <_fwalk>:
 8008ac0:	defff804 	addi	sp,sp,-32
 8008ac4:	dd400515 	stw	r21,20(sp)
 8008ac8:	2540b804 	addi	r21,r4,736
 8008acc:	dd800615 	stw	r22,24(sp)
 8008ad0:	dd000415 	stw	r20,16(sp)
 8008ad4:	dfc00715 	stw	ra,28(sp)
 8008ad8:	dcc00315 	stw	r19,12(sp)
 8008adc:	dc800215 	stw	r18,8(sp)
 8008ae0:	dc400115 	stw	r17,4(sp)
 8008ae4:	dc000015 	stw	r16,0(sp)
 8008ae8:	2829883a 	mov	r20,r5
 8008aec:	002d883a 	mov	r22,zero
 8008af0:	80081c80 	call	80081c8 <__sfp_lock_acquire>
 8008af4:	a8001426 	beq	r21,zero,8008b48 <_fwalk+0x88>
 8008af8:	04ffffc4 	movi	r19,-1
 8008afc:	ac400117 	ldw	r17,4(r21)
 8008b00:	ac800217 	ldw	r18,8(r21)
 8008b04:	8c7fffc4 	addi	r17,r17,-1
 8008b08:	88000d16 	blt	r17,zero,8008b40 <_fwalk+0x80>
 8008b0c:	94000304 	addi	r16,r18,12
 8008b10:	94800384 	addi	r18,r18,14
 8008b14:	80c0000f 	ldh	r3,0(r16)
 8008b18:	8c7fffc4 	addi	r17,r17,-1
 8008b1c:	813ffd04 	addi	r4,r16,-12
 8008b20:	18000426 	beq	r3,zero,8008b34 <_fwalk+0x74>
 8008b24:	90c0000f 	ldh	r3,0(r18)
 8008b28:	1cc00226 	beq	r3,r19,8008b34 <_fwalk+0x74>
 8008b2c:	a03ee83a 	callr	r20
 8008b30:	b0acb03a 	or	r22,r22,r2
 8008b34:	84001a04 	addi	r16,r16,104
 8008b38:	94801a04 	addi	r18,r18,104
 8008b3c:	8cfff51e 	bne	r17,r19,8008b14 <__ram_exceptions_end+0xf7f888d4>
 8008b40:	ad400017 	ldw	r21,0(r21)
 8008b44:	a83fed1e 	bne	r21,zero,8008afc <__ram_exceptions_end+0xf7f888bc>
 8008b48:	80081cc0 	call	80081cc <__sfp_lock_release>
 8008b4c:	b005883a 	mov	r2,r22
 8008b50:	dfc00717 	ldw	ra,28(sp)
 8008b54:	dd800617 	ldw	r22,24(sp)
 8008b58:	dd400517 	ldw	r21,20(sp)
 8008b5c:	dd000417 	ldw	r20,16(sp)
 8008b60:	dcc00317 	ldw	r19,12(sp)
 8008b64:	dc800217 	ldw	r18,8(sp)
 8008b68:	dc400117 	ldw	r17,4(sp)
 8008b6c:	dc000017 	ldw	r16,0(sp)
 8008b70:	dec00804 	addi	sp,sp,32
 8008b74:	f800283a 	ret

08008b78 <_fwalk_reent>:
 8008b78:	defff804 	addi	sp,sp,-32
 8008b7c:	dd400515 	stw	r21,20(sp)
 8008b80:	2540b804 	addi	r21,r4,736
 8008b84:	dd800615 	stw	r22,24(sp)
 8008b88:	dd000415 	stw	r20,16(sp)
 8008b8c:	dcc00315 	stw	r19,12(sp)
 8008b90:	dfc00715 	stw	ra,28(sp)
 8008b94:	dc800215 	stw	r18,8(sp)
 8008b98:	dc400115 	stw	r17,4(sp)
 8008b9c:	dc000015 	stw	r16,0(sp)
 8008ba0:	2027883a 	mov	r19,r4
 8008ba4:	2829883a 	mov	r20,r5
 8008ba8:	002d883a 	mov	r22,zero
 8008bac:	80081c80 	call	80081c8 <__sfp_lock_acquire>
 8008bb0:	a8001326 	beq	r21,zero,8008c00 <_fwalk_reent+0x88>
 8008bb4:	04bfffc4 	movi	r18,-1
 8008bb8:	ac400117 	ldw	r17,4(r21)
 8008bbc:	ac000217 	ldw	r16,8(r21)
 8008bc0:	8c7fffc4 	addi	r17,r17,-1
 8008bc4:	88000c16 	blt	r17,zero,8008bf8 <_fwalk_reent+0x80>
 8008bc8:	84000304 	addi	r16,r16,12
 8008bcc:	80c0000f 	ldh	r3,0(r16)
 8008bd0:	8c7fffc4 	addi	r17,r17,-1
 8008bd4:	817ffd04 	addi	r5,r16,-12
 8008bd8:	18000526 	beq	r3,zero,8008bf0 <_fwalk_reent+0x78>
 8008bdc:	80c0008f 	ldh	r3,2(r16)
 8008be0:	9809883a 	mov	r4,r19
 8008be4:	1c800226 	beq	r3,r18,8008bf0 <_fwalk_reent+0x78>
 8008be8:	a03ee83a 	callr	r20
 8008bec:	b0acb03a 	or	r22,r22,r2
 8008bf0:	84001a04 	addi	r16,r16,104
 8008bf4:	8cbff51e 	bne	r17,r18,8008bcc <__ram_exceptions_end+0xf7f8898c>
 8008bf8:	ad400017 	ldw	r21,0(r21)
 8008bfc:	a83fee1e 	bne	r21,zero,8008bb8 <__ram_exceptions_end+0xf7f88978>
 8008c00:	80081cc0 	call	80081cc <__sfp_lock_release>
 8008c04:	b005883a 	mov	r2,r22
 8008c08:	dfc00717 	ldw	ra,28(sp)
 8008c0c:	dd800617 	ldw	r22,24(sp)
 8008c10:	dd400517 	ldw	r21,20(sp)
 8008c14:	dd000417 	ldw	r20,16(sp)
 8008c18:	dcc00317 	ldw	r19,12(sp)
 8008c1c:	dc800217 	ldw	r18,8(sp)
 8008c20:	dc400117 	ldw	r17,4(sp)
 8008c24:	dc000017 	ldw	r16,0(sp)
 8008c28:	dec00804 	addi	sp,sp,32
 8008c2c:	f800283a 	ret

08008c30 <_setlocale_r>:
 8008c30:	30001b26 	beq	r6,zero,8008ca0 <_setlocale_r+0x70>
 8008c34:	01420074 	movhi	r5,2049
 8008c38:	defffe04 	addi	sp,sp,-8
 8008c3c:	294a3104 	addi	r5,r5,10436
 8008c40:	3009883a 	mov	r4,r6
 8008c44:	dc000015 	stw	r16,0(sp)
 8008c48:	dfc00115 	stw	ra,4(sp)
 8008c4c:	3021883a 	mov	r16,r6
 8008c50:	800b2840 	call	800b284 <strcmp>
 8008c54:	1000061e 	bne	r2,zero,8008c70 <_setlocale_r+0x40>
 8008c58:	00820074 	movhi	r2,2049
 8008c5c:	108a3004 	addi	r2,r2,10432
 8008c60:	dfc00117 	ldw	ra,4(sp)
 8008c64:	dc000017 	ldw	r16,0(sp)
 8008c68:	dec00204 	addi	sp,sp,8
 8008c6c:	f800283a 	ret
 8008c70:	01420074 	movhi	r5,2049
 8008c74:	294a3004 	addi	r5,r5,10432
 8008c78:	8009883a 	mov	r4,r16
 8008c7c:	800b2840 	call	800b284 <strcmp>
 8008c80:	103ff526 	beq	r2,zero,8008c58 <__ram_exceptions_end+0xf7f88a18>
 8008c84:	01420074 	movhi	r5,2049
 8008c88:	294a1b04 	addi	r5,r5,10348
 8008c8c:	8009883a 	mov	r4,r16
 8008c90:	800b2840 	call	800b284 <strcmp>
 8008c94:	103ff026 	beq	r2,zero,8008c58 <__ram_exceptions_end+0xf7f88a18>
 8008c98:	0005883a 	mov	r2,zero
 8008c9c:	003ff006 	br	8008c60 <__ram_exceptions_end+0xf7f88a20>
 8008ca0:	00820074 	movhi	r2,2049
 8008ca4:	108a3004 	addi	r2,r2,10432
 8008ca8:	f800283a 	ret

08008cac <__locale_charset>:
 8008cac:	00820074 	movhi	r2,2049
 8008cb0:	108ba304 	addi	r2,r2,11916
 8008cb4:	f800283a 	ret

08008cb8 <__locale_mb_cur_max>:
 8008cb8:	00820074 	movhi	r2,2049
 8008cbc:	10914904 	addi	r2,r2,17700
 8008cc0:	10800017 	ldw	r2,0(r2)
 8008cc4:	f800283a 	ret

08008cc8 <__locale_msgcharset>:
 8008cc8:	00820074 	movhi	r2,2049
 8008ccc:	108b9b04 	addi	r2,r2,11884
 8008cd0:	f800283a 	ret

08008cd4 <__locale_cjk_lang>:
 8008cd4:	0005883a 	mov	r2,zero
 8008cd8:	f800283a 	ret

08008cdc <_localeconv_r>:
 8008cdc:	00820074 	movhi	r2,2049
 8008ce0:	108bab04 	addi	r2,r2,11948
 8008ce4:	f800283a 	ret

08008ce8 <setlocale>:
 8008ce8:	00c20074 	movhi	r3,2049
 8008cec:	18d14804 	addi	r3,r3,17696
 8008cf0:	2005883a 	mov	r2,r4
 8008cf4:	19000017 	ldw	r4,0(r3)
 8008cf8:	280d883a 	mov	r6,r5
 8008cfc:	100b883a 	mov	r5,r2
 8008d00:	8008c301 	jmpi	8008c30 <_setlocale_r>

08008d04 <localeconv>:
 8008d04:	00820074 	movhi	r2,2049
 8008d08:	108bab04 	addi	r2,r2,11948
 8008d0c:	f800283a 	ret

08008d10 <__smakebuf_r>:
 8008d10:	2880030b 	ldhu	r2,12(r5)
 8008d14:	10c0008c 	andi	r3,r2,2
 8008d18:	1800401e 	bne	r3,zero,8008e1c <__smakebuf_r+0x10c>
 8008d1c:	deffec04 	addi	sp,sp,-80
 8008d20:	dc000f15 	stw	r16,60(sp)
 8008d24:	2821883a 	mov	r16,r5
 8008d28:	2940038f 	ldh	r5,14(r5)
 8008d2c:	dc401015 	stw	r17,64(sp)
 8008d30:	dfc01315 	stw	ra,76(sp)
 8008d34:	dcc01215 	stw	r19,72(sp)
 8008d38:	dc801115 	stw	r18,68(sp)
 8008d3c:	2023883a 	mov	r17,r4
 8008d40:	28001b16 	blt	r5,zero,8008db0 <__smakebuf_r+0xa0>
 8008d44:	d80d883a 	mov	r6,sp
 8008d48:	800cd900 	call	800cd90 <_fstat_r>
 8008d4c:	10001716 	blt	r2,zero,8008dac <__smakebuf_r+0x9c>
 8008d50:	d8800117 	ldw	r2,4(sp)
 8008d54:	00e00014 	movui	r3,32768
 8008d58:	10bc000c 	andi	r2,r2,61440
 8008d5c:	10c03726 	beq	r2,r3,8008e3c <__smakebuf_r+0x12c>
 8008d60:	80c0030b 	ldhu	r3,12(r16)
 8008d64:	18c20014 	ori	r3,r3,2048
 8008d68:	80c0030d 	sth	r3,12(r16)
 8008d6c:	00c80004 	movi	r3,8192
 8008d70:	10c03c1e 	bne	r2,r3,8008e64 <__smakebuf_r+0x154>
 8008d74:	8140038f 	ldh	r5,14(r16)
 8008d78:	8809883a 	mov	r4,r17
 8008d7c:	800cde80 	call	800cde8 <_isatty_r>
 8008d80:	10004e26 	beq	r2,zero,8008ebc <__smakebuf_r+0x1ac>
 8008d84:	8080030b 	ldhu	r2,12(r16)
 8008d88:	04c00044 	movi	r19,1
 8008d8c:	80c010c4 	addi	r3,r16,67
 8008d90:	14c4b03a 	or	r2,r2,r19
 8008d94:	8080030d 	sth	r2,12(r16)
 8008d98:	80c00015 	stw	r3,0(r16)
 8008d9c:	80c00415 	stw	r3,16(r16)
 8008da0:	84c00515 	stw	r19,20(r16)
 8008da4:	04810004 	movi	r18,1024
 8008da8:	00000706 	br	8008dc8 <__smakebuf_r+0xb8>
 8008dac:	8080030b 	ldhu	r2,12(r16)
 8008db0:	10c0200c 	andi	r3,r2,128
 8008db4:	18001f1e 	bne	r3,zero,8008e34 <__smakebuf_r+0x124>
 8008db8:	04810004 	movi	r18,1024
 8008dbc:	10820014 	ori	r2,r2,2048
 8008dc0:	8080030d 	sth	r2,12(r16)
 8008dc4:	0027883a 	mov	r19,zero
 8008dc8:	8809883a 	mov	r4,r17
 8008dcc:	900b883a 	mov	r5,r18
 8008dd0:	8008ec80 	call	8008ec8 <_malloc_r>
 8008dd4:	10002e26 	beq	r2,zero,8008e90 <__smakebuf_r+0x180>
 8008dd8:	80c0030b 	ldhu	r3,12(r16)
 8008ddc:	01020034 	movhi	r4,2048
 8008de0:	211f9e04 	addi	r4,r4,32376
 8008de4:	89000f15 	stw	r4,60(r17)
 8008de8:	18c02014 	ori	r3,r3,128
 8008dec:	80c0030d 	sth	r3,12(r16)
 8008df0:	80800015 	stw	r2,0(r16)
 8008df4:	80800415 	stw	r2,16(r16)
 8008df8:	84800515 	stw	r18,20(r16)
 8008dfc:	98001c1e 	bne	r19,zero,8008e70 <__smakebuf_r+0x160>
 8008e00:	dfc01317 	ldw	ra,76(sp)
 8008e04:	dcc01217 	ldw	r19,72(sp)
 8008e08:	dc801117 	ldw	r18,68(sp)
 8008e0c:	dc401017 	ldw	r17,64(sp)
 8008e10:	dc000f17 	ldw	r16,60(sp)
 8008e14:	dec01404 	addi	sp,sp,80
 8008e18:	f800283a 	ret
 8008e1c:	288010c4 	addi	r2,r5,67
 8008e20:	28800015 	stw	r2,0(r5)
 8008e24:	28800415 	stw	r2,16(r5)
 8008e28:	00800044 	movi	r2,1
 8008e2c:	28800515 	stw	r2,20(r5)
 8008e30:	f800283a 	ret
 8008e34:	04801004 	movi	r18,64
 8008e38:	003fe006 	br	8008dbc <__ram_exceptions_end+0xf7f88b7c>
 8008e3c:	81000a17 	ldw	r4,40(r16)
 8008e40:	00c20074 	movhi	r3,2049
 8008e44:	18ec8804 	addi	r3,r3,-19936
 8008e48:	20ffc51e 	bne	r4,r3,8008d60 <__ram_exceptions_end+0xf7f88b20>
 8008e4c:	80c0030b 	ldhu	r3,12(r16)
 8008e50:	01010004 	movi	r4,1024
 8008e54:	81001315 	stw	r4,76(r16)
 8008e58:	1906b03a 	or	r3,r3,r4
 8008e5c:	80c0030d 	sth	r3,12(r16)
 8008e60:	003fc206 	br	8008d6c <__ram_exceptions_end+0xf7f88b2c>
 8008e64:	0027883a 	mov	r19,zero
 8008e68:	04810004 	movi	r18,1024
 8008e6c:	003fd606 	br	8008dc8 <__ram_exceptions_end+0xf7f88b88>
 8008e70:	8140038f 	ldh	r5,14(r16)
 8008e74:	8809883a 	mov	r4,r17
 8008e78:	800cde80 	call	800cde8 <_isatty_r>
 8008e7c:	103fe026 	beq	r2,zero,8008e00 <__ram_exceptions_end+0xf7f88bc0>
 8008e80:	8080030b 	ldhu	r2,12(r16)
 8008e84:	10800054 	ori	r2,r2,1
 8008e88:	8080030d 	sth	r2,12(r16)
 8008e8c:	003fdc06 	br	8008e00 <__ram_exceptions_end+0xf7f88bc0>
 8008e90:	8080030b 	ldhu	r2,12(r16)
 8008e94:	10c0800c 	andi	r3,r2,512
 8008e98:	183fd91e 	bne	r3,zero,8008e00 <__ram_exceptions_end+0xf7f88bc0>
 8008e9c:	10800094 	ori	r2,r2,2
 8008ea0:	80c010c4 	addi	r3,r16,67
 8008ea4:	8080030d 	sth	r2,12(r16)
 8008ea8:	00800044 	movi	r2,1
 8008eac:	80c00015 	stw	r3,0(r16)
 8008eb0:	80c00415 	stw	r3,16(r16)
 8008eb4:	80800515 	stw	r2,20(r16)
 8008eb8:	003fd106 	br	8008e00 <__ram_exceptions_end+0xf7f88bc0>
 8008ebc:	04c00044 	movi	r19,1
 8008ec0:	04810004 	movi	r18,1024
 8008ec4:	003fc006 	br	8008dc8 <__ram_exceptions_end+0xf7f88b88>

08008ec8 <_malloc_r>:
 8008ec8:	defff504 	addi	sp,sp,-44
 8008ecc:	dc800315 	stw	r18,12(sp)
 8008ed0:	dfc00a15 	stw	ra,40(sp)
 8008ed4:	df000915 	stw	fp,36(sp)
 8008ed8:	ddc00815 	stw	r23,32(sp)
 8008edc:	dd800715 	stw	r22,28(sp)
 8008ee0:	dd400615 	stw	r21,24(sp)
 8008ee4:	dd000515 	stw	r20,20(sp)
 8008ee8:	dcc00415 	stw	r19,16(sp)
 8008eec:	dc400215 	stw	r17,8(sp)
 8008ef0:	dc000115 	stw	r16,4(sp)
 8008ef4:	288002c4 	addi	r2,r5,11
 8008ef8:	00c00584 	movi	r3,22
 8008efc:	2025883a 	mov	r18,r4
 8008f00:	18802a2e 	bgeu	r3,r2,8008fac <_malloc_r+0xe4>
 8008f04:	047ffe04 	movi	r17,-8
 8008f08:	1462703a 	and	r17,r2,r17
 8008f0c:	88009e16 	blt	r17,zero,8009188 <_malloc_r+0x2c0>
 8008f10:	89409d36 	bltu	r17,r5,8009188 <_malloc_r+0x2c0>
 8008f14:	800fd600 	call	800fd60 <__malloc_lock>
 8008f18:	00807dc4 	movi	r2,503
 8008f1c:	14402736 	bltu	r2,r17,8008fbc <_malloc_r+0xf4>
 8008f20:	8806d0fa 	srli	r3,r17,3
 8008f24:	04c20074 	movhi	r19,2049
 8008f28:	9ccbb904 	addi	r19,r19,12004
 8008f2c:	18c5883a 	add	r2,r3,r3
 8008f30:	1085883a 	add	r2,r2,r2
 8008f34:	1085883a 	add	r2,r2,r2
 8008f38:	9885883a 	add	r2,r19,r2
 8008f3c:	14000317 	ldw	r16,12(r2)
 8008f40:	80814a26 	beq	r16,r2,800946c <_malloc_r+0x5a4>
 8008f44:	80c00117 	ldw	r3,4(r16)
 8008f48:	81000317 	ldw	r4,12(r16)
 8008f4c:	00bfff04 	movi	r2,-4
 8008f50:	1884703a 	and	r2,r3,r2
 8008f54:	81400217 	ldw	r5,8(r16)
 8008f58:	8085883a 	add	r2,r16,r2
 8008f5c:	10c00117 	ldw	r3,4(r2)
 8008f60:	29000315 	stw	r4,12(r5)
 8008f64:	21400215 	stw	r5,8(r4)
 8008f68:	18c00054 	ori	r3,r3,1
 8008f6c:	10c00115 	stw	r3,4(r2)
 8008f70:	9009883a 	mov	r4,r18
 8008f74:	800fd800 	call	800fd80 <__malloc_unlock>
 8008f78:	80800204 	addi	r2,r16,8
 8008f7c:	dfc00a17 	ldw	ra,40(sp)
 8008f80:	df000917 	ldw	fp,36(sp)
 8008f84:	ddc00817 	ldw	r23,32(sp)
 8008f88:	dd800717 	ldw	r22,28(sp)
 8008f8c:	dd400617 	ldw	r21,24(sp)
 8008f90:	dd000517 	ldw	r20,20(sp)
 8008f94:	dcc00417 	ldw	r19,16(sp)
 8008f98:	dc800317 	ldw	r18,12(sp)
 8008f9c:	dc400217 	ldw	r17,8(sp)
 8008fa0:	dc000117 	ldw	r16,4(sp)
 8008fa4:	dec00b04 	addi	sp,sp,44
 8008fa8:	f800283a 	ret
 8008fac:	04400404 	movi	r17,16
 8008fb0:	89407536 	bltu	r17,r5,8009188 <_malloc_r+0x2c0>
 8008fb4:	800fd600 	call	800fd60 <__malloc_lock>
 8008fb8:	003fd906 	br	8008f20 <__ram_exceptions_end+0xf7f88ce0>
 8008fbc:	8806d27a 	srli	r3,r17,9
 8008fc0:	18007526 	beq	r3,zero,8009198 <_malloc_r+0x2d0>
 8008fc4:	00800104 	movi	r2,4
 8008fc8:	10c0ef36 	bltu	r2,r3,8009388 <_malloc_r+0x4c0>
 8008fcc:	8806d1ba 	srli	r3,r17,6
 8008fd0:	19c00e04 	addi	r7,r3,56
 8008fd4:	39cb883a 	add	r5,r7,r7
 8008fd8:	04c20074 	movhi	r19,2049
 8008fdc:	294b883a 	add	r5,r5,r5
 8008fe0:	9ccbb904 	addi	r19,r19,12004
 8008fe4:	294b883a 	add	r5,r5,r5
 8008fe8:	994b883a 	add	r5,r19,r5
 8008fec:	2c000317 	ldw	r16,12(r5)
 8008ff0:	2c000e26 	beq	r5,r16,800902c <_malloc_r+0x164>
 8008ff4:	80800117 	ldw	r2,4(r16)
 8008ff8:	01bfff04 	movi	r6,-4
 8008ffc:	010003c4 	movi	r4,15
 8009000:	1184703a 	and	r2,r2,r6
 8009004:	1447c83a 	sub	r3,r2,r17
 8009008:	20c00716 	blt	r4,r3,8009028 <_malloc_r+0x160>
 800900c:	1800650e 	bge	r3,zero,80091a4 <_malloc_r+0x2dc>
 8009010:	84000317 	ldw	r16,12(r16)
 8009014:	2c000526 	beq	r5,r16,800902c <_malloc_r+0x164>
 8009018:	80800117 	ldw	r2,4(r16)
 800901c:	1184703a 	and	r2,r2,r6
 8009020:	1447c83a 	sub	r3,r2,r17
 8009024:	20fff90e 	bge	r4,r3,800900c <__ram_exceptions_end+0xf7f88dcc>
 8009028:	39ffffc4 	addi	r7,r7,-1
 800902c:	38c00044 	addi	r3,r7,1
 8009030:	01820074 	movhi	r6,2049
 8009034:	9c000417 	ldw	r16,16(r19)
 8009038:	318bb904 	addi	r6,r6,12004
 800903c:	32400204 	addi	r9,r6,8
 8009040:	82410326 	beq	r16,r9,8009450 <_malloc_r+0x588>
 8009044:	81000117 	ldw	r4,4(r16)
 8009048:	00bfff04 	movi	r2,-4
 800904c:	208e703a 	and	r7,r4,r2
 8009050:	3c45c83a 	sub	r2,r7,r17
 8009054:	010003c4 	movi	r4,15
 8009058:	2080ee16 	blt	r4,r2,8009414 <_malloc_r+0x54c>
 800905c:	32400515 	stw	r9,20(r6)
 8009060:	32400415 	stw	r9,16(r6)
 8009064:	1000510e 	bge	r2,zero,80091ac <_malloc_r+0x2e4>
 8009068:	00807fc4 	movi	r2,511
 800906c:	11c0ce36 	bltu	r2,r7,80093a8 <_malloc_r+0x4e0>
 8009070:	3808d0fa 	srli	r4,r7,3
 8009074:	01c00044 	movi	r7,1
 8009078:	30800117 	ldw	r2,4(r6)
 800907c:	210b883a 	add	r5,r4,r4
 8009080:	294b883a 	add	r5,r5,r5
 8009084:	2009d0ba 	srai	r4,r4,2
 8009088:	294b883a 	add	r5,r5,r5
 800908c:	298b883a 	add	r5,r5,r6
 8009090:	2a000217 	ldw	r8,8(r5)
 8009094:	3908983a 	sll	r4,r7,r4
 8009098:	81400315 	stw	r5,12(r16)
 800909c:	82000215 	stw	r8,8(r16)
 80090a0:	2088b03a 	or	r4,r4,r2
 80090a4:	2c000215 	stw	r16,8(r5)
 80090a8:	31000115 	stw	r4,4(r6)
 80090ac:	44000315 	stw	r16,12(r8)
 80090b0:	1805d0ba 	srai	r2,r3,2
 80090b4:	01400044 	movi	r5,1
 80090b8:	288a983a 	sll	r5,r5,r2
 80090bc:	21404336 	bltu	r4,r5,80091cc <_malloc_r+0x304>
 80090c0:	2144703a 	and	r2,r4,r5
 80090c4:	10000a1e 	bne	r2,zero,80090f0 <_malloc_r+0x228>
 80090c8:	00bfff04 	movi	r2,-4
 80090cc:	294b883a 	add	r5,r5,r5
 80090d0:	1886703a 	and	r3,r3,r2
 80090d4:	2144703a 	and	r2,r4,r5
 80090d8:	18c00104 	addi	r3,r3,4
 80090dc:	1000041e 	bne	r2,zero,80090f0 <_malloc_r+0x228>
 80090e0:	294b883a 	add	r5,r5,r5
 80090e4:	2144703a 	and	r2,r4,r5
 80090e8:	18c00104 	addi	r3,r3,4
 80090ec:	103ffc26 	beq	r2,zero,80090e0 <__ram_exceptions_end+0xf7f88ea0>
 80090f0:	023fff04 	movi	r8,-4
 80090f4:	01c003c4 	movi	r7,15
 80090f8:	18c5883a 	add	r2,r3,r3
 80090fc:	1085883a 	add	r2,r2,r2
 8009100:	1085883a 	add	r2,r2,r2
 8009104:	9895883a 	add	r10,r19,r2
 8009108:	52c00304 	addi	r11,r10,12
 800910c:	1819883a 	mov	r12,r3
 8009110:	5c000017 	ldw	r16,0(r11)
 8009114:	59bffd04 	addi	r6,r11,-12
 8009118:	8180041e 	bne	r16,r6,800912c <_malloc_r+0x264>
 800911c:	0000ce06 	br	8009458 <_malloc_r+0x590>
 8009120:	2000d70e 	bge	r4,zero,8009480 <_malloc_r+0x5b8>
 8009124:	84000317 	ldw	r16,12(r16)
 8009128:	8180cb26 	beq	r16,r6,8009458 <_malloc_r+0x590>
 800912c:	80800117 	ldw	r2,4(r16)
 8009130:	1204703a 	and	r2,r2,r8
 8009134:	1449c83a 	sub	r4,r2,r17
 8009138:	393ff90e 	bge	r7,r4,8009120 <__ram_exceptions_end+0xf7f88ee0>
 800913c:	80800317 	ldw	r2,12(r16)
 8009140:	80c00217 	ldw	r3,8(r16)
 8009144:	89400054 	ori	r5,r17,1
 8009148:	81400115 	stw	r5,4(r16)
 800914c:	18800315 	stw	r2,12(r3)
 8009150:	10c00215 	stw	r3,8(r2)
 8009154:	8463883a 	add	r17,r16,r17
 8009158:	9c400515 	stw	r17,20(r19)
 800915c:	9c400415 	stw	r17,16(r19)
 8009160:	20800054 	ori	r2,r4,1
 8009164:	88800115 	stw	r2,4(r17)
 8009168:	8a400315 	stw	r9,12(r17)
 800916c:	8a400215 	stw	r9,8(r17)
 8009170:	8923883a 	add	r17,r17,r4
 8009174:	89000015 	stw	r4,0(r17)
 8009178:	9009883a 	mov	r4,r18
 800917c:	800fd800 	call	800fd80 <__malloc_unlock>
 8009180:	80800204 	addi	r2,r16,8
 8009184:	003f7d06 	br	8008f7c <__ram_exceptions_end+0xf7f88d3c>
 8009188:	00800304 	movi	r2,12
 800918c:	90800015 	stw	r2,0(r18)
 8009190:	0005883a 	mov	r2,zero
 8009194:	003f7906 	br	8008f7c <__ram_exceptions_end+0xf7f88d3c>
 8009198:	01401f84 	movi	r5,126
 800919c:	01c00fc4 	movi	r7,63
 80091a0:	003f8d06 	br	8008fd8 <__ram_exceptions_end+0xf7f88d98>
 80091a4:	81000317 	ldw	r4,12(r16)
 80091a8:	003f6a06 	br	8008f54 <__ram_exceptions_end+0xf7f88d14>
 80091ac:	81c5883a 	add	r2,r16,r7
 80091b0:	10c00117 	ldw	r3,4(r2)
 80091b4:	9009883a 	mov	r4,r18
 80091b8:	18c00054 	ori	r3,r3,1
 80091bc:	10c00115 	stw	r3,4(r2)
 80091c0:	800fd800 	call	800fd80 <__malloc_unlock>
 80091c4:	80800204 	addi	r2,r16,8
 80091c8:	003f6c06 	br	8008f7c <__ram_exceptions_end+0xf7f88d3c>
 80091cc:	9c000217 	ldw	r16,8(r19)
 80091d0:	00bfff04 	movi	r2,-4
 80091d4:	85800117 	ldw	r22,4(r16)
 80091d8:	b0ac703a 	and	r22,r22,r2
 80091dc:	b4400336 	bltu	r22,r17,80091ec <_malloc_r+0x324>
 80091e0:	b445c83a 	sub	r2,r22,r17
 80091e4:	00c003c4 	movi	r3,15
 80091e8:	18805d16 	blt	r3,r2,8009360 <_malloc_r+0x498>
 80091ec:	05c20074 	movhi	r23,2049
 80091f0:	00820074 	movhi	r2,2049
 80091f4:	bdd14a04 	addi	r23,r23,17704
 80091f8:	10982204 	addi	r2,r2,24712
 80091fc:	15400017 	ldw	r21,0(r2)
 8009200:	b9000017 	ldw	r4,0(r23)
 8009204:	00ffffc4 	movi	r3,-1
 8009208:	858d883a 	add	r6,r16,r22
 800920c:	8d6b883a 	add	r21,r17,r21
 8009210:	20c0e426 	beq	r4,r3,80095a4 <_malloc_r+0x6dc>
 8009214:	ad4403c4 	addi	r21,r21,4111
 8009218:	00fc0004 	movi	r3,-4096
 800921c:	a8ea703a 	and	r21,r21,r3
 8009220:	9009883a 	mov	r4,r18
 8009224:	a80b883a 	mov	r5,r21
 8009228:	d9800015 	stw	r6,0(sp)
 800922c:	800b0f40 	call	800b0f4 <_sbrk_r>
 8009230:	00ffffc4 	movi	r3,-1
 8009234:	1029883a 	mov	r20,r2
 8009238:	d9800017 	ldw	r6,0(sp)
 800923c:	10c0a426 	beq	r2,r3,80094d0 <_malloc_r+0x608>
 8009240:	1180a236 	bltu	r2,r6,80094cc <_malloc_r+0x604>
 8009244:	07020074 	movhi	fp,2049
 8009248:	e7182b04 	addi	fp,fp,24748
 800924c:	e0c00017 	ldw	r3,0(fp)
 8009250:	a8c7883a 	add	r3,r21,r3
 8009254:	e0c00015 	stw	r3,0(fp)
 8009258:	3500da26 	beq	r6,r20,80095c4 <_malloc_r+0x6fc>
 800925c:	b9000017 	ldw	r4,0(r23)
 8009260:	00bfffc4 	movi	r2,-1
 8009264:	2080e426 	beq	r4,r2,80095f8 <_malloc_r+0x730>
 8009268:	a185c83a 	sub	r2,r20,r6
 800926c:	1885883a 	add	r2,r3,r2
 8009270:	e0800015 	stw	r2,0(fp)
 8009274:	a0c001cc 	andi	r3,r20,7
 8009278:	1800b526 	beq	r3,zero,8009550 <_malloc_r+0x688>
 800927c:	a0e9c83a 	sub	r20,r20,r3
 8009280:	00840204 	movi	r2,4104
 8009284:	a5000204 	addi	r20,r20,8
 8009288:	10c7c83a 	sub	r3,r2,r3
 800928c:	a545883a 	add	r2,r20,r21
 8009290:	1083ffcc 	andi	r2,r2,4095
 8009294:	18abc83a 	sub	r21,r3,r2
 8009298:	9009883a 	mov	r4,r18
 800929c:	a80b883a 	mov	r5,r21
 80092a0:	800b0f40 	call	800b0f4 <_sbrk_r>
 80092a4:	00ffffc4 	movi	r3,-1
 80092a8:	10c0d026 	beq	r2,r3,80095ec <_malloc_r+0x724>
 80092ac:	1507c83a 	sub	r3,r2,r20
 80092b0:	a8c7883a 	add	r3,r21,r3
 80092b4:	18c00054 	ori	r3,r3,1
 80092b8:	e0800017 	ldw	r2,0(fp)
 80092bc:	9d000215 	stw	r20,8(r19)
 80092c0:	a0c00115 	stw	r3,4(r20)
 80092c4:	a887883a 	add	r3,r21,r2
 80092c8:	e0c00015 	stw	r3,0(fp)
 80092cc:	84c00e26 	beq	r16,r19,8009308 <_malloc_r+0x440>
 80092d0:	018003c4 	movi	r6,15
 80092d4:	3580a02e 	bgeu	r6,r22,8009558 <_malloc_r+0x690>
 80092d8:	81400117 	ldw	r5,4(r16)
 80092dc:	013ffe04 	movi	r4,-8
 80092e0:	b0bffd04 	addi	r2,r22,-12
 80092e4:	1104703a 	and	r2,r2,r4
 80092e8:	2900004c 	andi	r4,r5,1
 80092ec:	1108b03a 	or	r4,r2,r4
 80092f0:	81000115 	stw	r4,4(r16)
 80092f4:	01400144 	movi	r5,5
 80092f8:	8089883a 	add	r4,r16,r2
 80092fc:	21400115 	stw	r5,4(r4)
 8009300:	21400215 	stw	r5,8(r4)
 8009304:	3080c036 	bltu	r6,r2,8009608 <_malloc_r+0x740>
 8009308:	00820074 	movhi	r2,2049
 800930c:	10982104 	addi	r2,r2,24708
 8009310:	11000017 	ldw	r4,0(r2)
 8009314:	20c0012e 	bgeu	r4,r3,800931c <_malloc_r+0x454>
 8009318:	10c00015 	stw	r3,0(r2)
 800931c:	00820074 	movhi	r2,2049
 8009320:	10982004 	addi	r2,r2,24704
 8009324:	11000017 	ldw	r4,0(r2)
 8009328:	9c000217 	ldw	r16,8(r19)
 800932c:	20c0012e 	bgeu	r4,r3,8009334 <_malloc_r+0x46c>
 8009330:	10c00015 	stw	r3,0(r2)
 8009334:	80c00117 	ldw	r3,4(r16)
 8009338:	00bfff04 	movi	r2,-4
 800933c:	1886703a 	and	r3,r3,r2
 8009340:	1c45c83a 	sub	r2,r3,r17
 8009344:	1c400236 	bltu	r3,r17,8009350 <_malloc_r+0x488>
 8009348:	00c003c4 	movi	r3,15
 800934c:	18800416 	blt	r3,r2,8009360 <_malloc_r+0x498>
 8009350:	9009883a 	mov	r4,r18
 8009354:	800fd800 	call	800fd80 <__malloc_unlock>
 8009358:	0005883a 	mov	r2,zero
 800935c:	003f0706 	br	8008f7c <__ram_exceptions_end+0xf7f88d3c>
 8009360:	88c00054 	ori	r3,r17,1
 8009364:	80c00115 	stw	r3,4(r16)
 8009368:	8463883a 	add	r17,r16,r17
 800936c:	10800054 	ori	r2,r2,1
 8009370:	9c400215 	stw	r17,8(r19)
 8009374:	88800115 	stw	r2,4(r17)
 8009378:	9009883a 	mov	r4,r18
 800937c:	800fd800 	call	800fd80 <__malloc_unlock>
 8009380:	80800204 	addi	r2,r16,8
 8009384:	003efd06 	br	8008f7c <__ram_exceptions_end+0xf7f88d3c>
 8009388:	00800504 	movi	r2,20
 800938c:	10c0482e 	bgeu	r2,r3,80094b0 <_malloc_r+0x5e8>
 8009390:	00801504 	movi	r2,84
 8009394:	10c06836 	bltu	r2,r3,8009538 <_malloc_r+0x670>
 8009398:	8806d33a 	srli	r3,r17,12
 800939c:	19c01b84 	addi	r7,r3,110
 80093a0:	39cb883a 	add	r5,r7,r7
 80093a4:	003f0c06 	br	8008fd8 <__ram_exceptions_end+0xf7f88d98>
 80093a8:	3804d27a 	srli	r2,r7,9
 80093ac:	01000104 	movi	r4,4
 80093b0:	2080422e 	bgeu	r4,r2,80094bc <_malloc_r+0x5f4>
 80093b4:	01000504 	movi	r4,20
 80093b8:	20807c36 	bltu	r4,r2,80095ac <_malloc_r+0x6e4>
 80093bc:	110016c4 	addi	r4,r2,91
 80093c0:	210b883a 	add	r5,r4,r4
 80093c4:	294b883a 	add	r5,r5,r5
 80093c8:	294b883a 	add	r5,r5,r5
 80093cc:	994b883a 	add	r5,r19,r5
 80093d0:	28800217 	ldw	r2,8(r5)
 80093d4:	02020074 	movhi	r8,2049
 80093d8:	420bb904 	addi	r8,r8,12004
 80093dc:	11406326 	beq	r2,r5,800956c <_malloc_r+0x6a4>
 80093e0:	01bfff04 	movi	r6,-4
 80093e4:	11000117 	ldw	r4,4(r2)
 80093e8:	2188703a 	and	r4,r4,r6
 80093ec:	3900022e 	bgeu	r7,r4,80093f8 <_malloc_r+0x530>
 80093f0:	10800217 	ldw	r2,8(r2)
 80093f4:	28bffb1e 	bne	r5,r2,80093e4 <__ram_exceptions_end+0xf7f891a4>
 80093f8:	11800317 	ldw	r6,12(r2)
 80093fc:	99000117 	ldw	r4,4(r19)
 8009400:	81800315 	stw	r6,12(r16)
 8009404:	80800215 	stw	r2,8(r16)
 8009408:	34000215 	stw	r16,8(r6)
 800940c:	14000315 	stw	r16,12(r2)
 8009410:	003f2706 	br	80090b0 <__ram_exceptions_end+0xf7f88e70>
 8009414:	88c00054 	ori	r3,r17,1
 8009418:	80c00115 	stw	r3,4(r16)
 800941c:	8463883a 	add	r17,r16,r17
 8009420:	34400515 	stw	r17,20(r6)
 8009424:	34400415 	stw	r17,16(r6)
 8009428:	10c00054 	ori	r3,r2,1
 800942c:	8a400315 	stw	r9,12(r17)
 8009430:	8a400215 	stw	r9,8(r17)
 8009434:	88c00115 	stw	r3,4(r17)
 8009438:	88a3883a 	add	r17,r17,r2
 800943c:	88800015 	stw	r2,0(r17)
 8009440:	9009883a 	mov	r4,r18
 8009444:	800fd800 	call	800fd80 <__malloc_unlock>
 8009448:	80800204 	addi	r2,r16,8
 800944c:	003ecb06 	br	8008f7c <__ram_exceptions_end+0xf7f88d3c>
 8009450:	31000117 	ldw	r4,4(r6)
 8009454:	003f1606 	br	80090b0 <__ram_exceptions_end+0xf7f88e70>
 8009458:	63000044 	addi	r12,r12,1
 800945c:	608000cc 	andi	r2,r12,3
 8009460:	5ac00204 	addi	r11,r11,8
 8009464:	103f2a1e 	bne	r2,zero,8009110 <__ram_exceptions_end+0xf7f88ed0>
 8009468:	00002106 	br	80094f0 <_malloc_r+0x628>
 800946c:	80800204 	addi	r2,r16,8
 8009470:	84000517 	ldw	r16,20(r16)
 8009474:	143eb31e 	bne	r2,r16,8008f44 <__ram_exceptions_end+0xf7f88d04>
 8009478:	18c00084 	addi	r3,r3,2
 800947c:	003eec06 	br	8009030 <__ram_exceptions_end+0xf7f88df0>
 8009480:	8085883a 	add	r2,r16,r2
 8009484:	10c00117 	ldw	r3,4(r2)
 8009488:	81000317 	ldw	r4,12(r16)
 800948c:	81400217 	ldw	r5,8(r16)
 8009490:	18c00054 	ori	r3,r3,1
 8009494:	10c00115 	stw	r3,4(r2)
 8009498:	29000315 	stw	r4,12(r5)
 800949c:	21400215 	stw	r5,8(r4)
 80094a0:	9009883a 	mov	r4,r18
 80094a4:	800fd800 	call	800fd80 <__malloc_unlock>
 80094a8:	80800204 	addi	r2,r16,8
 80094ac:	003eb306 	br	8008f7c <__ram_exceptions_end+0xf7f88d3c>
 80094b0:	19c016c4 	addi	r7,r3,91
 80094b4:	39cb883a 	add	r5,r7,r7
 80094b8:	003ec706 	br	8008fd8 <__ram_exceptions_end+0xf7f88d98>
 80094bc:	3804d1ba 	srli	r2,r7,6
 80094c0:	11000e04 	addi	r4,r2,56
 80094c4:	210b883a 	add	r5,r4,r4
 80094c8:	003fbe06 	br	80093c4 <__ram_exceptions_end+0xf7f89184>
 80094cc:	84ff5d26 	beq	r16,r19,8009244 <__ram_exceptions_end+0xf7f89004>
 80094d0:	9c000217 	ldw	r16,8(r19)
 80094d4:	00bfff04 	movi	r2,-4
 80094d8:	80c00117 	ldw	r3,4(r16)
 80094dc:	1886703a 	and	r3,r3,r2
 80094e0:	003f9706 	br	8009340 <__ram_exceptions_end+0xf7f89100>
 80094e4:	52800017 	ldw	r10,0(r10)
 80094e8:	18ffffc4 	addi	r3,r3,-1
 80094ec:	50805c1e 	bne	r10,r2,8009660 <_malloc_r+0x798>
 80094f0:	190000cc 	andi	r4,r3,3
 80094f4:	50bffe04 	addi	r2,r10,-8
 80094f8:	203ffa1e 	bne	r4,zero,80094e4 <__ram_exceptions_end+0xf7f892a4>
 80094fc:	98800117 	ldw	r2,4(r19)
 8009500:	0146303a 	nor	r3,zero,r5
 8009504:	1884703a 	and	r2,r3,r2
 8009508:	98800115 	stw	r2,4(r19)
 800950c:	294b883a 	add	r5,r5,r5
 8009510:	117f2e36 	bltu	r2,r5,80091cc <__ram_exceptions_end+0xf7f88f8c>
 8009514:	283f2d26 	beq	r5,zero,80091cc <__ram_exceptions_end+0xf7f88f8c>
 8009518:	1146703a 	and	r3,r2,r5
 800951c:	1800521e 	bne	r3,zero,8009668 <_malloc_r+0x7a0>
 8009520:	6007883a 	mov	r3,r12
 8009524:	294b883a 	add	r5,r5,r5
 8009528:	1148703a 	and	r4,r2,r5
 800952c:	18c00104 	addi	r3,r3,4
 8009530:	203ffc26 	beq	r4,zero,8009524 <__ram_exceptions_end+0xf7f892e4>
 8009534:	003ef006 	br	80090f8 <__ram_exceptions_end+0xf7f88eb8>
 8009538:	00805504 	movi	r2,340
 800953c:	10c01336 	bltu	r2,r3,800958c <_malloc_r+0x6c4>
 8009540:	8806d3fa 	srli	r3,r17,15
 8009544:	19c01dc4 	addi	r7,r3,119
 8009548:	39cb883a 	add	r5,r7,r7
 800954c:	003ea206 	br	8008fd8 <__ram_exceptions_end+0xf7f88d98>
 8009550:	00c40004 	movi	r3,4096
 8009554:	003f4d06 	br	800928c <__ram_exceptions_end+0xf7f8904c>
 8009558:	00800044 	movi	r2,1
 800955c:	a0800115 	stw	r2,4(r20)
 8009560:	a021883a 	mov	r16,r20
 8009564:	0007883a 	mov	r3,zero
 8009568:	003f7506 	br	8009340 <__ram_exceptions_end+0xf7f89100>
 800956c:	200bd0ba 	srai	r5,r4,2
 8009570:	01800044 	movi	r6,1
 8009574:	41000117 	ldw	r4,4(r8)
 8009578:	314a983a 	sll	r5,r6,r5
 800957c:	100d883a 	mov	r6,r2
 8009580:	2908b03a 	or	r4,r5,r4
 8009584:	41000115 	stw	r4,4(r8)
 8009588:	003f9d06 	br	8009400 <__ram_exceptions_end+0xf7f891c0>
 800958c:	00815504 	movi	r2,1364
 8009590:	10c01336 	bltu	r2,r3,80095e0 <_malloc_r+0x718>
 8009594:	8806d4ba 	srli	r3,r17,18
 8009598:	19c01f04 	addi	r7,r3,124
 800959c:	39cb883a 	add	r5,r7,r7
 80095a0:	003e8d06 	br	8008fd8 <__ram_exceptions_end+0xf7f88d98>
 80095a4:	ad400404 	addi	r21,r21,16
 80095a8:	003f1d06 	br	8009220 <__ram_exceptions_end+0xf7f88fe0>
 80095ac:	01001504 	movi	r4,84
 80095b0:	20801c36 	bltu	r4,r2,8009624 <_malloc_r+0x75c>
 80095b4:	3804d33a 	srli	r2,r7,12
 80095b8:	11001b84 	addi	r4,r2,110
 80095bc:	210b883a 	add	r5,r4,r4
 80095c0:	003f8006 	br	80093c4 <__ram_exceptions_end+0xf7f89184>
 80095c4:	3083ffcc 	andi	r2,r6,4095
 80095c8:	103f241e 	bne	r2,zero,800925c <__ram_exceptions_end+0xf7f8901c>
 80095cc:	99000217 	ldw	r4,8(r19)
 80095d0:	ad85883a 	add	r2,r21,r22
 80095d4:	10800054 	ori	r2,r2,1
 80095d8:	20800115 	stw	r2,4(r4)
 80095dc:	003f4a06 	br	8009308 <__ram_exceptions_end+0xf7f890c8>
 80095e0:	01403f04 	movi	r5,252
 80095e4:	01c01f84 	movi	r7,126
 80095e8:	003e7b06 	br	8008fd8 <__ram_exceptions_end+0xf7f88d98>
 80095ec:	00c00044 	movi	r3,1
 80095f0:	002b883a 	mov	r21,zero
 80095f4:	003f3006 	br	80092b8 <__ram_exceptions_end+0xf7f89078>
 80095f8:	00820074 	movhi	r2,2049
 80095fc:	10914a04 	addi	r2,r2,17704
 8009600:	15000015 	stw	r20,0(r2)
 8009604:	003f1b06 	br	8009274 <__ram_exceptions_end+0xf7f89034>
 8009608:	9009883a 	mov	r4,r18
 800960c:	81400204 	addi	r5,r16,8
 8009610:	800832c0 	call	800832c <_free_r>
 8009614:	00820074 	movhi	r2,2049
 8009618:	10982b04 	addi	r2,r2,24748
 800961c:	10c00017 	ldw	r3,0(r2)
 8009620:	003f3906 	br	8009308 <__ram_exceptions_end+0xf7f890c8>
 8009624:	01005504 	movi	r4,340
 8009628:	20800436 	bltu	r4,r2,800963c <_malloc_r+0x774>
 800962c:	3804d3fa 	srli	r2,r7,15
 8009630:	11001dc4 	addi	r4,r2,119
 8009634:	210b883a 	add	r5,r4,r4
 8009638:	003f6206 	br	80093c4 <__ram_exceptions_end+0xf7f89184>
 800963c:	01015504 	movi	r4,1364
 8009640:	20800436 	bltu	r4,r2,8009654 <_malloc_r+0x78c>
 8009644:	3804d4ba 	srli	r2,r7,18
 8009648:	11001f04 	addi	r4,r2,124
 800964c:	210b883a 	add	r5,r4,r4
 8009650:	003f5c06 	br	80093c4 <__ram_exceptions_end+0xf7f89184>
 8009654:	01403f04 	movi	r5,252
 8009658:	01001f84 	movi	r4,126
 800965c:	003f5906 	br	80093c4 <__ram_exceptions_end+0xf7f89184>
 8009660:	98800117 	ldw	r2,4(r19)
 8009664:	003fa906 	br	800950c <__ram_exceptions_end+0xf7f892cc>
 8009668:	6007883a 	mov	r3,r12
 800966c:	003ea206 	br	80090f8 <__ram_exceptions_end+0xf7f88eb8>

08009670 <memchr>:
 8009670:	208000cc 	andi	r2,r4,3
 8009674:	280f883a 	mov	r7,r5
 8009678:	10003526 	beq	r2,zero,8009750 <memchr+0xe0>
 800967c:	30bfffc4 	addi	r2,r6,-1
 8009680:	30001b26 	beq	r6,zero,80096f0 <memchr+0x80>
 8009684:	21800003 	ldbu	r6,0(r4)
 8009688:	28c03fcc 	andi	r3,r5,255
 800968c:	30c01a26 	beq	r6,r3,80096f8 <memchr+0x88>
 8009690:	180d883a 	mov	r6,r3
 8009694:	00000406 	br	80096a8 <memchr+0x38>
 8009698:	10001526 	beq	r2,zero,80096f0 <memchr+0x80>
 800969c:	20c00003 	ldbu	r3,0(r4)
 80096a0:	10bfffc4 	addi	r2,r2,-1
 80096a4:	19801426 	beq	r3,r6,80096f8 <memchr+0x88>
 80096a8:	21000044 	addi	r4,r4,1
 80096ac:	20c000cc 	andi	r3,r4,3
 80096b0:	183ff91e 	bne	r3,zero,8009698 <__ram_exceptions_end+0xf7f89458>
 80096b4:	024000c4 	movi	r9,3
 80096b8:	48801136 	bltu	r9,r2,8009700 <memchr+0x90>
 80096bc:	10000c26 	beq	r2,zero,80096f0 <memchr+0x80>
 80096c0:	20c00003 	ldbu	r3,0(r4)
 80096c4:	29403fcc 	andi	r5,r5,255
 80096c8:	19400b26 	beq	r3,r5,80096f8 <memchr+0x88>
 80096cc:	20c00044 	addi	r3,r4,1
 80096d0:	2085883a 	add	r2,r4,r2
 80096d4:	39803fcc 	andi	r6,r7,255
 80096d8:	00000306 	br	80096e8 <memchr+0x78>
 80096dc:	18c00044 	addi	r3,r3,1
 80096e0:	197fffc3 	ldbu	r5,-1(r3)
 80096e4:	29800426 	beq	r5,r6,80096f8 <memchr+0x88>
 80096e8:	1809883a 	mov	r4,r3
 80096ec:	18bffb1e 	bne	r3,r2,80096dc <__ram_exceptions_end+0xf7f8949c>
 80096f0:	0005883a 	mov	r2,zero
 80096f4:	f800283a 	ret
 80096f8:	2005883a 	mov	r2,r4
 80096fc:	f800283a 	ret
 8009700:	28c03fcc 	andi	r3,r5,255
 8009704:	1810923a 	slli	r8,r3,8
 8009708:	02ffbff4 	movhi	r11,65279
 800970c:	02a02074 	movhi	r10,32897
 8009710:	40c6b03a 	or	r3,r8,r3
 8009714:	1810943a 	slli	r8,r3,16
 8009718:	5affbfc4 	addi	r11,r11,-257
 800971c:	52a02004 	addi	r10,r10,-32640
 8009720:	40d0b03a 	or	r8,r8,r3
 8009724:	20c00017 	ldw	r3,0(r4)
 8009728:	40c6f03a 	xor	r3,r8,r3
 800972c:	1acd883a 	add	r6,r3,r11
 8009730:	00c6303a 	nor	r3,zero,r3
 8009734:	30c6703a 	and	r3,r6,r3
 8009738:	1a86703a 	and	r3,r3,r10
 800973c:	183fdf1e 	bne	r3,zero,80096bc <__ram_exceptions_end+0xf7f8947c>
 8009740:	10bfff04 	addi	r2,r2,-4
 8009744:	21000104 	addi	r4,r4,4
 8009748:	48bff636 	bltu	r9,r2,8009724 <__ram_exceptions_end+0xf7f894e4>
 800974c:	003fdb06 	br	80096bc <__ram_exceptions_end+0xf7f8947c>
 8009750:	3005883a 	mov	r2,r6
 8009754:	003fd706 	br	80096b4 <__ram_exceptions_end+0xf7f89474>

08009758 <memcpy>:
 8009758:	deffff04 	addi	sp,sp,-4
 800975c:	dc000015 	stw	r16,0(sp)
 8009760:	00c003c4 	movi	r3,15
 8009764:	2005883a 	mov	r2,r4
 8009768:	1980432e 	bgeu	r3,r6,8009878 <memcpy+0x120>
 800976c:	2146b03a 	or	r3,r4,r5
 8009770:	18c000cc 	andi	r3,r3,3
 8009774:	1800421e 	bne	r3,zero,8009880 <memcpy+0x128>
 8009778:	343ffc04 	addi	r16,r6,-16
 800977c:	8020d13a 	srli	r16,r16,4
 8009780:	28c00104 	addi	r3,r5,4
 8009784:	23400104 	addi	r13,r4,4
 8009788:	801e913a 	slli	r15,r16,4
 800978c:	2b000204 	addi	r12,r5,8
 8009790:	22c00204 	addi	r11,r4,8
 8009794:	7bc00504 	addi	r15,r15,20
 8009798:	2a800304 	addi	r10,r5,12
 800979c:	22400304 	addi	r9,r4,12
 80097a0:	2bdf883a 	add	r15,r5,r15
 80097a4:	2811883a 	mov	r8,r5
 80097a8:	200f883a 	mov	r7,r4
 80097ac:	41000017 	ldw	r4,0(r8)
 80097b0:	39c00404 	addi	r7,r7,16
 80097b4:	18c00404 	addi	r3,r3,16
 80097b8:	393ffc15 	stw	r4,-16(r7)
 80097bc:	1bbffc17 	ldw	r14,-16(r3)
 80097c0:	6b400404 	addi	r13,r13,16
 80097c4:	5ac00404 	addi	r11,r11,16
 80097c8:	6bbffc15 	stw	r14,-16(r13)
 80097cc:	63800017 	ldw	r14,0(r12)
 80097d0:	4a400404 	addi	r9,r9,16
 80097d4:	42000404 	addi	r8,r8,16
 80097d8:	5bbffc15 	stw	r14,-16(r11)
 80097dc:	53800017 	ldw	r14,0(r10)
 80097e0:	63000404 	addi	r12,r12,16
 80097e4:	52800404 	addi	r10,r10,16
 80097e8:	4bbffc15 	stw	r14,-16(r9)
 80097ec:	1bffef1e 	bne	r3,r15,80097ac <__ram_exceptions_end+0xf7f8956c>
 80097f0:	81c00044 	addi	r7,r16,1
 80097f4:	380e913a 	slli	r7,r7,4
 80097f8:	310003cc 	andi	r4,r6,15
 80097fc:	02c000c4 	movi	r11,3
 8009800:	11c7883a 	add	r3,r2,r7
 8009804:	29cb883a 	add	r5,r5,r7
 8009808:	59001f2e 	bgeu	r11,r4,8009888 <memcpy+0x130>
 800980c:	1813883a 	mov	r9,r3
 8009810:	2811883a 	mov	r8,r5
 8009814:	200f883a 	mov	r7,r4
 8009818:	42800017 	ldw	r10,0(r8)
 800981c:	4a400104 	addi	r9,r9,4
 8009820:	39ffff04 	addi	r7,r7,-4
 8009824:	4abfff15 	stw	r10,-4(r9)
 8009828:	42000104 	addi	r8,r8,4
 800982c:	59fffa36 	bltu	r11,r7,8009818 <__ram_exceptions_end+0xf7f895d8>
 8009830:	213fff04 	addi	r4,r4,-4
 8009834:	2008d0ba 	srli	r4,r4,2
 8009838:	318000cc 	andi	r6,r6,3
 800983c:	21000044 	addi	r4,r4,1
 8009840:	2109883a 	add	r4,r4,r4
 8009844:	2109883a 	add	r4,r4,r4
 8009848:	1907883a 	add	r3,r3,r4
 800984c:	290b883a 	add	r5,r5,r4
 8009850:	30000626 	beq	r6,zero,800986c <memcpy+0x114>
 8009854:	198d883a 	add	r6,r3,r6
 8009858:	29c00003 	ldbu	r7,0(r5)
 800985c:	18c00044 	addi	r3,r3,1
 8009860:	29400044 	addi	r5,r5,1
 8009864:	19ffffc5 	stb	r7,-1(r3)
 8009868:	19bffb1e 	bne	r3,r6,8009858 <__ram_exceptions_end+0xf7f89618>
 800986c:	dc000017 	ldw	r16,0(sp)
 8009870:	dec00104 	addi	sp,sp,4
 8009874:	f800283a 	ret
 8009878:	2007883a 	mov	r3,r4
 800987c:	003ff406 	br	8009850 <__ram_exceptions_end+0xf7f89610>
 8009880:	2007883a 	mov	r3,r4
 8009884:	003ff306 	br	8009854 <__ram_exceptions_end+0xf7f89614>
 8009888:	200d883a 	mov	r6,r4
 800988c:	003ff006 	br	8009850 <__ram_exceptions_end+0xf7f89610>

08009890 <memmove>:
 8009890:	2005883a 	mov	r2,r4
 8009894:	29000b2e 	bgeu	r5,r4,80098c4 <memmove+0x34>
 8009898:	298f883a 	add	r7,r5,r6
 800989c:	21c0092e 	bgeu	r4,r7,80098c4 <memmove+0x34>
 80098a0:	2187883a 	add	r3,r4,r6
 80098a4:	198bc83a 	sub	r5,r3,r6
 80098a8:	30004b26 	beq	r6,zero,80099d8 <memmove+0x148>
 80098ac:	39ffffc4 	addi	r7,r7,-1
 80098b0:	39000003 	ldbu	r4,0(r7)
 80098b4:	18ffffc4 	addi	r3,r3,-1
 80098b8:	19000005 	stb	r4,0(r3)
 80098bc:	197ffb1e 	bne	r3,r5,80098ac <__ram_exceptions_end+0xf7f8966c>
 80098c0:	f800283a 	ret
 80098c4:	00c003c4 	movi	r3,15
 80098c8:	1980412e 	bgeu	r3,r6,80099d0 <memmove+0x140>
 80098cc:	1146b03a 	or	r3,r2,r5
 80098d0:	18c000cc 	andi	r3,r3,3
 80098d4:	1800411e 	bne	r3,zero,80099dc <memmove+0x14c>
 80098d8:	33fffc04 	addi	r15,r6,-16
 80098dc:	781ed13a 	srli	r15,r15,4
 80098e0:	28c00104 	addi	r3,r5,4
 80098e4:	13400104 	addi	r13,r2,4
 80098e8:	781c913a 	slli	r14,r15,4
 80098ec:	2b000204 	addi	r12,r5,8
 80098f0:	12c00204 	addi	r11,r2,8
 80098f4:	73800504 	addi	r14,r14,20
 80098f8:	2a800304 	addi	r10,r5,12
 80098fc:	12400304 	addi	r9,r2,12
 8009900:	2b9d883a 	add	r14,r5,r14
 8009904:	2811883a 	mov	r8,r5
 8009908:	100f883a 	mov	r7,r2
 800990c:	41000017 	ldw	r4,0(r8)
 8009910:	39c00404 	addi	r7,r7,16
 8009914:	18c00404 	addi	r3,r3,16
 8009918:	393ffc15 	stw	r4,-16(r7)
 800991c:	193ffc17 	ldw	r4,-16(r3)
 8009920:	6b400404 	addi	r13,r13,16
 8009924:	5ac00404 	addi	r11,r11,16
 8009928:	693ffc15 	stw	r4,-16(r13)
 800992c:	61000017 	ldw	r4,0(r12)
 8009930:	4a400404 	addi	r9,r9,16
 8009934:	42000404 	addi	r8,r8,16
 8009938:	593ffc15 	stw	r4,-16(r11)
 800993c:	51000017 	ldw	r4,0(r10)
 8009940:	63000404 	addi	r12,r12,16
 8009944:	52800404 	addi	r10,r10,16
 8009948:	493ffc15 	stw	r4,-16(r9)
 800994c:	1bbfef1e 	bne	r3,r14,800990c <__ram_exceptions_end+0xf7f896cc>
 8009950:	79000044 	addi	r4,r15,1
 8009954:	2008913a 	slli	r4,r4,4
 8009958:	328003cc 	andi	r10,r6,15
 800995c:	02c000c4 	movi	r11,3
 8009960:	1107883a 	add	r3,r2,r4
 8009964:	290b883a 	add	r5,r5,r4
 8009968:	5a801e2e 	bgeu	r11,r10,80099e4 <memmove+0x154>
 800996c:	1813883a 	mov	r9,r3
 8009970:	2811883a 	mov	r8,r5
 8009974:	500f883a 	mov	r7,r10
 8009978:	41000017 	ldw	r4,0(r8)
 800997c:	4a400104 	addi	r9,r9,4
 8009980:	39ffff04 	addi	r7,r7,-4
 8009984:	493fff15 	stw	r4,-4(r9)
 8009988:	42000104 	addi	r8,r8,4
 800998c:	59fffa36 	bltu	r11,r7,8009978 <__ram_exceptions_end+0xf7f89738>
 8009990:	513fff04 	addi	r4,r10,-4
 8009994:	2008d0ba 	srli	r4,r4,2
 8009998:	318000cc 	andi	r6,r6,3
 800999c:	21000044 	addi	r4,r4,1
 80099a0:	2109883a 	add	r4,r4,r4
 80099a4:	2109883a 	add	r4,r4,r4
 80099a8:	1907883a 	add	r3,r3,r4
 80099ac:	290b883a 	add	r5,r5,r4
 80099b0:	30000926 	beq	r6,zero,80099d8 <memmove+0x148>
 80099b4:	198d883a 	add	r6,r3,r6
 80099b8:	29c00003 	ldbu	r7,0(r5)
 80099bc:	18c00044 	addi	r3,r3,1
 80099c0:	29400044 	addi	r5,r5,1
 80099c4:	19ffffc5 	stb	r7,-1(r3)
 80099c8:	19bffb1e 	bne	r3,r6,80099b8 <__ram_exceptions_end+0xf7f89778>
 80099cc:	f800283a 	ret
 80099d0:	1007883a 	mov	r3,r2
 80099d4:	003ff606 	br	80099b0 <__ram_exceptions_end+0xf7f89770>
 80099d8:	f800283a 	ret
 80099dc:	1007883a 	mov	r3,r2
 80099e0:	003ff406 	br	80099b4 <__ram_exceptions_end+0xf7f89774>
 80099e4:	500d883a 	mov	r6,r10
 80099e8:	003ff106 	br	80099b0 <__ram_exceptions_end+0xf7f89770>

080099ec <_Balloc>:
 80099ec:	20801317 	ldw	r2,76(r4)
 80099f0:	defffc04 	addi	sp,sp,-16
 80099f4:	dc400115 	stw	r17,4(sp)
 80099f8:	dc000015 	stw	r16,0(sp)
 80099fc:	dfc00315 	stw	ra,12(sp)
 8009a00:	dc800215 	stw	r18,8(sp)
 8009a04:	2023883a 	mov	r17,r4
 8009a08:	2821883a 	mov	r16,r5
 8009a0c:	10000f26 	beq	r2,zero,8009a4c <_Balloc+0x60>
 8009a10:	8407883a 	add	r3,r16,r16
 8009a14:	18c7883a 	add	r3,r3,r3
 8009a18:	10c7883a 	add	r3,r2,r3
 8009a1c:	18800017 	ldw	r2,0(r3)
 8009a20:	10001126 	beq	r2,zero,8009a68 <_Balloc+0x7c>
 8009a24:	11000017 	ldw	r4,0(r2)
 8009a28:	19000015 	stw	r4,0(r3)
 8009a2c:	10000415 	stw	zero,16(r2)
 8009a30:	10000315 	stw	zero,12(r2)
 8009a34:	dfc00317 	ldw	ra,12(sp)
 8009a38:	dc800217 	ldw	r18,8(sp)
 8009a3c:	dc400117 	ldw	r17,4(sp)
 8009a40:	dc000017 	ldw	r16,0(sp)
 8009a44:	dec00404 	addi	sp,sp,16
 8009a48:	f800283a 	ret
 8009a4c:	01400104 	movi	r5,4
 8009a50:	01800844 	movi	r6,33
 8009a54:	800c9dc0 	call	800c9dc <_calloc_r>
 8009a58:	88801315 	stw	r2,76(r17)
 8009a5c:	103fec1e 	bne	r2,zero,8009a10 <__ram_exceptions_end+0xf7f897d0>
 8009a60:	0005883a 	mov	r2,zero
 8009a64:	003ff306 	br	8009a34 <__ram_exceptions_end+0xf7f897f4>
 8009a68:	01400044 	movi	r5,1
 8009a6c:	2c24983a 	sll	r18,r5,r16
 8009a70:	8809883a 	mov	r4,r17
 8009a74:	91800144 	addi	r6,r18,5
 8009a78:	318d883a 	add	r6,r6,r6
 8009a7c:	318d883a 	add	r6,r6,r6
 8009a80:	800c9dc0 	call	800c9dc <_calloc_r>
 8009a84:	103ff626 	beq	r2,zero,8009a60 <__ram_exceptions_end+0xf7f89820>
 8009a88:	14000115 	stw	r16,4(r2)
 8009a8c:	14800215 	stw	r18,8(r2)
 8009a90:	003fe606 	br	8009a2c <__ram_exceptions_end+0xf7f897ec>

08009a94 <_Bfree>:
 8009a94:	28000826 	beq	r5,zero,8009ab8 <_Bfree+0x24>
 8009a98:	28c00117 	ldw	r3,4(r5)
 8009a9c:	20801317 	ldw	r2,76(r4)
 8009aa0:	18c7883a 	add	r3,r3,r3
 8009aa4:	18c7883a 	add	r3,r3,r3
 8009aa8:	10c5883a 	add	r2,r2,r3
 8009aac:	10c00017 	ldw	r3,0(r2)
 8009ab0:	28c00015 	stw	r3,0(r5)
 8009ab4:	11400015 	stw	r5,0(r2)
 8009ab8:	f800283a 	ret

08009abc <__multadd>:
 8009abc:	defffa04 	addi	sp,sp,-24
 8009ac0:	dc000115 	stw	r16,4(sp)
 8009ac4:	2c000417 	ldw	r16,16(r5)
 8009ac8:	dc800315 	stw	r18,12(sp)
 8009acc:	dc400215 	stw	r17,8(sp)
 8009ad0:	dfc00515 	stw	ra,20(sp)
 8009ad4:	dcc00415 	stw	r19,16(sp)
 8009ad8:	2823883a 	mov	r17,r5
 8009adc:	2025883a 	mov	r18,r4
 8009ae0:	2a400504 	addi	r9,r5,20
 8009ae4:	0015883a 	mov	r10,zero
 8009ae8:	4a000017 	ldw	r8,0(r9)
 8009aec:	4a400104 	addi	r9,r9,4
 8009af0:	52800044 	addi	r10,r10,1
 8009af4:	40ffffcc 	andi	r3,r8,65535
 8009af8:	1987383a 	mul	r3,r3,r6
 8009afc:	4010d43a 	srli	r8,r8,16
 8009b00:	19cf883a 	add	r7,r3,r7
 8009b04:	4191383a 	mul	r8,r8,r6
 8009b08:	3816d43a 	srli	r11,r7,16
 8009b0c:	38ffffcc 	andi	r3,r7,65535
 8009b10:	5a0f883a 	add	r7,r11,r8
 8009b14:	3810943a 	slli	r8,r7,16
 8009b18:	380ed43a 	srli	r7,r7,16
 8009b1c:	40c7883a 	add	r3,r8,r3
 8009b20:	48ffff15 	stw	r3,-4(r9)
 8009b24:	543ff016 	blt	r10,r16,8009ae8 <__ram_exceptions_end+0xf7f898a8>
 8009b28:	38000926 	beq	r7,zero,8009b50 <__multadd+0x94>
 8009b2c:	88800217 	ldw	r2,8(r17)
 8009b30:	80800f0e 	bge	r16,r2,8009b70 <__multadd+0xb4>
 8009b34:	80800144 	addi	r2,r16,5
 8009b38:	1085883a 	add	r2,r2,r2
 8009b3c:	1085883a 	add	r2,r2,r2
 8009b40:	8885883a 	add	r2,r17,r2
 8009b44:	11c00015 	stw	r7,0(r2)
 8009b48:	84000044 	addi	r16,r16,1
 8009b4c:	8c000415 	stw	r16,16(r17)
 8009b50:	8805883a 	mov	r2,r17
 8009b54:	dfc00517 	ldw	ra,20(sp)
 8009b58:	dcc00417 	ldw	r19,16(sp)
 8009b5c:	dc800317 	ldw	r18,12(sp)
 8009b60:	dc400217 	ldw	r17,8(sp)
 8009b64:	dc000117 	ldw	r16,4(sp)
 8009b68:	dec00604 	addi	sp,sp,24
 8009b6c:	f800283a 	ret
 8009b70:	89400117 	ldw	r5,4(r17)
 8009b74:	9009883a 	mov	r4,r18
 8009b78:	d9c00015 	stw	r7,0(sp)
 8009b7c:	29400044 	addi	r5,r5,1
 8009b80:	80099ec0 	call	80099ec <_Balloc>
 8009b84:	89800417 	ldw	r6,16(r17)
 8009b88:	89400304 	addi	r5,r17,12
 8009b8c:	11000304 	addi	r4,r2,12
 8009b90:	31800084 	addi	r6,r6,2
 8009b94:	318d883a 	add	r6,r6,r6
 8009b98:	318d883a 	add	r6,r6,r6
 8009b9c:	1027883a 	mov	r19,r2
 8009ba0:	80097580 	call	8009758 <memcpy>
 8009ba4:	89000117 	ldw	r4,4(r17)
 8009ba8:	90c01317 	ldw	r3,76(r18)
 8009bac:	d9c00017 	ldw	r7,0(sp)
 8009bb0:	2109883a 	add	r4,r4,r4
 8009bb4:	2109883a 	add	r4,r4,r4
 8009bb8:	1907883a 	add	r3,r3,r4
 8009bbc:	18800017 	ldw	r2,0(r3)
 8009bc0:	88800015 	stw	r2,0(r17)
 8009bc4:	1c400015 	stw	r17,0(r3)
 8009bc8:	9823883a 	mov	r17,r19
 8009bcc:	003fd906 	br	8009b34 <__ram_exceptions_end+0xf7f898f4>

08009bd0 <__s2b>:
 8009bd0:	defff904 	addi	sp,sp,-28
 8009bd4:	dc400115 	stw	r17,4(sp)
 8009bd8:	dc000015 	stw	r16,0(sp)
 8009bdc:	2023883a 	mov	r17,r4
 8009be0:	2821883a 	mov	r16,r5
 8009be4:	39000204 	addi	r4,r7,8
 8009be8:	01400244 	movi	r5,9
 8009bec:	dcc00315 	stw	r19,12(sp)
 8009bf0:	dc800215 	stw	r18,8(sp)
 8009bf4:	dfc00615 	stw	ra,24(sp)
 8009bf8:	dd400515 	stw	r21,20(sp)
 8009bfc:	dd000415 	stw	r20,16(sp)
 8009c00:	3825883a 	mov	r18,r7
 8009c04:	3027883a 	mov	r19,r6
 8009c08:	8003dc80 	call	8003dc8 <__divsi3>
 8009c0c:	00c00044 	movi	r3,1
 8009c10:	000b883a 	mov	r5,zero
 8009c14:	1880030e 	bge	r3,r2,8009c24 <__s2b+0x54>
 8009c18:	18c7883a 	add	r3,r3,r3
 8009c1c:	29400044 	addi	r5,r5,1
 8009c20:	18bffd16 	blt	r3,r2,8009c18 <__ram_exceptions_end+0xf7f899d8>
 8009c24:	8809883a 	mov	r4,r17
 8009c28:	80099ec0 	call	80099ec <_Balloc>
 8009c2c:	d8c00717 	ldw	r3,28(sp)
 8009c30:	10c00515 	stw	r3,20(r2)
 8009c34:	00c00044 	movi	r3,1
 8009c38:	10c00415 	stw	r3,16(r2)
 8009c3c:	00c00244 	movi	r3,9
 8009c40:	1cc0210e 	bge	r3,r19,8009cc8 <__s2b+0xf8>
 8009c44:	80eb883a 	add	r21,r16,r3
 8009c48:	a829883a 	mov	r20,r21
 8009c4c:	84e1883a 	add	r16,r16,r19
 8009c50:	a1c00007 	ldb	r7,0(r20)
 8009c54:	8809883a 	mov	r4,r17
 8009c58:	a5000044 	addi	r20,r20,1
 8009c5c:	100b883a 	mov	r5,r2
 8009c60:	01800284 	movi	r6,10
 8009c64:	39fff404 	addi	r7,r7,-48
 8009c68:	8009abc0 	call	8009abc <__multadd>
 8009c6c:	a43ff81e 	bne	r20,r16,8009c50 <__ram_exceptions_end+0xf7f89a10>
 8009c70:	ace1883a 	add	r16,r21,r19
 8009c74:	843ffe04 	addi	r16,r16,-8
 8009c78:	9c800a0e 	bge	r19,r18,8009ca4 <__s2b+0xd4>
 8009c7c:	94e5c83a 	sub	r18,r18,r19
 8009c80:	84a5883a 	add	r18,r16,r18
 8009c84:	81c00007 	ldb	r7,0(r16)
 8009c88:	8809883a 	mov	r4,r17
 8009c8c:	84000044 	addi	r16,r16,1
 8009c90:	100b883a 	mov	r5,r2
 8009c94:	01800284 	movi	r6,10
 8009c98:	39fff404 	addi	r7,r7,-48
 8009c9c:	8009abc0 	call	8009abc <__multadd>
 8009ca0:	84bff81e 	bne	r16,r18,8009c84 <__ram_exceptions_end+0xf7f89a44>
 8009ca4:	dfc00617 	ldw	ra,24(sp)
 8009ca8:	dd400517 	ldw	r21,20(sp)
 8009cac:	dd000417 	ldw	r20,16(sp)
 8009cb0:	dcc00317 	ldw	r19,12(sp)
 8009cb4:	dc800217 	ldw	r18,8(sp)
 8009cb8:	dc400117 	ldw	r17,4(sp)
 8009cbc:	dc000017 	ldw	r16,0(sp)
 8009cc0:	dec00704 	addi	sp,sp,28
 8009cc4:	f800283a 	ret
 8009cc8:	84000284 	addi	r16,r16,10
 8009ccc:	1827883a 	mov	r19,r3
 8009cd0:	003fe906 	br	8009c78 <__ram_exceptions_end+0xf7f89a38>

08009cd4 <__hi0bits>:
 8009cd4:	20bfffec 	andhi	r2,r4,65535
 8009cd8:	1000141e 	bne	r2,zero,8009d2c <__hi0bits+0x58>
 8009cdc:	2008943a 	slli	r4,r4,16
 8009ce0:	00800404 	movi	r2,16
 8009ce4:	20ffc02c 	andhi	r3,r4,65280
 8009ce8:	1800021e 	bne	r3,zero,8009cf4 <__hi0bits+0x20>
 8009cec:	2008923a 	slli	r4,r4,8
 8009cf0:	10800204 	addi	r2,r2,8
 8009cf4:	20fc002c 	andhi	r3,r4,61440
 8009cf8:	1800021e 	bne	r3,zero,8009d04 <__hi0bits+0x30>
 8009cfc:	2008913a 	slli	r4,r4,4
 8009d00:	10800104 	addi	r2,r2,4
 8009d04:	20f0002c 	andhi	r3,r4,49152
 8009d08:	1800031e 	bne	r3,zero,8009d18 <__hi0bits+0x44>
 8009d0c:	2109883a 	add	r4,r4,r4
 8009d10:	10800084 	addi	r2,r2,2
 8009d14:	2109883a 	add	r4,r4,r4
 8009d18:	20000316 	blt	r4,zero,8009d28 <__hi0bits+0x54>
 8009d1c:	2110002c 	andhi	r4,r4,16384
 8009d20:	2000041e 	bne	r4,zero,8009d34 <__hi0bits+0x60>
 8009d24:	00800804 	movi	r2,32
 8009d28:	f800283a 	ret
 8009d2c:	0005883a 	mov	r2,zero
 8009d30:	003fec06 	br	8009ce4 <__ram_exceptions_end+0xf7f89aa4>
 8009d34:	10800044 	addi	r2,r2,1
 8009d38:	f800283a 	ret

08009d3c <__lo0bits>:
 8009d3c:	20c00017 	ldw	r3,0(r4)
 8009d40:	188001cc 	andi	r2,r3,7
 8009d44:	10000826 	beq	r2,zero,8009d68 <__lo0bits+0x2c>
 8009d48:	1880004c 	andi	r2,r3,1
 8009d4c:	1000211e 	bne	r2,zero,8009dd4 <__lo0bits+0x98>
 8009d50:	1880008c 	andi	r2,r3,2
 8009d54:	1000211e 	bne	r2,zero,8009ddc <__lo0bits+0xa0>
 8009d58:	1806d0ba 	srli	r3,r3,2
 8009d5c:	00800084 	movi	r2,2
 8009d60:	20c00015 	stw	r3,0(r4)
 8009d64:	f800283a 	ret
 8009d68:	18bfffcc 	andi	r2,r3,65535
 8009d6c:	10001326 	beq	r2,zero,8009dbc <__lo0bits+0x80>
 8009d70:	0005883a 	mov	r2,zero
 8009d74:	19403fcc 	andi	r5,r3,255
 8009d78:	2800021e 	bne	r5,zero,8009d84 <__lo0bits+0x48>
 8009d7c:	1806d23a 	srli	r3,r3,8
 8009d80:	10800204 	addi	r2,r2,8
 8009d84:	194003cc 	andi	r5,r3,15
 8009d88:	2800021e 	bne	r5,zero,8009d94 <__lo0bits+0x58>
 8009d8c:	1806d13a 	srli	r3,r3,4
 8009d90:	10800104 	addi	r2,r2,4
 8009d94:	194000cc 	andi	r5,r3,3
 8009d98:	2800021e 	bne	r5,zero,8009da4 <__lo0bits+0x68>
 8009d9c:	1806d0ba 	srli	r3,r3,2
 8009da0:	10800084 	addi	r2,r2,2
 8009da4:	1940004c 	andi	r5,r3,1
 8009da8:	2800081e 	bne	r5,zero,8009dcc <__lo0bits+0x90>
 8009dac:	1806d07a 	srli	r3,r3,1
 8009db0:	1800051e 	bne	r3,zero,8009dc8 <__lo0bits+0x8c>
 8009db4:	00800804 	movi	r2,32
 8009db8:	f800283a 	ret
 8009dbc:	1806d43a 	srli	r3,r3,16
 8009dc0:	00800404 	movi	r2,16
 8009dc4:	003feb06 	br	8009d74 <__ram_exceptions_end+0xf7f89b34>
 8009dc8:	10800044 	addi	r2,r2,1
 8009dcc:	20c00015 	stw	r3,0(r4)
 8009dd0:	f800283a 	ret
 8009dd4:	0005883a 	mov	r2,zero
 8009dd8:	f800283a 	ret
 8009ddc:	1806d07a 	srli	r3,r3,1
 8009de0:	00800044 	movi	r2,1
 8009de4:	20c00015 	stw	r3,0(r4)
 8009de8:	f800283a 	ret

08009dec <__i2b>:
 8009dec:	defffd04 	addi	sp,sp,-12
 8009df0:	dc000015 	stw	r16,0(sp)
 8009df4:	04000044 	movi	r16,1
 8009df8:	dc400115 	stw	r17,4(sp)
 8009dfc:	2823883a 	mov	r17,r5
 8009e00:	800b883a 	mov	r5,r16
 8009e04:	dfc00215 	stw	ra,8(sp)
 8009e08:	80099ec0 	call	80099ec <_Balloc>
 8009e0c:	14400515 	stw	r17,20(r2)
 8009e10:	14000415 	stw	r16,16(r2)
 8009e14:	dfc00217 	ldw	ra,8(sp)
 8009e18:	dc400117 	ldw	r17,4(sp)
 8009e1c:	dc000017 	ldw	r16,0(sp)
 8009e20:	dec00304 	addi	sp,sp,12
 8009e24:	f800283a 	ret

08009e28 <__multiply>:
 8009e28:	defffa04 	addi	sp,sp,-24
 8009e2c:	dcc00315 	stw	r19,12(sp)
 8009e30:	dc800215 	stw	r18,8(sp)
 8009e34:	2cc00417 	ldw	r19,16(r5)
 8009e38:	34800417 	ldw	r18,16(r6)
 8009e3c:	dd000415 	stw	r20,16(sp)
 8009e40:	dc400115 	stw	r17,4(sp)
 8009e44:	dfc00515 	stw	ra,20(sp)
 8009e48:	dc000015 	stw	r16,0(sp)
 8009e4c:	2829883a 	mov	r20,r5
 8009e50:	3023883a 	mov	r17,r6
 8009e54:	9c807016 	blt	r19,r18,800a018 <__multiply+0x1f0>
 8009e58:	9005883a 	mov	r2,r18
 8009e5c:	9825883a 	mov	r18,r19
 8009e60:	1027883a 	mov	r19,r2
 8009e64:	a0800217 	ldw	r2,8(r20)
 8009e68:	94e1883a 	add	r16,r18,r19
 8009e6c:	a1400117 	ldw	r5,4(r20)
 8009e70:	1400010e 	bge	r2,r16,8009e78 <__multiply+0x50>
 8009e74:	29400044 	addi	r5,r5,1
 8009e78:	80099ec0 	call	80099ec <_Balloc>
 8009e7c:	8417883a 	add	r11,r16,r16
 8009e80:	13000504 	addi	r12,r2,20
 8009e84:	5ad7883a 	add	r11,r11,r11
 8009e88:	62d7883a 	add	r11,r12,r11
 8009e8c:	6007883a 	mov	r3,r12
 8009e90:	62c0032e 	bgeu	r12,r11,8009ea0 <__multiply+0x78>
 8009e94:	18000015 	stw	zero,0(r3)
 8009e98:	18c00104 	addi	r3,r3,4
 8009e9c:	1afffd36 	bltu	r3,r11,8009e94 <__ram_exceptions_end+0xf7f89c54>
 8009ea0:	9ce7883a 	add	r19,r19,r19
 8009ea4:	94a5883a 	add	r18,r18,r18
 8009ea8:	89800504 	addi	r6,r17,20
 8009eac:	9ce7883a 	add	r19,r19,r19
 8009eb0:	a3800504 	addi	r14,r20,20
 8009eb4:	94a5883a 	add	r18,r18,r18
 8009eb8:	34db883a 	add	r13,r6,r19
 8009ebc:	7495883a 	add	r10,r14,r18
 8009ec0:	3340422e 	bgeu	r6,r13,8009fcc <__multiply+0x1a4>
 8009ec4:	34400017 	ldw	r17,0(r6)
 8009ec8:	8cbfffcc 	andi	r18,r17,65535
 8009ecc:	90001b26 	beq	r18,zero,8009f3c <__multiply+0x114>
 8009ed0:	6013883a 	mov	r9,r12
 8009ed4:	7023883a 	mov	r17,r14
 8009ed8:	0011883a 	mov	r8,zero
 8009edc:	88c00017 	ldw	r3,0(r17)
 8009ee0:	4bc00017 	ldw	r15,0(r9)
 8009ee4:	8c400104 	addi	r17,r17,4
 8009ee8:	19ffffcc 	andi	r7,r3,65535
 8009eec:	3c8f383a 	mul	r7,r7,r18
 8009ef0:	1808d43a 	srli	r4,r3,16
 8009ef4:	797fffcc 	andi	r5,r15,65535
 8009ef8:	29cb883a 	add	r5,r5,r7
 8009efc:	2a0b883a 	add	r5,r5,r8
 8009f00:	2489383a 	mul	r4,r4,r18
 8009f04:	7806d43a 	srli	r3,r15,16
 8009f08:	2810d43a 	srli	r8,r5,16
 8009f0c:	297fffcc 	andi	r5,r5,65535
 8009f10:	1907883a 	add	r3,r3,r4
 8009f14:	1a07883a 	add	r3,r3,r8
 8009f18:	1808943a 	slli	r4,r3,16
 8009f1c:	480f883a 	mov	r7,r9
 8009f20:	1810d43a 	srli	r8,r3,16
 8009f24:	214ab03a 	or	r5,r4,r5
 8009f28:	49400015 	stw	r5,0(r9)
 8009f2c:	4a400104 	addi	r9,r9,4
 8009f30:	8abfea36 	bltu	r17,r10,8009edc <__ram_exceptions_end+0xf7f89c9c>
 8009f34:	3a000115 	stw	r8,4(r7)
 8009f38:	34400017 	ldw	r17,0(r6)
 8009f3c:	8822d43a 	srli	r17,r17,16
 8009f40:	88001f26 	beq	r17,zero,8009fc0 <__multiply+0x198>
 8009f44:	60c00017 	ldw	r3,0(r12)
 8009f48:	7013883a 	mov	r9,r14
 8009f4c:	601f883a 	mov	r15,r12
 8009f50:	1811883a 	mov	r8,r3
 8009f54:	6027883a 	mov	r19,r12
 8009f58:	000f883a 	mov	r7,zero
 8009f5c:	00000106 	br	8009f64 <__multiply+0x13c>
 8009f60:	9027883a 	mov	r19,r18
 8009f64:	4940000b 	ldhu	r5,0(r9)
 8009f68:	4010d43a 	srli	r8,r8,16
 8009f6c:	193fffcc 	andi	r4,r3,65535
 8009f70:	2c4b383a 	mul	r5,r5,r17
 8009f74:	7bc00104 	addi	r15,r15,4
 8009f78:	4a400104 	addi	r9,r9,4
 8009f7c:	2a0b883a 	add	r5,r5,r8
 8009f80:	29cb883a 	add	r5,r5,r7
 8009f84:	2806943a 	slli	r3,r5,16
 8009f88:	9c800104 	addi	r18,r19,4
 8009f8c:	280ad43a 	srli	r5,r5,16
 8009f90:	1908b03a 	or	r4,r3,r4
 8009f94:	793fff15 	stw	r4,-4(r15)
 8009f98:	48ffff17 	ldw	r3,-4(r9)
 8009f9c:	92000017 	ldw	r8,0(r18)
 8009fa0:	1806d43a 	srli	r3,r3,16
 8009fa4:	413fffcc 	andi	r4,r8,65535
 8009fa8:	1c47383a 	mul	r3,r3,r17
 8009fac:	1907883a 	add	r3,r3,r4
 8009fb0:	1947883a 	add	r3,r3,r5
 8009fb4:	180ed43a 	srli	r7,r3,16
 8009fb8:	4abfe936 	bltu	r9,r10,8009f60 <__ram_exceptions_end+0xf7f89d20>
 8009fbc:	98c00115 	stw	r3,4(r19)
 8009fc0:	31800104 	addi	r6,r6,4
 8009fc4:	63000104 	addi	r12,r12,4
 8009fc8:	337fbe36 	bltu	r6,r13,8009ec4 <__ram_exceptions_end+0xf7f89c84>
 8009fcc:	0400090e 	bge	zero,r16,8009ff4 <__multiply+0x1cc>
 8009fd0:	58ffff17 	ldw	r3,-4(r11)
 8009fd4:	5affff04 	addi	r11,r11,-4
 8009fd8:	18000326 	beq	r3,zero,8009fe8 <__multiply+0x1c0>
 8009fdc:	00000506 	br	8009ff4 <__multiply+0x1cc>
 8009fe0:	58c00017 	ldw	r3,0(r11)
 8009fe4:	1800031e 	bne	r3,zero,8009ff4 <__multiply+0x1cc>
 8009fe8:	843fffc4 	addi	r16,r16,-1
 8009fec:	5affff04 	addi	r11,r11,-4
 8009ff0:	803ffb1e 	bne	r16,zero,8009fe0 <__ram_exceptions_end+0xf7f89da0>
 8009ff4:	14000415 	stw	r16,16(r2)
 8009ff8:	dfc00517 	ldw	ra,20(sp)
 8009ffc:	dd000417 	ldw	r20,16(sp)
 800a000:	dcc00317 	ldw	r19,12(sp)
 800a004:	dc800217 	ldw	r18,8(sp)
 800a008:	dc400117 	ldw	r17,4(sp)
 800a00c:	dc000017 	ldw	r16,0(sp)
 800a010:	dec00604 	addi	sp,sp,24
 800a014:	f800283a 	ret
 800a018:	3029883a 	mov	r20,r6
 800a01c:	2823883a 	mov	r17,r5
 800a020:	003f9006 	br	8009e64 <__ram_exceptions_end+0xf7f89c24>

0800a024 <__pow5mult>:
 800a024:	defffa04 	addi	sp,sp,-24
 800a028:	dcc00315 	stw	r19,12(sp)
 800a02c:	dc800215 	stw	r18,8(sp)
 800a030:	dc000015 	stw	r16,0(sp)
 800a034:	dfc00515 	stw	ra,20(sp)
 800a038:	dd000415 	stw	r20,16(sp)
 800a03c:	dc400115 	stw	r17,4(sp)
 800a040:	308000cc 	andi	r2,r6,3
 800a044:	3021883a 	mov	r16,r6
 800a048:	2027883a 	mov	r19,r4
 800a04c:	2825883a 	mov	r18,r5
 800a050:	10002e1e 	bne	r2,zero,800a10c <__pow5mult+0xe8>
 800a054:	8021d0ba 	srai	r16,r16,2
 800a058:	80001a26 	beq	r16,zero,800a0c4 <__pow5mult+0xa0>
 800a05c:	9c401217 	ldw	r17,72(r19)
 800a060:	8800061e 	bne	r17,zero,800a07c <__pow5mult+0x58>
 800a064:	00003406 	br	800a138 <__pow5mult+0x114>
 800a068:	8021d07a 	srai	r16,r16,1
 800a06c:	80001526 	beq	r16,zero,800a0c4 <__pow5mult+0xa0>
 800a070:	88800017 	ldw	r2,0(r17)
 800a074:	10001c26 	beq	r2,zero,800a0e8 <__pow5mult+0xc4>
 800a078:	1023883a 	mov	r17,r2
 800a07c:	80c0004c 	andi	r3,r16,1
 800a080:	183ff926 	beq	r3,zero,800a068 <__ram_exceptions_end+0xf7f89e28>
 800a084:	900b883a 	mov	r5,r18
 800a088:	880d883a 	mov	r6,r17
 800a08c:	9809883a 	mov	r4,r19
 800a090:	8009e280 	call	8009e28 <__multiply>
 800a094:	90001b26 	beq	r18,zero,800a104 <__pow5mult+0xe0>
 800a098:	91c00117 	ldw	r7,4(r18)
 800a09c:	98c01317 	ldw	r3,76(r19)
 800a0a0:	8021d07a 	srai	r16,r16,1
 800a0a4:	39cf883a 	add	r7,r7,r7
 800a0a8:	39cf883a 	add	r7,r7,r7
 800a0ac:	19c7883a 	add	r3,r3,r7
 800a0b0:	19000017 	ldw	r4,0(r3)
 800a0b4:	91000015 	stw	r4,0(r18)
 800a0b8:	1c800015 	stw	r18,0(r3)
 800a0bc:	1025883a 	mov	r18,r2
 800a0c0:	803feb1e 	bne	r16,zero,800a070 <__ram_exceptions_end+0xf7f89e30>
 800a0c4:	9005883a 	mov	r2,r18
 800a0c8:	dfc00517 	ldw	ra,20(sp)
 800a0cc:	dd000417 	ldw	r20,16(sp)
 800a0d0:	dcc00317 	ldw	r19,12(sp)
 800a0d4:	dc800217 	ldw	r18,8(sp)
 800a0d8:	dc400117 	ldw	r17,4(sp)
 800a0dc:	dc000017 	ldw	r16,0(sp)
 800a0e0:	dec00604 	addi	sp,sp,24
 800a0e4:	f800283a 	ret
 800a0e8:	9809883a 	mov	r4,r19
 800a0ec:	880b883a 	mov	r5,r17
 800a0f0:	880d883a 	mov	r6,r17
 800a0f4:	8009e280 	call	8009e28 <__multiply>
 800a0f8:	88800015 	stw	r2,0(r17)
 800a0fc:	10000015 	stw	zero,0(r2)
 800a100:	003fdd06 	br	800a078 <__ram_exceptions_end+0xf7f89e38>
 800a104:	1025883a 	mov	r18,r2
 800a108:	003fd706 	br	800a068 <__ram_exceptions_end+0xf7f89e28>
 800a10c:	10bfffc4 	addi	r2,r2,-1
 800a110:	1085883a 	add	r2,r2,r2
 800a114:	00c20074 	movhi	r3,2049
 800a118:	18ca3404 	addi	r3,r3,10448
 800a11c:	1085883a 	add	r2,r2,r2
 800a120:	1885883a 	add	r2,r3,r2
 800a124:	11800017 	ldw	r6,0(r2)
 800a128:	000f883a 	mov	r7,zero
 800a12c:	8009abc0 	call	8009abc <__multadd>
 800a130:	1025883a 	mov	r18,r2
 800a134:	003fc706 	br	800a054 <__ram_exceptions_end+0xf7f89e14>
 800a138:	05000044 	movi	r20,1
 800a13c:	9809883a 	mov	r4,r19
 800a140:	a00b883a 	mov	r5,r20
 800a144:	80099ec0 	call	80099ec <_Balloc>
 800a148:	1023883a 	mov	r17,r2
 800a14c:	00809c44 	movi	r2,625
 800a150:	88800515 	stw	r2,20(r17)
 800a154:	8d000415 	stw	r20,16(r17)
 800a158:	9c401215 	stw	r17,72(r19)
 800a15c:	88000015 	stw	zero,0(r17)
 800a160:	003fc606 	br	800a07c <__ram_exceptions_end+0xf7f89e3c>

0800a164 <__lshift>:
 800a164:	defff904 	addi	sp,sp,-28
 800a168:	dd000415 	stw	r20,16(sp)
 800a16c:	dcc00315 	stw	r19,12(sp)
 800a170:	3029d17a 	srai	r20,r6,5
 800a174:	2cc00417 	ldw	r19,16(r5)
 800a178:	28800217 	ldw	r2,8(r5)
 800a17c:	dd400515 	stw	r21,20(sp)
 800a180:	a4e7883a 	add	r19,r20,r19
 800a184:	dc800215 	stw	r18,8(sp)
 800a188:	dc400115 	stw	r17,4(sp)
 800a18c:	dc000015 	stw	r16,0(sp)
 800a190:	dfc00615 	stw	ra,24(sp)
 800a194:	9c000044 	addi	r16,r19,1
 800a198:	2823883a 	mov	r17,r5
 800a19c:	302b883a 	mov	r21,r6
 800a1a0:	2025883a 	mov	r18,r4
 800a1a4:	29400117 	ldw	r5,4(r5)
 800a1a8:	1400030e 	bge	r2,r16,800a1b8 <__lshift+0x54>
 800a1ac:	1085883a 	add	r2,r2,r2
 800a1b0:	29400044 	addi	r5,r5,1
 800a1b4:	143ffd16 	blt	r2,r16,800a1ac <__ram_exceptions_end+0xf7f89f6c>
 800a1b8:	9009883a 	mov	r4,r18
 800a1bc:	80099ec0 	call	80099ec <_Balloc>
 800a1c0:	11c00504 	addi	r7,r2,20
 800a1c4:	0500090e 	bge	zero,r20,800a1ec <__lshift+0x88>
 800a1c8:	3811883a 	mov	r8,r7
 800a1cc:	0007883a 	mov	r3,zero
 800a1d0:	40000015 	stw	zero,0(r8)
 800a1d4:	18c00044 	addi	r3,r3,1
 800a1d8:	42000104 	addi	r8,r8,4
 800a1dc:	1d3ffc1e 	bne	r3,r20,800a1d0 <__ram_exceptions_end+0xf7f89f90>
 800a1e0:	18c7883a 	add	r3,r3,r3
 800a1e4:	18c7883a 	add	r3,r3,r3
 800a1e8:	38cf883a 	add	r7,r7,r3
 800a1ec:	89000417 	ldw	r4,16(r17)
 800a1f0:	88c00504 	addi	r3,r17,20
 800a1f4:	a98007cc 	andi	r6,r21,31
 800a1f8:	2109883a 	add	r4,r4,r4
 800a1fc:	2109883a 	add	r4,r4,r4
 800a200:	1909883a 	add	r4,r3,r4
 800a204:	30002326 	beq	r6,zero,800a294 <__lshift+0x130>
 800a208:	01400804 	movi	r5,32
 800a20c:	298bc83a 	sub	r5,r5,r6
 800a210:	0013883a 	mov	r9,zero
 800a214:	1a000017 	ldw	r8,0(r3)
 800a218:	3815883a 	mov	r10,r7
 800a21c:	39c00104 	addi	r7,r7,4
 800a220:	4190983a 	sll	r8,r8,r6
 800a224:	18c00104 	addi	r3,r3,4
 800a228:	4a10b03a 	or	r8,r9,r8
 800a22c:	3a3fff15 	stw	r8,-4(r7)
 800a230:	1a3fff17 	ldw	r8,-4(r3)
 800a234:	4152d83a 	srl	r9,r8,r5
 800a238:	193ff636 	bltu	r3,r4,800a214 <__ram_exceptions_end+0xf7f89fd4>
 800a23c:	52400115 	stw	r9,4(r10)
 800a240:	48000126 	beq	r9,zero,800a248 <__lshift+0xe4>
 800a244:	9c000084 	addi	r16,r19,2
 800a248:	89000117 	ldw	r4,4(r17)
 800a24c:	90c01317 	ldw	r3,76(r18)
 800a250:	843fffc4 	addi	r16,r16,-1
 800a254:	2109883a 	add	r4,r4,r4
 800a258:	2109883a 	add	r4,r4,r4
 800a25c:	1907883a 	add	r3,r3,r4
 800a260:	19000017 	ldw	r4,0(r3)
 800a264:	14000415 	stw	r16,16(r2)
 800a268:	89000015 	stw	r4,0(r17)
 800a26c:	1c400015 	stw	r17,0(r3)
 800a270:	dfc00617 	ldw	ra,24(sp)
 800a274:	dd400517 	ldw	r21,20(sp)
 800a278:	dd000417 	ldw	r20,16(sp)
 800a27c:	dcc00317 	ldw	r19,12(sp)
 800a280:	dc800217 	ldw	r18,8(sp)
 800a284:	dc400117 	ldw	r17,4(sp)
 800a288:	dc000017 	ldw	r16,0(sp)
 800a28c:	dec00704 	addi	sp,sp,28
 800a290:	f800283a 	ret
 800a294:	19400017 	ldw	r5,0(r3)
 800a298:	39c00104 	addi	r7,r7,4
 800a29c:	18c00104 	addi	r3,r3,4
 800a2a0:	397fff15 	stw	r5,-4(r7)
 800a2a4:	193ffb36 	bltu	r3,r4,800a294 <__ram_exceptions_end+0xf7f8a054>
 800a2a8:	003fe706 	br	800a248 <__ram_exceptions_end+0xf7f8a008>

0800a2ac <__mcmp>:
 800a2ac:	20800417 	ldw	r2,16(r4)
 800a2b0:	28c00417 	ldw	r3,16(r5)
 800a2b4:	10c5c83a 	sub	r2,r2,r3
 800a2b8:	1000111e 	bne	r2,zero,800a300 <__mcmp+0x54>
 800a2bc:	18c7883a 	add	r3,r3,r3
 800a2c0:	18c7883a 	add	r3,r3,r3
 800a2c4:	21000504 	addi	r4,r4,20
 800a2c8:	29400504 	addi	r5,r5,20
 800a2cc:	20c5883a 	add	r2,r4,r3
 800a2d0:	28cb883a 	add	r5,r5,r3
 800a2d4:	00000106 	br	800a2dc <__mcmp+0x30>
 800a2d8:	20800a2e 	bgeu	r4,r2,800a304 <__mcmp+0x58>
 800a2dc:	10bfff04 	addi	r2,r2,-4
 800a2e0:	297fff04 	addi	r5,r5,-4
 800a2e4:	11800017 	ldw	r6,0(r2)
 800a2e8:	28c00017 	ldw	r3,0(r5)
 800a2ec:	30fffa26 	beq	r6,r3,800a2d8 <__ram_exceptions_end+0xf7f8a098>
 800a2f0:	30c00236 	bltu	r6,r3,800a2fc <__mcmp+0x50>
 800a2f4:	00800044 	movi	r2,1
 800a2f8:	f800283a 	ret
 800a2fc:	00bfffc4 	movi	r2,-1
 800a300:	f800283a 	ret
 800a304:	0005883a 	mov	r2,zero
 800a308:	f800283a 	ret

0800a30c <__mdiff>:
 800a30c:	defffb04 	addi	sp,sp,-20
 800a310:	dc000015 	stw	r16,0(sp)
 800a314:	2821883a 	mov	r16,r5
 800a318:	dcc00315 	stw	r19,12(sp)
 800a31c:	300b883a 	mov	r5,r6
 800a320:	2027883a 	mov	r19,r4
 800a324:	8009883a 	mov	r4,r16
 800a328:	dc800215 	stw	r18,8(sp)
 800a32c:	dfc00415 	stw	ra,16(sp)
 800a330:	dc400115 	stw	r17,4(sp)
 800a334:	3025883a 	mov	r18,r6
 800a338:	800a2ac0 	call	800a2ac <__mcmp>
 800a33c:	10005226 	beq	r2,zero,800a488 <__mdiff+0x17c>
 800a340:	10004c16 	blt	r2,zero,800a474 <__mdiff+0x168>
 800a344:	0023883a 	mov	r17,zero
 800a348:	81400117 	ldw	r5,4(r16)
 800a34c:	9809883a 	mov	r4,r19
 800a350:	80099ec0 	call	80099ec <_Balloc>
 800a354:	83400417 	ldw	r13,16(r16)
 800a358:	93800417 	ldw	r14,16(r18)
 800a35c:	81000504 	addi	r4,r16,20
 800a360:	6b59883a 	add	r12,r13,r13
 800a364:	739d883a 	add	r14,r14,r14
 800a368:	6319883a 	add	r12,r12,r12
 800a36c:	91800504 	addi	r6,r18,20
 800a370:	739d883a 	add	r14,r14,r14
 800a374:	14400315 	stw	r17,12(r2)
 800a378:	2319883a 	add	r12,r4,r12
 800a37c:	339d883a 	add	r14,r6,r14
 800a380:	12400504 	addi	r9,r2,20
 800a384:	0007883a 	mov	r3,zero
 800a388:	22000017 	ldw	r8,0(r4)
 800a38c:	32800017 	ldw	r10,0(r6)
 800a390:	4ac00104 	addi	r11,r9,4
 800a394:	41ffffcc 	andi	r7,r8,65535
 800a398:	38c7883a 	add	r3,r7,r3
 800a39c:	51ffffcc 	andi	r7,r10,65535
 800a3a0:	19cfc83a 	sub	r7,r3,r7
 800a3a4:	4010d43a 	srli	r8,r8,16
 800a3a8:	5014d43a 	srli	r10,r10,16
 800a3ac:	3807d43a 	srai	r3,r7,16
 800a3b0:	39ffffcc 	andi	r7,r7,65535
 800a3b4:	4291c83a 	sub	r8,r8,r10
 800a3b8:	40c7883a 	add	r3,r8,r3
 800a3bc:	1810943a 	slli	r8,r3,16
 800a3c0:	31800104 	addi	r6,r6,4
 800a3c4:	21000104 	addi	r4,r4,4
 800a3c8:	41ceb03a 	or	r7,r8,r7
 800a3cc:	49c00015 	stw	r7,0(r9)
 800a3d0:	1807d43a 	srai	r3,r3,16
 800a3d4:	580b883a 	mov	r5,r11
 800a3d8:	5813883a 	mov	r9,r11
 800a3dc:	33bfea36 	bltu	r6,r14,800a388 <__ram_exceptions_end+0xf7f8a148>
 800a3e0:	2011883a 	mov	r8,r4
 800a3e4:	2300152e 	bgeu	r4,r12,800a43c <__mdiff+0x130>
 800a3e8:	21400017 	ldw	r5,0(r4)
 800a3ec:	4a400104 	addi	r9,r9,4
 800a3f0:	21000104 	addi	r4,r4,4
 800a3f4:	29ffffcc 	andi	r7,r5,65535
 800a3f8:	38c7883a 	add	r3,r7,r3
 800a3fc:	280ad43a 	srli	r5,r5,16
 800a400:	180dd43a 	srai	r6,r3,16
 800a404:	19ffffcc 	andi	r7,r3,65535
 800a408:	3147883a 	add	r3,r6,r5
 800a40c:	180a943a 	slli	r5,r3,16
 800a410:	1807d43a 	srai	r3,r3,16
 800a414:	29ceb03a 	or	r7,r5,r7
 800a418:	49ffff15 	stw	r7,-4(r9)
 800a41c:	233ff236 	bltu	r4,r12,800a3e8 <__ram_exceptions_end+0xf7f8a1a8>
 800a420:	0206303a 	nor	r3,zero,r8
 800a424:	1b07883a 	add	r3,r3,r12
 800a428:	1806d0ba 	srli	r3,r3,2
 800a42c:	18c00044 	addi	r3,r3,1
 800a430:	18c7883a 	add	r3,r3,r3
 800a434:	18c7883a 	add	r3,r3,r3
 800a438:	58cb883a 	add	r5,r11,r3
 800a43c:	28ffff04 	addi	r3,r5,-4
 800a440:	3800041e 	bne	r7,zero,800a454 <__mdiff+0x148>
 800a444:	18ffff04 	addi	r3,r3,-4
 800a448:	19000017 	ldw	r4,0(r3)
 800a44c:	6b7fffc4 	addi	r13,r13,-1
 800a450:	203ffc26 	beq	r4,zero,800a444 <__ram_exceptions_end+0xf7f8a204>
 800a454:	13400415 	stw	r13,16(r2)
 800a458:	dfc00417 	ldw	ra,16(sp)
 800a45c:	dcc00317 	ldw	r19,12(sp)
 800a460:	dc800217 	ldw	r18,8(sp)
 800a464:	dc400117 	ldw	r17,4(sp)
 800a468:	dc000017 	ldw	r16,0(sp)
 800a46c:	dec00504 	addi	sp,sp,20
 800a470:	f800283a 	ret
 800a474:	8005883a 	mov	r2,r16
 800a478:	04400044 	movi	r17,1
 800a47c:	9021883a 	mov	r16,r18
 800a480:	1025883a 	mov	r18,r2
 800a484:	003fb006 	br	800a348 <__ram_exceptions_end+0xf7f8a108>
 800a488:	9809883a 	mov	r4,r19
 800a48c:	000b883a 	mov	r5,zero
 800a490:	80099ec0 	call	80099ec <_Balloc>
 800a494:	00c00044 	movi	r3,1
 800a498:	10c00415 	stw	r3,16(r2)
 800a49c:	10000515 	stw	zero,20(r2)
 800a4a0:	003fed06 	br	800a458 <__ram_exceptions_end+0xf7f8a218>

0800a4a4 <__ulp>:
 800a4a4:	295ffc2c 	andhi	r5,r5,32752
 800a4a8:	00bf3034 	movhi	r2,64704
 800a4ac:	2887883a 	add	r3,r5,r2
 800a4b0:	00c0020e 	bge	zero,r3,800a4bc <__ulp+0x18>
 800a4b4:	0005883a 	mov	r2,zero
 800a4b8:	f800283a 	ret
 800a4bc:	00c7c83a 	sub	r3,zero,r3
 800a4c0:	180bd53a 	srai	r5,r3,20
 800a4c4:	008004c4 	movi	r2,19
 800a4c8:	11400a0e 	bge	r2,r5,800a4f4 <__ulp+0x50>
 800a4cc:	00800c84 	movi	r2,50
 800a4d0:	0007883a 	mov	r3,zero
 800a4d4:	11400516 	blt	r2,r5,800a4ec <__ulp+0x48>
 800a4d8:	00800cc4 	movi	r2,51
 800a4dc:	114bc83a 	sub	r5,r2,r5
 800a4e0:	00800044 	movi	r2,1
 800a4e4:	1144983a 	sll	r2,r2,r5
 800a4e8:	f800283a 	ret
 800a4ec:	00800044 	movi	r2,1
 800a4f0:	f800283a 	ret
 800a4f4:	00800234 	movhi	r2,8
 800a4f8:	1147d83a 	sra	r3,r2,r5
 800a4fc:	0005883a 	mov	r2,zero
 800a500:	f800283a 	ret

0800a504 <__b2d>:
 800a504:	defffa04 	addi	sp,sp,-24
 800a508:	dc000015 	stw	r16,0(sp)
 800a50c:	24000417 	ldw	r16,16(r4)
 800a510:	dc400115 	stw	r17,4(sp)
 800a514:	24400504 	addi	r17,r4,20
 800a518:	8421883a 	add	r16,r16,r16
 800a51c:	8421883a 	add	r16,r16,r16
 800a520:	8c21883a 	add	r16,r17,r16
 800a524:	dc800215 	stw	r18,8(sp)
 800a528:	84bfff17 	ldw	r18,-4(r16)
 800a52c:	dd000415 	stw	r20,16(sp)
 800a530:	dcc00315 	stw	r19,12(sp)
 800a534:	9009883a 	mov	r4,r18
 800a538:	2829883a 	mov	r20,r5
 800a53c:	dfc00515 	stw	ra,20(sp)
 800a540:	8009cd40 	call	8009cd4 <__hi0bits>
 800a544:	00c00804 	movi	r3,32
 800a548:	1887c83a 	sub	r3,r3,r2
 800a54c:	a0c00015 	stw	r3,0(r20)
 800a550:	00c00284 	movi	r3,10
 800a554:	84ffff04 	addi	r19,r16,-4
 800a558:	18801216 	blt	r3,r2,800a5a4 <__b2d+0xa0>
 800a55c:	014002c4 	movi	r5,11
 800a560:	2889c83a 	sub	r4,r5,r2
 800a564:	9106d83a 	srl	r3,r18,r4
 800a568:	18cffc34 	orhi	r3,r3,16368
 800a56c:	8cc0282e 	bgeu	r17,r19,800a610 <__b2d+0x10c>
 800a570:	817ffe17 	ldw	r5,-8(r16)
 800a574:	290ad83a 	srl	r5,r5,r4
 800a578:	10800544 	addi	r2,r2,21
 800a57c:	9084983a 	sll	r2,r18,r2
 800a580:	2884b03a 	or	r2,r5,r2
 800a584:	dfc00517 	ldw	ra,20(sp)
 800a588:	dd000417 	ldw	r20,16(sp)
 800a58c:	dcc00317 	ldw	r19,12(sp)
 800a590:	dc800217 	ldw	r18,8(sp)
 800a594:	dc400117 	ldw	r17,4(sp)
 800a598:	dc000017 	ldw	r16,0(sp)
 800a59c:	dec00604 	addi	sp,sp,24
 800a5a0:	f800283a 	ret
 800a5a4:	113ffd44 	addi	r4,r2,-11
 800a5a8:	8cc00f2e 	bgeu	r17,r19,800a5e8 <__b2d+0xe4>
 800a5ac:	81bffe04 	addi	r6,r16,-8
 800a5b0:	817ffe17 	ldw	r5,-8(r16)
 800a5b4:	20001326 	beq	r4,zero,800a604 <__b2d+0x100>
 800a5b8:	00c00ac4 	movi	r3,43
 800a5bc:	1885c83a 	sub	r2,r3,r2
 800a5c0:	2886d83a 	srl	r3,r5,r2
 800a5c4:	9124983a 	sll	r18,r18,r4
 800a5c8:	90e4b03a 	or	r18,r18,r3
 800a5cc:	90cffc34 	orhi	r3,r18,16368
 800a5d0:	8980112e 	bgeu	r17,r6,800a618 <__b2d+0x114>
 800a5d4:	81bffd17 	ldw	r6,-12(r16)
 800a5d8:	308cd83a 	srl	r6,r6,r2
 800a5dc:	2904983a 	sll	r2,r5,r4
 800a5e0:	1184b03a 	or	r2,r2,r6
 800a5e4:	003fe706 	br	800a584 <__ram_exceptions_end+0xf7f8a344>
 800a5e8:	20000526 	beq	r4,zero,800a600 <__b2d+0xfc>
 800a5ec:	9124983a 	sll	r18,r18,r4
 800a5f0:	000d883a 	mov	r6,zero
 800a5f4:	000b883a 	mov	r5,zero
 800a5f8:	90cffc34 	orhi	r3,r18,16368
 800a5fc:	003ff706 	br	800a5dc <__ram_exceptions_end+0xf7f8a39c>
 800a600:	000b883a 	mov	r5,zero
 800a604:	90cffc34 	orhi	r3,r18,16368
 800a608:	2805883a 	mov	r2,r5
 800a60c:	003fdd06 	br	800a584 <__ram_exceptions_end+0xf7f8a344>
 800a610:	000b883a 	mov	r5,zero
 800a614:	003fd806 	br	800a578 <__ram_exceptions_end+0xf7f8a338>
 800a618:	000d883a 	mov	r6,zero
 800a61c:	003fef06 	br	800a5dc <__ram_exceptions_end+0xf7f8a39c>

0800a620 <__d2b>:
 800a620:	defff704 	addi	sp,sp,-36
 800a624:	dc000215 	stw	r16,8(sp)
 800a628:	3021883a 	mov	r16,r6
 800a62c:	dc400315 	stw	r17,12(sp)
 800a630:	8022907a 	slli	r17,r16,1
 800a634:	dd400715 	stw	r21,28(sp)
 800a638:	282b883a 	mov	r21,r5
 800a63c:	01400044 	movi	r5,1
 800a640:	dd000615 	stw	r20,24(sp)
 800a644:	dcc00515 	stw	r19,20(sp)
 800a648:	dc800415 	stw	r18,16(sp)
 800a64c:	dfc00815 	stw	ra,32(sp)
 800a650:	3829883a 	mov	r20,r7
 800a654:	dc800917 	ldw	r18,36(sp)
 800a658:	8822d57a 	srli	r17,r17,21
 800a65c:	80099ec0 	call	80099ec <_Balloc>
 800a660:	1027883a 	mov	r19,r2
 800a664:	00800434 	movhi	r2,16
 800a668:	10bfffc4 	addi	r2,r2,-1
 800a66c:	808c703a 	and	r6,r16,r2
 800a670:	88000126 	beq	r17,zero,800a678 <__d2b+0x58>
 800a674:	31800434 	orhi	r6,r6,16
 800a678:	d9800015 	stw	r6,0(sp)
 800a67c:	a8001f26 	beq	r21,zero,800a6fc <__d2b+0xdc>
 800a680:	d9000104 	addi	r4,sp,4
 800a684:	dd400115 	stw	r21,4(sp)
 800a688:	8009d3c0 	call	8009d3c <__lo0bits>
 800a68c:	d8c00017 	ldw	r3,0(sp)
 800a690:	1000291e 	bne	r2,zero,800a738 <__d2b+0x118>
 800a694:	d9000117 	ldw	r4,4(sp)
 800a698:	99000515 	stw	r4,20(r19)
 800a69c:	1820c03a 	cmpne	r16,r3,zero
 800a6a0:	84000044 	addi	r16,r16,1
 800a6a4:	98c00615 	stw	r3,24(r19)
 800a6a8:	9c000415 	stw	r16,16(r19)
 800a6ac:	88001b1e 	bne	r17,zero,800a71c <__d2b+0xfc>
 800a6b0:	800690ba 	slli	r3,r16,2
 800a6b4:	10bef384 	addi	r2,r2,-1074
 800a6b8:	a0800015 	stw	r2,0(r20)
 800a6bc:	98c5883a 	add	r2,r19,r3
 800a6c0:	11000417 	ldw	r4,16(r2)
 800a6c4:	8020917a 	slli	r16,r16,5
 800a6c8:	8009cd40 	call	8009cd4 <__hi0bits>
 800a6cc:	8085c83a 	sub	r2,r16,r2
 800a6d0:	90800015 	stw	r2,0(r18)
 800a6d4:	9805883a 	mov	r2,r19
 800a6d8:	dfc00817 	ldw	ra,32(sp)
 800a6dc:	dd400717 	ldw	r21,28(sp)
 800a6e0:	dd000617 	ldw	r20,24(sp)
 800a6e4:	dcc00517 	ldw	r19,20(sp)
 800a6e8:	dc800417 	ldw	r18,16(sp)
 800a6ec:	dc400317 	ldw	r17,12(sp)
 800a6f0:	dc000217 	ldw	r16,8(sp)
 800a6f4:	dec00904 	addi	sp,sp,36
 800a6f8:	f800283a 	ret
 800a6fc:	d809883a 	mov	r4,sp
 800a700:	8009d3c0 	call	8009d3c <__lo0bits>
 800a704:	d8c00017 	ldw	r3,0(sp)
 800a708:	04000044 	movi	r16,1
 800a70c:	9c000415 	stw	r16,16(r19)
 800a710:	98c00515 	stw	r3,20(r19)
 800a714:	10800804 	addi	r2,r2,32
 800a718:	883fe526 	beq	r17,zero,800a6b0 <__ram_exceptions_end+0xf7f8a470>
 800a71c:	8c7ef344 	addi	r17,r17,-1075
 800a720:	88a3883a 	add	r17,r17,r2
 800a724:	00c00d44 	movi	r3,53
 800a728:	a4400015 	stw	r17,0(r20)
 800a72c:	1885c83a 	sub	r2,r3,r2
 800a730:	90800015 	stw	r2,0(r18)
 800a734:	003fe706 	br	800a6d4 <__ram_exceptions_end+0xf7f8a494>
 800a738:	01000804 	movi	r4,32
 800a73c:	2089c83a 	sub	r4,r4,r2
 800a740:	1908983a 	sll	r4,r3,r4
 800a744:	d9400117 	ldw	r5,4(sp)
 800a748:	1886d83a 	srl	r3,r3,r2
 800a74c:	2148b03a 	or	r4,r4,r5
 800a750:	99000515 	stw	r4,20(r19)
 800a754:	d8c00015 	stw	r3,0(sp)
 800a758:	003fd006 	br	800a69c <__ram_exceptions_end+0xf7f8a45c>

0800a75c <__ratio>:
 800a75c:	defff904 	addi	sp,sp,-28
 800a760:	dc400315 	stw	r17,12(sp)
 800a764:	2823883a 	mov	r17,r5
 800a768:	d9400104 	addi	r5,sp,4
 800a76c:	dfc00615 	stw	ra,24(sp)
 800a770:	dcc00515 	stw	r19,20(sp)
 800a774:	dc800415 	stw	r18,16(sp)
 800a778:	2027883a 	mov	r19,r4
 800a77c:	dc000215 	stw	r16,8(sp)
 800a780:	800a5040 	call	800a504 <__b2d>
 800a784:	8809883a 	mov	r4,r17
 800a788:	d80b883a 	mov	r5,sp
 800a78c:	1025883a 	mov	r18,r2
 800a790:	1821883a 	mov	r16,r3
 800a794:	800a5040 	call	800a504 <__b2d>
 800a798:	8a400417 	ldw	r9,16(r17)
 800a79c:	9a000417 	ldw	r8,16(r19)
 800a7a0:	100d883a 	mov	r6,r2
 800a7a4:	d8800017 	ldw	r2,0(sp)
 800a7a8:	4251c83a 	sub	r8,r8,r9
 800a7ac:	4012917a 	slli	r9,r8,5
 800a7b0:	da000117 	ldw	r8,4(sp)
 800a7b4:	4091c83a 	sub	r8,r8,r2
 800a7b8:	4251883a 	add	r8,r8,r9
 800a7bc:	02000d0e 	bge	zero,r8,800a7f4 <__ratio+0x98>
 800a7c0:	4010953a 	slli	r8,r8,20
 800a7c4:	4421883a 	add	r16,r8,r16
 800a7c8:	9009883a 	mov	r4,r18
 800a7cc:	800b883a 	mov	r5,r16
 800a7d0:	180f883a 	mov	r7,r3
 800a7d4:	80032b80 	call	80032b8 <__divdf3>
 800a7d8:	dfc00617 	ldw	ra,24(sp)
 800a7dc:	dcc00517 	ldw	r19,20(sp)
 800a7e0:	dc800417 	ldw	r18,16(sp)
 800a7e4:	dc400317 	ldw	r17,12(sp)
 800a7e8:	dc000217 	ldw	r16,8(sp)
 800a7ec:	dec00704 	addi	sp,sp,28
 800a7f0:	f800283a 	ret
 800a7f4:	4010953a 	slli	r8,r8,20
 800a7f8:	1a07c83a 	sub	r3,r3,r8
 800a7fc:	003ff206 	br	800a7c8 <__ram_exceptions_end+0xf7f8a588>

0800a800 <_mprec_log10>:
 800a800:	defffe04 	addi	sp,sp,-8
 800a804:	dc000015 	stw	r16,0(sp)
 800a808:	dfc00115 	stw	ra,4(sp)
 800a80c:	008005c4 	movi	r2,23
 800a810:	2021883a 	mov	r16,r4
 800a814:	11000d0e 	bge	r2,r4,800a84c <_mprec_log10+0x4c>
 800a818:	0005883a 	mov	r2,zero
 800a81c:	00cffc34 	movhi	r3,16368
 800a820:	843fffc4 	addi	r16,r16,-1
 800a824:	1009883a 	mov	r4,r2
 800a828:	180b883a 	mov	r5,r3
 800a82c:	000d883a 	mov	r6,zero
 800a830:	01d00934 	movhi	r7,16420
 800a834:	800e7240 	call	800e724 <__muldf3>
 800a838:	803ff91e 	bne	r16,zero,800a820 <__ram_exceptions_end+0xf7f8a5e0>
 800a83c:	dfc00117 	ldw	ra,4(sp)
 800a840:	dc000017 	ldw	r16,0(sp)
 800a844:	dec00204 	addi	sp,sp,8
 800a848:	f800283a 	ret
 800a84c:	202090fa 	slli	r16,r4,3
 800a850:	00820074 	movhi	r2,2049
 800a854:	108a4b04 	addi	r2,r2,10540
 800a858:	1421883a 	add	r16,r2,r16
 800a85c:	80800017 	ldw	r2,0(r16)
 800a860:	80c00117 	ldw	r3,4(r16)
 800a864:	dfc00117 	ldw	ra,4(sp)
 800a868:	dc000017 	ldw	r16,0(sp)
 800a86c:	dec00204 	addi	sp,sp,8
 800a870:	f800283a 	ret

0800a874 <__copybits>:
 800a874:	297fffc4 	addi	r5,r5,-1
 800a878:	280fd17a 	srai	r7,r5,5
 800a87c:	30c00417 	ldw	r3,16(r6)
 800a880:	30800504 	addi	r2,r6,20
 800a884:	39c00044 	addi	r7,r7,1
 800a888:	18c7883a 	add	r3,r3,r3
 800a88c:	39cf883a 	add	r7,r7,r7
 800a890:	18c7883a 	add	r3,r3,r3
 800a894:	39cf883a 	add	r7,r7,r7
 800a898:	10c7883a 	add	r3,r2,r3
 800a89c:	21cf883a 	add	r7,r4,r7
 800a8a0:	10c00d2e 	bgeu	r2,r3,800a8d8 <__copybits+0x64>
 800a8a4:	200b883a 	mov	r5,r4
 800a8a8:	12000017 	ldw	r8,0(r2)
 800a8ac:	29400104 	addi	r5,r5,4
 800a8b0:	10800104 	addi	r2,r2,4
 800a8b4:	2a3fff15 	stw	r8,-4(r5)
 800a8b8:	10fffb36 	bltu	r2,r3,800a8a8 <__ram_exceptions_end+0xf7f8a668>
 800a8bc:	1985c83a 	sub	r2,r3,r6
 800a8c0:	10bffac4 	addi	r2,r2,-21
 800a8c4:	1004d0ba 	srli	r2,r2,2
 800a8c8:	10800044 	addi	r2,r2,1
 800a8cc:	1085883a 	add	r2,r2,r2
 800a8d0:	1085883a 	add	r2,r2,r2
 800a8d4:	2089883a 	add	r4,r4,r2
 800a8d8:	21c0032e 	bgeu	r4,r7,800a8e8 <__copybits+0x74>
 800a8dc:	20000015 	stw	zero,0(r4)
 800a8e0:	21000104 	addi	r4,r4,4
 800a8e4:	21fffd36 	bltu	r4,r7,800a8dc <__ram_exceptions_end+0xf7f8a69c>
 800a8e8:	f800283a 	ret

0800a8ec <__any_on>:
 800a8ec:	20c00417 	ldw	r3,16(r4)
 800a8f0:	2805d17a 	srai	r2,r5,5
 800a8f4:	21000504 	addi	r4,r4,20
 800a8f8:	18800d0e 	bge	r3,r2,800a930 <__any_on+0x44>
 800a8fc:	18c7883a 	add	r3,r3,r3
 800a900:	18c7883a 	add	r3,r3,r3
 800a904:	20c7883a 	add	r3,r4,r3
 800a908:	20c0192e 	bgeu	r4,r3,800a970 <__any_on+0x84>
 800a90c:	18bfff17 	ldw	r2,-4(r3)
 800a910:	18ffff04 	addi	r3,r3,-4
 800a914:	1000041e 	bne	r2,zero,800a928 <__any_on+0x3c>
 800a918:	20c0142e 	bgeu	r4,r3,800a96c <__any_on+0x80>
 800a91c:	18ffff04 	addi	r3,r3,-4
 800a920:	19400017 	ldw	r5,0(r3)
 800a924:	283ffc26 	beq	r5,zero,800a918 <__ram_exceptions_end+0xf7f8a6d8>
 800a928:	00800044 	movi	r2,1
 800a92c:	f800283a 	ret
 800a930:	10c00a0e 	bge	r2,r3,800a95c <__any_on+0x70>
 800a934:	1085883a 	add	r2,r2,r2
 800a938:	1085883a 	add	r2,r2,r2
 800a93c:	294007cc 	andi	r5,r5,31
 800a940:	2087883a 	add	r3,r4,r2
 800a944:	283ff026 	beq	r5,zero,800a908 <__ram_exceptions_end+0xf7f8a6c8>
 800a948:	19800017 	ldw	r6,0(r3)
 800a94c:	3144d83a 	srl	r2,r6,r5
 800a950:	114a983a 	sll	r5,r2,r5
 800a954:	29bff41e 	bne	r5,r6,800a928 <__ram_exceptions_end+0xf7f8a6e8>
 800a958:	003feb06 	br	800a908 <__ram_exceptions_end+0xf7f8a6c8>
 800a95c:	1085883a 	add	r2,r2,r2
 800a960:	1085883a 	add	r2,r2,r2
 800a964:	2087883a 	add	r3,r4,r2
 800a968:	003fe706 	br	800a908 <__ram_exceptions_end+0xf7f8a6c8>
 800a96c:	f800283a 	ret
 800a970:	0005883a 	mov	r2,zero
 800a974:	f800283a 	ret

0800a978 <_putc_r>:
 800a978:	defffc04 	addi	sp,sp,-16
 800a97c:	dc000215 	stw	r16,8(sp)
 800a980:	dfc00315 	stw	ra,12(sp)
 800a984:	2021883a 	mov	r16,r4
 800a988:	20000226 	beq	r4,zero,800a994 <_putc_r+0x1c>
 800a98c:	20800e17 	ldw	r2,56(r4)
 800a990:	10001b26 	beq	r2,zero,800aa00 <_putc_r+0x88>
 800a994:	30800217 	ldw	r2,8(r6)
 800a998:	10bfffc4 	addi	r2,r2,-1
 800a99c:	30800215 	stw	r2,8(r6)
 800a9a0:	10000a16 	blt	r2,zero,800a9cc <_putc_r+0x54>
 800a9a4:	30800017 	ldw	r2,0(r6)
 800a9a8:	11400005 	stb	r5,0(r2)
 800a9ac:	30800017 	ldw	r2,0(r6)
 800a9b0:	10c00044 	addi	r3,r2,1
 800a9b4:	30c00015 	stw	r3,0(r6)
 800a9b8:	10800003 	ldbu	r2,0(r2)
 800a9bc:	dfc00317 	ldw	ra,12(sp)
 800a9c0:	dc000217 	ldw	r16,8(sp)
 800a9c4:	dec00404 	addi	sp,sp,16
 800a9c8:	f800283a 	ret
 800a9cc:	30c00617 	ldw	r3,24(r6)
 800a9d0:	10c00616 	blt	r2,r3,800a9ec <_putc_r+0x74>
 800a9d4:	30800017 	ldw	r2,0(r6)
 800a9d8:	00c00284 	movi	r3,10
 800a9dc:	11400005 	stb	r5,0(r2)
 800a9e0:	30800017 	ldw	r2,0(r6)
 800a9e4:	11400003 	ldbu	r5,0(r2)
 800a9e8:	28fff11e 	bne	r5,r3,800a9b0 <__ram_exceptions_end+0xf7f8a770>
 800a9ec:	8009883a 	mov	r4,r16
 800a9f0:	dfc00317 	ldw	ra,12(sp)
 800a9f4:	dc000217 	ldw	r16,8(sp)
 800a9f8:	dec00404 	addi	sp,sp,16
 800a9fc:	800c7bc1 	jmpi	800c7bc <__swbuf_r>
 800aa00:	d9400015 	stw	r5,0(sp)
 800aa04:	d9800115 	stw	r6,4(sp)
 800aa08:	80081b80 	call	80081b8 <__sinit>
 800aa0c:	d9800117 	ldw	r6,4(sp)
 800aa10:	d9400017 	ldw	r5,0(sp)
 800aa14:	003fdf06 	br	800a994 <__ram_exceptions_end+0xf7f8a754>

0800aa18 <putc>:
 800aa18:	defffc04 	addi	sp,sp,-16
 800aa1c:	dc400115 	stw	r17,4(sp)
 800aa20:	04420074 	movhi	r17,2049
 800aa24:	8c514804 	addi	r17,r17,17696
 800aa28:	dc800215 	stw	r18,8(sp)
 800aa2c:	2025883a 	mov	r18,r4
 800aa30:	89000017 	ldw	r4,0(r17)
 800aa34:	dc000015 	stw	r16,0(sp)
 800aa38:	dfc00315 	stw	ra,12(sp)
 800aa3c:	2821883a 	mov	r16,r5
 800aa40:	20000226 	beq	r4,zero,800aa4c <putc+0x34>
 800aa44:	20c00e17 	ldw	r3,56(r4)
 800aa48:	18001a26 	beq	r3,zero,800aab4 <putc+0x9c>
 800aa4c:	80800217 	ldw	r2,8(r16)
 800aa50:	10bfffc4 	addi	r2,r2,-1
 800aa54:	80800215 	stw	r2,8(r16)
 800aa58:	10000c16 	blt	r2,zero,800aa8c <putc+0x74>
 800aa5c:	80800017 	ldw	r2,0(r16)
 800aa60:	14800005 	stb	r18,0(r2)
 800aa64:	80800017 	ldw	r2,0(r16)
 800aa68:	10c00044 	addi	r3,r2,1
 800aa6c:	80c00015 	stw	r3,0(r16)
 800aa70:	10800003 	ldbu	r2,0(r2)
 800aa74:	dfc00317 	ldw	ra,12(sp)
 800aa78:	dc800217 	ldw	r18,8(sp)
 800aa7c:	dc400117 	ldw	r17,4(sp)
 800aa80:	dc000017 	ldw	r16,0(sp)
 800aa84:	dec00404 	addi	sp,sp,16
 800aa88:	f800283a 	ret
 800aa8c:	80c00617 	ldw	r3,24(r16)
 800aa90:	10c00a16 	blt	r2,r3,800aabc <putc+0xa4>
 800aa94:	80800017 	ldw	r2,0(r16)
 800aa98:	00c00284 	movi	r3,10
 800aa9c:	14800005 	stb	r18,0(r2)
 800aaa0:	80800017 	ldw	r2,0(r16)
 800aaa4:	11400003 	ldbu	r5,0(r2)
 800aaa8:	28ffef1e 	bne	r5,r3,800aa68 <__ram_exceptions_end+0xf7f8a828>
 800aaac:	89000017 	ldw	r4,0(r17)
 800aab0:	00000406 	br	800aac4 <putc+0xac>
 800aab4:	80081b80 	call	80081b8 <__sinit>
 800aab8:	003fe406 	br	800aa4c <__ram_exceptions_end+0xf7f8a80c>
 800aabc:	89000017 	ldw	r4,0(r17)
 800aac0:	900b883a 	mov	r5,r18
 800aac4:	800d883a 	mov	r6,r16
 800aac8:	dfc00317 	ldw	ra,12(sp)
 800aacc:	dc800217 	ldw	r18,8(sp)
 800aad0:	dc400117 	ldw	r17,4(sp)
 800aad4:	dc000017 	ldw	r16,0(sp)
 800aad8:	dec00404 	addi	sp,sp,16
 800aadc:	800c7bc1 	jmpi	800c7bc <__swbuf_r>

0800aae0 <_realloc_r>:
 800aae0:	defff604 	addi	sp,sp,-40
 800aae4:	dcc00315 	stw	r19,12(sp)
 800aae8:	dc400115 	stw	r17,4(sp)
 800aaec:	dfc00915 	stw	ra,36(sp)
 800aaf0:	df000815 	stw	fp,32(sp)
 800aaf4:	ddc00715 	stw	r23,28(sp)
 800aaf8:	dd800615 	stw	r22,24(sp)
 800aafc:	dd400515 	stw	r21,20(sp)
 800ab00:	dd000415 	stw	r20,16(sp)
 800ab04:	dc800215 	stw	r18,8(sp)
 800ab08:	dc000015 	stw	r16,0(sp)
 800ab0c:	2827883a 	mov	r19,r5
 800ab10:	3023883a 	mov	r17,r6
 800ab14:	2800bf26 	beq	r5,zero,800ae14 <_realloc_r+0x334>
 800ab18:	2025883a 	mov	r18,r4
 800ab1c:	800fd600 	call	800fd60 <__malloc_lock>
 800ab20:	98ffff17 	ldw	r3,-4(r19)
 800ab24:	01bfff04 	movi	r6,-4
 800ab28:	890002c4 	addi	r4,r17,11
 800ab2c:	01c00584 	movi	r7,22
 800ab30:	9d7ffe04 	addi	r21,r19,-8
 800ab34:	19a0703a 	and	r16,r3,r6
 800ab38:	39003f2e 	bgeu	r7,r4,800ac38 <_realloc_r+0x158>
 800ab3c:	053ffe04 	movi	r20,-8
 800ab40:	2528703a 	and	r20,r4,r20
 800ab44:	a00f883a 	mov	r7,r20
 800ab48:	a0008216 	blt	r20,zero,800ad54 <_realloc_r+0x274>
 800ab4c:	a4408136 	bltu	r20,r17,800ad54 <_realloc_r+0x274>
 800ab50:	81c03c0e 	bge	r16,r7,800ac44 <_realloc_r+0x164>
 800ab54:	07020074 	movhi	fp,2049
 800ab58:	e70bb904 	addi	fp,fp,12004
 800ab5c:	e1000217 	ldw	r4,8(fp)
 800ab60:	ac05883a 	add	r2,r21,r16
 800ab64:	2080bf26 	beq	r4,r2,800ae64 <_realloc_r+0x384>
 800ab68:	11000117 	ldw	r4,4(r2)
 800ab6c:	023fff84 	movi	r8,-2
 800ab70:	2210703a 	and	r8,r4,r8
 800ab74:	1211883a 	add	r8,r2,r8
 800ab78:	41400117 	ldw	r5,4(r8)
 800ab7c:	2940004c 	andi	r5,r5,1
 800ab80:	28004a1e 	bne	r5,zero,800acac <_realloc_r+0x1cc>
 800ab84:	017fff04 	movi	r5,-4
 800ab88:	2148703a 	and	r4,r4,r5
 800ab8c:	2409883a 	add	r4,r4,r16
 800ab90:	21c0ad0e 	bge	r4,r7,800ae48 <_realloc_r+0x368>
 800ab94:	18c0004c 	andi	r3,r3,1
 800ab98:	18007f1e 	bne	r3,zero,800ad98 <_realloc_r+0x2b8>
 800ab9c:	9dfffe17 	ldw	r23,-8(r19)
 800aba0:	adefc83a 	sub	r23,r21,r23
 800aba4:	bd800117 	ldw	r22,4(r23)
 800aba8:	b14a703a 	and	r5,r22,r5
 800abac:	216d883a 	add	r22,r4,r5
 800abb0:	b1c04516 	blt	r22,r7,800acc8 <_realloc_r+0x1e8>
 800abb4:	10c00317 	ldw	r3,12(r2)
 800abb8:	10800217 	ldw	r2,8(r2)
 800abbc:	81bfff04 	addi	r6,r16,-4
 800abc0:	bc400204 	addi	r17,r23,8
 800abc4:	10c00315 	stw	r3,12(r2)
 800abc8:	18800215 	stw	r2,8(r3)
 800abcc:	b9400217 	ldw	r5,8(r23)
 800abd0:	b8c00317 	ldw	r3,12(r23)
 800abd4:	00800904 	movi	r2,36
 800abd8:	28c00315 	stw	r3,12(r5)
 800abdc:	19400215 	stw	r5,8(r3)
 800abe0:	1180ef36 	bltu	r2,r6,800afa0 <_realloc_r+0x4c0>
 800abe4:	008004c4 	movi	r2,19
 800abe8:	1180da2e 	bgeu	r2,r6,800af54 <_realloc_r+0x474>
 800abec:	98800017 	ldw	r2,0(r19)
 800abf0:	b8800215 	stw	r2,8(r23)
 800abf4:	98800117 	ldw	r2,4(r19)
 800abf8:	b8800315 	stw	r2,12(r23)
 800abfc:	008006c4 	movi	r2,27
 800ac00:	1180fc2e 	bgeu	r2,r6,800aff4 <_realloc_r+0x514>
 800ac04:	98800217 	ldw	r2,8(r19)
 800ac08:	b8800415 	stw	r2,16(r23)
 800ac0c:	98800317 	ldw	r2,12(r19)
 800ac10:	b8800515 	stw	r2,20(r23)
 800ac14:	00800904 	movi	r2,36
 800ac18:	3080421e 	bne	r6,r2,800ad24 <_realloc_r+0x244>
 800ac1c:	98800417 	ldw	r2,16(r19)
 800ac20:	9cc00604 	addi	r19,r19,24
 800ac24:	b8c00804 	addi	r3,r23,32
 800ac28:	b8800615 	stw	r2,24(r23)
 800ac2c:	98bfff17 	ldw	r2,-4(r19)
 800ac30:	b8800715 	stw	r2,28(r23)
 800ac34:	00003d06 	br	800ad2c <_realloc_r+0x24c>
 800ac38:	01c00404 	movi	r7,16
 800ac3c:	3829883a 	mov	r20,r7
 800ac40:	003fc206 	br	800ab4c <__ram_exceptions_end+0xf7f8a90c>
 800ac44:	9823883a 	mov	r17,r19
 800ac48:	850fc83a 	sub	r7,r16,r20
 800ac4c:	008003c4 	movi	r2,15
 800ac50:	18c0004c 	andi	r3,r3,1
 800ac54:	11c04336 	bltu	r2,r7,800ad64 <_realloc_r+0x284>
 800ac58:	1c06b03a 	or	r3,r3,r16
 800ac5c:	a8c00115 	stw	r3,4(r21)
 800ac60:	ac21883a 	add	r16,r21,r16
 800ac64:	80c00117 	ldw	r3,4(r16)
 800ac68:	18c00054 	ori	r3,r3,1
 800ac6c:	80c00115 	stw	r3,4(r16)
 800ac70:	9009883a 	mov	r4,r18
 800ac74:	800fd800 	call	800fd80 <__malloc_unlock>
 800ac78:	8805883a 	mov	r2,r17
 800ac7c:	dfc00917 	ldw	ra,36(sp)
 800ac80:	df000817 	ldw	fp,32(sp)
 800ac84:	ddc00717 	ldw	r23,28(sp)
 800ac88:	dd800617 	ldw	r22,24(sp)
 800ac8c:	dd400517 	ldw	r21,20(sp)
 800ac90:	dd000417 	ldw	r20,16(sp)
 800ac94:	dcc00317 	ldw	r19,12(sp)
 800ac98:	dc800217 	ldw	r18,8(sp)
 800ac9c:	dc400117 	ldw	r17,4(sp)
 800aca0:	dc000017 	ldw	r16,0(sp)
 800aca4:	dec00a04 	addi	sp,sp,40
 800aca8:	f800283a 	ret
 800acac:	18c0004c 	andi	r3,r3,1
 800acb0:	1800391e 	bne	r3,zero,800ad98 <_realloc_r+0x2b8>
 800acb4:	9dfffe17 	ldw	r23,-8(r19)
 800acb8:	00bfff04 	movi	r2,-4
 800acbc:	adefc83a 	sub	r23,r21,r23
 800acc0:	b9400117 	ldw	r5,4(r23)
 800acc4:	288a703a 	and	r5,r5,r2
 800acc8:	2c2d883a 	add	r22,r5,r16
 800accc:	b1c03216 	blt	r22,r7,800ad98 <_realloc_r+0x2b8>
 800acd0:	b8800317 	ldw	r2,12(r23)
 800acd4:	b8c00217 	ldw	r3,8(r23)
 800acd8:	81bfff04 	addi	r6,r16,-4
 800acdc:	01000904 	movi	r4,36
 800ace0:	18800315 	stw	r2,12(r3)
 800ace4:	10c00215 	stw	r3,8(r2)
 800ace8:	bc400204 	addi	r17,r23,8
 800acec:	2180ac36 	bltu	r4,r6,800afa0 <_realloc_r+0x4c0>
 800acf0:	008004c4 	movi	r2,19
 800acf4:	1180972e 	bgeu	r2,r6,800af54 <_realloc_r+0x474>
 800acf8:	98800017 	ldw	r2,0(r19)
 800acfc:	b8800215 	stw	r2,8(r23)
 800ad00:	98800117 	ldw	r2,4(r19)
 800ad04:	b8800315 	stw	r2,12(r23)
 800ad08:	008006c4 	movi	r2,27
 800ad0c:	1180b92e 	bgeu	r2,r6,800aff4 <_realloc_r+0x514>
 800ad10:	98800217 	ldw	r2,8(r19)
 800ad14:	b8800415 	stw	r2,16(r23)
 800ad18:	98800317 	ldw	r2,12(r19)
 800ad1c:	b8800515 	stw	r2,20(r23)
 800ad20:	313fbe26 	beq	r6,r4,800ac1c <__ram_exceptions_end+0xf7f8a9dc>
 800ad24:	b8c00604 	addi	r3,r23,24
 800ad28:	9cc00404 	addi	r19,r19,16
 800ad2c:	98800017 	ldw	r2,0(r19)
 800ad30:	b021883a 	mov	r16,r22
 800ad34:	b82b883a 	mov	r21,r23
 800ad38:	18800015 	stw	r2,0(r3)
 800ad3c:	98800117 	ldw	r2,4(r19)
 800ad40:	18800115 	stw	r2,4(r3)
 800ad44:	98800217 	ldw	r2,8(r19)
 800ad48:	18800215 	stw	r2,8(r3)
 800ad4c:	b8c00117 	ldw	r3,4(r23)
 800ad50:	003fbd06 	br	800ac48 <__ram_exceptions_end+0xf7f8aa08>
 800ad54:	00800304 	movi	r2,12
 800ad58:	90800015 	stw	r2,0(r18)
 800ad5c:	0005883a 	mov	r2,zero
 800ad60:	003fc606 	br	800ac7c <__ram_exceptions_end+0xf7f8aa3c>
 800ad64:	1d06b03a 	or	r3,r3,r20
 800ad68:	ad0b883a 	add	r5,r21,r20
 800ad6c:	a8c00115 	stw	r3,4(r21)
 800ad70:	38800054 	ori	r2,r7,1
 800ad74:	28800115 	stw	r2,4(r5)
 800ad78:	29cf883a 	add	r7,r5,r7
 800ad7c:	38800117 	ldw	r2,4(r7)
 800ad80:	9009883a 	mov	r4,r18
 800ad84:	29400204 	addi	r5,r5,8
 800ad88:	10800054 	ori	r2,r2,1
 800ad8c:	38800115 	stw	r2,4(r7)
 800ad90:	800832c0 	call	800832c <_free_r>
 800ad94:	003fb606 	br	800ac70 <__ram_exceptions_end+0xf7f8aa30>
 800ad98:	880b883a 	mov	r5,r17
 800ad9c:	9009883a 	mov	r4,r18
 800ada0:	8008ec80 	call	8008ec8 <_malloc_r>
 800ada4:	1023883a 	mov	r17,r2
 800ada8:	1000aa26 	beq	r2,zero,800b054 <_realloc_r+0x574>
 800adac:	98ffff17 	ldw	r3,-4(r19)
 800adb0:	113ffe04 	addi	r4,r2,-8
 800adb4:	00bfff84 	movi	r2,-2
 800adb8:	1884703a 	and	r2,r3,r2
 800adbc:	a885883a 	add	r2,r21,r2
 800adc0:	20808626 	beq	r4,r2,800afdc <_realloc_r+0x4fc>
 800adc4:	81bfff04 	addi	r6,r16,-4
 800adc8:	00800904 	movi	r2,36
 800adcc:	11807036 	bltu	r2,r6,800af90 <_realloc_r+0x4b0>
 800add0:	00c004c4 	movi	r3,19
 800add4:	19805636 	bltu	r3,r6,800af30 <_realloc_r+0x450>
 800add8:	8805883a 	mov	r2,r17
 800addc:	9807883a 	mov	r3,r19
 800ade0:	19000017 	ldw	r4,0(r3)
 800ade4:	11000015 	stw	r4,0(r2)
 800ade8:	19000117 	ldw	r4,4(r3)
 800adec:	11000115 	stw	r4,4(r2)
 800adf0:	18c00217 	ldw	r3,8(r3)
 800adf4:	10c00215 	stw	r3,8(r2)
 800adf8:	980b883a 	mov	r5,r19
 800adfc:	9009883a 	mov	r4,r18
 800ae00:	800832c0 	call	800832c <_free_r>
 800ae04:	9009883a 	mov	r4,r18
 800ae08:	800fd800 	call	800fd80 <__malloc_unlock>
 800ae0c:	8805883a 	mov	r2,r17
 800ae10:	003f9a06 	br	800ac7c <__ram_exceptions_end+0xf7f8aa3c>
 800ae14:	300b883a 	mov	r5,r6
 800ae18:	dfc00917 	ldw	ra,36(sp)
 800ae1c:	df000817 	ldw	fp,32(sp)
 800ae20:	ddc00717 	ldw	r23,28(sp)
 800ae24:	dd800617 	ldw	r22,24(sp)
 800ae28:	dd400517 	ldw	r21,20(sp)
 800ae2c:	dd000417 	ldw	r20,16(sp)
 800ae30:	dcc00317 	ldw	r19,12(sp)
 800ae34:	dc800217 	ldw	r18,8(sp)
 800ae38:	dc400117 	ldw	r17,4(sp)
 800ae3c:	dc000017 	ldw	r16,0(sp)
 800ae40:	dec00a04 	addi	sp,sp,40
 800ae44:	8008ec81 	jmpi	8008ec8 <_malloc_r>
 800ae48:	11400317 	ldw	r5,12(r2)
 800ae4c:	10800217 	ldw	r2,8(r2)
 800ae50:	9823883a 	mov	r17,r19
 800ae54:	2021883a 	mov	r16,r4
 800ae58:	11400315 	stw	r5,12(r2)
 800ae5c:	28800215 	stw	r2,8(r5)
 800ae60:	003f7906 	br	800ac48 <__ram_exceptions_end+0xf7f8aa08>
 800ae64:	21000117 	ldw	r4,4(r4)
 800ae68:	00bfff04 	movi	r2,-4
 800ae6c:	a1800404 	addi	r6,r20,16
 800ae70:	2088703a 	and	r4,r4,r2
 800ae74:	2409883a 	add	r4,r4,r16
 800ae78:	2180380e 	bge	r4,r6,800af5c <_realloc_r+0x47c>
 800ae7c:	18c0004c 	andi	r3,r3,1
 800ae80:	183fc51e 	bne	r3,zero,800ad98 <__ram_exceptions_end+0xf7f8ab58>
 800ae84:	9dfffe17 	ldw	r23,-8(r19)
 800ae88:	adefc83a 	sub	r23,r21,r23
 800ae8c:	b9400117 	ldw	r5,4(r23)
 800ae90:	288a703a 	and	r5,r5,r2
 800ae94:	216d883a 	add	r22,r4,r5
 800ae98:	b1bf8b16 	blt	r22,r6,800acc8 <__ram_exceptions_end+0xf7f8aa88>
 800ae9c:	b8800317 	ldw	r2,12(r23)
 800aea0:	b8c00217 	ldw	r3,8(r23)
 800aea4:	81bfff04 	addi	r6,r16,-4
 800aea8:	01000904 	movi	r4,36
 800aeac:	18800315 	stw	r2,12(r3)
 800aeb0:	10c00215 	stw	r3,8(r2)
 800aeb4:	bc400204 	addi	r17,r23,8
 800aeb8:	21805a36 	bltu	r4,r6,800b024 <_realloc_r+0x544>
 800aebc:	008004c4 	movi	r2,19
 800aec0:	1180562e 	bgeu	r2,r6,800b01c <_realloc_r+0x53c>
 800aec4:	98800017 	ldw	r2,0(r19)
 800aec8:	b8800215 	stw	r2,8(r23)
 800aecc:	98800117 	ldw	r2,4(r19)
 800aed0:	b8800315 	stw	r2,12(r23)
 800aed4:	008006c4 	movi	r2,27
 800aed8:	11805636 	bltu	r2,r6,800b034 <_realloc_r+0x554>
 800aedc:	b8800404 	addi	r2,r23,16
 800aee0:	9cc00204 	addi	r19,r19,8
 800aee4:	98c00017 	ldw	r3,0(r19)
 800aee8:	10c00015 	stw	r3,0(r2)
 800aeec:	98c00117 	ldw	r3,4(r19)
 800aef0:	10c00115 	stw	r3,4(r2)
 800aef4:	98c00217 	ldw	r3,8(r19)
 800aef8:	10c00215 	stw	r3,8(r2)
 800aefc:	bd07883a 	add	r3,r23,r20
 800af00:	b505c83a 	sub	r2,r22,r20
 800af04:	e0c00215 	stw	r3,8(fp)
 800af08:	10800054 	ori	r2,r2,1
 800af0c:	18800115 	stw	r2,4(r3)
 800af10:	b8800117 	ldw	r2,4(r23)
 800af14:	9009883a 	mov	r4,r18
 800af18:	1080004c 	andi	r2,r2,1
 800af1c:	a0a8b03a 	or	r20,r20,r2
 800af20:	bd000115 	stw	r20,4(r23)
 800af24:	800fd800 	call	800fd80 <__malloc_unlock>
 800af28:	8805883a 	mov	r2,r17
 800af2c:	003f5306 	br	800ac7c <__ram_exceptions_end+0xf7f8aa3c>
 800af30:	98c00017 	ldw	r3,0(r19)
 800af34:	88c00015 	stw	r3,0(r17)
 800af38:	98c00117 	ldw	r3,4(r19)
 800af3c:	88c00115 	stw	r3,4(r17)
 800af40:	00c006c4 	movi	r3,27
 800af44:	19801d36 	bltu	r3,r6,800afbc <_realloc_r+0x4dc>
 800af48:	88800204 	addi	r2,r17,8
 800af4c:	98c00204 	addi	r3,r19,8
 800af50:	003fa306 	br	800ade0 <__ram_exceptions_end+0xf7f8aba0>
 800af54:	8807883a 	mov	r3,r17
 800af58:	003f7406 	br	800ad2c <__ram_exceptions_end+0xf7f8aaec>
 800af5c:	ad2b883a 	add	r21,r21,r20
 800af60:	2505c83a 	sub	r2,r4,r20
 800af64:	e5400215 	stw	r21,8(fp)
 800af68:	10800054 	ori	r2,r2,1
 800af6c:	a8800115 	stw	r2,4(r21)
 800af70:	98bfff17 	ldw	r2,-4(r19)
 800af74:	9009883a 	mov	r4,r18
 800af78:	1080004c 	andi	r2,r2,1
 800af7c:	a0a8b03a 	or	r20,r20,r2
 800af80:	9d3fff15 	stw	r20,-4(r19)
 800af84:	800fd800 	call	800fd80 <__malloc_unlock>
 800af88:	9805883a 	mov	r2,r19
 800af8c:	003f3b06 	br	800ac7c <__ram_exceptions_end+0xf7f8aa3c>
 800af90:	8809883a 	mov	r4,r17
 800af94:	980b883a 	mov	r5,r19
 800af98:	80098900 	call	8009890 <memmove>
 800af9c:	003f9606 	br	800adf8 <__ram_exceptions_end+0xf7f8abb8>
 800afa0:	8809883a 	mov	r4,r17
 800afa4:	980b883a 	mov	r5,r19
 800afa8:	80098900 	call	8009890 <memmove>
 800afac:	b8c00117 	ldw	r3,4(r23)
 800afb0:	b021883a 	mov	r16,r22
 800afb4:	b82b883a 	mov	r21,r23
 800afb8:	003f2306 	br	800ac48 <__ram_exceptions_end+0xf7f8aa08>
 800afbc:	98c00217 	ldw	r3,8(r19)
 800afc0:	88c00215 	stw	r3,8(r17)
 800afc4:	98c00317 	ldw	r3,12(r19)
 800afc8:	88c00315 	stw	r3,12(r17)
 800afcc:	30800c26 	beq	r6,r2,800b000 <_realloc_r+0x520>
 800afd0:	88800404 	addi	r2,r17,16
 800afd4:	98c00404 	addi	r3,r19,16
 800afd8:	003f8106 	br	800ade0 <__ram_exceptions_end+0xf7f8aba0>
 800afdc:	893fff17 	ldw	r4,-4(r17)
 800afe0:	00bfff04 	movi	r2,-4
 800afe4:	9823883a 	mov	r17,r19
 800afe8:	2084703a 	and	r2,r4,r2
 800afec:	80a1883a 	add	r16,r16,r2
 800aff0:	003f1506 	br	800ac48 <__ram_exceptions_end+0xf7f8aa08>
 800aff4:	b8c00404 	addi	r3,r23,16
 800aff8:	9cc00204 	addi	r19,r19,8
 800affc:	003f4b06 	br	800ad2c <__ram_exceptions_end+0xf7f8aaec>
 800b000:	99000417 	ldw	r4,16(r19)
 800b004:	88800604 	addi	r2,r17,24
 800b008:	98c00604 	addi	r3,r19,24
 800b00c:	89000415 	stw	r4,16(r17)
 800b010:	99000517 	ldw	r4,20(r19)
 800b014:	89000515 	stw	r4,20(r17)
 800b018:	003f7106 	br	800ade0 <__ram_exceptions_end+0xf7f8aba0>
 800b01c:	8805883a 	mov	r2,r17
 800b020:	003fb006 	br	800aee4 <__ram_exceptions_end+0xf7f8aca4>
 800b024:	8809883a 	mov	r4,r17
 800b028:	980b883a 	mov	r5,r19
 800b02c:	80098900 	call	8009890 <memmove>
 800b030:	003fb206 	br	800aefc <__ram_exceptions_end+0xf7f8acbc>
 800b034:	98800217 	ldw	r2,8(r19)
 800b038:	b8800415 	stw	r2,16(r23)
 800b03c:	98800317 	ldw	r2,12(r19)
 800b040:	b8800515 	stw	r2,20(r23)
 800b044:	31000726 	beq	r6,r4,800b064 <_realloc_r+0x584>
 800b048:	b8800604 	addi	r2,r23,24
 800b04c:	9cc00404 	addi	r19,r19,16
 800b050:	003fa406 	br	800aee4 <__ram_exceptions_end+0xf7f8aca4>
 800b054:	9009883a 	mov	r4,r18
 800b058:	800fd800 	call	800fd80 <__malloc_unlock>
 800b05c:	0005883a 	mov	r2,zero
 800b060:	003f0606 	br	800ac7c <__ram_exceptions_end+0xf7f8aa3c>
 800b064:	98c00417 	ldw	r3,16(r19)
 800b068:	9cc00604 	addi	r19,r19,24
 800b06c:	b8800804 	addi	r2,r23,32
 800b070:	b8c00615 	stw	r3,24(r23)
 800b074:	98ffff17 	ldw	r3,-4(r19)
 800b078:	b8c00715 	stw	r3,28(r23)
 800b07c:	003f9906 	br	800aee4 <__ram_exceptions_end+0xf7f8aca4>

0800b080 <__fpclassifyd>:
 800b080:	00a00034 	movhi	r2,32768
 800b084:	10bfffc4 	addi	r2,r2,-1
 800b088:	2884703a 	and	r2,r5,r2
 800b08c:	10000726 	beq	r2,zero,800b0ac <__fpclassifyd+0x2c>
 800b090:	00fffc34 	movhi	r3,65520
 800b094:	019ff834 	movhi	r6,32736
 800b098:	28c7883a 	add	r3,r5,r3
 800b09c:	31bfffc4 	addi	r6,r6,-1
 800b0a0:	30c00536 	bltu	r6,r3,800b0b8 <__fpclassifyd+0x38>
 800b0a4:	00800104 	movi	r2,4
 800b0a8:	f800283a 	ret
 800b0ac:	2000021e 	bne	r4,zero,800b0b8 <__fpclassifyd+0x38>
 800b0b0:	00800084 	movi	r2,2
 800b0b4:	f800283a 	ret
 800b0b8:	00dffc34 	movhi	r3,32752
 800b0bc:	019ff834 	movhi	r6,32736
 800b0c0:	28cb883a 	add	r5,r5,r3
 800b0c4:	31bfffc4 	addi	r6,r6,-1
 800b0c8:	317ff62e 	bgeu	r6,r5,800b0a4 <__ram_exceptions_end+0xf7f8ae64>
 800b0cc:	01400434 	movhi	r5,16
 800b0d0:	297fffc4 	addi	r5,r5,-1
 800b0d4:	28800236 	bltu	r5,r2,800b0e0 <__fpclassifyd+0x60>
 800b0d8:	008000c4 	movi	r2,3
 800b0dc:	f800283a 	ret
 800b0e0:	10c00226 	beq	r2,r3,800b0ec <__fpclassifyd+0x6c>
 800b0e4:	0005883a 	mov	r2,zero
 800b0e8:	f800283a 	ret
 800b0ec:	2005003a 	cmpeq	r2,r4,zero
 800b0f0:	f800283a 	ret

0800b0f4 <_sbrk_r>:
 800b0f4:	defffd04 	addi	sp,sp,-12
 800b0f8:	dc000015 	stw	r16,0(sp)
 800b0fc:	04020074 	movhi	r16,2049
 800b100:	dc400115 	stw	r17,4(sp)
 800b104:	84182304 	addi	r16,r16,24716
 800b108:	2023883a 	mov	r17,r4
 800b10c:	2809883a 	mov	r4,r5
 800b110:	dfc00215 	stw	ra,8(sp)
 800b114:	80000015 	stw	zero,0(r16)
 800b118:	800ff4c0 	call	800ff4c <sbrk>
 800b11c:	00ffffc4 	movi	r3,-1
 800b120:	10c00526 	beq	r2,r3,800b138 <_sbrk_r+0x44>
 800b124:	dfc00217 	ldw	ra,8(sp)
 800b128:	dc400117 	ldw	r17,4(sp)
 800b12c:	dc000017 	ldw	r16,0(sp)
 800b130:	dec00304 	addi	sp,sp,12
 800b134:	f800283a 	ret
 800b138:	80c00017 	ldw	r3,0(r16)
 800b13c:	183ff926 	beq	r3,zero,800b124 <__ram_exceptions_end+0xf7f8aee4>
 800b140:	88c00015 	stw	r3,0(r17)
 800b144:	003ff706 	br	800b124 <__ram_exceptions_end+0xf7f8aee4>

0800b148 <__sread>:
 800b148:	defffe04 	addi	sp,sp,-8
 800b14c:	dc000015 	stw	r16,0(sp)
 800b150:	2821883a 	mov	r16,r5
 800b154:	2940038f 	ldh	r5,14(r5)
 800b158:	dfc00115 	stw	ra,4(sp)
 800b15c:	800ce980 	call	800ce98 <_read_r>
 800b160:	10000716 	blt	r2,zero,800b180 <__sread+0x38>
 800b164:	80c01417 	ldw	r3,80(r16)
 800b168:	1887883a 	add	r3,r3,r2
 800b16c:	80c01415 	stw	r3,80(r16)
 800b170:	dfc00117 	ldw	ra,4(sp)
 800b174:	dc000017 	ldw	r16,0(sp)
 800b178:	dec00204 	addi	sp,sp,8
 800b17c:	f800283a 	ret
 800b180:	80c0030b 	ldhu	r3,12(r16)
 800b184:	18fbffcc 	andi	r3,r3,61439
 800b188:	80c0030d 	sth	r3,12(r16)
 800b18c:	dfc00117 	ldw	ra,4(sp)
 800b190:	dc000017 	ldw	r16,0(sp)
 800b194:	dec00204 	addi	sp,sp,8
 800b198:	f800283a 	ret

0800b19c <__seofread>:
 800b19c:	0005883a 	mov	r2,zero
 800b1a0:	f800283a 	ret

0800b1a4 <__swrite>:
 800b1a4:	2880030b 	ldhu	r2,12(r5)
 800b1a8:	defffb04 	addi	sp,sp,-20
 800b1ac:	dcc00315 	stw	r19,12(sp)
 800b1b0:	dc800215 	stw	r18,8(sp)
 800b1b4:	dc400115 	stw	r17,4(sp)
 800b1b8:	dc000015 	stw	r16,0(sp)
 800b1bc:	dfc00415 	stw	ra,16(sp)
 800b1c0:	10c0400c 	andi	r3,r2,256
 800b1c4:	2821883a 	mov	r16,r5
 800b1c8:	2027883a 	mov	r19,r4
 800b1cc:	3025883a 	mov	r18,r6
 800b1d0:	3823883a 	mov	r17,r7
 800b1d4:	18000526 	beq	r3,zero,800b1ec <__swrite+0x48>
 800b1d8:	2940038f 	ldh	r5,14(r5)
 800b1dc:	000d883a 	mov	r6,zero
 800b1e0:	01c00084 	movi	r7,2
 800b1e4:	800ce3c0 	call	800ce3c <_lseek_r>
 800b1e8:	8080030b 	ldhu	r2,12(r16)
 800b1ec:	8140038f 	ldh	r5,14(r16)
 800b1f0:	10bbffcc 	andi	r2,r2,61439
 800b1f4:	9809883a 	mov	r4,r19
 800b1f8:	900d883a 	mov	r6,r18
 800b1fc:	880f883a 	mov	r7,r17
 800b200:	8080030d 	sth	r2,12(r16)
 800b204:	dfc00417 	ldw	ra,16(sp)
 800b208:	dcc00317 	ldw	r19,12(sp)
 800b20c:	dc800217 	ldw	r18,8(sp)
 800b210:	dc400117 	ldw	r17,4(sp)
 800b214:	dc000017 	ldw	r16,0(sp)
 800b218:	dec00504 	addi	sp,sp,20
 800b21c:	800c92c1 	jmpi	800c92c <_write_r>

0800b220 <__sseek>:
 800b220:	defffe04 	addi	sp,sp,-8
 800b224:	dc000015 	stw	r16,0(sp)
 800b228:	2821883a 	mov	r16,r5
 800b22c:	2940038f 	ldh	r5,14(r5)
 800b230:	dfc00115 	stw	ra,4(sp)
 800b234:	800ce3c0 	call	800ce3c <_lseek_r>
 800b238:	00ffffc4 	movi	r3,-1
 800b23c:	10c00826 	beq	r2,r3,800b260 <__sseek+0x40>
 800b240:	80c0030b 	ldhu	r3,12(r16)
 800b244:	80801415 	stw	r2,80(r16)
 800b248:	18c40014 	ori	r3,r3,4096
 800b24c:	80c0030d 	sth	r3,12(r16)
 800b250:	dfc00117 	ldw	ra,4(sp)
 800b254:	dc000017 	ldw	r16,0(sp)
 800b258:	dec00204 	addi	sp,sp,8
 800b25c:	f800283a 	ret
 800b260:	80c0030b 	ldhu	r3,12(r16)
 800b264:	18fbffcc 	andi	r3,r3,61439
 800b268:	80c0030d 	sth	r3,12(r16)
 800b26c:	dfc00117 	ldw	ra,4(sp)
 800b270:	dc000017 	ldw	r16,0(sp)
 800b274:	dec00204 	addi	sp,sp,8
 800b278:	f800283a 	ret

0800b27c <__sclose>:
 800b27c:	2940038f 	ldh	r5,14(r5)
 800b280:	800c9881 	jmpi	800c988 <_close_r>

0800b284 <strcmp>:
 800b284:	2144b03a 	or	r2,r4,r5
 800b288:	108000cc 	andi	r2,r2,3
 800b28c:	1000171e 	bne	r2,zero,800b2ec <strcmp+0x68>
 800b290:	20800017 	ldw	r2,0(r4)
 800b294:	28c00017 	ldw	r3,0(r5)
 800b298:	10c0141e 	bne	r2,r3,800b2ec <strcmp+0x68>
 800b29c:	027fbff4 	movhi	r9,65279
 800b2a0:	4a7fbfc4 	addi	r9,r9,-257
 800b2a4:	0086303a 	nor	r3,zero,r2
 800b2a8:	02202074 	movhi	r8,32897
 800b2ac:	1245883a 	add	r2,r2,r9
 800b2b0:	42202004 	addi	r8,r8,-32640
 800b2b4:	10c4703a 	and	r2,r2,r3
 800b2b8:	1204703a 	and	r2,r2,r8
 800b2bc:	10000226 	beq	r2,zero,800b2c8 <strcmp+0x44>
 800b2c0:	00001706 	br	800b320 <strcmp+0x9c>
 800b2c4:	1000161e 	bne	r2,zero,800b320 <strcmp+0x9c>
 800b2c8:	21000104 	addi	r4,r4,4
 800b2cc:	20c00017 	ldw	r3,0(r4)
 800b2d0:	29400104 	addi	r5,r5,4
 800b2d4:	29800017 	ldw	r6,0(r5)
 800b2d8:	1a4f883a 	add	r7,r3,r9
 800b2dc:	00c4303a 	nor	r2,zero,r3
 800b2e0:	3884703a 	and	r2,r7,r2
 800b2e4:	1204703a 	and	r2,r2,r8
 800b2e8:	19bff626 	beq	r3,r6,800b2c4 <__ram_exceptions_end+0xf7f8b084>
 800b2ec:	20800007 	ldb	r2,0(r4)
 800b2f0:	1000051e 	bne	r2,zero,800b308 <strcmp+0x84>
 800b2f4:	00000606 	br	800b310 <strcmp+0x8c>
 800b2f8:	21000044 	addi	r4,r4,1
 800b2fc:	20800007 	ldb	r2,0(r4)
 800b300:	29400044 	addi	r5,r5,1
 800b304:	10000226 	beq	r2,zero,800b310 <strcmp+0x8c>
 800b308:	28c00007 	ldb	r3,0(r5)
 800b30c:	10fffa26 	beq	r2,r3,800b2f8 <__ram_exceptions_end+0xf7f8b0b8>
 800b310:	20800003 	ldbu	r2,0(r4)
 800b314:	28c00003 	ldbu	r3,0(r5)
 800b318:	10c5c83a 	sub	r2,r2,r3
 800b31c:	f800283a 	ret
 800b320:	0005883a 	mov	r2,zero
 800b324:	f800283a 	ret

0800b328 <__sprint_r.part.0>:
 800b328:	28801917 	ldw	r2,100(r5)
 800b32c:	defff604 	addi	sp,sp,-40
 800b330:	dd400515 	stw	r21,20(sp)
 800b334:	dcc00315 	stw	r19,12(sp)
 800b338:	dfc00915 	stw	ra,36(sp)
 800b33c:	df000815 	stw	fp,32(sp)
 800b340:	ddc00715 	stw	r23,28(sp)
 800b344:	dd800615 	stw	r22,24(sp)
 800b348:	dd000415 	stw	r20,16(sp)
 800b34c:	dc800215 	stw	r18,8(sp)
 800b350:	dc400115 	stw	r17,4(sp)
 800b354:	dc000015 	stw	r16,0(sp)
 800b358:	1088000c 	andi	r2,r2,8192
 800b35c:	2827883a 	mov	r19,r5
 800b360:	302b883a 	mov	r21,r6
 800b364:	10002d26 	beq	r2,zero,800b41c <__sprint_r.part.0+0xf4>
 800b368:	30800217 	ldw	r2,8(r6)
 800b36c:	35800017 	ldw	r22,0(r6)
 800b370:	10002826 	beq	r2,zero,800b414 <__sprint_r.part.0+0xec>
 800b374:	2029883a 	mov	r20,r4
 800b378:	b5c00104 	addi	r23,r22,4
 800b37c:	04bfffc4 	movi	r18,-1
 800b380:	bc400017 	ldw	r17,0(r23)
 800b384:	b4000017 	ldw	r16,0(r22)
 800b388:	0039883a 	mov	fp,zero
 800b38c:	8822d0ba 	srli	r17,r17,2
 800b390:	04400316 	blt	zero,r17,800b3a0 <__sprint_r.part.0+0x78>
 800b394:	00001706 	br	800b3f4 <__sprint_r.part.0+0xcc>
 800b398:	84000104 	addi	r16,r16,4
 800b39c:	8f001526 	beq	r17,fp,800b3f4 <__sprint_r.part.0+0xcc>
 800b3a0:	81400017 	ldw	r5,0(r16)
 800b3a4:	a009883a 	mov	r4,r20
 800b3a8:	980d883a 	mov	r6,r19
 800b3ac:	800cbb40 	call	800cbb4 <_fputwc_r>
 800b3b0:	e7000044 	addi	fp,fp,1
 800b3b4:	14bff81e 	bne	r2,r18,800b398 <__ram_exceptions_end+0xf7f8b158>
 800b3b8:	9005883a 	mov	r2,r18
 800b3bc:	a8000215 	stw	zero,8(r21)
 800b3c0:	a8000115 	stw	zero,4(r21)
 800b3c4:	dfc00917 	ldw	ra,36(sp)
 800b3c8:	df000817 	ldw	fp,32(sp)
 800b3cc:	ddc00717 	ldw	r23,28(sp)
 800b3d0:	dd800617 	ldw	r22,24(sp)
 800b3d4:	dd400517 	ldw	r21,20(sp)
 800b3d8:	dd000417 	ldw	r20,16(sp)
 800b3dc:	dcc00317 	ldw	r19,12(sp)
 800b3e0:	dc800217 	ldw	r18,8(sp)
 800b3e4:	dc400117 	ldw	r17,4(sp)
 800b3e8:	dc000017 	ldw	r16,0(sp)
 800b3ec:	dec00a04 	addi	sp,sp,40
 800b3f0:	f800283a 	ret
 800b3f4:	a8c00217 	ldw	r3,8(r21)
 800b3f8:	8c63883a 	add	r17,r17,r17
 800b3fc:	8c63883a 	add	r17,r17,r17
 800b400:	1c45c83a 	sub	r2,r3,r17
 800b404:	a8800215 	stw	r2,8(r21)
 800b408:	b5800204 	addi	r22,r22,8
 800b40c:	bdc00204 	addi	r23,r23,8
 800b410:	103fdb1e 	bne	r2,zero,800b380 <__ram_exceptions_end+0xf7f8b140>
 800b414:	0005883a 	mov	r2,zero
 800b418:	003fe806 	br	800b3bc <__ram_exceptions_end+0xf7f8b17c>
 800b41c:	800861c0 	call	800861c <__sfvwrite_r>
 800b420:	003fe606 	br	800b3bc <__ram_exceptions_end+0xf7f8b17c>

0800b424 <__sprint_r>:
 800b424:	30c00217 	ldw	r3,8(r6)
 800b428:	18000126 	beq	r3,zero,800b430 <__sprint_r+0xc>
 800b42c:	800b3281 	jmpi	800b328 <__sprint_r.part.0>
 800b430:	30000115 	stw	zero,4(r6)
 800b434:	0005883a 	mov	r2,zero
 800b438:	f800283a 	ret

0800b43c <___vfiprintf_internal_r>:
 800b43c:	defeca04 	addi	sp,sp,-1240
 800b440:	dd813215 	stw	r22,1224(sp)
 800b444:	dd013015 	stw	r20,1216(sp)
 800b448:	dfc13515 	stw	ra,1236(sp)
 800b44c:	df013415 	stw	fp,1232(sp)
 800b450:	ddc13315 	stw	r23,1228(sp)
 800b454:	dd413115 	stw	r21,1220(sp)
 800b458:	dcc12f15 	stw	r19,1212(sp)
 800b45c:	dc812e15 	stw	r18,1208(sp)
 800b460:	dc412d15 	stw	r17,1204(sp)
 800b464:	dc012c15 	stw	r16,1200(sp)
 800b468:	d9012015 	stw	r4,1152(sp)
 800b46c:	d9c12115 	stw	r7,1156(sp)
 800b470:	2829883a 	mov	r20,r5
 800b474:	302d883a 	mov	r22,r6
 800b478:	20000226 	beq	r4,zero,800b484 <___vfiprintf_internal_r+0x48>
 800b47c:	20800e17 	ldw	r2,56(r4)
 800b480:	1001d326 	beq	r2,zero,800bbd0 <___vfiprintf_internal_r+0x794>
 800b484:	a0c0030b 	ldhu	r3,12(r20)
 800b488:	1908000c 	andi	r4,r3,8192
 800b48c:	1805883a 	mov	r2,r3
 800b490:	2000071e 	bne	r4,zero,800b4b0 <___vfiprintf_internal_r+0x74>
 800b494:	a1001917 	ldw	r4,100(r20)
 800b498:	18880014 	ori	r2,r3,8192
 800b49c:	00f7ffc4 	movi	r3,-8193
 800b4a0:	20c8703a 	and	r4,r4,r3
 800b4a4:	a080030d 	sth	r2,12(r20)
 800b4a8:	1007883a 	mov	r3,r2
 800b4ac:	a1001915 	stw	r4,100(r20)
 800b4b0:	1100020c 	andi	r4,r2,8
 800b4b4:	20018926 	beq	r4,zero,800badc <___vfiprintf_internal_r+0x6a0>
 800b4b8:	a1000417 	ldw	r4,16(r20)
 800b4bc:	20018726 	beq	r4,zero,800badc <___vfiprintf_internal_r+0x6a0>
 800b4c0:	1080068c 	andi	r2,r2,26
 800b4c4:	01000284 	movi	r4,10
 800b4c8:	11018d26 	beq	r2,r4,800bb00 <___vfiprintf_internal_r+0x6c4>
 800b4cc:	da810a04 	addi	r10,sp,1064
 800b4d0:	dac109c4 	addi	r11,sp,1063
 800b4d4:	07020074 	movhi	fp,2049
 800b4d8:	05c20074 	movhi	r23,2049
 800b4dc:	da811e15 	stw	r10,1144(sp)
 800b4e0:	52d5c83a 	sub	r10,r10,r11
 800b4e4:	e70a8104 	addi	fp,fp,10756
 800b4e8:	bdca7d04 	addi	r23,r23,10740
 800b4ec:	dac11f15 	stw	r11,1148(sp)
 800b4f0:	dec11a15 	stw	sp,1128(sp)
 800b4f4:	d8011c15 	stw	zero,1136(sp)
 800b4f8:	d8011b15 	stw	zero,1132(sp)
 800b4fc:	d8012615 	stw	zero,1176(sp)
 800b500:	d8012215 	stw	zero,1160(sp)
 800b504:	da812715 	stw	r10,1180(sp)
 800b508:	d811883a 	mov	r8,sp
 800b50c:	b021883a 	mov	r16,r22
 800b510:	80800007 	ldb	r2,0(r16)
 800b514:	10039c26 	beq	r2,zero,800c388 <___vfiprintf_internal_r+0xf4c>
 800b518:	01000944 	movi	r4,37
 800b51c:	11039a26 	beq	r2,r4,800c388 <___vfiprintf_internal_r+0xf4c>
 800b520:	8005883a 	mov	r2,r16
 800b524:	00000106 	br	800b52c <___vfiprintf_internal_r+0xf0>
 800b528:	19000326 	beq	r3,r4,800b538 <___vfiprintf_internal_r+0xfc>
 800b52c:	10800044 	addi	r2,r2,1
 800b530:	10c00007 	ldb	r3,0(r2)
 800b534:	183ffc1e 	bne	r3,zero,800b528 <__ram_exceptions_end+0xf7f8b2e8>
 800b538:	1425c83a 	sub	r18,r2,r16
 800b53c:	1023883a 	mov	r17,r2
 800b540:	90001026 	beq	r18,zero,800b584 <___vfiprintf_internal_r+0x148>
 800b544:	d8c11c17 	ldw	r3,1136(sp)
 800b548:	d8811b17 	ldw	r2,1132(sp)
 800b54c:	44000015 	stw	r16,0(r8)
 800b550:	90c7883a 	add	r3,r18,r3
 800b554:	10800044 	addi	r2,r2,1
 800b558:	44800115 	stw	r18,4(r8)
 800b55c:	d8c11c15 	stw	r3,1136(sp)
 800b560:	d8811b15 	stw	r2,1132(sp)
 800b564:	010001c4 	movi	r4,7
 800b568:	2080750e 	bge	r4,r2,800b740 <___vfiprintf_internal_r+0x304>
 800b56c:	18039d1e 	bne	r3,zero,800c3e4 <___vfiprintf_internal_r+0xfa8>
 800b570:	dac12217 	ldw	r11,1160(sp)
 800b574:	d8011b15 	stw	zero,1132(sp)
 800b578:	d811883a 	mov	r8,sp
 800b57c:	5c97883a 	add	r11,r11,r18
 800b580:	dac12215 	stw	r11,1160(sp)
 800b584:	88800007 	ldb	r2,0(r17)
 800b588:	1002e026 	beq	r2,zero,800c10c <___vfiprintf_internal_r+0xcd0>
 800b58c:	88c00047 	ldb	r3,1(r17)
 800b590:	8c000044 	addi	r16,r17,1
 800b594:	d8011d85 	stb	zero,1142(sp)
 800b598:	000d883a 	mov	r6,zero
 800b59c:	027fffc4 	movi	r9,-1
 800b5a0:	0027883a 	mov	r19,zero
 800b5a4:	002b883a 	mov	r21,zero
 800b5a8:	01001604 	movi	r4,88
 800b5ac:	01400244 	movi	r5,9
 800b5b0:	03000a84 	movi	r12,42
 800b5b4:	01c01b04 	movi	r7,108
 800b5b8:	84000044 	addi	r16,r16,1
 800b5bc:	18bff804 	addi	r2,r3,-32
 800b5c0:	20825f36 	bltu	r4,r2,800bf40 <___vfiprintf_internal_r+0xb04>
 800b5c4:	100490ba 	slli	r2,r2,2
 800b5c8:	02820074 	movhi	r10,2049
 800b5cc:	52ad7704 	addi	r10,r10,-18980
 800b5d0:	1285883a 	add	r2,r2,r10
 800b5d4:	10800017 	ldw	r2,0(r2)
 800b5d8:	1000683a 	jmp	r2
 800b5dc:	0800bdb0 	cmpltui	zero,at,758
 800b5e0:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b5e4:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b5e8:	0800bf34 	orhi	zero,at,764
 800b5ec:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b5f0:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b5f4:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b5f8:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b5fc:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b600:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b604:	0800bf0c 	andi	zero,at,764
 800b608:	0800bf28 	cmpgeui	zero,at,764
 800b60c:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b610:	0800bbe0 	cmpeqi	zero,at,751
 800b614:	0800bd40 	call	800bd4 <__alt_mem_sdram_control-0x77ff42c>
 800b618:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b61c:	0800bcc4 	addi	zero,at,755
 800b620:	0800bcd0 	cmplti	zero,at,755
 800b624:	0800bcd0 	cmplti	zero,at,755
 800b628:	0800bcd0 	cmplti	zero,at,755
 800b62c:	0800bcd0 	cmplti	zero,at,755
 800b630:	0800bcd0 	cmplti	zero,at,755
 800b634:	0800bcd0 	cmplti	zero,at,755
 800b638:	0800bcd0 	cmplti	zero,at,755
 800b63c:	0800bcd0 	cmplti	zero,at,755
 800b640:	0800bcd0 	cmplti	zero,at,755
 800b644:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b648:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b64c:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b650:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b654:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b658:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b65c:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b660:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b664:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b668:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b66c:	0800bcfc 	xorhi	zero,at,755
 800b670:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b674:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b678:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b67c:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b680:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b684:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b688:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b68c:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b690:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b694:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b698:	0800b790 	cmplti	zero,at,734
 800b69c:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b6a0:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b6a4:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b6a8:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b6ac:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b6b0:	0800b754 	ori	zero,at,733
 800b6b4:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b6b8:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b6bc:	0800bc3c 	xorhi	zero,at,752
 800b6c0:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b6c4:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b6c8:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b6cc:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b6d0:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b6d4:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b6d8:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b6dc:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b6e0:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b6e4:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b6e8:	0800bc94 	ori	zero,at,754
 800b6ec:	0800be2c 	andhi	zero,at,760
 800b6f0:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b6f4:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b6f8:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b6fc:	0800beb4 	orhi	zero,at,762
 800b700:	0800be2c 	andhi	zero,at,760
 800b704:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b708:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b70c:	0800bec0 	call	800bec <__alt_mem_sdram_control-0x77ff414>
 800b710:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b714:	0800bd80 	call	800bd8 <__alt_mem_sdram_control-0x77ff428>
 800b718:	0800b794 	ori	zero,at,734
 800b71c:	0800be68 	cmpgeui	zero,at,761
 800b720:	0800bea8 	cmpgeui	zero,at,762
 800b724:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b728:	0800bdcc 	andi	zero,at,759
 800b72c:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b730:	0800b758 	cmpnei	zero,at,733
 800b734:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b738:	0800bf40 	call	800bf4 <__alt_mem_sdram_control-0x77ff40c>
 800b73c:	0800bed0 	cmplti	zero,at,763
 800b740:	42000204 	addi	r8,r8,8
 800b744:	dac12217 	ldw	r11,1160(sp)
 800b748:	5c97883a 	add	r11,r11,r18
 800b74c:	dac12215 	stw	r11,1160(sp)
 800b750:	003f8c06 	br	800b584 <__ram_exceptions_end+0xf7f8b344>
 800b754:	ad400414 	ori	r21,r21,16
 800b758:	a880080c 	andi	r2,r21,32
 800b75c:	10012f1e 	bne	r2,zero,800bc1c <___vfiprintf_internal_r+0x7e0>
 800b760:	a880040c 	andi	r2,r21,16
 800b764:	1001ff1e 	bne	r2,zero,800bf64 <___vfiprintf_internal_r+0xb28>
 800b768:	a880100c 	andi	r2,r21,64
 800b76c:	1001fd26 	beq	r2,zero,800bf64 <___vfiprintf_internal_r+0xb28>
 800b770:	da812117 	ldw	r10,1156(sp)
 800b774:	002d883a 	mov	r22,zero
 800b778:	00800044 	movi	r2,1
 800b77c:	5480000b 	ldhu	r18,0(r10)
 800b780:	52800104 	addi	r10,r10,4
 800b784:	da812115 	stw	r10,1156(sp)
 800b788:	9009883a 	mov	r4,r18
 800b78c:	00000a06 	br	800b7b8 <___vfiprintf_internal_r+0x37c>
 800b790:	ad400414 	ori	r21,r21,16
 800b794:	a880080c 	andi	r2,r21,32
 800b798:	10011426 	beq	r2,zero,800bbec <___vfiprintf_internal_r+0x7b0>
 800b79c:	da812117 	ldw	r10,1156(sp)
 800b7a0:	0005883a 	mov	r2,zero
 800b7a4:	54800017 	ldw	r18,0(r10)
 800b7a8:	55800117 	ldw	r22,4(r10)
 800b7ac:	52800204 	addi	r10,r10,8
 800b7b0:	da812115 	stw	r10,1156(sp)
 800b7b4:	9588b03a 	or	r4,r18,r22
 800b7b8:	d8011d85 	stb	zero,1142(sp)
 800b7bc:	4823883a 	mov	r17,r9
 800b7c0:	0019883a 	mov	r12,zero
 800b7c4:	48000216 	blt	r9,zero,800b7d0 <___vfiprintf_internal_r+0x394>
 800b7c8:	00ffdfc4 	movi	r3,-129
 800b7cc:	a8ea703a 	and	r21,r21,r3
 800b7d0:	2002221e 	bne	r4,zero,800c05c <___vfiprintf_internal_r+0xc20>
 800b7d4:	4802c726 	beq	r9,zero,800c2f4 <___vfiprintf_internal_r+0xeb8>
 800b7d8:	10803fcc 	andi	r2,r2,255
 800b7dc:	00c00044 	movi	r3,1
 800b7e0:	10c24426 	beq	r2,r3,800c0f4 <___vfiprintf_internal_r+0xcb8>
 800b7e4:	00c00084 	movi	r3,2
 800b7e8:	10c2cc26 	beq	r2,r3,800c31c <___vfiprintf_internal_r+0xee0>
 800b7ec:	d8c10a04 	addi	r3,sp,1064
 800b7f0:	9008d0fa 	srli	r4,r18,3
 800b7f4:	b00a977a 	slli	r5,r22,29
 800b7f8:	b02cd0fa 	srli	r22,r22,3
 800b7fc:	948001cc 	andi	r18,r18,7
 800b800:	90800c04 	addi	r2,r18,48
 800b804:	18ffffc4 	addi	r3,r3,-1
 800b808:	2924b03a 	or	r18,r5,r4
 800b80c:	18800005 	stb	r2,0(r3)
 800b810:	9588b03a 	or	r4,r18,r22
 800b814:	203ff61e 	bne	r4,zero,800b7f0 <__ram_exceptions_end+0xf7f8b5b0>
 800b818:	a900004c 	andi	r4,r21,1
 800b81c:	d8c12415 	stw	r3,1168(sp)
 800b820:	2002fb1e 	bne	r4,zero,800c410 <___vfiprintf_internal_r+0xfd4>
 800b824:	da811e17 	ldw	r10,1144(sp)
 800b828:	50e3c83a 	sub	r17,r10,r3
 800b82c:	8825883a 	mov	r18,r17
 800b830:	8a40010e 	bge	r17,r9,800b838 <___vfiprintf_internal_r+0x3fc>
 800b834:	4825883a 	mov	r18,r9
 800b838:	63003fcc 	andi	r12,r12,255
 800b83c:	6300201c 	xori	r12,r12,128
 800b840:	633fe004 	addi	r12,r12,-128
 800b844:	60000126 	beq	r12,zero,800b84c <___vfiprintf_internal_r+0x410>
 800b848:	94800044 	addi	r18,r18,1
 800b84c:	ab80008c 	andi	r14,r21,2
 800b850:	70000126 	beq	r14,zero,800b858 <___vfiprintf_internal_r+0x41c>
 800b854:	94800084 	addi	r18,r18,2
 800b858:	ad80210c 	andi	r22,r21,132
 800b85c:	b001df1e 	bne	r22,zero,800bfdc <___vfiprintf_internal_r+0xba0>
 800b860:	9c8fc83a 	sub	r7,r19,r18
 800b864:	01c1dd0e 	bge	zero,r7,800bfdc <___vfiprintf_internal_r+0xba0>
 800b868:	03000404 	movi	r12,16
 800b86c:	d8811c17 	ldw	r2,1136(sp)
 800b870:	61c3920e 	bge	r12,r7,800c6bc <___vfiprintf_internal_r+0x1280>
 800b874:	02820074 	movhi	r10,2049
 800b878:	528a8104 	addi	r10,r10,10756
 800b87c:	dc012915 	stw	r16,1188(sp)
 800b880:	d9811b17 	ldw	r6,1132(sp)
 800b884:	da812315 	stw	r10,1164(sp)
 800b888:	00c001c4 	movi	r3,7
 800b88c:	da412515 	stw	r9,1172(sp)
 800b890:	db812815 	stw	r14,1184(sp)
 800b894:	3821883a 	mov	r16,r7
 800b898:	00000506 	br	800b8b0 <___vfiprintf_internal_r+0x474>
 800b89c:	31400084 	addi	r5,r6,2
 800b8a0:	42000204 	addi	r8,r8,8
 800b8a4:	200d883a 	mov	r6,r4
 800b8a8:	843ffc04 	addi	r16,r16,-16
 800b8ac:	64000d0e 	bge	r12,r16,800b8e4 <___vfiprintf_internal_r+0x4a8>
 800b8b0:	10800404 	addi	r2,r2,16
 800b8b4:	31000044 	addi	r4,r6,1
 800b8b8:	47000015 	stw	fp,0(r8)
 800b8bc:	43000115 	stw	r12,4(r8)
 800b8c0:	d8811c15 	stw	r2,1136(sp)
 800b8c4:	d9011b15 	stw	r4,1132(sp)
 800b8c8:	193ff40e 	bge	r3,r4,800b89c <__ram_exceptions_end+0xf7f8b65c>
 800b8cc:	1001b51e 	bne	r2,zero,800bfa4 <___vfiprintf_internal_r+0xb68>
 800b8d0:	843ffc04 	addi	r16,r16,-16
 800b8d4:	000d883a 	mov	r6,zero
 800b8d8:	01400044 	movi	r5,1
 800b8dc:	d811883a 	mov	r8,sp
 800b8e0:	643ff316 	blt	r12,r16,800b8b0 <__ram_exceptions_end+0xf7f8b670>
 800b8e4:	800f883a 	mov	r7,r16
 800b8e8:	da412517 	ldw	r9,1172(sp)
 800b8ec:	db812817 	ldw	r14,1184(sp)
 800b8f0:	dc012917 	ldw	r16,1188(sp)
 800b8f4:	dac12317 	ldw	r11,1164(sp)
 800b8f8:	3887883a 	add	r3,r7,r2
 800b8fc:	41c00115 	stw	r7,4(r8)
 800b900:	42c00015 	stw	r11,0(r8)
 800b904:	d8c11c15 	stw	r3,1136(sp)
 800b908:	d9411b15 	stw	r5,1132(sp)
 800b90c:	008001c4 	movi	r2,7
 800b910:	11429316 	blt	r2,r5,800c360 <___vfiprintf_internal_r+0xf24>
 800b914:	d9011d87 	ldb	r4,1142(sp)
 800b918:	42000204 	addi	r8,r8,8
 800b91c:	28800044 	addi	r2,r5,1
 800b920:	2001b31e 	bne	r4,zero,800bff0 <___vfiprintf_internal_r+0xbb4>
 800b924:	70000c26 	beq	r14,zero,800b958 <___vfiprintf_internal_r+0x51c>
 800b928:	d9011d04 	addi	r4,sp,1140
 800b92c:	18c00084 	addi	r3,r3,2
 800b930:	41000015 	stw	r4,0(r8)
 800b934:	01000084 	movi	r4,2
 800b938:	41000115 	stw	r4,4(r8)
 800b93c:	d8c11c15 	stw	r3,1136(sp)
 800b940:	d8811b15 	stw	r2,1132(sp)
 800b944:	010001c4 	movi	r4,7
 800b948:	20826516 	blt	r4,r2,800c2e0 <___vfiprintf_internal_r+0xea4>
 800b94c:	100b883a 	mov	r5,r2
 800b950:	42000204 	addi	r8,r8,8
 800b954:	10800044 	addi	r2,r2,1
 800b958:	01002004 	movi	r4,128
 800b95c:	b1021a26 	beq	r22,r4,800c1c8 <___vfiprintf_internal_r+0xd8c>
 800b960:	4c6dc83a 	sub	r22,r9,r17
 800b964:	0580230e 	bge	zero,r22,800b9f4 <___vfiprintf_internal_r+0x5b8>
 800b968:	01c00404 	movi	r7,16
 800b96c:	3d83300e 	bge	r7,r22,800c630 <___vfiprintf_internal_r+0x11f4>
 800b970:	00820074 	movhi	r2,2049
 800b974:	108a7d04 	addi	r2,r2,10740
 800b978:	d8812315 	stw	r2,1164(sp)
 800b97c:	030001c4 	movi	r12,7
 800b980:	00000506 	br	800b998 <___vfiprintf_internal_r+0x55c>
 800b984:	28800084 	addi	r2,r5,2
 800b988:	42000204 	addi	r8,r8,8
 800b98c:	200b883a 	mov	r5,r4
 800b990:	b5bffc04 	addi	r22,r22,-16
 800b994:	3d800d0e 	bge	r7,r22,800b9cc <___vfiprintf_internal_r+0x590>
 800b998:	18c00404 	addi	r3,r3,16
 800b99c:	29000044 	addi	r4,r5,1
 800b9a0:	45c00015 	stw	r23,0(r8)
 800b9a4:	41c00115 	stw	r7,4(r8)
 800b9a8:	d8c11c15 	stw	r3,1136(sp)
 800b9ac:	d9011b15 	stw	r4,1132(sp)
 800b9b0:	613ff40e 	bge	r12,r4,800b984 <__ram_exceptions_end+0xf7f8b744>
 800b9b4:	18019b1e 	bne	r3,zero,800c024 <___vfiprintf_internal_r+0xbe8>
 800b9b8:	b5bffc04 	addi	r22,r22,-16
 800b9bc:	000b883a 	mov	r5,zero
 800b9c0:	00800044 	movi	r2,1
 800b9c4:	d811883a 	mov	r8,sp
 800b9c8:	3dbff316 	blt	r7,r22,800b998 <__ram_exceptions_end+0xf7f8b758>
 800b9cc:	da812317 	ldw	r10,1164(sp)
 800b9d0:	1d87883a 	add	r3,r3,r22
 800b9d4:	45800115 	stw	r22,4(r8)
 800b9d8:	42800015 	stw	r10,0(r8)
 800b9dc:	d8c11c15 	stw	r3,1136(sp)
 800b9e0:	d8811b15 	stw	r2,1132(sp)
 800b9e4:	010001c4 	movi	r4,7
 800b9e8:	2081dd16 	blt	r4,r2,800c160 <___vfiprintf_internal_r+0xd24>
 800b9ec:	42000204 	addi	r8,r8,8
 800b9f0:	10800044 	addi	r2,r2,1
 800b9f4:	da812417 	ldw	r10,1168(sp)
 800b9f8:	1c47883a 	add	r3,r3,r17
 800b9fc:	44400115 	stw	r17,4(r8)
 800ba00:	42800015 	stw	r10,0(r8)
 800ba04:	d8c11c15 	stw	r3,1136(sp)
 800ba08:	d8811b15 	stw	r2,1132(sp)
 800ba0c:	010001c4 	movi	r4,7
 800ba10:	2081dc0e 	bge	r4,r2,800c184 <___vfiprintf_internal_r+0xd48>
 800ba14:	1802611e 	bne	r3,zero,800c39c <___vfiprintf_internal_r+0xf60>
 800ba18:	d8011b15 	stw	zero,1132(sp)
 800ba1c:	aac0010c 	andi	r11,r21,4
 800ba20:	58002726 	beq	r11,zero,800bac0 <___vfiprintf_internal_r+0x684>
 800ba24:	9ca3c83a 	sub	r17,r19,r18
 800ba28:	d811883a 	mov	r8,sp
 800ba2c:	0443510e 	bge	zero,r17,800c774 <___vfiprintf_internal_r+0x1338>
 800ba30:	01c00404 	movi	r7,16
 800ba34:	3c43320e 	bge	r7,r17,800c700 <___vfiprintf_internal_r+0x12c4>
 800ba38:	00820074 	movhi	r2,2049
 800ba3c:	108a8104 	addi	r2,r2,10756
 800ba40:	d9011b17 	ldw	r4,1132(sp)
 800ba44:	d8812315 	stw	r2,1164(sp)
 800ba48:	382d883a 	mov	r22,r7
 800ba4c:	054001c4 	movi	r21,7
 800ba50:	00000506 	br	800ba68 <___vfiprintf_internal_r+0x62c>
 800ba54:	21400084 	addi	r5,r4,2
 800ba58:	42000204 	addi	r8,r8,8
 800ba5c:	1009883a 	mov	r4,r2
 800ba60:	8c7ffc04 	addi	r17,r17,-16
 800ba64:	b4400d0e 	bge	r22,r17,800ba9c <___vfiprintf_internal_r+0x660>
 800ba68:	18c00404 	addi	r3,r3,16
 800ba6c:	20800044 	addi	r2,r4,1
 800ba70:	47000015 	stw	fp,0(r8)
 800ba74:	45800115 	stw	r22,4(r8)
 800ba78:	d8c11c15 	stw	r3,1136(sp)
 800ba7c:	d8811b15 	stw	r2,1132(sp)
 800ba80:	a8bff40e 	bge	r21,r2,800ba54 <__ram_exceptions_end+0xf7f8b814>
 800ba84:	1801ac1e 	bne	r3,zero,800c138 <___vfiprintf_internal_r+0xcfc>
 800ba88:	8c7ffc04 	addi	r17,r17,-16
 800ba8c:	0009883a 	mov	r4,zero
 800ba90:	01400044 	movi	r5,1
 800ba94:	d811883a 	mov	r8,sp
 800ba98:	b47ff316 	blt	r22,r17,800ba68 <__ram_exceptions_end+0xf7f8b828>
 800ba9c:	da812317 	ldw	r10,1164(sp)
 800baa0:	1c47883a 	add	r3,r3,r17
 800baa4:	44400115 	stw	r17,4(r8)
 800baa8:	42800015 	stw	r10,0(r8)
 800baac:	d8c11c15 	stw	r3,1136(sp)
 800bab0:	d9411b15 	stw	r5,1132(sp)
 800bab4:	008001c4 	movi	r2,7
 800bab8:	1141b70e 	bge	r2,r5,800c198 <___vfiprintf_internal_r+0xd5c>
 800babc:	1802cf1e 	bne	r3,zero,800c5fc <___vfiprintf_internal_r+0x11c0>
 800bac0:	94c2ca16 	blt	r18,r19,800c5ec <___vfiprintf_internal_r+0x11b0>
 800bac4:	dac12217 	ldw	r11,1160(sp)
 800bac8:	5c97883a 	add	r11,r11,r18
 800bacc:	dac12215 	stw	r11,1160(sp)
 800bad0:	d8011b15 	stw	zero,1132(sp)
 800bad4:	d811883a 	mov	r8,sp
 800bad8:	003e8d06 	br	800b510 <__ram_exceptions_end+0xf7f8b2d0>
 800badc:	d9012017 	ldw	r4,1152(sp)
 800bae0:	a00b883a 	mov	r5,r20
 800bae4:	80061b80 	call	80061b8 <__swsetup_r>
 800bae8:	10002c1e 	bne	r2,zero,800bb9c <___vfiprintf_internal_r+0x760>
 800baec:	a0c0030b 	ldhu	r3,12(r20)
 800baf0:	01000284 	movi	r4,10
 800baf4:	1805883a 	mov	r2,r3
 800baf8:	1080068c 	andi	r2,r2,26
 800bafc:	113e731e 	bne	r2,r4,800b4cc <__ram_exceptions_end+0xf7f8b28c>
 800bb00:	a080038b 	ldhu	r2,14(r20)
 800bb04:	113fffcc 	andi	r4,r2,65535
 800bb08:	2120001c 	xori	r4,r4,32768
 800bb0c:	21200004 	addi	r4,r4,-32768
 800bb10:	203e6e16 	blt	r4,zero,800b4cc <__ram_exceptions_end+0xf7f8b28c>
 800bb14:	a3001917 	ldw	r12,100(r20)
 800bb18:	a2c00717 	ldw	r11,28(r20)
 800bb1c:	a2800917 	ldw	r10,36(r20)
 800bb20:	d9012017 	ldw	r4,1152(sp)
 800bb24:	d9c12117 	ldw	r7,1156(sp)
 800bb28:	02410004 	movi	r9,1024
 800bb2c:	18ffff4c 	andi	r3,r3,65533
 800bb30:	da4b883a 	add	r5,sp,r9
 800bb34:	b00d883a 	mov	r6,r22
 800bb38:	d8c1030d 	sth	r3,1036(sp)
 800bb3c:	db011915 	stw	r12,1124(sp)
 800bb40:	d881038d 	sth	r2,1038(sp)
 800bb44:	dac10715 	stw	r11,1052(sp)
 800bb48:	da810915 	stw	r10,1060(sp)
 800bb4c:	dec10015 	stw	sp,1024(sp)
 800bb50:	dec10415 	stw	sp,1040(sp)
 800bb54:	da410215 	stw	r9,1032(sp)
 800bb58:	da410515 	stw	r9,1044(sp)
 800bb5c:	d8010615 	stw	zero,1048(sp)
 800bb60:	800b43c0 	call	800b43c <___vfiprintf_internal_r>
 800bb64:	1021883a 	mov	r16,r2
 800bb68:	10000416 	blt	r2,zero,800bb7c <___vfiprintf_internal_r+0x740>
 800bb6c:	d9012017 	ldw	r4,1152(sp)
 800bb70:	d9410004 	addi	r5,sp,1024
 800bb74:	8007c100 	call	8007c10 <_fflush_r>
 800bb78:	1002fc1e 	bne	r2,zero,800c76c <___vfiprintf_internal_r+0x1330>
 800bb7c:	d881030b 	ldhu	r2,1036(sp)
 800bb80:	1080100c 	andi	r2,r2,64
 800bb84:	10000326 	beq	r2,zero,800bb94 <___vfiprintf_internal_r+0x758>
 800bb88:	a080030b 	ldhu	r2,12(r20)
 800bb8c:	10801014 	ori	r2,r2,64
 800bb90:	a080030d 	sth	r2,12(r20)
 800bb94:	8005883a 	mov	r2,r16
 800bb98:	00000106 	br	800bba0 <___vfiprintf_internal_r+0x764>
 800bb9c:	00bfffc4 	movi	r2,-1
 800bba0:	dfc13517 	ldw	ra,1236(sp)
 800bba4:	df013417 	ldw	fp,1232(sp)
 800bba8:	ddc13317 	ldw	r23,1228(sp)
 800bbac:	dd813217 	ldw	r22,1224(sp)
 800bbb0:	dd413117 	ldw	r21,1220(sp)
 800bbb4:	dd013017 	ldw	r20,1216(sp)
 800bbb8:	dcc12f17 	ldw	r19,1212(sp)
 800bbbc:	dc812e17 	ldw	r18,1208(sp)
 800bbc0:	dc412d17 	ldw	r17,1204(sp)
 800bbc4:	dc012c17 	ldw	r16,1200(sp)
 800bbc8:	dec13604 	addi	sp,sp,1240
 800bbcc:	f800283a 	ret
 800bbd0:	80081b80 	call	80081b8 <__sinit>
 800bbd4:	003e2b06 	br	800b484 <__ram_exceptions_end+0xf7f8b244>
 800bbd8:	04e7c83a 	sub	r19,zero,r19
 800bbdc:	d8812115 	stw	r2,1156(sp)
 800bbe0:	ad400114 	ori	r21,r21,4
 800bbe4:	80c00007 	ldb	r3,0(r16)
 800bbe8:	003e7306 	br	800b5b8 <__ram_exceptions_end+0xf7f8b378>
 800bbec:	a880040c 	andi	r2,r21,16
 800bbf0:	1000e41e 	bne	r2,zero,800bf84 <___vfiprintf_internal_r+0xb48>
 800bbf4:	a880100c 	andi	r2,r21,64
 800bbf8:	1000e226 	beq	r2,zero,800bf84 <___vfiprintf_internal_r+0xb48>
 800bbfc:	da812117 	ldw	r10,1156(sp)
 800bc00:	002d883a 	mov	r22,zero
 800bc04:	0005883a 	mov	r2,zero
 800bc08:	5480000b 	ldhu	r18,0(r10)
 800bc0c:	52800104 	addi	r10,r10,4
 800bc10:	da812115 	stw	r10,1156(sp)
 800bc14:	9009883a 	mov	r4,r18
 800bc18:	003ee706 	br	800b7b8 <__ram_exceptions_end+0xf7f8b578>
 800bc1c:	da812117 	ldw	r10,1156(sp)
 800bc20:	00800044 	movi	r2,1
 800bc24:	54800017 	ldw	r18,0(r10)
 800bc28:	55800117 	ldw	r22,4(r10)
 800bc2c:	52800204 	addi	r10,r10,8
 800bc30:	da812115 	stw	r10,1156(sp)
 800bc34:	9588b03a 	or	r4,r18,r22
 800bc38:	003edf06 	br	800b7b8 <__ram_exceptions_end+0xf7f8b578>
 800bc3c:	02c20074 	movhi	r11,2049
 800bc40:	5aca1704 	addi	r11,r11,10332
 800bc44:	d9811d85 	stb	r6,1142(sp)
 800bc48:	dac12615 	stw	r11,1176(sp)
 800bc4c:	a900080c 	andi	r4,r21,32
 800bc50:	d8812117 	ldw	r2,1156(sp)
 800bc54:	2000a526 	beq	r4,zero,800beec <___vfiprintf_internal_r+0xab0>
 800bc58:	da812117 	ldw	r10,1156(sp)
 800bc5c:	14800017 	ldw	r18,0(r2)
 800bc60:	15800117 	ldw	r22,4(r2)
 800bc64:	52800204 	addi	r10,r10,8
 800bc68:	da812115 	stw	r10,1156(sp)
 800bc6c:	a880004c 	andi	r2,r21,1
 800bc70:	1001d926 	beq	r2,zero,800c3d8 <___vfiprintf_internal_r+0xf9c>
 800bc74:	9588b03a 	or	r4,r18,r22
 800bc78:	20024426 	beq	r4,zero,800c58c <___vfiprintf_internal_r+0x1150>
 800bc7c:	00800c04 	movi	r2,48
 800bc80:	d8811d05 	stb	r2,1140(sp)
 800bc84:	d8c11d45 	stb	r3,1141(sp)
 800bc88:	ad400094 	ori	r21,r21,2
 800bc8c:	00800084 	movi	r2,2
 800bc90:	003ec906 	br	800b7b8 <__ram_exceptions_end+0xf7f8b578>
 800bc94:	da812117 	ldw	r10,1156(sp)
 800bc98:	04800044 	movi	r18,1
 800bc9c:	dac10004 	addi	r11,sp,1024
 800bca0:	50800017 	ldw	r2,0(r10)
 800bca4:	52800104 	addi	r10,r10,4
 800bca8:	d8011d85 	stb	zero,1142(sp)
 800bcac:	d8810005 	stb	r2,1024(sp)
 800bcb0:	da812115 	stw	r10,1156(sp)
 800bcb4:	9023883a 	mov	r17,r18
 800bcb8:	dac12415 	stw	r11,1168(sp)
 800bcbc:	0013883a 	mov	r9,zero
 800bcc0:	003ee206 	br	800b84c <__ram_exceptions_end+0xf7f8b60c>
 800bcc4:	ad402014 	ori	r21,r21,128
 800bcc8:	80c00007 	ldb	r3,0(r16)
 800bccc:	003e3a06 	br	800b5b8 <__ram_exceptions_end+0xf7f8b378>
 800bcd0:	8015883a 	mov	r10,r16
 800bcd4:	0027883a 	mov	r19,zero
 800bcd8:	18bff404 	addi	r2,r3,-48
 800bcdc:	50c00007 	ldb	r3,0(r10)
 800bce0:	9cc002a4 	muli	r19,r19,10
 800bce4:	84000044 	addi	r16,r16,1
 800bce8:	8015883a 	mov	r10,r16
 800bcec:	98a7883a 	add	r19,r19,r2
 800bcf0:	18bff404 	addi	r2,r3,-48
 800bcf4:	28bff92e 	bgeu	r5,r2,800bcdc <__ram_exceptions_end+0xf7f8ba9c>
 800bcf8:	003e3006 	br	800b5bc <__ram_exceptions_end+0xf7f8b37c>
 800bcfc:	ad400414 	ori	r21,r21,16
 800bd00:	d9811d85 	stb	r6,1142(sp)
 800bd04:	a880080c 	andi	r2,r21,32
 800bd08:	d8c12117 	ldw	r3,1156(sp)
 800bd0c:	10004b26 	beq	r2,zero,800be3c <___vfiprintf_internal_r+0xa00>
 800bd10:	da812117 	ldw	r10,1156(sp)
 800bd14:	18800117 	ldw	r2,4(r3)
 800bd18:	1c800017 	ldw	r18,0(r3)
 800bd1c:	52800204 	addi	r10,r10,8
 800bd20:	da812115 	stw	r10,1156(sp)
 800bd24:	102d883a 	mov	r22,r2
 800bd28:	1001f116 	blt	r2,zero,800c4f0 <___vfiprintf_internal_r+0x10b4>
 800bd2c:	db011d83 	ldbu	r12,1142(sp)
 800bd30:	4823883a 	mov	r17,r9
 800bd34:	00800044 	movi	r2,1
 800bd38:	9588b03a 	or	r4,r18,r22
 800bd3c:	003ea106 	br	800b7c4 <__ram_exceptions_end+0xf7f8b584>
 800bd40:	80c00007 	ldb	r3,0(r16)
 800bd44:	82800044 	addi	r10,r16,1
 800bd48:	1b027f26 	beq	r3,r12,800c748 <___vfiprintf_internal_r+0x130c>
 800bd4c:	18bff404 	addi	r2,r3,-48
 800bd50:	5021883a 	mov	r16,r10
 800bd54:	0013883a 	mov	r9,zero
 800bd58:	28be1836 	bltu	r5,r2,800b5bc <__ram_exceptions_end+0xf7f8b37c>
 800bd5c:	80c00007 	ldb	r3,0(r16)
 800bd60:	4a4002a4 	muli	r9,r9,10
 800bd64:	84000044 	addi	r16,r16,1
 800bd68:	1253883a 	add	r9,r2,r9
 800bd6c:	18bff404 	addi	r2,r3,-48
 800bd70:	28bffa2e 	bgeu	r5,r2,800bd5c <__ram_exceptions_end+0xf7f8bb1c>
 800bd74:	483e110e 	bge	r9,zero,800b5bc <__ram_exceptions_end+0xf7f8b37c>
 800bd78:	027fffc4 	movi	r9,-1
 800bd7c:	003e0f06 	br	800b5bc <__ram_exceptions_end+0xf7f8b37c>
 800bd80:	d9811d85 	stb	r6,1142(sp)
 800bd84:	a880080c 	andi	r2,r21,32
 800bd88:	1001ee26 	beq	r2,zero,800c544 <___vfiprintf_internal_r+0x1108>
 800bd8c:	da812117 	ldw	r10,1156(sp)
 800bd90:	dac12217 	ldw	r11,1160(sp)
 800bd94:	50800017 	ldw	r2,0(r10)
 800bd98:	5807d7fa 	srai	r3,r11,31
 800bd9c:	52800104 	addi	r10,r10,4
 800bda0:	da812115 	stw	r10,1156(sp)
 800bda4:	12c00015 	stw	r11,0(r2)
 800bda8:	10c00115 	stw	r3,4(r2)
 800bdac:	003dd806 	br	800b510 <__ram_exceptions_end+0xf7f8b2d0>
 800bdb0:	30803fcc 	andi	r2,r6,255
 800bdb4:	1080201c 	xori	r2,r2,128
 800bdb8:	10bfe004 	addi	r2,r2,-128
 800bdbc:	1001df1e 	bne	r2,zero,800c53c <___vfiprintf_internal_r+0x1100>
 800bdc0:	01800804 	movi	r6,32
 800bdc4:	80c00007 	ldb	r3,0(r16)
 800bdc8:	003dfb06 	br	800b5b8 <__ram_exceptions_end+0xf7f8b378>
 800bdcc:	da812117 	ldw	r10,1156(sp)
 800bdd0:	dac12117 	ldw	r11,1156(sp)
 800bdd4:	d8011d85 	stb	zero,1142(sp)
 800bdd8:	52800017 	ldw	r10,0(r10)
 800bddc:	5d800104 	addi	r22,r11,4
 800bde0:	da812415 	stw	r10,1168(sp)
 800bde4:	50023b26 	beq	r10,zero,800c6d4 <___vfiprintf_internal_r+0x1298>
 800bde8:	d9012417 	ldw	r4,1168(sp)
 800bdec:	48021f16 	blt	r9,zero,800c66c <___vfiprintf_internal_r+0x1230>
 800bdf0:	480d883a 	mov	r6,r9
 800bdf4:	000b883a 	mov	r5,zero
 800bdf8:	da012a15 	stw	r8,1192(sp)
 800bdfc:	da412b15 	stw	r9,1196(sp)
 800be00:	80096700 	call	8009670 <memchr>
 800be04:	da012a17 	ldw	r8,1192(sp)
 800be08:	da412b17 	ldw	r9,1196(sp)
 800be0c:	10024726 	beq	r2,zero,800c72c <___vfiprintf_internal_r+0x12f0>
 800be10:	d8c12417 	ldw	r3,1168(sp)
 800be14:	10e3c83a 	sub	r17,r2,r3
 800be18:	4c41f616 	blt	r9,r17,800c5f4 <___vfiprintf_internal_r+0x11b8>
 800be1c:	db011d83 	ldbu	r12,1142(sp)
 800be20:	dd812115 	stw	r22,1156(sp)
 800be24:	0013883a 	mov	r9,zero
 800be28:	003e8006 	br	800b82c <__ram_exceptions_end+0xf7f8b5ec>
 800be2c:	d9811d85 	stb	r6,1142(sp)
 800be30:	a880080c 	andi	r2,r21,32
 800be34:	d8c12117 	ldw	r3,1156(sp)
 800be38:	103fb51e 	bne	r2,zero,800bd10 <__ram_exceptions_end+0xf7f8bad0>
 800be3c:	a880040c 	andi	r2,r21,16
 800be40:	10015e1e 	bne	r2,zero,800c3bc <___vfiprintf_internal_r+0xf80>
 800be44:	a880100c 	andi	r2,r21,64
 800be48:	10015c26 	beq	r2,zero,800c3bc <___vfiprintf_internal_r+0xf80>
 800be4c:	1c80000f 	ldh	r18,0(r3)
 800be50:	da812117 	ldw	r10,1156(sp)
 800be54:	902dd7fa 	srai	r22,r18,31
 800be58:	52800104 	addi	r10,r10,4
 800be5c:	da812115 	stw	r10,1156(sp)
 800be60:	b005883a 	mov	r2,r22
 800be64:	003fb006 	br	800bd28 <__ram_exceptions_end+0xf7f8bae8>
 800be68:	da812117 	ldw	r10,1156(sp)
 800be6c:	00800c04 	movi	r2,48
 800be70:	02c20074 	movhi	r11,2049
 800be74:	54800017 	ldw	r18,0(r10)
 800be78:	d8811d05 	stb	r2,1140(sp)
 800be7c:	52800104 	addi	r10,r10,4
 800be80:	00801e04 	movi	r2,120
 800be84:	5aca1c04 	addi	r11,r11,10352
 800be88:	d8811d45 	stb	r2,1141(sp)
 800be8c:	002d883a 	mov	r22,zero
 800be90:	ad400094 	ori	r21,r21,2
 800be94:	da812115 	stw	r10,1156(sp)
 800be98:	dac12615 	stw	r11,1176(sp)
 800be9c:	00800084 	movi	r2,2
 800bea0:	9009883a 	mov	r4,r18
 800bea4:	003e4406 	br	800b7b8 <__ram_exceptions_end+0xf7f8b578>
 800bea8:	ad400814 	ori	r21,r21,32
 800beac:	80c00007 	ldb	r3,0(r16)
 800beb0:	003dc106 	br	800b5b8 <__ram_exceptions_end+0xf7f8b378>
 800beb4:	ad401014 	ori	r21,r21,64
 800beb8:	80c00007 	ldb	r3,0(r16)
 800bebc:	003dbe06 	br	800b5b8 <__ram_exceptions_end+0xf7f8b378>
 800bec0:	80c00007 	ldb	r3,0(r16)
 800bec4:	19c1de26 	beq	r3,r7,800c640 <___vfiprintf_internal_r+0x1204>
 800bec8:	ad400414 	ori	r21,r21,16
 800becc:	003dba06 	br	800b5b8 <__ram_exceptions_end+0xf7f8b378>
 800bed0:	00820074 	movhi	r2,2049
 800bed4:	108a1c04 	addi	r2,r2,10352
 800bed8:	d8812615 	stw	r2,1176(sp)
 800bedc:	d9811d85 	stb	r6,1142(sp)
 800bee0:	a900080c 	andi	r4,r21,32
 800bee4:	d8812117 	ldw	r2,1156(sp)
 800bee8:	203f5b1e 	bne	r4,zero,800bc58 <__ram_exceptions_end+0xf7f8ba18>
 800beec:	a900040c 	andi	r4,r21,16
 800bef0:	2001a826 	beq	r4,zero,800c594 <___vfiprintf_internal_r+0x1158>
 800bef4:	dac12117 	ldw	r11,1156(sp)
 800bef8:	14800017 	ldw	r18,0(r2)
 800befc:	002d883a 	mov	r22,zero
 800bf00:	5ac00104 	addi	r11,r11,4
 800bf04:	dac12115 	stw	r11,1156(sp)
 800bf08:	003f5806 	br	800bc6c <__ram_exceptions_end+0xf7f8ba2c>
 800bf0c:	da812117 	ldw	r10,1156(sp)
 800bf10:	54c00017 	ldw	r19,0(r10)
 800bf14:	50800104 	addi	r2,r10,4
 800bf18:	983f2f16 	blt	r19,zero,800bbd8 <__ram_exceptions_end+0xf7f8b998>
 800bf1c:	d8812115 	stw	r2,1156(sp)
 800bf20:	80c00007 	ldb	r3,0(r16)
 800bf24:	003da406 	br	800b5b8 <__ram_exceptions_end+0xf7f8b378>
 800bf28:	01800ac4 	movi	r6,43
 800bf2c:	80c00007 	ldb	r3,0(r16)
 800bf30:	003da106 	br	800b5b8 <__ram_exceptions_end+0xf7f8b378>
 800bf34:	ad400054 	ori	r21,r21,1
 800bf38:	80c00007 	ldb	r3,0(r16)
 800bf3c:	003d9e06 	br	800b5b8 <__ram_exceptions_end+0xf7f8b378>
 800bf40:	d9811d85 	stb	r6,1142(sp)
 800bf44:	18007126 	beq	r3,zero,800c10c <___vfiprintf_internal_r+0xcd0>
 800bf48:	04800044 	movi	r18,1
 800bf4c:	d8c10005 	stb	r3,1024(sp)
 800bf50:	d8c10004 	addi	r3,sp,1024
 800bf54:	d8011d85 	stb	zero,1142(sp)
 800bf58:	9023883a 	mov	r17,r18
 800bf5c:	d8c12415 	stw	r3,1168(sp)
 800bf60:	003f5606 	br	800bcbc <__ram_exceptions_end+0xf7f8ba7c>
 800bf64:	dac12117 	ldw	r11,1156(sp)
 800bf68:	002d883a 	mov	r22,zero
 800bf6c:	00800044 	movi	r2,1
 800bf70:	5c800017 	ldw	r18,0(r11)
 800bf74:	5ac00104 	addi	r11,r11,4
 800bf78:	dac12115 	stw	r11,1156(sp)
 800bf7c:	9009883a 	mov	r4,r18
 800bf80:	003e0d06 	br	800b7b8 <__ram_exceptions_end+0xf7f8b578>
 800bf84:	dac12117 	ldw	r11,1156(sp)
 800bf88:	002d883a 	mov	r22,zero
 800bf8c:	0005883a 	mov	r2,zero
 800bf90:	5c800017 	ldw	r18,0(r11)
 800bf94:	5ac00104 	addi	r11,r11,4
 800bf98:	dac12115 	stw	r11,1156(sp)
 800bf9c:	9009883a 	mov	r4,r18
 800bfa0:	003e0506 	br	800b7b8 <__ram_exceptions_end+0xf7f8b578>
 800bfa4:	d9012017 	ldw	r4,1152(sp)
 800bfa8:	a00b883a 	mov	r5,r20
 800bfac:	d9811a04 	addi	r6,sp,1128
 800bfb0:	d8c12a15 	stw	r3,1192(sp)
 800bfb4:	db012b15 	stw	r12,1196(sp)
 800bfb8:	800b3280 	call	800b328 <__sprint_r.part.0>
 800bfbc:	d8c12a17 	ldw	r3,1192(sp)
 800bfc0:	db012b17 	ldw	r12,1196(sp)
 800bfc4:	1000571e 	bne	r2,zero,800c124 <___vfiprintf_internal_r+0xce8>
 800bfc8:	d9811b17 	ldw	r6,1132(sp)
 800bfcc:	d8811c17 	ldw	r2,1136(sp)
 800bfd0:	d811883a 	mov	r8,sp
 800bfd4:	31400044 	addi	r5,r6,1
 800bfd8:	003e3306 	br	800b8a8 <__ram_exceptions_end+0xf7f8b668>
 800bfdc:	d9411b17 	ldw	r5,1132(sp)
 800bfe0:	d8c11c17 	ldw	r3,1136(sp)
 800bfe4:	28800044 	addi	r2,r5,1
 800bfe8:	d9011d87 	ldb	r4,1142(sp)
 800bfec:	203e4d26 	beq	r4,zero,800b924 <__ram_exceptions_end+0xf7f8b6e4>
 800bff0:	01000044 	movi	r4,1
 800bff4:	d9411d84 	addi	r5,sp,1142
 800bff8:	1907883a 	add	r3,r3,r4
 800bffc:	41400015 	stw	r5,0(r8)
 800c000:	41000115 	stw	r4,4(r8)
 800c004:	d8c11c15 	stw	r3,1136(sp)
 800c008:	d8811b15 	stw	r2,1132(sp)
 800c00c:	014001c4 	movi	r5,7
 800c010:	2880aa16 	blt	r5,r2,800c2bc <___vfiprintf_internal_r+0xe80>
 800c014:	100b883a 	mov	r5,r2
 800c018:	42000204 	addi	r8,r8,8
 800c01c:	10800044 	addi	r2,r2,1
 800c020:	003e4006 	br	800b924 <__ram_exceptions_end+0xf7f8b6e4>
 800c024:	d9012017 	ldw	r4,1152(sp)
 800c028:	a00b883a 	mov	r5,r20
 800c02c:	d9811a04 	addi	r6,sp,1128
 800c030:	d9c12a15 	stw	r7,1192(sp)
 800c034:	db012b15 	stw	r12,1196(sp)
 800c038:	800b3280 	call	800b328 <__sprint_r.part.0>
 800c03c:	d9c12a17 	ldw	r7,1192(sp)
 800c040:	db012b17 	ldw	r12,1196(sp)
 800c044:	1000371e 	bne	r2,zero,800c124 <___vfiprintf_internal_r+0xce8>
 800c048:	d9411b17 	ldw	r5,1132(sp)
 800c04c:	d8c11c17 	ldw	r3,1136(sp)
 800c050:	d811883a 	mov	r8,sp
 800c054:	28800044 	addi	r2,r5,1
 800c058:	003e4d06 	br	800b990 <__ram_exceptions_end+0xf7f8b750>
 800c05c:	10803fcc 	andi	r2,r2,255
 800c060:	00c00044 	movi	r3,1
 800c064:	10fddf1e 	bne	r2,r3,800b7e4 <__ram_exceptions_end+0xf7f8b5a4>
 800c068:	b000021e 	bne	r22,zero,800c074 <___vfiprintf_internal_r+0xc38>
 800c06c:	00800244 	movi	r2,9
 800c070:	1480202e 	bgeu	r2,r18,800c0f4 <___vfiprintf_internal_r+0xcb8>
 800c074:	dc012515 	stw	r16,1172(sp)
 800c078:	dc410a04 	addi	r17,sp,1064
 800c07c:	9021883a 	mov	r16,r18
 800c080:	da012415 	stw	r8,1168(sp)
 800c084:	b025883a 	mov	r18,r22
 800c088:	da412315 	stw	r9,1164(sp)
 800c08c:	602d883a 	mov	r22,r12
 800c090:	8009883a 	mov	r4,r16
 800c094:	900b883a 	mov	r5,r18
 800c098:	01800284 	movi	r6,10
 800c09c:	000f883a 	mov	r7,zero
 800c0a0:	800d6b40 	call	800d6b4 <__umoddi3>
 800c0a4:	10800c04 	addi	r2,r2,48
 800c0a8:	8c7fffc4 	addi	r17,r17,-1
 800c0ac:	8009883a 	mov	r4,r16
 800c0b0:	900b883a 	mov	r5,r18
 800c0b4:	01800284 	movi	r6,10
 800c0b8:	000f883a 	mov	r7,zero
 800c0bc:	88800005 	stb	r2,0(r17)
 800c0c0:	800d0f40 	call	800d0f4 <__udivdi3>
 800c0c4:	1021883a 	mov	r16,r2
 800c0c8:	10c4b03a 	or	r2,r2,r3
 800c0cc:	1825883a 	mov	r18,r3
 800c0d0:	103fef1e 	bne	r2,zero,800c090 <__ram_exceptions_end+0xf7f8be50>
 800c0d4:	da811e17 	ldw	r10,1144(sp)
 800c0d8:	da012417 	ldw	r8,1168(sp)
 800c0dc:	da412317 	ldw	r9,1164(sp)
 800c0e0:	dc412415 	stw	r17,1168(sp)
 800c0e4:	b019883a 	mov	r12,r22
 800c0e8:	dc012517 	ldw	r16,1172(sp)
 800c0ec:	5463c83a 	sub	r17,r10,r17
 800c0f0:	003dce06 	br	800b82c <__ram_exceptions_end+0xf7f8b5ec>
 800c0f4:	94800c04 	addi	r18,r18,48
 800c0f8:	d8c109c4 	addi	r3,sp,1063
 800c0fc:	dc8109c5 	stb	r18,1063(sp)
 800c100:	dc412717 	ldw	r17,1180(sp)
 800c104:	d8c12415 	stw	r3,1168(sp)
 800c108:	003dc806 	br	800b82c <__ram_exceptions_end+0xf7f8b5ec>
 800c10c:	d8811c17 	ldw	r2,1136(sp)
 800c110:	10000426 	beq	r2,zero,800c124 <___vfiprintf_internal_r+0xce8>
 800c114:	d9012017 	ldw	r4,1152(sp)
 800c118:	a00b883a 	mov	r5,r20
 800c11c:	d9811a04 	addi	r6,sp,1128
 800c120:	800b3280 	call	800b328 <__sprint_r.part.0>
 800c124:	a080030b 	ldhu	r2,12(r20)
 800c128:	1080100c 	andi	r2,r2,64
 800c12c:	103e9b1e 	bne	r2,zero,800bb9c <__ram_exceptions_end+0xf7f8b95c>
 800c130:	d8812217 	ldw	r2,1160(sp)
 800c134:	003e9a06 	br	800bba0 <__ram_exceptions_end+0xf7f8b960>
 800c138:	d9012017 	ldw	r4,1152(sp)
 800c13c:	a00b883a 	mov	r5,r20
 800c140:	d9811a04 	addi	r6,sp,1128
 800c144:	800b3280 	call	800b328 <__sprint_r.part.0>
 800c148:	103ff61e 	bne	r2,zero,800c124 <__ram_exceptions_end+0xf7f8bee4>
 800c14c:	d9011b17 	ldw	r4,1132(sp)
 800c150:	d8c11c17 	ldw	r3,1136(sp)
 800c154:	d811883a 	mov	r8,sp
 800c158:	21400044 	addi	r5,r4,1
 800c15c:	003e4006 	br	800ba60 <__ram_exceptions_end+0xf7f8b820>
 800c160:	1800d61e 	bne	r3,zero,800c4bc <___vfiprintf_internal_r+0x1080>
 800c164:	dac12417 	ldw	r11,1168(sp)
 800c168:	00800044 	movi	r2,1
 800c16c:	dc400115 	stw	r17,4(sp)
 800c170:	dac00015 	stw	r11,0(sp)
 800c174:	dc411c15 	stw	r17,1136(sp)
 800c178:	d8811b15 	stw	r2,1132(sp)
 800c17c:	8807883a 	mov	r3,r17
 800c180:	d811883a 	mov	r8,sp
 800c184:	42000204 	addi	r8,r8,8
 800c188:	aac0010c 	andi	r11,r21,4
 800c18c:	58000226 	beq	r11,zero,800c198 <___vfiprintf_internal_r+0xd5c>
 800c190:	9ca3c83a 	sub	r17,r19,r18
 800c194:	047e2616 	blt	zero,r17,800ba30 <__ram_exceptions_end+0xf7f8b7f0>
 800c198:	94c0010e 	bge	r18,r19,800c1a0 <___vfiprintf_internal_r+0xd64>
 800c19c:	9825883a 	mov	r18,r19
 800c1a0:	da812217 	ldw	r10,1160(sp)
 800c1a4:	5495883a 	add	r10,r10,r18
 800c1a8:	da812215 	stw	r10,1160(sp)
 800c1ac:	183e4826 	beq	r3,zero,800bad0 <__ram_exceptions_end+0xf7f8b890>
 800c1b0:	d9012017 	ldw	r4,1152(sp)
 800c1b4:	a00b883a 	mov	r5,r20
 800c1b8:	d9811a04 	addi	r6,sp,1128
 800c1bc:	800b3280 	call	800b328 <__sprint_r.part.0>
 800c1c0:	103e4326 	beq	r2,zero,800bad0 <__ram_exceptions_end+0xf7f8b890>
 800c1c4:	003fd706 	br	800c124 <__ram_exceptions_end+0xf7f8bee4>
 800c1c8:	9cadc83a 	sub	r22,r19,r18
 800c1cc:	05bde40e 	bge	zero,r22,800b960 <__ram_exceptions_end+0xf7f8b720>
 800c1d0:	03000404 	movi	r12,16
 800c1d4:	6581500e 	bge	r12,r22,800c718 <___vfiprintf_internal_r+0x12dc>
 800c1d8:	00820074 	movhi	r2,2049
 800c1dc:	108a7d04 	addi	r2,r2,10740
 800c1e0:	d8812315 	stw	r2,1164(sp)
 800c1e4:	8005883a 	mov	r2,r16
 800c1e8:	038001c4 	movi	r14,7
 800c1ec:	b021883a 	mov	r16,r22
 800c1f0:	da412515 	stw	r9,1172(sp)
 800c1f4:	102d883a 	mov	r22,r2
 800c1f8:	00000506 	br	800c210 <___vfiprintf_internal_r+0xdd4>
 800c1fc:	29000084 	addi	r4,r5,2
 800c200:	42000204 	addi	r8,r8,8
 800c204:	100b883a 	mov	r5,r2
 800c208:	843ffc04 	addi	r16,r16,-16
 800c20c:	64000d0e 	bge	r12,r16,800c244 <___vfiprintf_internal_r+0xe08>
 800c210:	18c00404 	addi	r3,r3,16
 800c214:	28800044 	addi	r2,r5,1
 800c218:	45c00015 	stw	r23,0(r8)
 800c21c:	43000115 	stw	r12,4(r8)
 800c220:	d8c11c15 	stw	r3,1136(sp)
 800c224:	d8811b15 	stw	r2,1132(sp)
 800c228:	70bff40e 	bge	r14,r2,800c1fc <__ram_exceptions_end+0xf7f8bfbc>
 800c22c:	1800151e 	bne	r3,zero,800c284 <___vfiprintf_internal_r+0xe48>
 800c230:	843ffc04 	addi	r16,r16,-16
 800c234:	000b883a 	mov	r5,zero
 800c238:	01000044 	movi	r4,1
 800c23c:	d811883a 	mov	r8,sp
 800c240:	643ff316 	blt	r12,r16,800c210 <__ram_exceptions_end+0xf7f8bfd0>
 800c244:	da412517 	ldw	r9,1172(sp)
 800c248:	b005883a 	mov	r2,r22
 800c24c:	802d883a 	mov	r22,r16
 800c250:	1021883a 	mov	r16,r2
 800c254:	da812317 	ldw	r10,1164(sp)
 800c258:	1d87883a 	add	r3,r3,r22
 800c25c:	45800115 	stw	r22,4(r8)
 800c260:	42800015 	stw	r10,0(r8)
 800c264:	d8c11c15 	stw	r3,1136(sp)
 800c268:	d9011b15 	stw	r4,1132(sp)
 800c26c:	008001c4 	movi	r2,7
 800c270:	11008d16 	blt	r2,r4,800c4a8 <___vfiprintf_internal_r+0x106c>
 800c274:	42000204 	addi	r8,r8,8
 800c278:	20800044 	addi	r2,r4,1
 800c27c:	200b883a 	mov	r5,r4
 800c280:	003db706 	br	800b960 <__ram_exceptions_end+0xf7f8b720>
 800c284:	d9012017 	ldw	r4,1152(sp)
 800c288:	a00b883a 	mov	r5,r20
 800c28c:	d9811a04 	addi	r6,sp,1128
 800c290:	db012b15 	stw	r12,1196(sp)
 800c294:	db812a15 	stw	r14,1192(sp)
 800c298:	800b3280 	call	800b328 <__sprint_r.part.0>
 800c29c:	db012b17 	ldw	r12,1196(sp)
 800c2a0:	db812a17 	ldw	r14,1192(sp)
 800c2a4:	103f9f1e 	bne	r2,zero,800c124 <__ram_exceptions_end+0xf7f8bee4>
 800c2a8:	d9411b17 	ldw	r5,1132(sp)
 800c2ac:	d8c11c17 	ldw	r3,1136(sp)
 800c2b0:	d811883a 	mov	r8,sp
 800c2b4:	29000044 	addi	r4,r5,1
 800c2b8:	003fd306 	br	800c208 <__ram_exceptions_end+0xf7f8bfc8>
 800c2bc:	18006c1e 	bne	r3,zero,800c470 <___vfiprintf_internal_r+0x1034>
 800c2c0:	70004f26 	beq	r14,zero,800c400 <___vfiprintf_internal_r+0xfc4>
 800c2c4:	d8811d04 	addi	r2,sp,1140
 800c2c8:	00c00084 	movi	r3,2
 800c2cc:	d8800015 	stw	r2,0(sp)
 800c2d0:	d8c00115 	stw	r3,4(sp)
 800c2d4:	2005883a 	mov	r2,r4
 800c2d8:	d811883a 	mov	r8,sp
 800c2dc:	003d9b06 	br	800b94c <__ram_exceptions_end+0xf7f8b70c>
 800c2e0:	1800571e 	bne	r3,zero,800c440 <___vfiprintf_internal_r+0x1004>
 800c2e4:	000b883a 	mov	r5,zero
 800c2e8:	00800044 	movi	r2,1
 800c2ec:	d811883a 	mov	r8,sp
 800c2f0:	003d9906 	br	800b958 <__ram_exceptions_end+0xf7f8b718>
 800c2f4:	10803fcc 	andi	r2,r2,255
 800c2f8:	1000251e 	bne	r2,zero,800c390 <___vfiprintf_internal_r+0xf54>
 800c2fc:	a880004c 	andi	r2,r21,1
 800c300:	10007826 	beq	r2,zero,800c4e4 <___vfiprintf_internal_r+0x10a8>
 800c304:	00800c04 	movi	r2,48
 800c308:	d8c109c4 	addi	r3,sp,1063
 800c30c:	d88109c5 	stb	r2,1063(sp)
 800c310:	dc412717 	ldw	r17,1180(sp)
 800c314:	d8c12415 	stw	r3,1168(sp)
 800c318:	003d4406 	br	800b82c <__ram_exceptions_end+0xf7f8b5ec>
 800c31c:	d9012617 	ldw	r4,1176(sp)
 800c320:	dc410a04 	addi	r17,sp,1064
 800c324:	908003cc 	andi	r2,r18,15
 800c328:	b006973a 	slli	r3,r22,28
 800c32c:	2085883a 	add	r2,r4,r2
 800c330:	9024d13a 	srli	r18,r18,4
 800c334:	10800003 	ldbu	r2,0(r2)
 800c338:	b02cd13a 	srli	r22,r22,4
 800c33c:	8c7fffc4 	addi	r17,r17,-1
 800c340:	1ca4b03a 	or	r18,r3,r18
 800c344:	88800005 	stb	r2,0(r17)
 800c348:	9584b03a 	or	r2,r18,r22
 800c34c:	103ff51e 	bne	r2,zero,800c324 <__ram_exceptions_end+0xf7f8c0e4>
 800c350:	dac11e17 	ldw	r11,1144(sp)
 800c354:	dc412415 	stw	r17,1168(sp)
 800c358:	5c63c83a 	sub	r17,r11,r17
 800c35c:	003d3306 	br	800b82c <__ram_exceptions_end+0xf7f8b5ec>
 800c360:	1800941e 	bne	r3,zero,800c5b4 <___vfiprintf_internal_r+0x1178>
 800c364:	d8811d87 	ldb	r2,1142(sp)
 800c368:	10006b26 	beq	r2,zero,800c518 <___vfiprintf_internal_r+0x10dc>
 800c36c:	00c00044 	movi	r3,1
 800c370:	d9011d84 	addi	r4,sp,1142
 800c374:	1805883a 	mov	r2,r3
 800c378:	d9000015 	stw	r4,0(sp)
 800c37c:	d8c00115 	stw	r3,4(sp)
 800c380:	d811883a 	mov	r8,sp
 800c384:	003f2306 	br	800c014 <__ram_exceptions_end+0xf7f8bdd4>
 800c388:	8023883a 	mov	r17,r16
 800c38c:	003c7d06 	br	800b584 <__ram_exceptions_end+0xf7f8b344>
 800c390:	da810a04 	addi	r10,sp,1064
 800c394:	da812415 	stw	r10,1168(sp)
 800c398:	003d2406 	br	800b82c <__ram_exceptions_end+0xf7f8b5ec>
 800c39c:	d9012017 	ldw	r4,1152(sp)
 800c3a0:	a00b883a 	mov	r5,r20
 800c3a4:	d9811a04 	addi	r6,sp,1128
 800c3a8:	800b3280 	call	800b328 <__sprint_r.part.0>
 800c3ac:	103f5d1e 	bne	r2,zero,800c124 <__ram_exceptions_end+0xf7f8bee4>
 800c3b0:	d8c11c17 	ldw	r3,1136(sp)
 800c3b4:	d811883a 	mov	r8,sp
 800c3b8:	003f7306 	br	800c188 <__ram_exceptions_end+0xf7f8bf48>
 800c3bc:	1c800017 	ldw	r18,0(r3)
 800c3c0:	dac12117 	ldw	r11,1156(sp)
 800c3c4:	902dd7fa 	srai	r22,r18,31
 800c3c8:	5ac00104 	addi	r11,r11,4
 800c3cc:	dac12115 	stw	r11,1156(sp)
 800c3d0:	b005883a 	mov	r2,r22
 800c3d4:	003e5406 	br	800bd28 <__ram_exceptions_end+0xf7f8bae8>
 800c3d8:	00800084 	movi	r2,2
 800c3dc:	9588b03a 	or	r4,r18,r22
 800c3e0:	003cf506 	br	800b7b8 <__ram_exceptions_end+0xf7f8b578>
 800c3e4:	d9012017 	ldw	r4,1152(sp)
 800c3e8:	a00b883a 	mov	r5,r20
 800c3ec:	d9811a04 	addi	r6,sp,1128
 800c3f0:	800b3280 	call	800b328 <__sprint_r.part.0>
 800c3f4:	103f4b1e 	bne	r2,zero,800c124 <__ram_exceptions_end+0xf7f8bee4>
 800c3f8:	d811883a 	mov	r8,sp
 800c3fc:	003cd106 	br	800b744 <__ram_exceptions_end+0xf7f8b504>
 800c400:	000b883a 	mov	r5,zero
 800c404:	2005883a 	mov	r2,r4
 800c408:	d811883a 	mov	r8,sp
 800c40c:	003d5206 	br	800b958 <__ram_exceptions_end+0xf7f8b718>
 800c410:	10803fcc 	andi	r2,r2,255
 800c414:	1080201c 	xori	r2,r2,128
 800c418:	10bfe004 	addi	r2,r2,-128
 800c41c:	01000c04 	movi	r4,48
 800c420:	11008e26 	beq	r2,r4,800c65c <___vfiprintf_internal_r+0x1220>
 800c424:	da812417 	ldw	r10,1168(sp)
 800c428:	dac11e17 	ldw	r11,1144(sp)
 800c42c:	193fffc5 	stb	r4,-1(r3)
 800c430:	52bfffc4 	addi	r10,r10,-1
 800c434:	da812415 	stw	r10,1168(sp)
 800c438:	5aa3c83a 	sub	r17,r11,r10
 800c43c:	003cfb06 	br	800b82c <__ram_exceptions_end+0xf7f8b5ec>
 800c440:	d9012017 	ldw	r4,1152(sp)
 800c444:	a00b883a 	mov	r5,r20
 800c448:	d9811a04 	addi	r6,sp,1128
 800c44c:	da412b15 	stw	r9,1196(sp)
 800c450:	800b3280 	call	800b328 <__sprint_r.part.0>
 800c454:	da412b17 	ldw	r9,1196(sp)
 800c458:	103f321e 	bne	r2,zero,800c124 <__ram_exceptions_end+0xf7f8bee4>
 800c45c:	d9411b17 	ldw	r5,1132(sp)
 800c460:	d8c11c17 	ldw	r3,1136(sp)
 800c464:	d811883a 	mov	r8,sp
 800c468:	28800044 	addi	r2,r5,1
 800c46c:	003d3a06 	br	800b958 <__ram_exceptions_end+0xf7f8b718>
 800c470:	d9012017 	ldw	r4,1152(sp)
 800c474:	a00b883a 	mov	r5,r20
 800c478:	d9811a04 	addi	r6,sp,1128
 800c47c:	da412b15 	stw	r9,1196(sp)
 800c480:	db812a15 	stw	r14,1192(sp)
 800c484:	800b3280 	call	800b328 <__sprint_r.part.0>
 800c488:	da412b17 	ldw	r9,1196(sp)
 800c48c:	db812a17 	ldw	r14,1192(sp)
 800c490:	103f241e 	bne	r2,zero,800c124 <__ram_exceptions_end+0xf7f8bee4>
 800c494:	d9411b17 	ldw	r5,1132(sp)
 800c498:	d8c11c17 	ldw	r3,1136(sp)
 800c49c:	d811883a 	mov	r8,sp
 800c4a0:	28800044 	addi	r2,r5,1
 800c4a4:	003d1f06 	br	800b924 <__ram_exceptions_end+0xf7f8b6e4>
 800c4a8:	1800781e 	bne	r3,zero,800c68c <___vfiprintf_internal_r+0x1250>
 800c4ac:	000b883a 	mov	r5,zero
 800c4b0:	00800044 	movi	r2,1
 800c4b4:	d811883a 	mov	r8,sp
 800c4b8:	003d2906 	br	800b960 <__ram_exceptions_end+0xf7f8b720>
 800c4bc:	d9012017 	ldw	r4,1152(sp)
 800c4c0:	a00b883a 	mov	r5,r20
 800c4c4:	d9811a04 	addi	r6,sp,1128
 800c4c8:	800b3280 	call	800b328 <__sprint_r.part.0>
 800c4cc:	103f151e 	bne	r2,zero,800c124 <__ram_exceptions_end+0xf7f8bee4>
 800c4d0:	d8811b17 	ldw	r2,1132(sp)
 800c4d4:	d8c11c17 	ldw	r3,1136(sp)
 800c4d8:	d811883a 	mov	r8,sp
 800c4dc:	10800044 	addi	r2,r2,1
 800c4e0:	003d4406 	br	800b9f4 <__ram_exceptions_end+0xf7f8b7b4>
 800c4e4:	dac10a04 	addi	r11,sp,1064
 800c4e8:	dac12415 	stw	r11,1168(sp)
 800c4ec:	003ccf06 	br	800b82c <__ram_exceptions_end+0xf7f8b5ec>
 800c4f0:	04a5c83a 	sub	r18,zero,r18
 800c4f4:	9004c03a 	cmpne	r2,r18,zero
 800c4f8:	05adc83a 	sub	r22,zero,r22
 800c4fc:	b0adc83a 	sub	r22,r22,r2
 800c500:	03000b44 	movi	r12,45
 800c504:	db011d85 	stb	r12,1142(sp)
 800c508:	4823883a 	mov	r17,r9
 800c50c:	00800044 	movi	r2,1
 800c510:	9588b03a 	or	r4,r18,r22
 800c514:	003cab06 	br	800b7c4 <__ram_exceptions_end+0xf7f8b584>
 800c518:	000b883a 	mov	r5,zero
 800c51c:	00800044 	movi	r2,1
 800c520:	d811883a 	mov	r8,sp
 800c524:	703d0c26 	beq	r14,zero,800b958 <__ram_exceptions_end+0xf7f8b718>
 800c528:	00c00084 	movi	r3,2
 800c52c:	d9011d04 	addi	r4,sp,1140
 800c530:	d9000015 	stw	r4,0(sp)
 800c534:	d8c00115 	stw	r3,4(sp)
 800c538:	003d0406 	br	800b94c <__ram_exceptions_end+0xf7f8b70c>
 800c53c:	80c00007 	ldb	r3,0(r16)
 800c540:	003c1d06 	br	800b5b8 <__ram_exceptions_end+0xf7f8b378>
 800c544:	a880040c 	andi	r2,r21,16
 800c548:	1000091e 	bne	r2,zero,800c570 <___vfiprintf_internal_r+0x1134>
 800c54c:	aac0100c 	andi	r11,r21,64
 800c550:	58000726 	beq	r11,zero,800c570 <___vfiprintf_internal_r+0x1134>
 800c554:	da812117 	ldw	r10,1156(sp)
 800c558:	dac12217 	ldw	r11,1160(sp)
 800c55c:	50800017 	ldw	r2,0(r10)
 800c560:	52800104 	addi	r10,r10,4
 800c564:	da812115 	stw	r10,1156(sp)
 800c568:	12c0000d 	sth	r11,0(r2)
 800c56c:	003be806 	br	800b510 <__ram_exceptions_end+0xf7f8b2d0>
 800c570:	da812117 	ldw	r10,1156(sp)
 800c574:	dac12217 	ldw	r11,1160(sp)
 800c578:	50800017 	ldw	r2,0(r10)
 800c57c:	52800104 	addi	r10,r10,4
 800c580:	da812115 	stw	r10,1156(sp)
 800c584:	12c00015 	stw	r11,0(r2)
 800c588:	003be106 	br	800b510 <__ram_exceptions_end+0xf7f8b2d0>
 800c58c:	00800084 	movi	r2,2
 800c590:	003c8906 	br	800b7b8 <__ram_exceptions_end+0xf7f8b578>
 800c594:	a900100c 	andi	r4,r21,64
 800c598:	20001f26 	beq	r4,zero,800c618 <___vfiprintf_internal_r+0x11dc>
 800c59c:	da812117 	ldw	r10,1156(sp)
 800c5a0:	1480000b 	ldhu	r18,0(r2)
 800c5a4:	002d883a 	mov	r22,zero
 800c5a8:	52800104 	addi	r10,r10,4
 800c5ac:	da812115 	stw	r10,1156(sp)
 800c5b0:	003dae06 	br	800bc6c <__ram_exceptions_end+0xf7f8ba2c>
 800c5b4:	d9012017 	ldw	r4,1152(sp)
 800c5b8:	a00b883a 	mov	r5,r20
 800c5bc:	d9811a04 	addi	r6,sp,1128
 800c5c0:	da412b15 	stw	r9,1196(sp)
 800c5c4:	db812a15 	stw	r14,1192(sp)
 800c5c8:	800b3280 	call	800b328 <__sprint_r.part.0>
 800c5cc:	da412b17 	ldw	r9,1196(sp)
 800c5d0:	db812a17 	ldw	r14,1192(sp)
 800c5d4:	103ed31e 	bne	r2,zero,800c124 <__ram_exceptions_end+0xf7f8bee4>
 800c5d8:	d9411b17 	ldw	r5,1132(sp)
 800c5dc:	d8c11c17 	ldw	r3,1136(sp)
 800c5e0:	d811883a 	mov	r8,sp
 800c5e4:	28800044 	addi	r2,r5,1
 800c5e8:	003e7f06 	br	800bfe8 <__ram_exceptions_end+0xf7f8bda8>
 800c5ec:	9825883a 	mov	r18,r19
 800c5f0:	003d3406 	br	800bac4 <__ram_exceptions_end+0xf7f8b884>
 800c5f4:	4823883a 	mov	r17,r9
 800c5f8:	003e0806 	br	800be1c <__ram_exceptions_end+0xf7f8bbdc>
 800c5fc:	d9012017 	ldw	r4,1152(sp)
 800c600:	a00b883a 	mov	r5,r20
 800c604:	d9811a04 	addi	r6,sp,1128
 800c608:	800b3280 	call	800b328 <__sprint_r.part.0>
 800c60c:	103ec51e 	bne	r2,zero,800c124 <__ram_exceptions_end+0xf7f8bee4>
 800c610:	d8c11c17 	ldw	r3,1136(sp)
 800c614:	003ee006 	br	800c198 <__ram_exceptions_end+0xf7f8bf58>
 800c618:	dac12117 	ldw	r11,1156(sp)
 800c61c:	14800017 	ldw	r18,0(r2)
 800c620:	002d883a 	mov	r22,zero
 800c624:	5ac00104 	addi	r11,r11,4
 800c628:	dac12115 	stw	r11,1156(sp)
 800c62c:	003d8f06 	br	800bc6c <__ram_exceptions_end+0xf7f8ba2c>
 800c630:	02c20074 	movhi	r11,2049
 800c634:	5aca7d04 	addi	r11,r11,10740
 800c638:	dac12315 	stw	r11,1164(sp)
 800c63c:	003ce306 	br	800b9cc <__ram_exceptions_end+0xf7f8b78c>
 800c640:	80c00043 	ldbu	r3,1(r16)
 800c644:	ad400814 	ori	r21,r21,32
 800c648:	84000044 	addi	r16,r16,1
 800c64c:	18c03fcc 	andi	r3,r3,255
 800c650:	18c0201c 	xori	r3,r3,128
 800c654:	18ffe004 	addi	r3,r3,-128
 800c658:	003bd706 	br	800b5b8 <__ram_exceptions_end+0xf7f8b378>
 800c65c:	dac11e17 	ldw	r11,1144(sp)
 800c660:	d8c12417 	ldw	r3,1168(sp)
 800c664:	58e3c83a 	sub	r17,r11,r3
 800c668:	003c7006 	br	800b82c <__ram_exceptions_end+0xf7f8b5ec>
 800c66c:	da012a15 	stw	r8,1192(sp)
 800c670:	80041000 	call	8004100 <strlen>
 800c674:	1023883a 	mov	r17,r2
 800c678:	db011d83 	ldbu	r12,1142(sp)
 800c67c:	dd812115 	stw	r22,1156(sp)
 800c680:	0013883a 	mov	r9,zero
 800c684:	da012a17 	ldw	r8,1192(sp)
 800c688:	003c6806 	br	800b82c <__ram_exceptions_end+0xf7f8b5ec>
 800c68c:	d9012017 	ldw	r4,1152(sp)
 800c690:	a00b883a 	mov	r5,r20
 800c694:	d9811a04 	addi	r6,sp,1128
 800c698:	da412b15 	stw	r9,1196(sp)
 800c69c:	800b3280 	call	800b328 <__sprint_r.part.0>
 800c6a0:	da412b17 	ldw	r9,1196(sp)
 800c6a4:	103e9f1e 	bne	r2,zero,800c124 <__ram_exceptions_end+0xf7f8bee4>
 800c6a8:	d9411b17 	ldw	r5,1132(sp)
 800c6ac:	d8c11c17 	ldw	r3,1136(sp)
 800c6b0:	d811883a 	mov	r8,sp
 800c6b4:	28800044 	addi	r2,r5,1
 800c6b8:	003ca906 	br	800b960 <__ram_exceptions_end+0xf7f8b720>
 800c6bc:	d9411b17 	ldw	r5,1132(sp)
 800c6c0:	01020074 	movhi	r4,2049
 800c6c4:	210a8104 	addi	r4,r4,10756
 800c6c8:	d9012315 	stw	r4,1164(sp)
 800c6cc:	29400044 	addi	r5,r5,1
 800c6d0:	003c8806 	br	800b8f4 <__ram_exceptions_end+0xf7f8b6b4>
 800c6d4:	00800184 	movi	r2,6
 800c6d8:	1240012e 	bgeu	r2,r9,800c6e0 <___vfiprintf_internal_r+0x12a4>
 800c6dc:	1013883a 	mov	r9,r2
 800c6e0:	4823883a 	mov	r17,r9
 800c6e4:	4825883a 	mov	r18,r9
 800c6e8:	48001516 	blt	r9,zero,800c740 <___vfiprintf_internal_r+0x1304>
 800c6ec:	00820074 	movhi	r2,2049
 800c6f0:	108a2104 	addi	r2,r2,10372
 800c6f4:	dd812115 	stw	r22,1156(sp)
 800c6f8:	d8812415 	stw	r2,1168(sp)
 800c6fc:	003d6f06 	br	800bcbc <__ram_exceptions_end+0xf7f8ba7c>
 800c700:	d9411b17 	ldw	r5,1132(sp)
 800c704:	02c20074 	movhi	r11,2049
 800c708:	5aca8104 	addi	r11,r11,10756
 800c70c:	dac12315 	stw	r11,1164(sp)
 800c710:	29400044 	addi	r5,r5,1
 800c714:	003ce106 	br	800ba9c <__ram_exceptions_end+0xf7f8b85c>
 800c718:	01020074 	movhi	r4,2049
 800c71c:	210a7d04 	addi	r4,r4,10740
 800c720:	d9012315 	stw	r4,1164(sp)
 800c724:	1009883a 	mov	r4,r2
 800c728:	003eca06 	br	800c254 <__ram_exceptions_end+0xf7f8c014>
 800c72c:	4823883a 	mov	r17,r9
 800c730:	db011d83 	ldbu	r12,1142(sp)
 800c734:	dd812115 	stw	r22,1156(sp)
 800c738:	0013883a 	mov	r9,zero
 800c73c:	003c3b06 	br	800b82c <__ram_exceptions_end+0xf7f8b5ec>
 800c740:	0025883a 	mov	r18,zero
 800c744:	003fe906 	br	800c6ec <__ram_exceptions_end+0xf7f8c4ac>
 800c748:	dac12117 	ldw	r11,1156(sp)
 800c74c:	8005883a 	mov	r2,r16
 800c750:	5021883a 	mov	r16,r10
 800c754:	5a400017 	ldw	r9,0(r11)
 800c758:	58c00104 	addi	r3,r11,4
 800c75c:	d8c12115 	stw	r3,1156(sp)
 800c760:	48000a16 	blt	r9,zero,800c78c <___vfiprintf_internal_r+0x1350>
 800c764:	10c00047 	ldb	r3,1(r2)
 800c768:	003b9306 	br	800b5b8 <__ram_exceptions_end+0xf7f8b378>
 800c76c:	043fffc4 	movi	r16,-1
 800c770:	003d0206 	br	800bb7c <__ram_exceptions_end+0xf7f8b93c>
 800c774:	94c0010e 	bge	r18,r19,800c77c <___vfiprintf_internal_r+0x1340>
 800c778:	9825883a 	mov	r18,r19
 800c77c:	da812217 	ldw	r10,1160(sp)
 800c780:	5495883a 	add	r10,r10,r18
 800c784:	da812215 	stw	r10,1160(sp)
 800c788:	003cd106 	br	800bad0 <__ram_exceptions_end+0xf7f8b890>
 800c78c:	027fffc4 	movi	r9,-1
 800c790:	10c00047 	ldb	r3,1(r2)
 800c794:	003b8806 	br	800b5b8 <__ram_exceptions_end+0xf7f8b378>

0800c798 <__vfiprintf_internal>:
 800c798:	2007883a 	mov	r3,r4
 800c79c:	01020074 	movhi	r4,2049
 800c7a0:	21114804 	addi	r4,r4,17696
 800c7a4:	21000017 	ldw	r4,0(r4)
 800c7a8:	2805883a 	mov	r2,r5
 800c7ac:	300f883a 	mov	r7,r6
 800c7b0:	180b883a 	mov	r5,r3
 800c7b4:	100d883a 	mov	r6,r2
 800c7b8:	800b43c1 	jmpi	800b43c <___vfiprintf_internal_r>

0800c7bc <__swbuf_r>:
 800c7bc:	defffc04 	addi	sp,sp,-16
 800c7c0:	dc800215 	stw	r18,8(sp)
 800c7c4:	dc400115 	stw	r17,4(sp)
 800c7c8:	dc000015 	stw	r16,0(sp)
 800c7cc:	dfc00315 	stw	ra,12(sp)
 800c7d0:	2025883a 	mov	r18,r4
 800c7d4:	2823883a 	mov	r17,r5
 800c7d8:	3021883a 	mov	r16,r6
 800c7dc:	20000226 	beq	r4,zero,800c7e8 <__swbuf_r+0x2c>
 800c7e0:	20800e17 	ldw	r2,56(r4)
 800c7e4:	10004126 	beq	r2,zero,800c8ec <__swbuf_r+0x130>
 800c7e8:	80c00617 	ldw	r3,24(r16)
 800c7ec:	8180030b 	ldhu	r6,12(r16)
 800c7f0:	80c00215 	stw	r3,8(r16)
 800c7f4:	30c0020c 	andi	r3,r6,8
 800c7f8:	18003526 	beq	r3,zero,800c8d0 <__swbuf_r+0x114>
 800c7fc:	80c00417 	ldw	r3,16(r16)
 800c800:	18003326 	beq	r3,zero,800c8d0 <__swbuf_r+0x114>
 800c804:	3088000c 	andi	r2,r6,8192
 800c808:	8c403fcc 	andi	r17,r17,255
 800c80c:	10001726 	beq	r2,zero,800c86c <__swbuf_r+0xb0>
 800c810:	80800017 	ldw	r2,0(r16)
 800c814:	81000517 	ldw	r4,20(r16)
 800c818:	10c7c83a 	sub	r3,r2,r3
 800c81c:	19001d0e 	bge	r3,r4,800c894 <__swbuf_r+0xd8>
 800c820:	18c00044 	addi	r3,r3,1
 800c824:	81400217 	ldw	r5,8(r16)
 800c828:	11000044 	addi	r4,r2,1
 800c82c:	81000015 	stw	r4,0(r16)
 800c830:	297fffc4 	addi	r5,r5,-1
 800c834:	81400215 	stw	r5,8(r16)
 800c838:	14400005 	stb	r17,0(r2)
 800c83c:	80800517 	ldw	r2,20(r16)
 800c840:	10c01d26 	beq	r2,r3,800c8b8 <__swbuf_r+0xfc>
 800c844:	8080030b 	ldhu	r2,12(r16)
 800c848:	1080004c 	andi	r2,r2,1
 800c84c:	1000181e 	bne	r2,zero,800c8b0 <__swbuf_r+0xf4>
 800c850:	8805883a 	mov	r2,r17
 800c854:	dfc00317 	ldw	ra,12(sp)
 800c858:	dc800217 	ldw	r18,8(sp)
 800c85c:	dc400117 	ldw	r17,4(sp)
 800c860:	dc000017 	ldw	r16,0(sp)
 800c864:	dec00404 	addi	sp,sp,16
 800c868:	f800283a 	ret
 800c86c:	81001917 	ldw	r4,100(r16)
 800c870:	00b7ffc4 	movi	r2,-8193
 800c874:	31880014 	ori	r6,r6,8192
 800c878:	2084703a 	and	r2,r4,r2
 800c87c:	80801915 	stw	r2,100(r16)
 800c880:	80800017 	ldw	r2,0(r16)
 800c884:	81000517 	ldw	r4,20(r16)
 800c888:	8180030d 	sth	r6,12(r16)
 800c88c:	10c7c83a 	sub	r3,r2,r3
 800c890:	193fe316 	blt	r3,r4,800c820 <__ram_exceptions_end+0xf7f8c5e0>
 800c894:	9009883a 	mov	r4,r18
 800c898:	800b883a 	mov	r5,r16
 800c89c:	8007c100 	call	8007c10 <_fflush_r>
 800c8a0:	1000091e 	bne	r2,zero,800c8c8 <__swbuf_r+0x10c>
 800c8a4:	80800017 	ldw	r2,0(r16)
 800c8a8:	00c00044 	movi	r3,1
 800c8ac:	003fdd06 	br	800c824 <__ram_exceptions_end+0xf7f8c5e4>
 800c8b0:	00800284 	movi	r2,10
 800c8b4:	88bfe61e 	bne	r17,r2,800c850 <__ram_exceptions_end+0xf7f8c610>
 800c8b8:	9009883a 	mov	r4,r18
 800c8bc:	800b883a 	mov	r5,r16
 800c8c0:	8007c100 	call	8007c10 <_fflush_r>
 800c8c4:	103fe226 	beq	r2,zero,800c850 <__ram_exceptions_end+0xf7f8c610>
 800c8c8:	00bfffc4 	movi	r2,-1
 800c8cc:	003fe106 	br	800c854 <__ram_exceptions_end+0xf7f8c614>
 800c8d0:	9009883a 	mov	r4,r18
 800c8d4:	800b883a 	mov	r5,r16
 800c8d8:	80061b80 	call	80061b8 <__swsetup_r>
 800c8dc:	1000051e 	bne	r2,zero,800c8f4 <__swbuf_r+0x138>
 800c8e0:	8180030b 	ldhu	r6,12(r16)
 800c8e4:	80c00417 	ldw	r3,16(r16)
 800c8e8:	003fc606 	br	800c804 <__ram_exceptions_end+0xf7f8c5c4>
 800c8ec:	80081b80 	call	80081b8 <__sinit>
 800c8f0:	003fbd06 	br	800c7e8 <__ram_exceptions_end+0xf7f8c5a8>
 800c8f4:	80c0030b 	ldhu	r3,12(r16)
 800c8f8:	00bfffc4 	movi	r2,-1
 800c8fc:	18c01014 	ori	r3,r3,64
 800c900:	80c0030d 	sth	r3,12(r16)
 800c904:	00c00244 	movi	r3,9
 800c908:	90c00015 	stw	r3,0(r18)
 800c90c:	003fd106 	br	800c854 <__ram_exceptions_end+0xf7f8c614>

0800c910 <__swbuf>:
 800c910:	00c20074 	movhi	r3,2049
 800c914:	18d14804 	addi	r3,r3,17696
 800c918:	2005883a 	mov	r2,r4
 800c91c:	19000017 	ldw	r4,0(r3)
 800c920:	280d883a 	mov	r6,r5
 800c924:	100b883a 	mov	r5,r2
 800c928:	800c7bc1 	jmpi	800c7bc <__swbuf_r>

0800c92c <_write_r>:
 800c92c:	defffd04 	addi	sp,sp,-12
 800c930:	dc000015 	stw	r16,0(sp)
 800c934:	04020074 	movhi	r16,2049
 800c938:	dc400115 	stw	r17,4(sp)
 800c93c:	84182304 	addi	r16,r16,24716
 800c940:	2023883a 	mov	r17,r4
 800c944:	2809883a 	mov	r4,r5
 800c948:	300b883a 	mov	r5,r6
 800c94c:	380d883a 	mov	r6,r7
 800c950:	dfc00215 	stw	ra,8(sp)
 800c954:	80000015 	stw	zero,0(r16)
 800c958:	801004c0 	call	801004c <write>
 800c95c:	00ffffc4 	movi	r3,-1
 800c960:	10c00526 	beq	r2,r3,800c978 <_write_r+0x4c>
 800c964:	dfc00217 	ldw	ra,8(sp)
 800c968:	dc400117 	ldw	r17,4(sp)
 800c96c:	dc000017 	ldw	r16,0(sp)
 800c970:	dec00304 	addi	sp,sp,12
 800c974:	f800283a 	ret
 800c978:	80c00017 	ldw	r3,0(r16)
 800c97c:	183ff926 	beq	r3,zero,800c964 <__ram_exceptions_end+0xf7f8c724>
 800c980:	88c00015 	stw	r3,0(r17)
 800c984:	003ff706 	br	800c964 <__ram_exceptions_end+0xf7f8c724>

0800c988 <_close_r>:
 800c988:	defffd04 	addi	sp,sp,-12
 800c98c:	dc000015 	stw	r16,0(sp)
 800c990:	04020074 	movhi	r16,2049
 800c994:	dc400115 	stw	r17,4(sp)
 800c998:	84182304 	addi	r16,r16,24716
 800c99c:	2023883a 	mov	r17,r4
 800c9a0:	2809883a 	mov	r4,r5
 800c9a4:	dfc00215 	stw	ra,8(sp)
 800c9a8:	80000015 	stw	zero,0(r16)
 800c9ac:	800f7f00 	call	800f7f0 <close>
 800c9b0:	00ffffc4 	movi	r3,-1
 800c9b4:	10c00526 	beq	r2,r3,800c9cc <_close_r+0x44>
 800c9b8:	dfc00217 	ldw	ra,8(sp)
 800c9bc:	dc400117 	ldw	r17,4(sp)
 800c9c0:	dc000017 	ldw	r16,0(sp)
 800c9c4:	dec00304 	addi	sp,sp,12
 800c9c8:	f800283a 	ret
 800c9cc:	80c00017 	ldw	r3,0(r16)
 800c9d0:	183ff926 	beq	r3,zero,800c9b8 <__ram_exceptions_end+0xf7f8c778>
 800c9d4:	88c00015 	stw	r3,0(r17)
 800c9d8:	003ff706 	br	800c9b8 <__ram_exceptions_end+0xf7f8c778>

0800c9dc <_calloc_r>:
 800c9dc:	298b383a 	mul	r5,r5,r6
 800c9e0:	defffe04 	addi	sp,sp,-8
 800c9e4:	dc000015 	stw	r16,0(sp)
 800c9e8:	dfc00115 	stw	ra,4(sp)
 800c9ec:	8008ec80 	call	8008ec8 <_malloc_r>
 800c9f0:	1021883a 	mov	r16,r2
 800c9f4:	10002826 	beq	r2,zero,800ca98 <_calloc_r+0xbc>
 800c9f8:	11bfff17 	ldw	r6,-4(r2)
 800c9fc:	00bfff04 	movi	r2,-4
 800ca00:	00c00904 	movi	r3,36
 800ca04:	308c703a 	and	r6,r6,r2
 800ca08:	308d883a 	add	r6,r6,r2
 800ca0c:	19801436 	bltu	r3,r6,800ca60 <_calloc_r+0x84>
 800ca10:	008004c4 	movi	r2,19
 800ca14:	11800936 	bltu	r2,r6,800ca3c <_calloc_r+0x60>
 800ca18:	8005883a 	mov	r2,r16
 800ca1c:	10000015 	stw	zero,0(r2)
 800ca20:	10000115 	stw	zero,4(r2)
 800ca24:	10000215 	stw	zero,8(r2)
 800ca28:	8005883a 	mov	r2,r16
 800ca2c:	dfc00117 	ldw	ra,4(sp)
 800ca30:	dc000017 	ldw	r16,0(sp)
 800ca34:	dec00204 	addi	sp,sp,8
 800ca38:	f800283a 	ret
 800ca3c:	80000015 	stw	zero,0(r16)
 800ca40:	80000115 	stw	zero,4(r16)
 800ca44:	008006c4 	movi	r2,27
 800ca48:	11800d2e 	bgeu	r2,r6,800ca80 <_calloc_r+0xa4>
 800ca4c:	80000215 	stw	zero,8(r16)
 800ca50:	80000315 	stw	zero,12(r16)
 800ca54:	30c00c26 	beq	r6,r3,800ca88 <_calloc_r+0xac>
 800ca58:	80800404 	addi	r2,r16,16
 800ca5c:	003fef06 	br	800ca1c <__ram_exceptions_end+0xf7f8c7dc>
 800ca60:	8009883a 	mov	r4,r16
 800ca64:	000b883a 	mov	r5,zero
 800ca68:	8003e880 	call	8003e88 <memset>
 800ca6c:	8005883a 	mov	r2,r16
 800ca70:	dfc00117 	ldw	ra,4(sp)
 800ca74:	dc000017 	ldw	r16,0(sp)
 800ca78:	dec00204 	addi	sp,sp,8
 800ca7c:	f800283a 	ret
 800ca80:	80800204 	addi	r2,r16,8
 800ca84:	003fe506 	br	800ca1c <__ram_exceptions_end+0xf7f8c7dc>
 800ca88:	80000415 	stw	zero,16(r16)
 800ca8c:	80800604 	addi	r2,r16,24
 800ca90:	80000515 	stw	zero,20(r16)
 800ca94:	003fe106 	br	800ca1c <__ram_exceptions_end+0xf7f8c7dc>
 800ca98:	0005883a 	mov	r2,zero
 800ca9c:	003fe306 	br	800ca2c <__ram_exceptions_end+0xf7f8c7ec>

0800caa0 <_fclose_r>:
 800caa0:	28003226 	beq	r5,zero,800cb6c <_fclose_r+0xcc>
 800caa4:	defffc04 	addi	sp,sp,-16
 800caa8:	dc400115 	stw	r17,4(sp)
 800caac:	2023883a 	mov	r17,r4
 800cab0:	dc000015 	stw	r16,0(sp)
 800cab4:	dfc00315 	stw	ra,12(sp)
 800cab8:	dc800215 	stw	r18,8(sp)
 800cabc:	2821883a 	mov	r16,r5
 800cac0:	80081c80 	call	80081c8 <__sfp_lock_acquire>
 800cac4:	88000226 	beq	r17,zero,800cad0 <_fclose_r+0x30>
 800cac8:	88800e17 	ldw	r2,56(r17)
 800cacc:	10002926 	beq	r2,zero,800cb74 <_fclose_r+0xd4>
 800cad0:	8080030f 	ldh	r2,12(r16)
 800cad4:	10002226 	beq	r2,zero,800cb60 <_fclose_r+0xc0>
 800cad8:	8809883a 	mov	r4,r17
 800cadc:	800b883a 	mov	r5,r16
 800cae0:	8007c100 	call	8007c10 <_fflush_r>
 800cae4:	1025883a 	mov	r18,r2
 800cae8:	80800b17 	ldw	r2,44(r16)
 800caec:	10000426 	beq	r2,zero,800cb00 <_fclose_r+0x60>
 800caf0:	81400717 	ldw	r5,28(r16)
 800caf4:	8809883a 	mov	r4,r17
 800caf8:	103ee83a 	callr	r2
 800cafc:	10002616 	blt	r2,zero,800cb98 <_fclose_r+0xf8>
 800cb00:	8080030b 	ldhu	r2,12(r16)
 800cb04:	1080200c 	andi	r2,r2,128
 800cb08:	10001f1e 	bne	r2,zero,800cb88 <_fclose_r+0xe8>
 800cb0c:	81400c17 	ldw	r5,48(r16)
 800cb10:	28000526 	beq	r5,zero,800cb28 <_fclose_r+0x88>
 800cb14:	80801004 	addi	r2,r16,64
 800cb18:	28800226 	beq	r5,r2,800cb24 <_fclose_r+0x84>
 800cb1c:	8809883a 	mov	r4,r17
 800cb20:	800832c0 	call	800832c <_free_r>
 800cb24:	80000c15 	stw	zero,48(r16)
 800cb28:	81401117 	ldw	r5,68(r16)
 800cb2c:	28000326 	beq	r5,zero,800cb3c <_fclose_r+0x9c>
 800cb30:	8809883a 	mov	r4,r17
 800cb34:	800832c0 	call	800832c <_free_r>
 800cb38:	80001115 	stw	zero,68(r16)
 800cb3c:	8000030d 	sth	zero,12(r16)
 800cb40:	80081cc0 	call	80081cc <__sfp_lock_release>
 800cb44:	9005883a 	mov	r2,r18
 800cb48:	dfc00317 	ldw	ra,12(sp)
 800cb4c:	dc800217 	ldw	r18,8(sp)
 800cb50:	dc400117 	ldw	r17,4(sp)
 800cb54:	dc000017 	ldw	r16,0(sp)
 800cb58:	dec00404 	addi	sp,sp,16
 800cb5c:	f800283a 	ret
 800cb60:	80081cc0 	call	80081cc <__sfp_lock_release>
 800cb64:	0005883a 	mov	r2,zero
 800cb68:	003ff706 	br	800cb48 <__ram_exceptions_end+0xf7f8c908>
 800cb6c:	0005883a 	mov	r2,zero
 800cb70:	f800283a 	ret
 800cb74:	8809883a 	mov	r4,r17
 800cb78:	80081b80 	call	80081b8 <__sinit>
 800cb7c:	8080030f 	ldh	r2,12(r16)
 800cb80:	103fd51e 	bne	r2,zero,800cad8 <__ram_exceptions_end+0xf7f8c898>
 800cb84:	003ff606 	br	800cb60 <__ram_exceptions_end+0xf7f8c920>
 800cb88:	81400417 	ldw	r5,16(r16)
 800cb8c:	8809883a 	mov	r4,r17
 800cb90:	800832c0 	call	800832c <_free_r>
 800cb94:	003fdd06 	br	800cb0c <__ram_exceptions_end+0xf7f8c8cc>
 800cb98:	04bfffc4 	movi	r18,-1
 800cb9c:	003fd806 	br	800cb00 <__ram_exceptions_end+0xf7f8c8c0>

0800cba0 <fclose>:
 800cba0:	00820074 	movhi	r2,2049
 800cba4:	10914804 	addi	r2,r2,17696
 800cba8:	200b883a 	mov	r5,r4
 800cbac:	11000017 	ldw	r4,0(r2)
 800cbb0:	800caa01 	jmpi	800caa0 <_fclose_r>

0800cbb4 <_fputwc_r>:
 800cbb4:	3080030b 	ldhu	r2,12(r6)
 800cbb8:	defff804 	addi	sp,sp,-32
 800cbbc:	dcc00415 	stw	r19,16(sp)
 800cbc0:	dc800315 	stw	r18,12(sp)
 800cbc4:	dc000115 	stw	r16,4(sp)
 800cbc8:	dfc00715 	stw	ra,28(sp)
 800cbcc:	dd400615 	stw	r21,24(sp)
 800cbd0:	dd000515 	stw	r20,20(sp)
 800cbd4:	dc400215 	stw	r17,8(sp)
 800cbd8:	10c8000c 	andi	r3,r2,8192
 800cbdc:	3021883a 	mov	r16,r6
 800cbe0:	2027883a 	mov	r19,r4
 800cbe4:	2825883a 	mov	r18,r5
 800cbe8:	1800051e 	bne	r3,zero,800cc00 <_fputwc_r+0x4c>
 800cbec:	30c01917 	ldw	r3,100(r6)
 800cbf0:	10880014 	ori	r2,r2,8192
 800cbf4:	3080030d 	sth	r2,12(r6)
 800cbf8:	18880014 	ori	r2,r3,8192
 800cbfc:	30801915 	stw	r2,100(r6)
 800cc00:	8008cb80 	call	8008cb8 <__locale_mb_cur_max>
 800cc04:	00c00044 	movi	r3,1
 800cc08:	10c03e26 	beq	r2,r3,800cd04 <_fputwc_r+0x150>
 800cc0c:	9809883a 	mov	r4,r19
 800cc10:	d80b883a 	mov	r5,sp
 800cc14:	900d883a 	mov	r6,r18
 800cc18:	81c01704 	addi	r7,r16,92
 800cc1c:	800cef40 	call	800cef4 <_wcrtomb_r>
 800cc20:	1029883a 	mov	r20,r2
 800cc24:	00bfffc4 	movi	r2,-1
 800cc28:	a0802026 	beq	r20,r2,800ccac <_fputwc_r+0xf8>
 800cc2c:	d9400003 	ldbu	r5,0(sp)
 800cc30:	a0001c26 	beq	r20,zero,800cca4 <_fputwc_r+0xf0>
 800cc34:	0023883a 	mov	r17,zero
 800cc38:	05400284 	movi	r21,10
 800cc3c:	00000906 	br	800cc64 <_fputwc_r+0xb0>
 800cc40:	80800017 	ldw	r2,0(r16)
 800cc44:	11400005 	stb	r5,0(r2)
 800cc48:	80c00017 	ldw	r3,0(r16)
 800cc4c:	18c00044 	addi	r3,r3,1
 800cc50:	80c00015 	stw	r3,0(r16)
 800cc54:	8c400044 	addi	r17,r17,1
 800cc58:	dc45883a 	add	r2,sp,r17
 800cc5c:	8d00112e 	bgeu	r17,r20,800cca4 <_fputwc_r+0xf0>
 800cc60:	11400003 	ldbu	r5,0(r2)
 800cc64:	80c00217 	ldw	r3,8(r16)
 800cc68:	18ffffc4 	addi	r3,r3,-1
 800cc6c:	80c00215 	stw	r3,8(r16)
 800cc70:	183ff30e 	bge	r3,zero,800cc40 <__ram_exceptions_end+0xf7f8ca00>
 800cc74:	80800617 	ldw	r2,24(r16)
 800cc78:	18801916 	blt	r3,r2,800cce0 <_fputwc_r+0x12c>
 800cc7c:	80800017 	ldw	r2,0(r16)
 800cc80:	11400005 	stb	r5,0(r2)
 800cc84:	80800017 	ldw	r2,0(r16)
 800cc88:	10c00003 	ldbu	r3,0(r2)
 800cc8c:	10800044 	addi	r2,r2,1
 800cc90:	1d402326 	beq	r3,r21,800cd20 <_fputwc_r+0x16c>
 800cc94:	80800015 	stw	r2,0(r16)
 800cc98:	8c400044 	addi	r17,r17,1
 800cc9c:	dc45883a 	add	r2,sp,r17
 800cca0:	8d3fef36 	bltu	r17,r20,800cc60 <__ram_exceptions_end+0xf7f8ca20>
 800cca4:	9005883a 	mov	r2,r18
 800cca8:	00000406 	br	800ccbc <_fputwc_r+0x108>
 800ccac:	80c0030b 	ldhu	r3,12(r16)
 800ccb0:	a005883a 	mov	r2,r20
 800ccb4:	18c01014 	ori	r3,r3,64
 800ccb8:	80c0030d 	sth	r3,12(r16)
 800ccbc:	dfc00717 	ldw	ra,28(sp)
 800ccc0:	dd400617 	ldw	r21,24(sp)
 800ccc4:	dd000517 	ldw	r20,20(sp)
 800ccc8:	dcc00417 	ldw	r19,16(sp)
 800cccc:	dc800317 	ldw	r18,12(sp)
 800ccd0:	dc400217 	ldw	r17,8(sp)
 800ccd4:	dc000117 	ldw	r16,4(sp)
 800ccd8:	dec00804 	addi	sp,sp,32
 800ccdc:	f800283a 	ret
 800cce0:	9809883a 	mov	r4,r19
 800cce4:	29403fcc 	andi	r5,r5,255
 800cce8:	800d883a 	mov	r6,r16
 800ccec:	800c7bc0 	call	800c7bc <__swbuf_r>
 800ccf0:	10bfffe0 	cmpeqi	r2,r2,-1
 800ccf4:	10803fcc 	andi	r2,r2,255
 800ccf8:	103fd626 	beq	r2,zero,800cc54 <__ram_exceptions_end+0xf7f8ca14>
 800ccfc:	00bfffc4 	movi	r2,-1
 800cd00:	003fee06 	br	800ccbc <__ram_exceptions_end+0xf7f8ca7c>
 800cd04:	90ffffc4 	addi	r3,r18,-1
 800cd08:	01003f84 	movi	r4,254
 800cd0c:	20ffbf36 	bltu	r4,r3,800cc0c <__ram_exceptions_end+0xf7f8c9cc>
 800cd10:	900b883a 	mov	r5,r18
 800cd14:	dc800005 	stb	r18,0(sp)
 800cd18:	1029883a 	mov	r20,r2
 800cd1c:	003fc506 	br	800cc34 <__ram_exceptions_end+0xf7f8c9f4>
 800cd20:	9809883a 	mov	r4,r19
 800cd24:	a80b883a 	mov	r5,r21
 800cd28:	800d883a 	mov	r6,r16
 800cd2c:	800c7bc0 	call	800c7bc <__swbuf_r>
 800cd30:	10bfffe0 	cmpeqi	r2,r2,-1
 800cd34:	003fef06 	br	800ccf4 <__ram_exceptions_end+0xf7f8cab4>

0800cd38 <fputwc>:
 800cd38:	defffc04 	addi	sp,sp,-16
 800cd3c:	dc000115 	stw	r16,4(sp)
 800cd40:	04020074 	movhi	r16,2049
 800cd44:	84114804 	addi	r16,r16,17696
 800cd48:	dc400215 	stw	r17,8(sp)
 800cd4c:	2023883a 	mov	r17,r4
 800cd50:	81000017 	ldw	r4,0(r16)
 800cd54:	dfc00315 	stw	ra,12(sp)
 800cd58:	280d883a 	mov	r6,r5
 800cd5c:	20000626 	beq	r4,zero,800cd78 <fputwc+0x40>
 800cd60:	20800e17 	ldw	r2,56(r4)
 800cd64:	1000041e 	bne	r2,zero,800cd78 <fputwc+0x40>
 800cd68:	d9400015 	stw	r5,0(sp)
 800cd6c:	80081b80 	call	80081b8 <__sinit>
 800cd70:	81000017 	ldw	r4,0(r16)
 800cd74:	d9800017 	ldw	r6,0(sp)
 800cd78:	880b883a 	mov	r5,r17
 800cd7c:	dfc00317 	ldw	ra,12(sp)
 800cd80:	dc400217 	ldw	r17,8(sp)
 800cd84:	dc000117 	ldw	r16,4(sp)
 800cd88:	dec00404 	addi	sp,sp,16
 800cd8c:	800cbb41 	jmpi	800cbb4 <_fputwc_r>

0800cd90 <_fstat_r>:
 800cd90:	defffd04 	addi	sp,sp,-12
 800cd94:	dc000015 	stw	r16,0(sp)
 800cd98:	04020074 	movhi	r16,2049
 800cd9c:	dc400115 	stw	r17,4(sp)
 800cda0:	84182304 	addi	r16,r16,24716
 800cda4:	2023883a 	mov	r17,r4
 800cda8:	2809883a 	mov	r4,r5
 800cdac:	300b883a 	mov	r5,r6
 800cdb0:	dfc00215 	stw	ra,8(sp)
 800cdb4:	80000015 	stw	zero,0(r16)
 800cdb8:	800f93c0 	call	800f93c <fstat>
 800cdbc:	00ffffc4 	movi	r3,-1
 800cdc0:	10c00526 	beq	r2,r3,800cdd8 <_fstat_r+0x48>
 800cdc4:	dfc00217 	ldw	ra,8(sp)
 800cdc8:	dc400117 	ldw	r17,4(sp)
 800cdcc:	dc000017 	ldw	r16,0(sp)
 800cdd0:	dec00304 	addi	sp,sp,12
 800cdd4:	f800283a 	ret
 800cdd8:	80c00017 	ldw	r3,0(r16)
 800cddc:	183ff926 	beq	r3,zero,800cdc4 <__ram_exceptions_end+0xf7f8cb84>
 800cde0:	88c00015 	stw	r3,0(r17)
 800cde4:	003ff706 	br	800cdc4 <__ram_exceptions_end+0xf7f8cb84>

0800cde8 <_isatty_r>:
 800cde8:	defffd04 	addi	sp,sp,-12
 800cdec:	dc000015 	stw	r16,0(sp)
 800cdf0:	04020074 	movhi	r16,2049
 800cdf4:	dc400115 	stw	r17,4(sp)
 800cdf8:	84182304 	addi	r16,r16,24716
 800cdfc:	2023883a 	mov	r17,r4
 800ce00:	2809883a 	mov	r4,r5
 800ce04:	dfc00215 	stw	ra,8(sp)
 800ce08:	80000015 	stw	zero,0(r16)
 800ce0c:	800fa3c0 	call	800fa3c <isatty>
 800ce10:	00ffffc4 	movi	r3,-1
 800ce14:	10c00526 	beq	r2,r3,800ce2c <_isatty_r+0x44>
 800ce18:	dfc00217 	ldw	ra,8(sp)
 800ce1c:	dc400117 	ldw	r17,4(sp)
 800ce20:	dc000017 	ldw	r16,0(sp)
 800ce24:	dec00304 	addi	sp,sp,12
 800ce28:	f800283a 	ret
 800ce2c:	80c00017 	ldw	r3,0(r16)
 800ce30:	183ff926 	beq	r3,zero,800ce18 <__ram_exceptions_end+0xf7f8cbd8>
 800ce34:	88c00015 	stw	r3,0(r17)
 800ce38:	003ff706 	br	800ce18 <__ram_exceptions_end+0xf7f8cbd8>

0800ce3c <_lseek_r>:
 800ce3c:	defffd04 	addi	sp,sp,-12
 800ce40:	dc000015 	stw	r16,0(sp)
 800ce44:	04020074 	movhi	r16,2049
 800ce48:	dc400115 	stw	r17,4(sp)
 800ce4c:	84182304 	addi	r16,r16,24716
 800ce50:	2023883a 	mov	r17,r4
 800ce54:	2809883a 	mov	r4,r5
 800ce58:	300b883a 	mov	r5,r6
 800ce5c:	380d883a 	mov	r6,r7
 800ce60:	dfc00215 	stw	ra,8(sp)
 800ce64:	80000015 	stw	zero,0(r16)
 800ce68:	800fc140 	call	800fc14 <lseek>
 800ce6c:	00ffffc4 	movi	r3,-1
 800ce70:	10c00526 	beq	r2,r3,800ce88 <_lseek_r+0x4c>
 800ce74:	dfc00217 	ldw	ra,8(sp)
 800ce78:	dc400117 	ldw	r17,4(sp)
 800ce7c:	dc000017 	ldw	r16,0(sp)
 800ce80:	dec00304 	addi	sp,sp,12
 800ce84:	f800283a 	ret
 800ce88:	80c00017 	ldw	r3,0(r16)
 800ce8c:	183ff926 	beq	r3,zero,800ce74 <__ram_exceptions_end+0xf7f8cc34>
 800ce90:	88c00015 	stw	r3,0(r17)
 800ce94:	003ff706 	br	800ce74 <__ram_exceptions_end+0xf7f8cc34>

0800ce98 <_read_r>:
 800ce98:	defffd04 	addi	sp,sp,-12
 800ce9c:	dc000015 	stw	r16,0(sp)
 800cea0:	04020074 	movhi	r16,2049
 800cea4:	dc400115 	stw	r17,4(sp)
 800cea8:	84182304 	addi	r16,r16,24716
 800ceac:	2023883a 	mov	r17,r4
 800ceb0:	2809883a 	mov	r4,r5
 800ceb4:	300b883a 	mov	r5,r6
 800ceb8:	380d883a 	mov	r6,r7
 800cebc:	dfc00215 	stw	ra,8(sp)
 800cec0:	80000015 	stw	zero,0(r16)
 800cec4:	800fdf00 	call	800fdf0 <read>
 800cec8:	00ffffc4 	movi	r3,-1
 800cecc:	10c00526 	beq	r2,r3,800cee4 <_read_r+0x4c>
 800ced0:	dfc00217 	ldw	ra,8(sp)
 800ced4:	dc400117 	ldw	r17,4(sp)
 800ced8:	dc000017 	ldw	r16,0(sp)
 800cedc:	dec00304 	addi	sp,sp,12
 800cee0:	f800283a 	ret
 800cee4:	80c00017 	ldw	r3,0(r16)
 800cee8:	183ff926 	beq	r3,zero,800ced0 <__ram_exceptions_end+0xf7f8cc90>
 800ceec:	88c00015 	stw	r3,0(r17)
 800cef0:	003ff706 	br	800ced0 <__ram_exceptions_end+0xf7f8cc90>

0800cef4 <_wcrtomb_r>:
 800cef4:	defff604 	addi	sp,sp,-40
 800cef8:	00820074 	movhi	r2,2049
 800cefc:	dc800815 	stw	r18,32(sp)
 800cf00:	dc400715 	stw	r17,28(sp)
 800cf04:	dc000615 	stw	r16,24(sp)
 800cf08:	10914c04 	addi	r2,r2,17712
 800cf0c:	dfc00915 	stw	ra,36(sp)
 800cf10:	2021883a 	mov	r16,r4
 800cf14:	3823883a 	mov	r17,r7
 800cf18:	14800017 	ldw	r18,0(r2)
 800cf1c:	28001426 	beq	r5,zero,800cf70 <_wcrtomb_r+0x7c>
 800cf20:	d9400415 	stw	r5,16(sp)
 800cf24:	d9800515 	stw	r6,20(sp)
 800cf28:	8008cac0 	call	8008cac <__locale_charset>
 800cf2c:	d9400417 	ldw	r5,16(sp)
 800cf30:	d9800517 	ldw	r6,20(sp)
 800cf34:	8009883a 	mov	r4,r16
 800cf38:	dc400015 	stw	r17,0(sp)
 800cf3c:	100f883a 	mov	r7,r2
 800cf40:	903ee83a 	callr	r18
 800cf44:	00ffffc4 	movi	r3,-1
 800cf48:	10c0031e 	bne	r2,r3,800cf58 <_wcrtomb_r+0x64>
 800cf4c:	88000015 	stw	zero,0(r17)
 800cf50:	00c02284 	movi	r3,138
 800cf54:	80c00015 	stw	r3,0(r16)
 800cf58:	dfc00917 	ldw	ra,36(sp)
 800cf5c:	dc800817 	ldw	r18,32(sp)
 800cf60:	dc400717 	ldw	r17,28(sp)
 800cf64:	dc000617 	ldw	r16,24(sp)
 800cf68:	dec00a04 	addi	sp,sp,40
 800cf6c:	f800283a 	ret
 800cf70:	8008cac0 	call	8008cac <__locale_charset>
 800cf74:	8009883a 	mov	r4,r16
 800cf78:	dc400015 	stw	r17,0(sp)
 800cf7c:	d9400104 	addi	r5,sp,4
 800cf80:	000d883a 	mov	r6,zero
 800cf84:	100f883a 	mov	r7,r2
 800cf88:	903ee83a 	callr	r18
 800cf8c:	003fed06 	br	800cf44 <__ram_exceptions_end+0xf7f8cd04>

0800cf90 <wcrtomb>:
 800cf90:	defff504 	addi	sp,sp,-44
 800cf94:	dc400515 	stw	r17,20(sp)
 800cf98:	dc000415 	stw	r16,16(sp)
 800cf9c:	dfc00a15 	stw	ra,40(sp)
 800cfa0:	dd400915 	stw	r21,36(sp)
 800cfa4:	dd000815 	stw	r20,32(sp)
 800cfa8:	dcc00715 	stw	r19,28(sp)
 800cfac:	dc800615 	stw	r18,24(sp)
 800cfb0:	2021883a 	mov	r16,r4
 800cfb4:	3023883a 	mov	r17,r6
 800cfb8:	20001d26 	beq	r4,zero,800d030 <wcrtomb+0xa0>
 800cfbc:	04820074 	movhi	r18,2049
 800cfc0:	94914804 	addi	r18,r18,17696
 800cfc4:	00820074 	movhi	r2,2049
 800cfc8:	95400017 	ldw	r21,0(r18)
 800cfcc:	10914c04 	addi	r2,r2,17712
 800cfd0:	15000017 	ldw	r20,0(r2)
 800cfd4:	2827883a 	mov	r19,r5
 800cfd8:	8008cac0 	call	8008cac <__locale_charset>
 800cfdc:	a809883a 	mov	r4,r21
 800cfe0:	dc400015 	stw	r17,0(sp)
 800cfe4:	800b883a 	mov	r5,r16
 800cfe8:	980d883a 	mov	r6,r19
 800cfec:	100f883a 	mov	r7,r2
 800cff0:	a03ee83a 	callr	r20
 800cff4:	00ffffc4 	movi	r3,-1
 800cff8:	10c0041e 	bne	r2,r3,800d00c <wcrtomb+0x7c>
 800cffc:	90c00017 	ldw	r3,0(r18)
 800d000:	01002284 	movi	r4,138
 800d004:	88000015 	stw	zero,0(r17)
 800d008:	19000015 	stw	r4,0(r3)
 800d00c:	dfc00a17 	ldw	ra,40(sp)
 800d010:	dd400917 	ldw	r21,36(sp)
 800d014:	dd000817 	ldw	r20,32(sp)
 800d018:	dcc00717 	ldw	r19,28(sp)
 800d01c:	dc800617 	ldw	r18,24(sp)
 800d020:	dc400517 	ldw	r17,20(sp)
 800d024:	dc000417 	ldw	r16,16(sp)
 800d028:	dec00b04 	addi	sp,sp,44
 800d02c:	f800283a 	ret
 800d030:	04820074 	movhi	r18,2049
 800d034:	94914804 	addi	r18,r18,17696
 800d038:	00820074 	movhi	r2,2049
 800d03c:	94c00017 	ldw	r19,0(r18)
 800d040:	10914c04 	addi	r2,r2,17712
 800d044:	14000017 	ldw	r16,0(r2)
 800d048:	8008cac0 	call	8008cac <__locale_charset>
 800d04c:	9809883a 	mov	r4,r19
 800d050:	dc400015 	stw	r17,0(sp)
 800d054:	d9400104 	addi	r5,sp,4
 800d058:	000d883a 	mov	r6,zero
 800d05c:	100f883a 	mov	r7,r2
 800d060:	803ee83a 	callr	r16
 800d064:	003fe306 	br	800cff4 <__ram_exceptions_end+0xf7f8cdb4>

0800d068 <__ascii_wctomb>:
 800d068:	28000526 	beq	r5,zero,800d080 <__ascii_wctomb+0x18>
 800d06c:	00803fc4 	movi	r2,255
 800d070:	11800536 	bltu	r2,r6,800d088 <__ascii_wctomb+0x20>
 800d074:	29800005 	stb	r6,0(r5)
 800d078:	00800044 	movi	r2,1
 800d07c:	f800283a 	ret
 800d080:	0005883a 	mov	r2,zero
 800d084:	f800283a 	ret
 800d088:	00802284 	movi	r2,138
 800d08c:	20800015 	stw	r2,0(r4)
 800d090:	00bfffc4 	movi	r2,-1
 800d094:	f800283a 	ret

0800d098 <_wctomb_r>:
 800d098:	00820074 	movhi	r2,2049
 800d09c:	defff904 	addi	sp,sp,-28
 800d0a0:	10914c04 	addi	r2,r2,17712
 800d0a4:	dfc00615 	stw	ra,24(sp)
 800d0a8:	dc400515 	stw	r17,20(sp)
 800d0ac:	dc000415 	stw	r16,16(sp)
 800d0b0:	3823883a 	mov	r17,r7
 800d0b4:	14000017 	ldw	r16,0(r2)
 800d0b8:	d9000115 	stw	r4,4(sp)
 800d0bc:	d9400215 	stw	r5,8(sp)
 800d0c0:	d9800315 	stw	r6,12(sp)
 800d0c4:	8008cac0 	call	8008cac <__locale_charset>
 800d0c8:	d9000117 	ldw	r4,4(sp)
 800d0cc:	d9400217 	ldw	r5,8(sp)
 800d0d0:	d9800317 	ldw	r6,12(sp)
 800d0d4:	dc400015 	stw	r17,0(sp)
 800d0d8:	100f883a 	mov	r7,r2
 800d0dc:	803ee83a 	callr	r16
 800d0e0:	dfc00617 	ldw	ra,24(sp)
 800d0e4:	dc400517 	ldw	r17,20(sp)
 800d0e8:	dc000417 	ldw	r16,16(sp)
 800d0ec:	dec00704 	addi	sp,sp,28
 800d0f0:	f800283a 	ret

0800d0f4 <__udivdi3>:
 800d0f4:	defff504 	addi	sp,sp,-44
 800d0f8:	dcc00415 	stw	r19,16(sp)
 800d0fc:	dc000115 	stw	r16,4(sp)
 800d100:	dfc00a15 	stw	ra,40(sp)
 800d104:	df000915 	stw	fp,36(sp)
 800d108:	ddc00815 	stw	r23,32(sp)
 800d10c:	dd800715 	stw	r22,28(sp)
 800d110:	dd400615 	stw	r21,24(sp)
 800d114:	dd000515 	stw	r20,20(sp)
 800d118:	dc800315 	stw	r18,12(sp)
 800d11c:	dc400215 	stw	r17,8(sp)
 800d120:	2027883a 	mov	r19,r4
 800d124:	2821883a 	mov	r16,r5
 800d128:	3800421e 	bne	r7,zero,800d234 <__udivdi3+0x140>
 800d12c:	3025883a 	mov	r18,r6
 800d130:	2023883a 	mov	r17,r4
 800d134:	2980542e 	bgeu	r5,r6,800d288 <__udivdi3+0x194>
 800d138:	00bfffd4 	movui	r2,65535
 800d13c:	282d883a 	mov	r22,r5
 800d140:	1180a836 	bltu	r2,r6,800d3e4 <__udivdi3+0x2f0>
 800d144:	00803fc4 	movi	r2,255
 800d148:	1181422e 	bgeu	r2,r6,800d654 <__udivdi3+0x560>
 800d14c:	00800204 	movi	r2,8
 800d150:	1007883a 	mov	r3,r2
 800d154:	3084d83a 	srl	r2,r6,r2
 800d158:	01020074 	movhi	r4,2049
 800d15c:	2109d204 	addi	r4,r4,10056
 800d160:	2085883a 	add	r2,r4,r2
 800d164:	10800003 	ldbu	r2,0(r2)
 800d168:	10c7883a 	add	r3,r2,r3
 800d16c:	00800804 	movi	r2,32
 800d170:	10c5c83a 	sub	r2,r2,r3
 800d174:	10000526 	beq	r2,zero,800d18c <__udivdi3+0x98>
 800d178:	80a0983a 	sll	r16,r16,r2
 800d17c:	98c6d83a 	srl	r3,r19,r3
 800d180:	30a4983a 	sll	r18,r6,r2
 800d184:	98a2983a 	sll	r17,r19,r2
 800d188:	80ecb03a 	or	r22,r16,r3
 800d18c:	902ad43a 	srli	r21,r18,16
 800d190:	b009883a 	mov	r4,r22
 800d194:	953fffcc 	andi	r20,r18,65535
 800d198:	a80b883a 	mov	r5,r21
 800d19c:	8003e800 	call	8003e80 <__umodsi3>
 800d1a0:	b009883a 	mov	r4,r22
 800d1a4:	a80b883a 	mov	r5,r21
 800d1a8:	1027883a 	mov	r19,r2
 800d1ac:	8003e780 	call	8003e78 <__udivsi3>
 800d1b0:	1021883a 	mov	r16,r2
 800d1b4:	8806d43a 	srli	r3,r17,16
 800d1b8:	9804943a 	slli	r2,r19,16
 800d1bc:	8527383a 	mul	r19,r16,r20
 800d1c0:	10c4b03a 	or	r2,r2,r3
 800d1c4:	14c0052e 	bgeu	r2,r19,800d1dc <__udivdi3+0xe8>
 800d1c8:	1485883a 	add	r2,r2,r18
 800d1cc:	80ffffc4 	addi	r3,r16,-1
 800d1d0:	14800136 	bltu	r2,r18,800d1d8 <__udivdi3+0xe4>
 800d1d4:	14c13436 	bltu	r2,r19,800d6a8 <__udivdi3+0x5b4>
 800d1d8:	1821883a 	mov	r16,r3
 800d1dc:	14e7c83a 	sub	r19,r2,r19
 800d1e0:	9809883a 	mov	r4,r19
 800d1e4:	a80b883a 	mov	r5,r21
 800d1e8:	8003e800 	call	8003e80 <__umodsi3>
 800d1ec:	102d883a 	mov	r22,r2
 800d1f0:	9809883a 	mov	r4,r19
 800d1f4:	a80b883a 	mov	r5,r21
 800d1f8:	8003e780 	call	8003e78 <__udivsi3>
 800d1fc:	b02c943a 	slli	r22,r22,16
 800d200:	1529383a 	mul	r20,r2,r20
 800d204:	8c7fffcc 	andi	r17,r17,65535
 800d208:	b462b03a 	or	r17,r22,r17
 800d20c:	8d00052e 	bgeu	r17,r20,800d224 <__udivdi3+0x130>
 800d210:	8ca3883a 	add	r17,r17,r18
 800d214:	10ffffc4 	addi	r3,r2,-1
 800d218:	8c80f636 	bltu	r17,r18,800d5f4 <__udivdi3+0x500>
 800d21c:	8d00f52e 	bgeu	r17,r20,800d5f4 <__udivdi3+0x500>
 800d220:	10bfff84 	addi	r2,r2,-2
 800d224:	8020943a 	slli	r16,r16,16
 800d228:	0007883a 	mov	r3,zero
 800d22c:	1404b03a 	or	r2,r2,r16
 800d230:	00005b06 	br	800d3a0 <__udivdi3+0x2ac>
 800d234:	29c05836 	bltu	r5,r7,800d398 <__udivdi3+0x2a4>
 800d238:	00bfffd4 	movui	r2,65535
 800d23c:	11c0642e 	bgeu	r2,r7,800d3d0 <__udivdi3+0x2dc>
 800d240:	00804034 	movhi	r2,256
 800d244:	10bfffc4 	addi	r2,r2,-1
 800d248:	11c0f32e 	bgeu	r2,r7,800d618 <__udivdi3+0x524>
 800d24c:	00c00604 	movi	r3,24
 800d250:	180b883a 	mov	r5,r3
 800d254:	38c6d83a 	srl	r3,r7,r3
 800d258:	00820074 	movhi	r2,2049
 800d25c:	1089d204 	addi	r2,r2,10056
 800d260:	10c7883a 	add	r3,r2,r3
 800d264:	18c00003 	ldbu	r3,0(r3)
 800d268:	01000804 	movi	r4,32
 800d26c:	1947883a 	add	r3,r3,r5
 800d270:	20e5c83a 	sub	r18,r4,r3
 800d274:	9000661e 	bne	r18,zero,800d410 <__udivdi3+0x31c>
 800d278:	3c00f936 	bltu	r7,r16,800d660 <__udivdi3+0x56c>
 800d27c:	9985403a 	cmpgeu	r2,r19,r6
 800d280:	0007883a 	mov	r3,zero
 800d284:	00004606 	br	800d3a0 <__udivdi3+0x2ac>
 800d288:	3000041e 	bne	r6,zero,800d29c <__udivdi3+0x1a8>
 800d28c:	01000044 	movi	r4,1
 800d290:	000b883a 	mov	r5,zero
 800d294:	8003e780 	call	8003e78 <__udivsi3>
 800d298:	1025883a 	mov	r18,r2
 800d29c:	00bfffd4 	movui	r2,65535
 800d2a0:	1480562e 	bgeu	r2,r18,800d3fc <__udivdi3+0x308>
 800d2a4:	00804034 	movhi	r2,256
 800d2a8:	10bfffc4 	addi	r2,r2,-1
 800d2ac:	1480e32e 	bgeu	r2,r18,800d63c <__udivdi3+0x548>
 800d2b0:	00800604 	movi	r2,24
 800d2b4:	1007883a 	mov	r3,r2
 800d2b8:	9084d83a 	srl	r2,r18,r2
 800d2bc:	01020074 	movhi	r4,2049
 800d2c0:	2109d204 	addi	r4,r4,10056
 800d2c4:	2085883a 	add	r2,r4,r2
 800d2c8:	10800003 	ldbu	r2,0(r2)
 800d2cc:	10c5883a 	add	r2,r2,r3
 800d2d0:	00c00804 	movi	r3,32
 800d2d4:	1887c83a 	sub	r3,r3,r2
 800d2d8:	1800911e 	bne	r3,zero,800d520 <__udivdi3+0x42c>
 800d2dc:	9028d43a 	srli	r20,r18,16
 800d2e0:	84a1c83a 	sub	r16,r16,r18
 800d2e4:	957fffcc 	andi	r21,r18,65535
 800d2e8:	00c00044 	movi	r3,1
 800d2ec:	8009883a 	mov	r4,r16
 800d2f0:	a00b883a 	mov	r5,r20
 800d2f4:	d8c00015 	stw	r3,0(sp)
 800d2f8:	8003e800 	call	8003e80 <__umodsi3>
 800d2fc:	8009883a 	mov	r4,r16
 800d300:	a00b883a 	mov	r5,r20
 800d304:	1027883a 	mov	r19,r2
 800d308:	8003e780 	call	8003e78 <__udivsi3>
 800d30c:	1021883a 	mov	r16,r2
 800d310:	880cd43a 	srli	r6,r17,16
 800d314:	9804943a 	slli	r2,r19,16
 800d318:	8567383a 	mul	r19,r16,r21
 800d31c:	d8c00017 	ldw	r3,0(sp)
 800d320:	1188b03a 	or	r4,r2,r6
 800d324:	24c0052e 	bgeu	r4,r19,800d33c <__udivdi3+0x248>
 800d328:	2489883a 	add	r4,r4,r18
 800d32c:	80bfffc4 	addi	r2,r16,-1
 800d330:	24800136 	bltu	r4,r18,800d338 <__udivdi3+0x244>
 800d334:	24c0d936 	bltu	r4,r19,800d69c <__udivdi3+0x5a8>
 800d338:	1021883a 	mov	r16,r2
 800d33c:	24e7c83a 	sub	r19,r4,r19
 800d340:	9809883a 	mov	r4,r19
 800d344:	a00b883a 	mov	r5,r20
 800d348:	d8c00015 	stw	r3,0(sp)
 800d34c:	8003e800 	call	8003e80 <__umodsi3>
 800d350:	102d883a 	mov	r22,r2
 800d354:	9809883a 	mov	r4,r19
 800d358:	a00b883a 	mov	r5,r20
 800d35c:	8003e780 	call	8003e78 <__udivsi3>
 800d360:	b02c943a 	slli	r22,r22,16
 800d364:	156b383a 	mul	r21,r2,r21
 800d368:	8c7fffcc 	andi	r17,r17,65535
 800d36c:	b462b03a 	or	r17,r22,r17
 800d370:	d8c00017 	ldw	r3,0(sp)
 800d374:	8d40052e 	bgeu	r17,r21,800d38c <__udivdi3+0x298>
 800d378:	8ca3883a 	add	r17,r17,r18
 800d37c:	113fffc4 	addi	r4,r2,-1
 800d380:	8c809a36 	bltu	r17,r18,800d5ec <__udivdi3+0x4f8>
 800d384:	8d40992e 	bgeu	r17,r21,800d5ec <__udivdi3+0x4f8>
 800d388:	10bfff84 	addi	r2,r2,-2
 800d38c:	8020943a 	slli	r16,r16,16
 800d390:	1404b03a 	or	r2,r2,r16
 800d394:	00000206 	br	800d3a0 <__udivdi3+0x2ac>
 800d398:	0007883a 	mov	r3,zero
 800d39c:	0005883a 	mov	r2,zero
 800d3a0:	dfc00a17 	ldw	ra,40(sp)
 800d3a4:	df000917 	ldw	fp,36(sp)
 800d3a8:	ddc00817 	ldw	r23,32(sp)
 800d3ac:	dd800717 	ldw	r22,28(sp)
 800d3b0:	dd400617 	ldw	r21,24(sp)
 800d3b4:	dd000517 	ldw	r20,20(sp)
 800d3b8:	dcc00417 	ldw	r19,16(sp)
 800d3bc:	dc800317 	ldw	r18,12(sp)
 800d3c0:	dc400217 	ldw	r17,8(sp)
 800d3c4:	dc000117 	ldw	r16,4(sp)
 800d3c8:	dec00b04 	addi	sp,sp,44
 800d3cc:	f800283a 	ret
 800d3d0:	00803fc4 	movi	r2,255
 800d3d4:	11c0932e 	bgeu	r2,r7,800d624 <__udivdi3+0x530>
 800d3d8:	00c00204 	movi	r3,8
 800d3dc:	180b883a 	mov	r5,r3
 800d3e0:	003f9c06 	br	800d254 <__ram_exceptions_end+0xf7f8d014>
 800d3e4:	00804034 	movhi	r2,256
 800d3e8:	10bfffc4 	addi	r2,r2,-1
 800d3ec:	1180902e 	bgeu	r2,r6,800d630 <__udivdi3+0x53c>
 800d3f0:	00800604 	movi	r2,24
 800d3f4:	1007883a 	mov	r3,r2
 800d3f8:	003f5606 	br	800d154 <__ram_exceptions_end+0xf7f8cf14>
 800d3fc:	00803fc4 	movi	r2,255
 800d400:	1480912e 	bgeu	r2,r18,800d648 <__udivdi3+0x554>
 800d404:	00800204 	movi	r2,8
 800d408:	1007883a 	mov	r3,r2
 800d40c:	003faa06 	br	800d2b8 <__ram_exceptions_end+0xf7f8d078>
 800d410:	30eed83a 	srl	r23,r6,r3
 800d414:	3c8e983a 	sll	r7,r7,r18
 800d418:	80f8d83a 	srl	fp,r16,r3
 800d41c:	98c6d83a 	srl	r3,r19,r3
 800d420:	3deeb03a 	or	r23,r7,r23
 800d424:	b828d43a 	srli	r20,r23,16
 800d428:	84a0983a 	sll	r16,r16,r18
 800d42c:	e009883a 	mov	r4,fp
 800d430:	a00b883a 	mov	r5,r20
 800d434:	80e2b03a 	or	r17,r16,r3
 800d438:	34aa983a 	sll	r21,r6,r18
 800d43c:	8003e800 	call	8003e80 <__umodsi3>
 800d440:	e009883a 	mov	r4,fp
 800d444:	a00b883a 	mov	r5,r20
 800d448:	102d883a 	mov	r22,r2
 800d44c:	8003e780 	call	8003e78 <__udivsi3>
 800d450:	1021883a 	mov	r16,r2
 800d454:	bf3fffcc 	andi	fp,r23,65535
 800d458:	b004943a 	slli	r2,r22,16
 800d45c:	8808d43a 	srli	r4,r17,16
 800d460:	872d383a 	mul	r22,r16,fp
 800d464:	1104b03a 	or	r2,r2,r4
 800d468:	1580042e 	bgeu	r2,r22,800d47c <__udivdi3+0x388>
 800d46c:	15c5883a 	add	r2,r2,r23
 800d470:	80ffffc4 	addi	r3,r16,-1
 800d474:	15c0812e 	bgeu	r2,r23,800d67c <__udivdi3+0x588>
 800d478:	1821883a 	mov	r16,r3
 800d47c:	15adc83a 	sub	r22,r2,r22
 800d480:	b009883a 	mov	r4,r22
 800d484:	a00b883a 	mov	r5,r20
 800d488:	8003e800 	call	8003e80 <__umodsi3>
 800d48c:	a00b883a 	mov	r5,r20
 800d490:	b009883a 	mov	r4,r22
 800d494:	d8800015 	stw	r2,0(sp)
 800d498:	8003e780 	call	8003e78 <__udivsi3>
 800d49c:	d8c00017 	ldw	r3,0(sp)
 800d4a0:	170b383a 	mul	r5,r2,fp
 800d4a4:	8c7fffcc 	andi	r17,r17,65535
 800d4a8:	1806943a 	slli	r3,r3,16
 800d4ac:	1c46b03a 	or	r3,r3,r17
 800d4b0:	1940042e 	bgeu	r3,r5,800d4c4 <__udivdi3+0x3d0>
 800d4b4:	1dc7883a 	add	r3,r3,r23
 800d4b8:	113fffc4 	addi	r4,r2,-1
 800d4bc:	1dc06b2e 	bgeu	r3,r23,800d66c <__udivdi3+0x578>
 800d4c0:	2005883a 	mov	r2,r4
 800d4c4:	8020943a 	slli	r16,r16,16
 800d4c8:	a9ffffcc 	andi	r7,r21,65535
 800d4cc:	a82ad43a 	srli	r21,r21,16
 800d4d0:	1404b03a 	or	r2,r2,r16
 800d4d4:	113fffcc 	andi	r4,r2,65535
 800d4d8:	100cd43a 	srli	r6,r2,16
 800d4dc:	21d3383a 	mul	r9,r4,r7
 800d4e0:	2549383a 	mul	r4,r4,r21
 800d4e4:	31cf383a 	mul	r7,r6,r7
 800d4e8:	4810d43a 	srli	r8,r9,16
 800d4ec:	1947c83a 	sub	r3,r3,r5
 800d4f0:	3909883a 	add	r4,r7,r4
 800d4f4:	2209883a 	add	r4,r4,r8
 800d4f8:	354d383a 	mul	r6,r6,r21
 800d4fc:	21c0022e 	bgeu	r4,r7,800d508 <__udivdi3+0x414>
 800d500:	01400074 	movhi	r5,1
 800d504:	314d883a 	add	r6,r6,r5
 800d508:	202ad43a 	srli	r21,r4,16
 800d50c:	354d883a 	add	r6,r6,r21
 800d510:	19803f36 	bltu	r3,r6,800d610 <__udivdi3+0x51c>
 800d514:	19803926 	beq	r3,r6,800d5fc <__udivdi3+0x508>
 800d518:	0007883a 	mov	r3,zero
 800d51c:	003fa006 	br	800d3a0 <__ram_exceptions_end+0xf7f8d160>
 800d520:	90e4983a 	sll	r18,r18,r3
 800d524:	80aad83a 	srl	r21,r16,r2
 800d528:	80e0983a 	sll	r16,r16,r3
 800d52c:	9028d43a 	srli	r20,r18,16
 800d530:	9884d83a 	srl	r2,r19,r2
 800d534:	a809883a 	mov	r4,r21
 800d538:	a00b883a 	mov	r5,r20
 800d53c:	80acb03a 	or	r22,r16,r2
 800d540:	98e2983a 	sll	r17,r19,r3
 800d544:	8003e800 	call	8003e80 <__umodsi3>
 800d548:	a809883a 	mov	r4,r21
 800d54c:	a00b883a 	mov	r5,r20
 800d550:	1021883a 	mov	r16,r2
 800d554:	8003e780 	call	8003e78 <__udivsi3>
 800d558:	957fffcc 	andi	r21,r18,65535
 800d55c:	8020943a 	slli	r16,r16,16
 800d560:	b00ad43a 	srli	r5,r22,16
 800d564:	1567383a 	mul	r19,r2,r21
 800d568:	102f883a 	mov	r23,r2
 800d56c:	8148b03a 	or	r4,r16,r5
 800d570:	24c0062e 	bgeu	r4,r19,800d58c <__udivdi3+0x498>
 800d574:	2489883a 	add	r4,r4,r18
 800d578:	10bfffc4 	addi	r2,r2,-1
 800d57c:	24804536 	bltu	r4,r18,800d694 <__udivdi3+0x5a0>
 800d580:	24c0442e 	bgeu	r4,r19,800d694 <__udivdi3+0x5a0>
 800d584:	bdffff84 	addi	r23,r23,-2
 800d588:	2489883a 	add	r4,r4,r18
 800d58c:	24e7c83a 	sub	r19,r4,r19
 800d590:	9809883a 	mov	r4,r19
 800d594:	a00b883a 	mov	r5,r20
 800d598:	8003e800 	call	8003e80 <__umodsi3>
 800d59c:	1021883a 	mov	r16,r2
 800d5a0:	9809883a 	mov	r4,r19
 800d5a4:	a00b883a 	mov	r5,r20
 800d5a8:	8003e780 	call	8003e78 <__udivsi3>
 800d5ac:	8020943a 	slli	r16,r16,16
 800d5b0:	1007883a 	mov	r3,r2
 800d5b4:	1545383a 	mul	r2,r2,r21
 800d5b8:	b13fffcc 	andi	r4,r22,65535
 800d5bc:	8108b03a 	or	r4,r16,r4
 800d5c0:	2080062e 	bgeu	r4,r2,800d5dc <__udivdi3+0x4e8>
 800d5c4:	2489883a 	add	r4,r4,r18
 800d5c8:	197fffc4 	addi	r5,r3,-1
 800d5cc:	24802f36 	bltu	r4,r18,800d68c <__udivdi3+0x598>
 800d5d0:	20802e2e 	bgeu	r4,r2,800d68c <__udivdi3+0x598>
 800d5d4:	18ffff84 	addi	r3,r3,-2
 800d5d8:	2489883a 	add	r4,r4,r18
 800d5dc:	b82e943a 	slli	r23,r23,16
 800d5e0:	20a1c83a 	sub	r16,r4,r2
 800d5e4:	1dc6b03a 	or	r3,r3,r23
 800d5e8:	003f4006 	br	800d2ec <__ram_exceptions_end+0xf7f8d0ac>
 800d5ec:	2005883a 	mov	r2,r4
 800d5f0:	003f6606 	br	800d38c <__ram_exceptions_end+0xf7f8d14c>
 800d5f4:	1805883a 	mov	r2,r3
 800d5f8:	003f0a06 	br	800d224 <__ram_exceptions_end+0xf7f8cfe4>
 800d5fc:	2006943a 	slli	r3,r4,16
 800d600:	9c88983a 	sll	r4,r19,r18
 800d604:	4a7fffcc 	andi	r9,r9,65535
 800d608:	1a47883a 	add	r3,r3,r9
 800d60c:	20ffc22e 	bgeu	r4,r3,800d518 <__ram_exceptions_end+0xf7f8d2d8>
 800d610:	10bfffc4 	addi	r2,r2,-1
 800d614:	003fc006 	br	800d518 <__ram_exceptions_end+0xf7f8d2d8>
 800d618:	00c00404 	movi	r3,16
 800d61c:	180b883a 	mov	r5,r3
 800d620:	003f0c06 	br	800d254 <__ram_exceptions_end+0xf7f8d014>
 800d624:	0007883a 	mov	r3,zero
 800d628:	000b883a 	mov	r5,zero
 800d62c:	003f0906 	br	800d254 <__ram_exceptions_end+0xf7f8d014>
 800d630:	00800404 	movi	r2,16
 800d634:	1007883a 	mov	r3,r2
 800d638:	003ec606 	br	800d154 <__ram_exceptions_end+0xf7f8cf14>
 800d63c:	00800404 	movi	r2,16
 800d640:	1007883a 	mov	r3,r2
 800d644:	003f1c06 	br	800d2b8 <__ram_exceptions_end+0xf7f8d078>
 800d648:	0005883a 	mov	r2,zero
 800d64c:	0007883a 	mov	r3,zero
 800d650:	003f1906 	br	800d2b8 <__ram_exceptions_end+0xf7f8d078>
 800d654:	0005883a 	mov	r2,zero
 800d658:	0007883a 	mov	r3,zero
 800d65c:	003ebd06 	br	800d154 <__ram_exceptions_end+0xf7f8cf14>
 800d660:	0007883a 	mov	r3,zero
 800d664:	00800044 	movi	r2,1
 800d668:	003f4d06 	br	800d3a0 <__ram_exceptions_end+0xf7f8d160>
 800d66c:	197f942e 	bgeu	r3,r5,800d4c0 <__ram_exceptions_end+0xf7f8d280>
 800d670:	10bfff84 	addi	r2,r2,-2
 800d674:	1dc7883a 	add	r3,r3,r23
 800d678:	003f9206 	br	800d4c4 <__ram_exceptions_end+0xf7f8d284>
 800d67c:	15bf7e2e 	bgeu	r2,r22,800d478 <__ram_exceptions_end+0xf7f8d238>
 800d680:	843fff84 	addi	r16,r16,-2
 800d684:	15c5883a 	add	r2,r2,r23
 800d688:	003f7c06 	br	800d47c <__ram_exceptions_end+0xf7f8d23c>
 800d68c:	2807883a 	mov	r3,r5
 800d690:	003fd206 	br	800d5dc <__ram_exceptions_end+0xf7f8d39c>
 800d694:	102f883a 	mov	r23,r2
 800d698:	003fbc06 	br	800d58c <__ram_exceptions_end+0xf7f8d34c>
 800d69c:	843fff84 	addi	r16,r16,-2
 800d6a0:	2489883a 	add	r4,r4,r18
 800d6a4:	003f2506 	br	800d33c <__ram_exceptions_end+0xf7f8d0fc>
 800d6a8:	843fff84 	addi	r16,r16,-2
 800d6ac:	1485883a 	add	r2,r2,r18
 800d6b0:	003eca06 	br	800d1dc <__ram_exceptions_end+0xf7f8cf9c>

0800d6b4 <__umoddi3>:
 800d6b4:	defff404 	addi	sp,sp,-48
 800d6b8:	ddc00915 	stw	r23,36(sp)
 800d6bc:	dc400315 	stw	r17,12(sp)
 800d6c0:	dc000215 	stw	r16,8(sp)
 800d6c4:	dfc00b15 	stw	ra,44(sp)
 800d6c8:	df000a15 	stw	fp,40(sp)
 800d6cc:	dd800815 	stw	r22,32(sp)
 800d6d0:	dd400715 	stw	r21,28(sp)
 800d6d4:	dd000615 	stw	r20,24(sp)
 800d6d8:	dcc00515 	stw	r19,20(sp)
 800d6dc:	dc800415 	stw	r18,16(sp)
 800d6e0:	2021883a 	mov	r16,r4
 800d6e4:	2823883a 	mov	r17,r5
 800d6e8:	282f883a 	mov	r23,r5
 800d6ec:	3800381e 	bne	r7,zero,800d7d0 <__umoddi3+0x11c>
 800d6f0:	3027883a 	mov	r19,r6
 800d6f4:	2029883a 	mov	r20,r4
 800d6f8:	29804e2e 	bgeu	r5,r6,800d834 <__umoddi3+0x180>
 800d6fc:	00bfffd4 	movui	r2,65535
 800d700:	11809c36 	bltu	r2,r6,800d974 <__umoddi3+0x2c0>
 800d704:	00803fc4 	movi	r2,255
 800d708:	11813b2e 	bgeu	r2,r6,800dbf8 <__umoddi3+0x544>
 800d70c:	01400204 	movi	r5,8
 800d710:	2805883a 	mov	r2,r5
 800d714:	314ad83a 	srl	r5,r6,r5
 800d718:	00c20074 	movhi	r3,2049
 800d71c:	18c9d204 	addi	r3,r3,10056
 800d720:	194b883a 	add	r5,r3,r5
 800d724:	29000003 	ldbu	r4,0(r5)
 800d728:	2089883a 	add	r4,r4,r2
 800d72c:	00800804 	movi	r2,32
 800d730:	1105c83a 	sub	r2,r2,r4
 800d734:	1000ec26 	beq	r2,zero,800dae8 <__umoddi3+0x434>
 800d738:	88a2983a 	sll	r17,r17,r2
 800d73c:	8108d83a 	srl	r4,r16,r4
 800d740:	30a6983a 	sll	r19,r6,r2
 800d744:	80a8983a 	sll	r20,r16,r2
 800d748:	1025883a 	mov	r18,r2
 800d74c:	892eb03a 	or	r23,r17,r4
 800d750:	982cd43a 	srli	r22,r19,16
 800d754:	b809883a 	mov	r4,r23
 800d758:	9d7fffcc 	andi	r21,r19,65535
 800d75c:	b00b883a 	mov	r5,r22
 800d760:	8003e800 	call	8003e80 <__umodsi3>
 800d764:	b809883a 	mov	r4,r23
 800d768:	b00b883a 	mov	r5,r22
 800d76c:	1021883a 	mov	r16,r2
 800d770:	8003e780 	call	8003e78 <__udivsi3>
 800d774:	8020943a 	slli	r16,r16,16
 800d778:	a00cd43a 	srli	r6,r20,16
 800d77c:	1545383a 	mul	r2,r2,r21
 800d780:	8188b03a 	or	r4,r16,r6
 800d784:	2080042e 	bgeu	r4,r2,800d798 <__umoddi3+0xe4>
 800d788:	24c9883a 	add	r4,r4,r19
 800d78c:	24c00236 	bltu	r4,r19,800d798 <__umoddi3+0xe4>
 800d790:	2080012e 	bgeu	r4,r2,800d798 <__umoddi3+0xe4>
 800d794:	24c9883a 	add	r4,r4,r19
 800d798:	20a3c83a 	sub	r17,r4,r2
 800d79c:	8809883a 	mov	r4,r17
 800d7a0:	b00b883a 	mov	r5,r22
 800d7a4:	8003e800 	call	8003e80 <__umodsi3>
 800d7a8:	8809883a 	mov	r4,r17
 800d7ac:	b00b883a 	mov	r5,r22
 800d7b0:	1021883a 	mov	r16,r2
 800d7b4:	8003e780 	call	8003e78 <__udivsi3>
 800d7b8:	8006943a 	slli	r3,r16,16
 800d7bc:	1545383a 	mul	r2,r2,r21
 800d7c0:	a13fffcc 	andi	r4,r20,65535
 800d7c4:	1906b03a 	or	r3,r3,r4
 800d7c8:	1880532e 	bgeu	r3,r2,800d918 <__umoddi3+0x264>
 800d7cc:	00004e06 	br	800d908 <__umoddi3+0x254>
 800d7d0:	29c05536 	bltu	r5,r7,800d928 <__umoddi3+0x274>
 800d7d4:	00bfffd4 	movui	r2,65535
 800d7d8:	11c0612e 	bgeu	r2,r7,800d960 <__umoddi3+0x2ac>
 800d7dc:	00804034 	movhi	r2,256
 800d7e0:	10bfffc4 	addi	r2,r2,-1
 800d7e4:	11c0f82e 	bgeu	r2,r7,800dbc8 <__umoddi3+0x514>
 800d7e8:	01400604 	movi	r5,24
 800d7ec:	282b883a 	mov	r21,r5
 800d7f0:	394ad83a 	srl	r5,r7,r5
 800d7f4:	00c20074 	movhi	r3,2049
 800d7f8:	18c9d204 	addi	r3,r3,10056
 800d7fc:	194b883a 	add	r5,r3,r5
 800d800:	28800003 	ldbu	r2,0(r5)
 800d804:	00c00804 	movi	r3,32
 800d808:	156b883a 	add	r21,r2,r21
 800d80c:	1d69c83a 	sub	r20,r3,r21
 800d810:	a000631e 	bne	r20,zero,800d9a0 <__umoddi3+0x2ec>
 800d814:	3c400136 	bltu	r7,r17,800d81c <__umoddi3+0x168>
 800d818:	81810436 	bltu	r16,r6,800dc2c <__umoddi3+0x578>
 800d81c:	8185c83a 	sub	r2,r16,r6
 800d820:	89e3c83a 	sub	r17,r17,r7
 800d824:	8087803a 	cmpltu	r3,r16,r2
 800d828:	88efc83a 	sub	r23,r17,r3
 800d82c:	b807883a 	mov	r3,r23
 800d830:	00003f06 	br	800d930 <__umoddi3+0x27c>
 800d834:	3000041e 	bne	r6,zero,800d848 <__umoddi3+0x194>
 800d838:	01000044 	movi	r4,1
 800d83c:	000b883a 	mov	r5,zero
 800d840:	8003e780 	call	8003e78 <__udivsi3>
 800d844:	1027883a 	mov	r19,r2
 800d848:	00bfffd4 	movui	r2,65535
 800d84c:	14c04f2e 	bgeu	r2,r19,800d98c <__umoddi3+0x2d8>
 800d850:	00804034 	movhi	r2,256
 800d854:	10bfffc4 	addi	r2,r2,-1
 800d858:	14c0e42e 	bgeu	r2,r19,800dbec <__umoddi3+0x538>
 800d85c:	00800604 	movi	r2,24
 800d860:	1007883a 	mov	r3,r2
 800d864:	9884d83a 	srl	r2,r19,r2
 800d868:	01020074 	movhi	r4,2049
 800d86c:	2109d204 	addi	r4,r4,10056
 800d870:	2085883a 	add	r2,r4,r2
 800d874:	11000003 	ldbu	r4,0(r2)
 800d878:	00800804 	movi	r2,32
 800d87c:	20c7883a 	add	r3,r4,r3
 800d880:	10c5c83a 	sub	r2,r2,r3
 800d884:	10009a1e 	bne	r2,zero,800daf0 <__umoddi3+0x43c>
 800d888:	982cd43a 	srli	r22,r19,16
 800d88c:	8ce3c83a 	sub	r17,r17,r19
 800d890:	9c3fffcc 	andi	r16,r19,65535
 800d894:	0025883a 	mov	r18,zero
 800d898:	8809883a 	mov	r4,r17
 800d89c:	b00b883a 	mov	r5,r22
 800d8a0:	8003e800 	call	8003e80 <__umodsi3>
 800d8a4:	8809883a 	mov	r4,r17
 800d8a8:	b00b883a 	mov	r5,r22
 800d8ac:	102b883a 	mov	r21,r2
 800d8b0:	8003e780 	call	8003e78 <__udivsi3>
 800d8b4:	a806943a 	slli	r3,r21,16
 800d8b8:	a008d43a 	srli	r4,r20,16
 800d8bc:	1405383a 	mul	r2,r2,r16
 800d8c0:	190cb03a 	or	r6,r3,r4
 800d8c4:	3080032e 	bgeu	r6,r2,800d8d4 <__umoddi3+0x220>
 800d8c8:	34cd883a 	add	r6,r6,r19
 800d8cc:	34c00136 	bltu	r6,r19,800d8d4 <__umoddi3+0x220>
 800d8d0:	3080d436 	bltu	r6,r2,800dc24 <__umoddi3+0x570>
 800d8d4:	30abc83a 	sub	r21,r6,r2
 800d8d8:	a809883a 	mov	r4,r21
 800d8dc:	b00b883a 	mov	r5,r22
 800d8e0:	8003e800 	call	8003e80 <__umodsi3>
 800d8e4:	1023883a 	mov	r17,r2
 800d8e8:	a809883a 	mov	r4,r21
 800d8ec:	b00b883a 	mov	r5,r22
 800d8f0:	8003e780 	call	8003e78 <__udivsi3>
 800d8f4:	8822943a 	slli	r17,r17,16
 800d8f8:	1405383a 	mul	r2,r2,r16
 800d8fc:	a13fffcc 	andi	r4,r20,65535
 800d900:	8906b03a 	or	r3,r17,r4
 800d904:	1880042e 	bgeu	r3,r2,800d918 <__umoddi3+0x264>
 800d908:	1cc7883a 	add	r3,r3,r19
 800d90c:	1cc00236 	bltu	r3,r19,800d918 <__umoddi3+0x264>
 800d910:	1880012e 	bgeu	r3,r2,800d918 <__umoddi3+0x264>
 800d914:	1cc7883a 	add	r3,r3,r19
 800d918:	1887c83a 	sub	r3,r3,r2
 800d91c:	1c84d83a 	srl	r2,r3,r18
 800d920:	0007883a 	mov	r3,zero
 800d924:	00000206 	br	800d930 <__umoddi3+0x27c>
 800d928:	2005883a 	mov	r2,r4
 800d92c:	2807883a 	mov	r3,r5
 800d930:	dfc00b17 	ldw	ra,44(sp)
 800d934:	df000a17 	ldw	fp,40(sp)
 800d938:	ddc00917 	ldw	r23,36(sp)
 800d93c:	dd800817 	ldw	r22,32(sp)
 800d940:	dd400717 	ldw	r21,28(sp)
 800d944:	dd000617 	ldw	r20,24(sp)
 800d948:	dcc00517 	ldw	r19,20(sp)
 800d94c:	dc800417 	ldw	r18,16(sp)
 800d950:	dc400317 	ldw	r17,12(sp)
 800d954:	dc000217 	ldw	r16,8(sp)
 800d958:	dec00c04 	addi	sp,sp,48
 800d95c:	f800283a 	ret
 800d960:	00803fc4 	movi	r2,255
 800d964:	11c0952e 	bgeu	r2,r7,800dbbc <__umoddi3+0x508>
 800d968:	01400204 	movi	r5,8
 800d96c:	282b883a 	mov	r21,r5
 800d970:	003f9f06 	br	800d7f0 <__ram_exceptions_end+0xf7f8d5b0>
 800d974:	00804034 	movhi	r2,256
 800d978:	10bfffc4 	addi	r2,r2,-1
 800d97c:	1180952e 	bgeu	r2,r6,800dbd4 <__umoddi3+0x520>
 800d980:	01400604 	movi	r5,24
 800d984:	2805883a 	mov	r2,r5
 800d988:	003f6206 	br	800d714 <__ram_exceptions_end+0xf7f8d4d4>
 800d98c:	00803fc4 	movi	r2,255
 800d990:	14c0932e 	bgeu	r2,r19,800dbe0 <__umoddi3+0x52c>
 800d994:	00800204 	movi	r2,8
 800d998:	1007883a 	mov	r3,r2
 800d99c:	003fb106 	br	800d864 <__ram_exceptions_end+0xf7f8d624>
 800d9a0:	3548d83a 	srl	r4,r6,r21
 800d9a4:	3d0e983a 	sll	r7,r7,r20
 800d9a8:	8d10983a 	sll	r8,r17,r20
 800d9ac:	8d6cd83a 	srl	r22,r17,r21
 800d9b0:	3922b03a 	or	r17,r7,r4
 800d9b4:	882ed43a 	srli	r23,r17,16
 800d9b8:	8564d83a 	srl	r18,r16,r21
 800d9bc:	b009883a 	mov	r4,r22
 800d9c0:	b80b883a 	mov	r5,r23
 800d9c4:	44a4b03a 	or	r18,r8,r18
 800d9c8:	3526983a 	sll	r19,r6,r20
 800d9cc:	8003e800 	call	8003e80 <__umodsi3>
 800d9d0:	b009883a 	mov	r4,r22
 800d9d4:	b80b883a 	mov	r5,r23
 800d9d8:	1039883a 	mov	fp,r2
 800d9dc:	8003e780 	call	8003e78 <__udivsi3>
 800d9e0:	102d883a 	mov	r22,r2
 800d9e4:	8a3fffcc 	andi	r8,r17,65535
 800d9e8:	e004943a 	slli	r2,fp,16
 800d9ec:	900cd43a 	srli	r6,r18,16
 800d9f0:	b239383a 	mul	fp,r22,r8
 800d9f4:	8520983a 	sll	r16,r16,r20
 800d9f8:	118ab03a 	or	r5,r2,r6
 800d9fc:	2f00042e 	bgeu	r5,fp,800da10 <__umoddi3+0x35c>
 800da00:	2c4b883a 	add	r5,r5,r17
 800da04:	b0bfffc4 	addi	r2,r22,-1
 800da08:	2c40822e 	bgeu	r5,r17,800dc14 <__umoddi3+0x560>
 800da0c:	102d883a 	mov	r22,r2
 800da10:	2f39c83a 	sub	fp,r5,fp
 800da14:	e009883a 	mov	r4,fp
 800da18:	b80b883a 	mov	r5,r23
 800da1c:	da000115 	stw	r8,4(sp)
 800da20:	8003e800 	call	8003e80 <__umodsi3>
 800da24:	e009883a 	mov	r4,fp
 800da28:	b80b883a 	mov	r5,r23
 800da2c:	d8800015 	stw	r2,0(sp)
 800da30:	8003e780 	call	8003e78 <__udivsi3>
 800da34:	d9800017 	ldw	r6,0(sp)
 800da38:	da000117 	ldw	r8,4(sp)
 800da3c:	94bfffcc 	andi	r18,r18,65535
 800da40:	300c943a 	slli	r6,r6,16
 800da44:	1209383a 	mul	r4,r2,r8
 800da48:	3490b03a 	or	r8,r6,r18
 800da4c:	4100042e 	bgeu	r8,r4,800da60 <__umoddi3+0x3ac>
 800da50:	4451883a 	add	r8,r8,r17
 800da54:	10ffffc4 	addi	r3,r2,-1
 800da58:	44406a2e 	bgeu	r8,r17,800dc04 <__umoddi3+0x550>
 800da5c:	1805883a 	mov	r2,r3
 800da60:	b012943a 	slli	r9,r22,16
 800da64:	9abfffcc 	andi	r10,r19,65535
 800da68:	980ed43a 	srli	r7,r19,16
 800da6c:	124ab03a 	or	r5,r2,r9
 800da70:	2a7fffcc 	andi	r9,r5,65535
 800da74:	280ad43a 	srli	r5,r5,16
 800da78:	4a8d383a 	mul	r6,r9,r10
 800da7c:	49d3383a 	mul	r9,r9,r7
 800da80:	2a95383a 	mul	r10,r5,r10
 800da84:	3004d43a 	srli	r2,r6,16
 800da88:	4111c83a 	sub	r8,r8,r4
 800da8c:	5253883a 	add	r9,r10,r9
 800da90:	4893883a 	add	r9,r9,r2
 800da94:	29cb383a 	mul	r5,r5,r7
 800da98:	4a80022e 	bgeu	r9,r10,800daa4 <__umoddi3+0x3f0>
 800da9c:	00800074 	movhi	r2,1
 800daa0:	288b883a 	add	r5,r5,r2
 800daa4:	4808d43a 	srli	r4,r9,16
 800daa8:	4812943a 	slli	r9,r9,16
 800daac:	31bfffcc 	andi	r6,r6,65535
 800dab0:	290b883a 	add	r5,r5,r4
 800dab4:	498d883a 	add	r6,r9,r6
 800dab8:	41403a36 	bltu	r8,r5,800dba4 <__umoddi3+0x4f0>
 800dabc:	41405d26 	beq	r8,r5,800dc34 <__umoddi3+0x580>
 800dac0:	4149c83a 	sub	r4,r8,r5
 800dac4:	300f883a 	mov	r7,r6
 800dac8:	81cfc83a 	sub	r7,r16,r7
 800dacc:	81c7803a 	cmpltu	r3,r16,r7
 800dad0:	20c7c83a 	sub	r3,r4,r3
 800dad4:	1d44983a 	sll	r2,r3,r21
 800dad8:	3d0ed83a 	srl	r7,r7,r20
 800dadc:	1d06d83a 	srl	r3,r3,r20
 800dae0:	11c4b03a 	or	r2,r2,r7
 800dae4:	003f9206 	br	800d930 <__ram_exceptions_end+0xf7f8d6f0>
 800dae8:	0025883a 	mov	r18,zero
 800daec:	003f1806 	br	800d750 <__ram_exceptions_end+0xf7f8d510>
 800daf0:	98a6983a 	sll	r19,r19,r2
 800daf4:	88e8d83a 	srl	r20,r17,r3
 800daf8:	80c6d83a 	srl	r3,r16,r3
 800dafc:	982cd43a 	srli	r22,r19,16
 800db00:	88a2983a 	sll	r17,r17,r2
 800db04:	a009883a 	mov	r4,r20
 800db08:	b00b883a 	mov	r5,r22
 800db0c:	88eab03a 	or	r21,r17,r3
 800db10:	1025883a 	mov	r18,r2
 800db14:	8003e800 	call	8003e80 <__umodsi3>
 800db18:	a009883a 	mov	r4,r20
 800db1c:	b00b883a 	mov	r5,r22
 800db20:	1023883a 	mov	r17,r2
 800db24:	8003e780 	call	8003e78 <__udivsi3>
 800db28:	9f3fffcc 	andi	fp,r19,65535
 800db2c:	8822943a 	slli	r17,r17,16
 800db30:	a80ad43a 	srli	r5,r21,16
 800db34:	1705383a 	mul	r2,r2,fp
 800db38:	84a8983a 	sll	r20,r16,r18
 800db3c:	8948b03a 	or	r4,r17,r5
 800db40:	2080042e 	bgeu	r4,r2,800db54 <__umoddi3+0x4a0>
 800db44:	24c9883a 	add	r4,r4,r19
 800db48:	24c00236 	bltu	r4,r19,800db54 <__umoddi3+0x4a0>
 800db4c:	2080012e 	bgeu	r4,r2,800db54 <__umoddi3+0x4a0>
 800db50:	24c9883a 	add	r4,r4,r19
 800db54:	20afc83a 	sub	r23,r4,r2
 800db58:	b809883a 	mov	r4,r23
 800db5c:	b00b883a 	mov	r5,r22
 800db60:	8003e800 	call	8003e80 <__umodsi3>
 800db64:	1023883a 	mov	r17,r2
 800db68:	b809883a 	mov	r4,r23
 800db6c:	b00b883a 	mov	r5,r22
 800db70:	8003e780 	call	8003e78 <__udivsi3>
 800db74:	8822943a 	slli	r17,r17,16
 800db78:	1705383a 	mul	r2,r2,fp
 800db7c:	a93fffcc 	andi	r4,r21,65535
 800db80:	8908b03a 	or	r4,r17,r4
 800db84:	2080042e 	bgeu	r4,r2,800db98 <__umoddi3+0x4e4>
 800db88:	24c9883a 	add	r4,r4,r19
 800db8c:	24c00236 	bltu	r4,r19,800db98 <__umoddi3+0x4e4>
 800db90:	2080012e 	bgeu	r4,r2,800db98 <__umoddi3+0x4e4>
 800db94:	24c9883a 	add	r4,r4,r19
 800db98:	20a3c83a 	sub	r17,r4,r2
 800db9c:	e021883a 	mov	r16,fp
 800dba0:	003f3d06 	br	800d898 <__ram_exceptions_end+0xf7f8d658>
 800dba4:	34cfc83a 	sub	r7,r6,r19
 800dba8:	2c4bc83a 	sub	r5,r5,r17
 800dbac:	31cd803a 	cmpltu	r6,r6,r7
 800dbb0:	298dc83a 	sub	r6,r5,r6
 800dbb4:	4189c83a 	sub	r4,r8,r6
 800dbb8:	003fc306 	br	800dac8 <__ram_exceptions_end+0xf7f8d888>
 800dbbc:	000b883a 	mov	r5,zero
 800dbc0:	002b883a 	mov	r21,zero
 800dbc4:	003f0a06 	br	800d7f0 <__ram_exceptions_end+0xf7f8d5b0>
 800dbc8:	01400404 	movi	r5,16
 800dbcc:	282b883a 	mov	r21,r5
 800dbd0:	003f0706 	br	800d7f0 <__ram_exceptions_end+0xf7f8d5b0>
 800dbd4:	01400404 	movi	r5,16
 800dbd8:	2805883a 	mov	r2,r5
 800dbdc:	003ecd06 	br	800d714 <__ram_exceptions_end+0xf7f8d4d4>
 800dbe0:	0005883a 	mov	r2,zero
 800dbe4:	0007883a 	mov	r3,zero
 800dbe8:	003f1e06 	br	800d864 <__ram_exceptions_end+0xf7f8d624>
 800dbec:	00800404 	movi	r2,16
 800dbf0:	1007883a 	mov	r3,r2
 800dbf4:	003f1b06 	br	800d864 <__ram_exceptions_end+0xf7f8d624>
 800dbf8:	000b883a 	mov	r5,zero
 800dbfc:	0005883a 	mov	r2,zero
 800dc00:	003ec406 	br	800d714 <__ram_exceptions_end+0xf7f8d4d4>
 800dc04:	413f952e 	bgeu	r8,r4,800da5c <__ram_exceptions_end+0xf7f8d81c>
 800dc08:	10bfff84 	addi	r2,r2,-2
 800dc0c:	4451883a 	add	r8,r8,r17
 800dc10:	003f9306 	br	800da60 <__ram_exceptions_end+0xf7f8d820>
 800dc14:	2f3f7d2e 	bgeu	r5,fp,800da0c <__ram_exceptions_end+0xf7f8d7cc>
 800dc18:	b5bfff84 	addi	r22,r22,-2
 800dc1c:	2c4b883a 	add	r5,r5,r17
 800dc20:	003f7b06 	br	800da10 <__ram_exceptions_end+0xf7f8d7d0>
 800dc24:	34cd883a 	add	r6,r6,r19
 800dc28:	003f2a06 	br	800d8d4 <__ram_exceptions_end+0xf7f8d694>
 800dc2c:	8005883a 	mov	r2,r16
 800dc30:	003efe06 	br	800d82c <__ram_exceptions_end+0xf7f8d5ec>
 800dc34:	81bfdb36 	bltu	r16,r6,800dba4 <__ram_exceptions_end+0xf7f8d964>
 800dc38:	300f883a 	mov	r7,r6
 800dc3c:	0009883a 	mov	r4,zero
 800dc40:	003fa106 	br	800dac8 <__ram_exceptions_end+0xf7f8d888>

0800dc44 <__adddf3>:
 800dc44:	02000434 	movhi	r8,16
 800dc48:	423fffc4 	addi	r8,r8,-1
 800dc4c:	defffb04 	addi	sp,sp,-20
 800dc50:	2a12703a 	and	r9,r5,r8
 800dc54:	2806d7fa 	srli	r3,r5,31
 800dc58:	3a10703a 	and	r8,r7,r8
 800dc5c:	3804d53a 	srli	r2,r7,20
 800dc60:	3014d77a 	srli	r10,r6,29
 800dc64:	dc000015 	stw	r16,0(sp)
 800dc68:	481290fa 	slli	r9,r9,3
 800dc6c:	2820d53a 	srli	r16,r5,20
 800dc70:	401090fa 	slli	r8,r8,3
 800dc74:	200ad77a 	srli	r5,r4,29
 800dc78:	380ed7fa 	srli	r7,r7,31
 800dc7c:	dc800215 	stw	r18,8(sp)
 800dc80:	dc400115 	stw	r17,4(sp)
 800dc84:	dfc00415 	stw	ra,16(sp)
 800dc88:	dcc00315 	stw	r19,12(sp)
 800dc8c:	1c803fcc 	andi	r18,r3,255
 800dc90:	8401ffcc 	andi	r16,r16,2047
 800dc94:	494ab03a 	or	r5,r9,r5
 800dc98:	202290fa 	slli	r17,r4,3
 800dc9c:	1081ffcc 	andi	r2,r2,2047
 800dca0:	4290b03a 	or	r8,r8,r10
 800dca4:	300c90fa 	slli	r6,r6,3
 800dca8:	91c07026 	beq	r18,r7,800de6c <__adddf3+0x228>
 800dcac:	8087c83a 	sub	r3,r16,r2
 800dcb0:	00c0b30e 	bge	zero,r3,800df80 <__adddf3+0x33c>
 800dcb4:	10002a1e 	bne	r2,zero,800dd60 <__adddf3+0x11c>
 800dcb8:	4184b03a 	or	r2,r8,r6
 800dcbc:	1000991e 	bne	r2,zero,800df24 <__adddf3+0x2e0>
 800dcc0:	888001cc 	andi	r2,r17,7
 800dcc4:	10005b26 	beq	r2,zero,800de34 <__adddf3+0x1f0>
 800dcc8:	88c003cc 	andi	r3,r17,15
 800dccc:	00800104 	movi	r2,4
 800dcd0:	18805826 	beq	r3,r2,800de34 <__adddf3+0x1f0>
 800dcd4:	89800104 	addi	r6,r17,4
 800dcd8:	3463803a 	cmpltu	r17,r6,r17
 800dcdc:	2c4b883a 	add	r5,r5,r17
 800dce0:	2880202c 	andhi	r2,r5,128
 800dce4:	9007883a 	mov	r3,r18
 800dce8:	3023883a 	mov	r17,r6
 800dcec:	10005426 	beq	r2,zero,800de40 <__adddf3+0x1fc>
 800dcf0:	84000044 	addi	r16,r16,1
 800dcf4:	0081ffc4 	movi	r2,2047
 800dcf8:	8080c126 	beq	r16,r2,800e000 <__adddf3+0x3bc>
 800dcfc:	013fe034 	movhi	r4,65408
 800dd00:	213fffc4 	addi	r4,r4,-1
 800dd04:	290a703a 	and	r5,r5,r4
 800dd08:	2804977a 	slli	r2,r5,29
 800dd0c:	280a927a 	slli	r5,r5,9
 800dd10:	8822d0fa 	srli	r17,r17,3
 800dd14:	8401ffcc 	andi	r16,r16,2047
 800dd18:	2808d33a 	srli	r4,r5,12
 800dd1c:	1444b03a 	or	r2,r2,r17
 800dd20:	8401ffcc 	andi	r16,r16,2047
 800dd24:	800a953a 	slli	r5,r16,20
 800dd28:	18c03fcc 	andi	r3,r3,255
 800dd2c:	04000434 	movhi	r16,16
 800dd30:	180697fa 	slli	r3,r3,31
 800dd34:	843fffc4 	addi	r16,r16,-1
 800dd38:	2420703a 	and	r16,r4,r16
 800dd3c:	8160b03a 	or	r16,r16,r5
 800dd40:	80c6b03a 	or	r3,r16,r3
 800dd44:	dfc00417 	ldw	ra,16(sp)
 800dd48:	dcc00317 	ldw	r19,12(sp)
 800dd4c:	dc800217 	ldw	r18,8(sp)
 800dd50:	dc400117 	ldw	r17,4(sp)
 800dd54:	dc000017 	ldw	r16,0(sp)
 800dd58:	dec00504 	addi	sp,sp,20
 800dd5c:	f800283a 	ret
 800dd60:	0081ffc4 	movi	r2,2047
 800dd64:	80bfd626 	beq	r16,r2,800dcc0 <__ram_exceptions_end+0xf7f8da80>
 800dd68:	42002034 	orhi	r8,r8,128
 800dd6c:	00800e04 	movi	r2,56
 800dd70:	10c0a616 	blt	r2,r3,800e00c <__adddf3+0x3c8>
 800dd74:	008007c4 	movi	r2,31
 800dd78:	10c0c916 	blt	r2,r3,800e0a0 <__adddf3+0x45c>
 800dd7c:	00800804 	movi	r2,32
 800dd80:	10c5c83a 	sub	r2,r2,r3
 800dd84:	408e983a 	sll	r7,r8,r2
 800dd88:	30c8d83a 	srl	r4,r6,r3
 800dd8c:	3084983a 	sll	r2,r6,r2
 800dd90:	40c6d83a 	srl	r3,r8,r3
 800dd94:	390cb03a 	or	r6,r7,r4
 800dd98:	1004c03a 	cmpne	r2,r2,zero
 800dd9c:	308cb03a 	or	r6,r6,r2
 800dda0:	898dc83a 	sub	r6,r17,r6
 800dda4:	89a3803a 	cmpltu	r17,r17,r6
 800dda8:	28cbc83a 	sub	r5,r5,r3
 800ddac:	2c4bc83a 	sub	r5,r5,r17
 800ddb0:	3023883a 	mov	r17,r6
 800ddb4:	2880202c 	andhi	r2,r5,128
 800ddb8:	10006d26 	beq	r2,zero,800df70 <__adddf3+0x32c>
 800ddbc:	04c02034 	movhi	r19,128
 800ddc0:	9cffffc4 	addi	r19,r19,-1
 800ddc4:	2ce6703a 	and	r19,r5,r19
 800ddc8:	98007e26 	beq	r19,zero,800dfc4 <__adddf3+0x380>
 800ddcc:	9809883a 	mov	r4,r19
 800ddd0:	8003cf80 	call	8003cf8 <__clzsi2>
 800ddd4:	10fffe04 	addi	r3,r2,-8
 800ddd8:	010007c4 	movi	r4,31
 800dddc:	20c07f16 	blt	r4,r3,800dfdc <__adddf3+0x398>
 800dde0:	01400a04 	movi	r5,40
 800dde4:	2885c83a 	sub	r2,r5,r2
 800dde8:	888ad83a 	srl	r5,r17,r2
 800ddec:	98e6983a 	sll	r19,r19,r3
 800ddf0:	88e2983a 	sll	r17,r17,r3
 800ddf4:	2ce6b03a 	or	r19,r5,r19
 800ddf8:	1c007c16 	blt	r3,r16,800dfec <__adddf3+0x3a8>
 800ddfc:	1c21c83a 	sub	r16,r3,r16
 800de00:	81400044 	addi	r5,r16,1
 800de04:	00c007c4 	movi	r3,31
 800de08:	19409816 	blt	r3,r5,800e06c <__adddf3+0x428>
 800de0c:	1c21c83a 	sub	r16,r3,r16
 800de10:	8c08983a 	sll	r4,r17,r16
 800de14:	8946d83a 	srl	r3,r17,r5
 800de18:	9c20983a 	sll	r16,r19,r16
 800de1c:	2008c03a 	cmpne	r4,r4,zero
 800de20:	994ad83a 	srl	r5,r19,r5
 800de24:	1c06b03a 	or	r3,r3,r16
 800de28:	1922b03a 	or	r17,r3,r4
 800de2c:	0021883a 	mov	r16,zero
 800de30:	003fa306 	br	800dcc0 <__ram_exceptions_end+0xf7f8da80>
 800de34:	2880202c 	andhi	r2,r5,128
 800de38:	9007883a 	mov	r3,r18
 800de3c:	103fac1e 	bne	r2,zero,800dcf0 <__ram_exceptions_end+0xf7f8dab0>
 800de40:	2804977a 	slli	r2,r5,29
 800de44:	8822d0fa 	srli	r17,r17,3
 800de48:	0101ffc4 	movi	r4,2047
 800de4c:	280ad0fa 	srli	r5,r5,3
 800de50:	1444b03a 	or	r2,r2,r17
 800de54:	81002c26 	beq	r16,r4,800df08 <__adddf3+0x2c4>
 800de58:	8120703a 	and	r16,r16,r4
 800de5c:	01000434 	movhi	r4,16
 800de60:	213fffc4 	addi	r4,r4,-1
 800de64:	2908703a 	and	r4,r5,r4
 800de68:	003fad06 	br	800dd20 <__ram_exceptions_end+0xf7f8dae0>
 800de6c:	8089c83a 	sub	r4,r16,r2
 800de70:	01006a0e 	bge	zero,r4,800e01c <__adddf3+0x3d8>
 800de74:	10003326 	beq	r2,zero,800df44 <__adddf3+0x300>
 800de78:	0081ffc4 	movi	r2,2047
 800de7c:	80bf9026 	beq	r16,r2,800dcc0 <__ram_exceptions_end+0xf7f8da80>
 800de80:	42002034 	orhi	r8,r8,128
 800de84:	00800e04 	movi	r2,56
 800de88:	1100b116 	blt	r2,r4,800e150 <__adddf3+0x50c>
 800de8c:	008007c4 	movi	r2,31
 800de90:	1100e216 	blt	r2,r4,800e21c <__adddf3+0x5d8>
 800de94:	00800804 	movi	r2,32
 800de98:	1105c83a 	sub	r2,r2,r4
 800de9c:	4092983a 	sll	r9,r8,r2
 800dea0:	310ed83a 	srl	r7,r6,r4
 800dea4:	3084983a 	sll	r2,r6,r2
 800dea8:	4110d83a 	srl	r8,r8,r4
 800deac:	49ccb03a 	or	r6,r9,r7
 800deb0:	1004c03a 	cmpne	r2,r2,zero
 800deb4:	308cb03a 	or	r6,r6,r2
 800deb8:	344d883a 	add	r6,r6,r17
 800debc:	3463803a 	cmpltu	r17,r6,r17
 800dec0:	414b883a 	add	r5,r8,r5
 800dec4:	2c4b883a 	add	r5,r5,r17
 800dec8:	3023883a 	mov	r17,r6
 800decc:	2880202c 	andhi	r2,r5,128
 800ded0:	10002726 	beq	r2,zero,800df70 <__adddf3+0x32c>
 800ded4:	84000044 	addi	r16,r16,1
 800ded8:	0081ffc4 	movi	r2,2047
 800dedc:	8080ae26 	beq	r16,r2,800e198 <__adddf3+0x554>
 800dee0:	00bfe034 	movhi	r2,65408
 800dee4:	10bfffc4 	addi	r2,r2,-1
 800dee8:	288a703a 	and	r5,r5,r2
 800deec:	880cd07a 	srli	r6,r17,1
 800def0:	280897fa 	slli	r4,r5,31
 800def4:	88c0004c 	andi	r3,r17,1
 800def8:	30e2b03a 	or	r17,r6,r3
 800defc:	280ad07a 	srli	r5,r5,1
 800df00:	8922b03a 	or	r17,r17,r4
 800df04:	003f6e06 	br	800dcc0 <__ram_exceptions_end+0xf7f8da80>
 800df08:	1148b03a 	or	r4,r2,r5
 800df0c:	20003c26 	beq	r4,zero,800e000 <__adddf3+0x3bc>
 800df10:	29000234 	orhi	r4,r5,8
 800df14:	01400434 	movhi	r5,16
 800df18:	297fffc4 	addi	r5,r5,-1
 800df1c:	2148703a 	and	r4,r4,r5
 800df20:	003f7f06 	br	800dd20 <__ram_exceptions_end+0xf7f8dae0>
 800df24:	18ffffc4 	addi	r3,r3,-1
 800df28:	18004d1e 	bne	r3,zero,800e060 <__adddf3+0x41c>
 800df2c:	898dc83a 	sub	r6,r17,r6
 800df30:	89a3803a 	cmpltu	r17,r17,r6
 800df34:	2a0bc83a 	sub	r5,r5,r8
 800df38:	2c4bc83a 	sub	r5,r5,r17
 800df3c:	3023883a 	mov	r17,r6
 800df40:	003f9c06 	br	800ddb4 <__ram_exceptions_end+0xf7f8db74>
 800df44:	4184b03a 	or	r2,r8,r6
 800df48:	103f5d26 	beq	r2,zero,800dcc0 <__ram_exceptions_end+0xf7f8da80>
 800df4c:	213fffc4 	addi	r4,r4,-1
 800df50:	203fd926 	beq	r4,zero,800deb8 <__ram_exceptions_end+0xf7f8dc78>
 800df54:	0081ffc4 	movi	r2,2047
 800df58:	80bfca1e 	bne	r16,r2,800de84 <__ram_exceptions_end+0xf7f8dc44>
 800df5c:	003f5806 	br	800dcc0 <__ram_exceptions_end+0xf7f8da80>
 800df60:	10c8b03a 	or	r4,r2,r3
 800df64:	20008b26 	beq	r4,zero,800e194 <__adddf3+0x550>
 800df68:	100b883a 	mov	r5,r2
 800df6c:	1823883a 	mov	r17,r3
 800df70:	888001cc 	andi	r2,r17,7
 800df74:	103f541e 	bne	r2,zero,800dcc8 <__ram_exceptions_end+0xf7f8da88>
 800df78:	9007883a 	mov	r3,r18
 800df7c:	003fb006 	br	800de40 <__ram_exceptions_end+0xf7f8dc00>
 800df80:	1800531e 	bne	r3,zero,800e0d0 <__adddf3+0x48c>
 800df84:	80800044 	addi	r2,r16,1
 800df88:	1081ffcc 	andi	r2,r2,2047
 800df8c:	00c00044 	movi	r3,1
 800df90:	1880990e 	bge	r3,r2,800e1f8 <__adddf3+0x5b4>
 800df94:	8985c83a 	sub	r2,r17,r6
 800df98:	8887803a 	cmpltu	r3,r17,r2
 800df9c:	2a27c83a 	sub	r19,r5,r8
 800dfa0:	98e7c83a 	sub	r19,r19,r3
 800dfa4:	98c0202c 	andhi	r3,r19,128
 800dfa8:	18006226 	beq	r3,zero,800e134 <__adddf3+0x4f0>
 800dfac:	3463c83a 	sub	r17,r6,r17
 800dfb0:	4151c83a 	sub	r8,r8,r5
 800dfb4:	344d803a 	cmpltu	r6,r6,r17
 800dfb8:	41a7c83a 	sub	r19,r8,r6
 800dfbc:	3825883a 	mov	r18,r7
 800dfc0:	983f821e 	bne	r19,zero,800ddcc <__ram_exceptions_end+0xf7f8db8c>
 800dfc4:	8809883a 	mov	r4,r17
 800dfc8:	8003cf80 	call	8003cf8 <__clzsi2>
 800dfcc:	10800804 	addi	r2,r2,32
 800dfd0:	10fffe04 	addi	r3,r2,-8
 800dfd4:	010007c4 	movi	r4,31
 800dfd8:	20ff810e 	bge	r4,r3,800dde0 <__ram_exceptions_end+0xf7f8dba0>
 800dfdc:	14fff604 	addi	r19,r2,-40
 800dfe0:	8ce6983a 	sll	r19,r17,r19
 800dfe4:	0023883a 	mov	r17,zero
 800dfe8:	1c3f840e 	bge	r3,r16,800ddfc <__ram_exceptions_end+0xf7f8dbbc>
 800dfec:	017fe034 	movhi	r5,65408
 800dff0:	297fffc4 	addi	r5,r5,-1
 800dff4:	80e1c83a 	sub	r16,r16,r3
 800dff8:	994a703a 	and	r5,r19,r5
 800dffc:	003f3006 	br	800dcc0 <__ram_exceptions_end+0xf7f8da80>
 800e000:	0009883a 	mov	r4,zero
 800e004:	0005883a 	mov	r2,zero
 800e008:	003f4506 	br	800dd20 <__ram_exceptions_end+0xf7f8dae0>
 800e00c:	418cb03a 	or	r6,r8,r6
 800e010:	300cc03a 	cmpne	r6,r6,zero
 800e014:	0007883a 	mov	r3,zero
 800e018:	003f6106 	br	800dda0 <__ram_exceptions_end+0xf7f8db60>
 800e01c:	2000921e 	bne	r4,zero,800e268 <__adddf3+0x624>
 800e020:	80800044 	addi	r2,r16,1
 800e024:	11c1ffcc 	andi	r7,r2,2047
 800e028:	01000044 	movi	r4,1
 800e02c:	21c0610e 	bge	r4,r7,800e1b4 <__adddf3+0x570>
 800e030:	0101ffc4 	movi	r4,2047
 800e034:	1100a326 	beq	r2,r4,800e2c4 <__adddf3+0x680>
 800e038:	344d883a 	add	r6,r6,r17
 800e03c:	3463803a 	cmpltu	r17,r6,r17
 800e040:	414b883a 	add	r5,r8,r5
 800e044:	2c4b883a 	add	r5,r5,r17
 800e048:	282297fa 	slli	r17,r5,31
 800e04c:	300cd07a 	srli	r6,r6,1
 800e050:	280ad07a 	srli	r5,r5,1
 800e054:	1021883a 	mov	r16,r2
 800e058:	89a2b03a 	or	r17,r17,r6
 800e05c:	003f1806 	br	800dcc0 <__ram_exceptions_end+0xf7f8da80>
 800e060:	0081ffc4 	movi	r2,2047
 800e064:	80bf411e 	bne	r16,r2,800dd6c <__ram_exceptions_end+0xf7f8db2c>
 800e068:	003f1506 	br	800dcc0 <__ram_exceptions_end+0xf7f8da80>
 800e06c:	80bff844 	addi	r2,r16,-31
 800e070:	00c00804 	movi	r3,32
 800e074:	9884d83a 	srl	r2,r19,r2
 800e078:	28c04a26 	beq	r5,r3,800e1a4 <__adddf3+0x560>
 800e07c:	00c00fc4 	movi	r3,63
 800e080:	1c21c83a 	sub	r16,r3,r16
 800e084:	9c26983a 	sll	r19,r19,r16
 800e088:	9c62b03a 	or	r17,r19,r17
 800e08c:	8822c03a 	cmpne	r17,r17,zero
 800e090:	88a2b03a 	or	r17,r17,r2
 800e094:	000b883a 	mov	r5,zero
 800e098:	0021883a 	mov	r16,zero
 800e09c:	003fb406 	br	800df70 <__ram_exceptions_end+0xf7f8dd30>
 800e0a0:	18bff804 	addi	r2,r3,-32
 800e0a4:	01000804 	movi	r4,32
 800e0a8:	4084d83a 	srl	r2,r8,r2
 800e0ac:	19003f26 	beq	r3,r4,800e1ac <__adddf3+0x568>
 800e0b0:	01001004 	movi	r4,64
 800e0b4:	20c7c83a 	sub	r3,r4,r3
 800e0b8:	40d0983a 	sll	r8,r8,r3
 800e0bc:	418cb03a 	or	r6,r8,r6
 800e0c0:	300cc03a 	cmpne	r6,r6,zero
 800e0c4:	308cb03a 	or	r6,r6,r2
 800e0c8:	0007883a 	mov	r3,zero
 800e0cc:	003f3406 	br	800dda0 <__ram_exceptions_end+0xf7f8db60>
 800e0d0:	80002326 	beq	r16,zero,800e160 <__adddf3+0x51c>
 800e0d4:	0101ffc4 	movi	r4,2047
 800e0d8:	11005e26 	beq	r2,r4,800e254 <__adddf3+0x610>
 800e0dc:	00c7c83a 	sub	r3,zero,r3
 800e0e0:	29402034 	orhi	r5,r5,128
 800e0e4:	01000e04 	movi	r4,56
 800e0e8:	20c07216 	blt	r4,r3,800e2b4 <__adddf3+0x670>
 800e0ec:	010007c4 	movi	r4,31
 800e0f0:	20c0ce16 	blt	r4,r3,800e42c <__adddf3+0x7e8>
 800e0f4:	01000804 	movi	r4,32
 800e0f8:	20c9c83a 	sub	r4,r4,r3
 800e0fc:	2914983a 	sll	r10,r5,r4
 800e100:	88d2d83a 	srl	r9,r17,r3
 800e104:	8908983a 	sll	r4,r17,r4
 800e108:	28c6d83a 	srl	r3,r5,r3
 800e10c:	5262b03a 	or	r17,r10,r9
 800e110:	2008c03a 	cmpne	r4,r4,zero
 800e114:	8922b03a 	or	r17,r17,r4
 800e118:	3463c83a 	sub	r17,r6,r17
 800e11c:	40c7c83a 	sub	r3,r8,r3
 800e120:	344d803a 	cmpltu	r6,r6,r17
 800e124:	198bc83a 	sub	r5,r3,r6
 800e128:	1021883a 	mov	r16,r2
 800e12c:	3825883a 	mov	r18,r7
 800e130:	003f2006 	br	800ddb4 <__ram_exceptions_end+0xf7f8db74>
 800e134:	9886b03a 	or	r3,r19,r2
 800e138:	1800141e 	bne	r3,zero,800e18c <__adddf3+0x548>
 800e13c:	0007883a 	mov	r3,zero
 800e140:	000b883a 	mov	r5,zero
 800e144:	0023883a 	mov	r17,zero
 800e148:	0021883a 	mov	r16,zero
 800e14c:	003f3c06 	br	800de40 <__ram_exceptions_end+0xf7f8dc00>
 800e150:	418cb03a 	or	r6,r8,r6
 800e154:	300cc03a 	cmpne	r6,r6,zero
 800e158:	0011883a 	mov	r8,zero
 800e15c:	003f5606 	br	800deb8 <__ram_exceptions_end+0xf7f8dc78>
 800e160:	2c48b03a 	or	r4,r5,r17
 800e164:	20003b26 	beq	r4,zero,800e254 <__adddf3+0x610>
 800e168:	00c6303a 	nor	r3,zero,r3
 800e16c:	1800371e 	bne	r3,zero,800e24c <__adddf3+0x608>
 800e170:	3463c83a 	sub	r17,r6,r17
 800e174:	414bc83a 	sub	r5,r8,r5
 800e178:	344d803a 	cmpltu	r6,r6,r17
 800e17c:	298bc83a 	sub	r5,r5,r6
 800e180:	1021883a 	mov	r16,r2
 800e184:	3825883a 	mov	r18,r7
 800e188:	003f0a06 	br	800ddb4 <__ram_exceptions_end+0xf7f8db74>
 800e18c:	1023883a 	mov	r17,r2
 800e190:	003f0d06 	br	800ddc8 <__ram_exceptions_end+0xf7f8db88>
 800e194:	0007883a 	mov	r3,zero
 800e198:	000b883a 	mov	r5,zero
 800e19c:	0023883a 	mov	r17,zero
 800e1a0:	003f2706 	br	800de40 <__ram_exceptions_end+0xf7f8dc00>
 800e1a4:	0027883a 	mov	r19,zero
 800e1a8:	003fb706 	br	800e088 <__ram_exceptions_end+0xf7f8de48>
 800e1ac:	0011883a 	mov	r8,zero
 800e1b0:	003fc206 	br	800e0bc <__ram_exceptions_end+0xf7f8de7c>
 800e1b4:	2c44b03a 	or	r2,r5,r17
 800e1b8:	8000871e 	bne	r16,zero,800e3d8 <__adddf3+0x794>
 800e1bc:	1000b126 	beq	r2,zero,800e484 <__adddf3+0x840>
 800e1c0:	4184b03a 	or	r2,r8,r6
 800e1c4:	103ebe26 	beq	r2,zero,800dcc0 <__ram_exceptions_end+0xf7f8da80>
 800e1c8:	3445883a 	add	r2,r6,r17
 800e1cc:	1463803a 	cmpltu	r17,r2,r17
 800e1d0:	414b883a 	add	r5,r8,r5
 800e1d4:	2c4b883a 	add	r5,r5,r17
 800e1d8:	28c0202c 	andhi	r3,r5,128
 800e1dc:	1023883a 	mov	r17,r2
 800e1e0:	183f6326 	beq	r3,zero,800df70 <__ram_exceptions_end+0xf7f8dd30>
 800e1e4:	00bfe034 	movhi	r2,65408
 800e1e8:	10bfffc4 	addi	r2,r2,-1
 800e1ec:	2021883a 	mov	r16,r4
 800e1f0:	288a703a 	and	r5,r5,r2
 800e1f4:	003eb206 	br	800dcc0 <__ram_exceptions_end+0xf7f8da80>
 800e1f8:	2c44b03a 	or	r2,r5,r17
 800e1fc:	8000251e 	bne	r16,zero,800e294 <__adddf3+0x650>
 800e200:	10004b1e 	bne	r2,zero,800e330 <__adddf3+0x6ec>
 800e204:	4184b03a 	or	r2,r8,r6
 800e208:	103fe226 	beq	r2,zero,800e194 <__ram_exceptions_end+0xf7f8df54>
 800e20c:	400b883a 	mov	r5,r8
 800e210:	3023883a 	mov	r17,r6
 800e214:	3825883a 	mov	r18,r7
 800e218:	003ea906 	br	800dcc0 <__ram_exceptions_end+0xf7f8da80>
 800e21c:	20bff804 	addi	r2,r4,-32
 800e220:	01c00804 	movi	r7,32
 800e224:	4084d83a 	srl	r2,r8,r2
 800e228:	21c07e26 	beq	r4,r7,800e424 <__adddf3+0x7e0>
 800e22c:	01c01004 	movi	r7,64
 800e230:	3909c83a 	sub	r4,r7,r4
 800e234:	4110983a 	sll	r8,r8,r4
 800e238:	418cb03a 	or	r6,r8,r6
 800e23c:	300cc03a 	cmpne	r6,r6,zero
 800e240:	308cb03a 	or	r6,r6,r2
 800e244:	0011883a 	mov	r8,zero
 800e248:	003f1b06 	br	800deb8 <__ram_exceptions_end+0xf7f8dc78>
 800e24c:	0101ffc4 	movi	r4,2047
 800e250:	113fa41e 	bne	r2,r4,800e0e4 <__ram_exceptions_end+0xf7f8dea4>
 800e254:	400b883a 	mov	r5,r8
 800e258:	3023883a 	mov	r17,r6
 800e25c:	1021883a 	mov	r16,r2
 800e260:	3825883a 	mov	r18,r7
 800e264:	003e9606 	br	800dcc0 <__ram_exceptions_end+0xf7f8da80>
 800e268:	80001a1e 	bne	r16,zero,800e2d4 <__adddf3+0x690>
 800e26c:	2c4eb03a 	or	r7,r5,r17
 800e270:	38005526 	beq	r7,zero,800e3c8 <__adddf3+0x784>
 800e274:	0108303a 	nor	r4,zero,r4
 800e278:	2000511e 	bne	r4,zero,800e3c0 <__adddf3+0x77c>
 800e27c:	89a3883a 	add	r17,r17,r6
 800e280:	414b883a 	add	r5,r8,r5
 800e284:	898d803a 	cmpltu	r6,r17,r6
 800e288:	298b883a 	add	r5,r5,r6
 800e28c:	1021883a 	mov	r16,r2
 800e290:	003f0e06 	br	800decc <__ram_exceptions_end+0xf7f8dc8c>
 800e294:	1000341e 	bne	r2,zero,800e368 <__adddf3+0x724>
 800e298:	4184b03a 	or	r2,r8,r6
 800e29c:	10006f26 	beq	r2,zero,800e45c <__adddf3+0x818>
 800e2a0:	400b883a 	mov	r5,r8
 800e2a4:	3023883a 	mov	r17,r6
 800e2a8:	3825883a 	mov	r18,r7
 800e2ac:	0401ffc4 	movi	r16,2047
 800e2b0:	003e8306 	br	800dcc0 <__ram_exceptions_end+0xf7f8da80>
 800e2b4:	2c62b03a 	or	r17,r5,r17
 800e2b8:	8822c03a 	cmpne	r17,r17,zero
 800e2bc:	0007883a 	mov	r3,zero
 800e2c0:	003f9506 	br	800e118 <__ram_exceptions_end+0xf7f8ded8>
 800e2c4:	1021883a 	mov	r16,r2
 800e2c8:	000b883a 	mov	r5,zero
 800e2cc:	0023883a 	mov	r17,zero
 800e2d0:	003edb06 	br	800de40 <__ram_exceptions_end+0xf7f8dc00>
 800e2d4:	01c1ffc4 	movi	r7,2047
 800e2d8:	11c03b26 	beq	r2,r7,800e3c8 <__adddf3+0x784>
 800e2dc:	0109c83a 	sub	r4,zero,r4
 800e2e0:	29402034 	orhi	r5,r5,128
 800e2e4:	01c00e04 	movi	r7,56
 800e2e8:	39006216 	blt	r7,r4,800e474 <__adddf3+0x830>
 800e2ec:	01c007c4 	movi	r7,31
 800e2f0:	39006b16 	blt	r7,r4,800e4a0 <__adddf3+0x85c>
 800e2f4:	01c00804 	movi	r7,32
 800e2f8:	390fc83a 	sub	r7,r7,r4
 800e2fc:	29d4983a 	sll	r10,r5,r7
 800e300:	8912d83a 	srl	r9,r17,r4
 800e304:	89ce983a 	sll	r7,r17,r7
 800e308:	2908d83a 	srl	r4,r5,r4
 800e30c:	5262b03a 	or	r17,r10,r9
 800e310:	380ac03a 	cmpne	r5,r7,zero
 800e314:	8962b03a 	or	r17,r17,r5
 800e318:	89a3883a 	add	r17,r17,r6
 800e31c:	2211883a 	add	r8,r4,r8
 800e320:	898d803a 	cmpltu	r6,r17,r6
 800e324:	418b883a 	add	r5,r8,r6
 800e328:	1021883a 	mov	r16,r2
 800e32c:	003ee706 	br	800decc <__ram_exceptions_end+0xf7f8dc8c>
 800e330:	4184b03a 	or	r2,r8,r6
 800e334:	103e6226 	beq	r2,zero,800dcc0 <__ram_exceptions_end+0xf7f8da80>
 800e338:	8987c83a 	sub	r3,r17,r6
 800e33c:	88c9803a 	cmpltu	r4,r17,r3
 800e340:	2a05c83a 	sub	r2,r5,r8
 800e344:	1105c83a 	sub	r2,r2,r4
 800e348:	1100202c 	andhi	r4,r2,128
 800e34c:	203f0426 	beq	r4,zero,800df60 <__ram_exceptions_end+0xf7f8dd20>
 800e350:	3463c83a 	sub	r17,r6,r17
 800e354:	414bc83a 	sub	r5,r8,r5
 800e358:	344d803a 	cmpltu	r6,r6,r17
 800e35c:	298bc83a 	sub	r5,r5,r6
 800e360:	3825883a 	mov	r18,r7
 800e364:	003e5606 	br	800dcc0 <__ram_exceptions_end+0xf7f8da80>
 800e368:	4184b03a 	or	r2,r8,r6
 800e36c:	10002b26 	beq	r2,zero,800e41c <__adddf3+0x7d8>
 800e370:	2804d0fa 	srli	r2,r5,3
 800e374:	8822d0fa 	srli	r17,r17,3
 800e378:	280a977a 	slli	r5,r5,29
 800e37c:	10c0022c 	andhi	r3,r2,8
 800e380:	2c62b03a 	or	r17,r5,r17
 800e384:	18000826 	beq	r3,zero,800e3a8 <__adddf3+0x764>
 800e388:	4008d0fa 	srli	r4,r8,3
 800e38c:	20c0022c 	andhi	r3,r4,8
 800e390:	1800051e 	bne	r3,zero,800e3a8 <__adddf3+0x764>
 800e394:	300cd0fa 	srli	r6,r6,3
 800e398:	4010977a 	slli	r8,r8,29
 800e39c:	2005883a 	mov	r2,r4
 800e3a0:	3825883a 	mov	r18,r7
 800e3a4:	41a2b03a 	or	r17,r8,r6
 800e3a8:	880ad77a 	srli	r5,r17,29
 800e3ac:	100490fa 	slli	r2,r2,3
 800e3b0:	882290fa 	slli	r17,r17,3
 800e3b4:	0401ffc4 	movi	r16,2047
 800e3b8:	288ab03a 	or	r5,r5,r2
 800e3bc:	003e4006 	br	800dcc0 <__ram_exceptions_end+0xf7f8da80>
 800e3c0:	01c1ffc4 	movi	r7,2047
 800e3c4:	11ffc71e 	bne	r2,r7,800e2e4 <__ram_exceptions_end+0xf7f8e0a4>
 800e3c8:	400b883a 	mov	r5,r8
 800e3cc:	3023883a 	mov	r17,r6
 800e3d0:	1021883a 	mov	r16,r2
 800e3d4:	003e3a06 	br	800dcc0 <__ram_exceptions_end+0xf7f8da80>
 800e3d8:	10002d26 	beq	r2,zero,800e490 <__adddf3+0x84c>
 800e3dc:	4184b03a 	or	r2,r8,r6
 800e3e0:	10000e26 	beq	r2,zero,800e41c <__adddf3+0x7d8>
 800e3e4:	2804d0fa 	srli	r2,r5,3
 800e3e8:	8822d0fa 	srli	r17,r17,3
 800e3ec:	280a977a 	slli	r5,r5,29
 800e3f0:	10c0022c 	andhi	r3,r2,8
 800e3f4:	2c62b03a 	or	r17,r5,r17
 800e3f8:	183feb26 	beq	r3,zero,800e3a8 <__ram_exceptions_end+0xf7f8e168>
 800e3fc:	4008d0fa 	srli	r4,r8,3
 800e400:	20c0022c 	andhi	r3,r4,8
 800e404:	183fe81e 	bne	r3,zero,800e3a8 <__ram_exceptions_end+0xf7f8e168>
 800e408:	300cd0fa 	srli	r6,r6,3
 800e40c:	4010977a 	slli	r8,r8,29
 800e410:	2005883a 	mov	r2,r4
 800e414:	41a2b03a 	or	r17,r8,r6
 800e418:	003fe306 	br	800e3a8 <__ram_exceptions_end+0xf7f8e168>
 800e41c:	0401ffc4 	movi	r16,2047
 800e420:	003e2706 	br	800dcc0 <__ram_exceptions_end+0xf7f8da80>
 800e424:	0011883a 	mov	r8,zero
 800e428:	003f8306 	br	800e238 <__ram_exceptions_end+0xf7f8dff8>
 800e42c:	193ff804 	addi	r4,r3,-32
 800e430:	02400804 	movi	r9,32
 800e434:	2908d83a 	srl	r4,r5,r4
 800e438:	1a402526 	beq	r3,r9,800e4d0 <__adddf3+0x88c>
 800e43c:	02401004 	movi	r9,64
 800e440:	48c7c83a 	sub	r3,r9,r3
 800e444:	28ca983a 	sll	r5,r5,r3
 800e448:	2c62b03a 	or	r17,r5,r17
 800e44c:	8822c03a 	cmpne	r17,r17,zero
 800e450:	8922b03a 	or	r17,r17,r4
 800e454:	0007883a 	mov	r3,zero
 800e458:	003f2f06 	br	800e118 <__ram_exceptions_end+0xf7f8ded8>
 800e45c:	01402034 	movhi	r5,128
 800e460:	0007883a 	mov	r3,zero
 800e464:	297fffc4 	addi	r5,r5,-1
 800e468:	047ffe04 	movi	r17,-8
 800e46c:	0401ffc4 	movi	r16,2047
 800e470:	003e7306 	br	800de40 <__ram_exceptions_end+0xf7f8dc00>
 800e474:	2c62b03a 	or	r17,r5,r17
 800e478:	8822c03a 	cmpne	r17,r17,zero
 800e47c:	0009883a 	mov	r4,zero
 800e480:	003fa506 	br	800e318 <__ram_exceptions_end+0xf7f8e0d8>
 800e484:	400b883a 	mov	r5,r8
 800e488:	3023883a 	mov	r17,r6
 800e48c:	003e0c06 	br	800dcc0 <__ram_exceptions_end+0xf7f8da80>
 800e490:	400b883a 	mov	r5,r8
 800e494:	3023883a 	mov	r17,r6
 800e498:	0401ffc4 	movi	r16,2047
 800e49c:	003e0806 	br	800dcc0 <__ram_exceptions_end+0xf7f8da80>
 800e4a0:	21fff804 	addi	r7,r4,-32
 800e4a4:	02400804 	movi	r9,32
 800e4a8:	29ced83a 	srl	r7,r5,r7
 800e4ac:	22400a26 	beq	r4,r9,800e4d8 <__adddf3+0x894>
 800e4b0:	02401004 	movi	r9,64
 800e4b4:	4909c83a 	sub	r4,r9,r4
 800e4b8:	290a983a 	sll	r5,r5,r4
 800e4bc:	2c62b03a 	or	r17,r5,r17
 800e4c0:	8822c03a 	cmpne	r17,r17,zero
 800e4c4:	89e2b03a 	or	r17,r17,r7
 800e4c8:	0009883a 	mov	r4,zero
 800e4cc:	003f9206 	br	800e318 <__ram_exceptions_end+0xf7f8e0d8>
 800e4d0:	000b883a 	mov	r5,zero
 800e4d4:	003fdc06 	br	800e448 <__ram_exceptions_end+0xf7f8e208>
 800e4d8:	000b883a 	mov	r5,zero
 800e4dc:	003ff706 	br	800e4bc <__ram_exceptions_end+0xf7f8e27c>

0800e4e0 <__eqdf2>:
 800e4e0:	2804d53a 	srli	r2,r5,20
 800e4e4:	3806d53a 	srli	r3,r7,20
 800e4e8:	02000434 	movhi	r8,16
 800e4ec:	423fffc4 	addi	r8,r8,-1
 800e4f0:	1081ffcc 	andi	r2,r2,2047
 800e4f4:	0241ffc4 	movi	r9,2047
 800e4f8:	2a14703a 	and	r10,r5,r8
 800e4fc:	18c1ffcc 	andi	r3,r3,2047
 800e500:	3a10703a 	and	r8,r7,r8
 800e504:	280ad7fa 	srli	r5,r5,31
 800e508:	380ed7fa 	srli	r7,r7,31
 800e50c:	12400f26 	beq	r2,r9,800e54c <__eqdf2+0x6c>
 800e510:	0241ffc4 	movi	r9,2047
 800e514:	1a400326 	beq	r3,r9,800e524 <__eqdf2+0x44>
 800e518:	10c00526 	beq	r2,r3,800e530 <__eqdf2+0x50>
 800e51c:	00800044 	movi	r2,1
 800e520:	f800283a 	ret
 800e524:	4192b03a 	or	r9,r8,r6
 800e528:	483ffc1e 	bne	r9,zero,800e51c <__ram_exceptions_end+0xf7f8e2dc>
 800e52c:	10fffb1e 	bne	r2,r3,800e51c <__ram_exceptions_end+0xf7f8e2dc>
 800e530:	523ffa1e 	bne	r10,r8,800e51c <__ram_exceptions_end+0xf7f8e2dc>
 800e534:	21bff91e 	bne	r4,r6,800e51c <__ram_exceptions_end+0xf7f8e2dc>
 800e538:	29c00826 	beq	r5,r7,800e55c <__eqdf2+0x7c>
 800e53c:	103ff71e 	bne	r2,zero,800e51c <__ram_exceptions_end+0xf7f8e2dc>
 800e540:	5104b03a 	or	r2,r10,r4
 800e544:	1004c03a 	cmpne	r2,r2,zero
 800e548:	f800283a 	ret
 800e54c:	5112b03a 	or	r9,r10,r4
 800e550:	483fef26 	beq	r9,zero,800e510 <__ram_exceptions_end+0xf7f8e2d0>
 800e554:	00800044 	movi	r2,1
 800e558:	f800283a 	ret
 800e55c:	0005883a 	mov	r2,zero
 800e560:	f800283a 	ret

0800e564 <__gedf2>:
 800e564:	2804d53a 	srli	r2,r5,20
 800e568:	3806d53a 	srli	r3,r7,20
 800e56c:	02000434 	movhi	r8,16
 800e570:	423fffc4 	addi	r8,r8,-1
 800e574:	0241ffc4 	movi	r9,2047
 800e578:	1081ffcc 	andi	r2,r2,2047
 800e57c:	2a14703a 	and	r10,r5,r8
 800e580:	1a46703a 	and	r3,r3,r9
 800e584:	3a10703a 	and	r8,r7,r8
 800e588:	280ad7fa 	srli	r5,r5,31
 800e58c:	380ed7fa 	srli	r7,r7,31
 800e590:	12400b26 	beq	r2,r9,800e5c0 <__gedf2+0x5c>
 800e594:	1a401626 	beq	r3,r9,800e5f0 <__gedf2+0x8c>
 800e598:	10000c1e 	bne	r2,zero,800e5cc <__gedf2+0x68>
 800e59c:	5112b03a 	or	r9,r10,r4
 800e5a0:	4813003a 	cmpeq	r9,r9,zero
 800e5a4:	4817883a 	mov	r11,r9
 800e5a8:	18000c1e 	bne	r3,zero,800e5dc <__gedf2+0x78>
 800e5ac:	4198b03a 	or	r12,r8,r6
 800e5b0:	60000a1e 	bne	r12,zero,800e5dc <__gedf2+0x78>
 800e5b4:	48001326 	beq	r9,zero,800e604 <__gedf2+0xa0>
 800e5b8:	0005883a 	mov	r2,zero
 800e5bc:	f800283a 	ret
 800e5c0:	5112b03a 	or	r9,r10,r4
 800e5c4:	4800191e 	bne	r9,zero,800e62c <__gedf2+0xc8>
 800e5c8:	18800926 	beq	r3,r2,800e5f0 <__gedf2+0x8c>
 800e5cc:	18000b1e 	bne	r3,zero,800e5fc <__gedf2+0x98>
 800e5d0:	4192b03a 	or	r9,r8,r6
 800e5d4:	0017883a 	mov	r11,zero
 800e5d8:	48000a26 	beq	r9,zero,800e604 <__gedf2+0xa0>
 800e5dc:	39c03fcc 	andi	r7,r7,255
 800e5e0:	58000726 	beq	r11,zero,800e600 <__gedf2+0x9c>
 800e5e4:	3800081e 	bne	r7,zero,800e608 <__gedf2+0xa4>
 800e5e8:	00bfffc4 	movi	r2,-1
 800e5ec:	f800283a 	ret
 800e5f0:	4192b03a 	or	r9,r8,r6
 800e5f4:	48000d1e 	bne	r9,zero,800e62c <__gedf2+0xc8>
 800e5f8:	103fe826 	beq	r2,zero,800e59c <__ram_exceptions_end+0xf7f8e35c>
 800e5fc:	39c03fcc 	andi	r7,r7,255
 800e600:	29c00326 	beq	r5,r7,800e610 <__gedf2+0xac>
 800e604:	283ff81e 	bne	r5,zero,800e5e8 <__ram_exceptions_end+0xf7f8e3a8>
 800e608:	00800044 	movi	r2,1
 800e60c:	f800283a 	ret
 800e610:	18bffc16 	blt	r3,r2,800e604 <__ram_exceptions_end+0xf7f8e3c4>
 800e614:	10c00316 	blt	r2,r3,800e624 <__gedf2+0xc0>
 800e618:	42bffa36 	bltu	r8,r10,800e604 <__ram_exceptions_end+0xf7f8e3c4>
 800e61c:	52000526 	beq	r10,r8,800e634 <__gedf2+0xd0>
 800e620:	523fe52e 	bgeu	r10,r8,800e5b8 <__ram_exceptions_end+0xf7f8e378>
 800e624:	283ff026 	beq	r5,zero,800e5e8 <__ram_exceptions_end+0xf7f8e3a8>
 800e628:	003ff706 	br	800e608 <__ram_exceptions_end+0xf7f8e3c8>
 800e62c:	00bfff84 	movi	r2,-2
 800e630:	f800283a 	ret
 800e634:	313ff336 	bltu	r6,r4,800e604 <__ram_exceptions_end+0xf7f8e3c4>
 800e638:	21bfdf2e 	bgeu	r4,r6,800e5b8 <__ram_exceptions_end+0xf7f8e378>
 800e63c:	283fea26 	beq	r5,zero,800e5e8 <__ram_exceptions_end+0xf7f8e3a8>
 800e640:	003ff106 	br	800e608 <__ram_exceptions_end+0xf7f8e3c8>

0800e644 <__ledf2>:
 800e644:	2804d53a 	srli	r2,r5,20
 800e648:	3810d53a 	srli	r8,r7,20
 800e64c:	00c00434 	movhi	r3,16
 800e650:	18ffffc4 	addi	r3,r3,-1
 800e654:	0241ffc4 	movi	r9,2047
 800e658:	1081ffcc 	andi	r2,r2,2047
 800e65c:	28d4703a 	and	r10,r5,r3
 800e660:	4250703a 	and	r8,r8,r9
 800e664:	38c6703a 	and	r3,r7,r3
 800e668:	280ad7fa 	srli	r5,r5,31
 800e66c:	380ed7fa 	srli	r7,r7,31
 800e670:	12400b26 	beq	r2,r9,800e6a0 <__ledf2+0x5c>
 800e674:	42401926 	beq	r8,r9,800e6dc <__ledf2+0x98>
 800e678:	10000c1e 	bne	r2,zero,800e6ac <__ledf2+0x68>
 800e67c:	5112b03a 	or	r9,r10,r4
 800e680:	4813003a 	cmpeq	r9,r9,zero
 800e684:	4817883a 	mov	r11,r9
 800e688:	40000f26 	beq	r8,zero,800e6c8 <__ledf2+0x84>
 800e68c:	39c03fcc 	andi	r7,r7,255
 800e690:	58001826 	beq	r11,zero,800e6f4 <__ledf2+0xb0>
 800e694:	38000a1e 	bne	r7,zero,800e6c0 <__ledf2+0x7c>
 800e698:	00bfffc4 	movi	r2,-1
 800e69c:	f800283a 	ret
 800e6a0:	5112b03a 	or	r9,r10,r4
 800e6a4:	48000f1e 	bne	r9,zero,800e6e4 <__ledf2+0xa0>
 800e6a8:	40800c26 	beq	r8,r2,800e6dc <__ledf2+0x98>
 800e6ac:	4000101e 	bne	r8,zero,800e6f0 <__ledf2+0xac>
 800e6b0:	1992b03a 	or	r9,r3,r6
 800e6b4:	0017883a 	mov	r11,zero
 800e6b8:	483ff41e 	bne	r9,zero,800e68c <__ram_exceptions_end+0xf7f8e44c>
 800e6bc:	283ff61e 	bne	r5,zero,800e698 <__ram_exceptions_end+0xf7f8e458>
 800e6c0:	00800044 	movi	r2,1
 800e6c4:	f800283a 	ret
 800e6c8:	1998b03a 	or	r12,r3,r6
 800e6cc:	603fef1e 	bne	r12,zero,800e68c <__ram_exceptions_end+0xf7f8e44c>
 800e6d0:	483ffa26 	beq	r9,zero,800e6bc <__ram_exceptions_end+0xf7f8e47c>
 800e6d4:	0005883a 	mov	r2,zero
 800e6d8:	f800283a 	ret
 800e6dc:	1992b03a 	or	r9,r3,r6
 800e6e0:	48000226 	beq	r9,zero,800e6ec <__ledf2+0xa8>
 800e6e4:	00800084 	movi	r2,2
 800e6e8:	f800283a 	ret
 800e6ec:	103fe326 	beq	r2,zero,800e67c <__ram_exceptions_end+0xf7f8e43c>
 800e6f0:	39c03fcc 	andi	r7,r7,255
 800e6f4:	29fff11e 	bne	r5,r7,800e6bc <__ram_exceptions_end+0xf7f8e47c>
 800e6f8:	40bff016 	blt	r8,r2,800e6bc <__ram_exceptions_end+0xf7f8e47c>
 800e6fc:	12000316 	blt	r2,r8,800e70c <__ledf2+0xc8>
 800e700:	1abfee36 	bltu	r3,r10,800e6bc <__ram_exceptions_end+0xf7f8e47c>
 800e704:	50c00326 	beq	r10,r3,800e714 <__ledf2+0xd0>
 800e708:	50fff22e 	bgeu	r10,r3,800e6d4 <__ram_exceptions_end+0xf7f8e494>
 800e70c:	283fe226 	beq	r5,zero,800e698 <__ram_exceptions_end+0xf7f8e458>
 800e710:	003feb06 	br	800e6c0 <__ram_exceptions_end+0xf7f8e480>
 800e714:	313fe936 	bltu	r6,r4,800e6bc <__ram_exceptions_end+0xf7f8e47c>
 800e718:	21bfee2e 	bgeu	r4,r6,800e6d4 <__ram_exceptions_end+0xf7f8e494>
 800e71c:	283fde26 	beq	r5,zero,800e698 <__ram_exceptions_end+0xf7f8e458>
 800e720:	003fe706 	br	800e6c0 <__ram_exceptions_end+0xf7f8e480>

0800e724 <__muldf3>:
 800e724:	defff204 	addi	sp,sp,-56
 800e728:	2804d53a 	srli	r2,r5,20
 800e72c:	dd800a15 	stw	r22,40(sp)
 800e730:	282cd7fa 	srli	r22,r5,31
 800e734:	dc000415 	stw	r16,16(sp)
 800e738:	04000434 	movhi	r16,16
 800e73c:	df000c15 	stw	fp,48(sp)
 800e740:	dd000815 	stw	r20,32(sp)
 800e744:	dcc00715 	stw	r19,28(sp)
 800e748:	dc800615 	stw	r18,24(sp)
 800e74c:	dc400515 	stw	r17,20(sp)
 800e750:	843fffc4 	addi	r16,r16,-1
 800e754:	dfc00d15 	stw	ra,52(sp)
 800e758:	ddc00b15 	stw	r23,44(sp)
 800e75c:	dd400915 	stw	r21,36(sp)
 800e760:	1501ffcc 	andi	r20,r2,2047
 800e764:	2023883a 	mov	r17,r4
 800e768:	2025883a 	mov	r18,r4
 800e76c:	2c20703a 	and	r16,r5,r16
 800e770:	b027883a 	mov	r19,r22
 800e774:	b7003fcc 	andi	fp,r22,255
 800e778:	a0005926 	beq	r20,zero,800e8e0 <__muldf3+0x1bc>
 800e77c:	0081ffc4 	movi	r2,2047
 800e780:	a0803426 	beq	r20,r2,800e854 <__muldf3+0x130>
 800e784:	84000434 	orhi	r16,r16,16
 800e788:	2004d77a 	srli	r2,r4,29
 800e78c:	802090fa 	slli	r16,r16,3
 800e790:	202490fa 	slli	r18,r4,3
 800e794:	a53f0044 	addi	r20,r20,-1023
 800e798:	80a0b03a 	or	r16,r16,r2
 800e79c:	002b883a 	mov	r21,zero
 800e7a0:	0015883a 	mov	r10,zero
 800e7a4:	3812d53a 	srli	r9,r7,20
 800e7a8:	3806d7fa 	srli	r3,r7,31
 800e7ac:	02000434 	movhi	r8,16
 800e7b0:	423fffc4 	addi	r8,r8,-1
 800e7b4:	4941ffcc 	andi	r5,r9,2047
 800e7b8:	302f883a 	mov	r23,r6
 800e7bc:	3a22703a 	and	r17,r7,r8
 800e7c0:	1ac03fcc 	andi	r11,r3,255
 800e7c4:	28006226 	beq	r5,zero,800e950 <__muldf3+0x22c>
 800e7c8:	0081ffc4 	movi	r2,2047
 800e7cc:	28805a26 	beq	r5,r2,800e938 <__muldf3+0x214>
 800e7d0:	8a000434 	orhi	r8,r17,16
 800e7d4:	3004d77a 	srli	r2,r6,29
 800e7d8:	401090fa 	slli	r8,r8,3
 800e7dc:	302e90fa 	slli	r23,r6,3
 800e7e0:	297f0044 	addi	r5,r5,-1023
 800e7e4:	40a2b03a 	or	r17,r8,r2
 800e7e8:	0013883a 	mov	r9,zero
 800e7ec:	4d4cb03a 	or	r6,r9,r21
 800e7f0:	300c90ba 	slli	r6,r6,2
 800e7f4:	02020074 	movhi	r8,2049
 800e7f8:	423a0504 	addi	r8,r8,-6124
 800e7fc:	320d883a 	add	r6,r6,r8
 800e800:	31800017 	ldw	r6,0(r6)
 800e804:	a14b883a 	add	r5,r20,r5
 800e808:	1dacf03a 	xor	r22,r3,r22
 800e80c:	2b000044 	addi	r12,r5,1
 800e810:	3000683a 	jmp	r6
 800e814:	0800ea50 	cmplti	zero,at,937
 800e818:	0800ea3c 	xorhi	zero,at,936
 800e81c:	0800ea3c 	xorhi	zero,at,936
 800e820:	0800ea28 	cmpgeui	zero,at,936
 800e824:	0800e870 	cmpltui	zero,at,929
 800e828:	0800e870 	cmpltui	zero,at,929
 800e82c:	0800ea10 	cmplti	zero,at,936
 800e830:	0800ea28 	cmpgeui	zero,at,936
 800e834:	0800e870 	cmpltui	zero,at,929
 800e838:	0800ea10 	cmplti	zero,at,936
 800e83c:	0800e870 	cmpltui	zero,at,929
 800e840:	0800ea28 	cmpgeui	zero,at,936
 800e844:	0800e874 	orhi	zero,at,929
 800e848:	0800e874 	orhi	zero,at,929
 800e84c:	0800e874 	orhi	zero,at,929
 800e850:	0800ec4c 	andi	zero,at,945
 800e854:	8104b03a 	or	r2,r16,r4
 800e858:	10006a1e 	bne	r2,zero,800ea04 <__muldf3+0x2e0>
 800e85c:	05400204 	movi	r21,8
 800e860:	0021883a 	mov	r16,zero
 800e864:	0025883a 	mov	r18,zero
 800e868:	02800084 	movi	r10,2
 800e86c:	003fcd06 	br	800e7a4 <__ram_exceptions_end+0xf7f8e564>
 800e870:	b039883a 	mov	fp,r22
 800e874:	00800084 	movi	r2,2
 800e878:	50804e1e 	bne	r10,r2,800e9b4 <__muldf3+0x290>
 800e87c:	e4c0004c 	andi	r19,fp,1
 800e880:	0101ffc4 	movi	r4,2047
 800e884:	0021883a 	mov	r16,zero
 800e888:	0025883a 	mov	r18,zero
 800e88c:	2008953a 	slli	r4,r4,20
 800e890:	98c03fcc 	andi	r3,r19,255
 800e894:	01400434 	movhi	r5,16
 800e898:	297fffc4 	addi	r5,r5,-1
 800e89c:	180697fa 	slli	r3,r3,31
 800e8a0:	8160703a 	and	r16,r16,r5
 800e8a4:	8120b03a 	or	r16,r16,r4
 800e8a8:	80c6b03a 	or	r3,r16,r3
 800e8ac:	9005883a 	mov	r2,r18
 800e8b0:	dfc00d17 	ldw	ra,52(sp)
 800e8b4:	df000c17 	ldw	fp,48(sp)
 800e8b8:	ddc00b17 	ldw	r23,44(sp)
 800e8bc:	dd800a17 	ldw	r22,40(sp)
 800e8c0:	dd400917 	ldw	r21,36(sp)
 800e8c4:	dd000817 	ldw	r20,32(sp)
 800e8c8:	dcc00717 	ldw	r19,28(sp)
 800e8cc:	dc800617 	ldw	r18,24(sp)
 800e8d0:	dc400517 	ldw	r17,20(sp)
 800e8d4:	dc000417 	ldw	r16,16(sp)
 800e8d8:	dec00e04 	addi	sp,sp,56
 800e8dc:	f800283a 	ret
 800e8e0:	8104b03a 	or	r2,r16,r4
 800e8e4:	10004226 	beq	r2,zero,800e9f0 <__muldf3+0x2cc>
 800e8e8:	8000f926 	beq	r16,zero,800ecd0 <__muldf3+0x5ac>
 800e8ec:	8009883a 	mov	r4,r16
 800e8f0:	d9800315 	stw	r6,12(sp)
 800e8f4:	d9c00015 	stw	r7,0(sp)
 800e8f8:	8003cf80 	call	8003cf8 <__clzsi2>
 800e8fc:	d9800317 	ldw	r6,12(sp)
 800e900:	d9c00017 	ldw	r7,0(sp)
 800e904:	1007883a 	mov	r3,r2
 800e908:	01000a04 	movi	r4,40
 800e90c:	18bffe04 	addi	r2,r3,-8
 800e910:	20c9c83a 	sub	r4,r4,r3
 800e914:	80a0983a 	sll	r16,r16,r2
 800e918:	8908d83a 	srl	r4,r17,r4
 800e91c:	88a4983a 	sll	r18,r17,r2
 800e920:	2420b03a 	or	r16,r4,r16
 800e924:	017f0344 	movi	r5,-1011
 800e928:	28e9c83a 	sub	r20,r5,r3
 800e92c:	002b883a 	mov	r21,zero
 800e930:	0015883a 	mov	r10,zero
 800e934:	003f9b06 	br	800e7a4 <__ram_exceptions_end+0xf7f8e564>
 800e938:	8984b03a 	or	r2,r17,r6
 800e93c:	10002a1e 	bne	r2,zero,800e9e8 <__muldf3+0x2c4>
 800e940:	0023883a 	mov	r17,zero
 800e944:	002f883a 	mov	r23,zero
 800e948:	02400084 	movi	r9,2
 800e94c:	003fa706 	br	800e7ec <__ram_exceptions_end+0xf7f8e5ac>
 800e950:	8984b03a 	or	r2,r17,r6
 800e954:	10002026 	beq	r2,zero,800e9d8 <__muldf3+0x2b4>
 800e958:	8800cc26 	beq	r17,zero,800ec8c <__muldf3+0x568>
 800e95c:	8809883a 	mov	r4,r17
 800e960:	d8c00215 	stw	r3,8(sp)
 800e964:	d9800315 	stw	r6,12(sp)
 800e968:	da800015 	stw	r10,0(sp)
 800e96c:	dac00115 	stw	r11,4(sp)
 800e970:	8003cf80 	call	8003cf8 <__clzsi2>
 800e974:	d8c00217 	ldw	r3,8(sp)
 800e978:	d9800317 	ldw	r6,12(sp)
 800e97c:	da800017 	ldw	r10,0(sp)
 800e980:	dac00117 	ldw	r11,4(sp)
 800e984:	1009883a 	mov	r4,r2
 800e988:	01400a04 	movi	r5,40
 800e98c:	25fffe04 	addi	r23,r4,-8
 800e990:	290bc83a 	sub	r5,r5,r4
 800e994:	8dd0983a 	sll	r8,r17,r23
 800e998:	314ad83a 	srl	r5,r6,r5
 800e99c:	35ee983a 	sll	r23,r6,r23
 800e9a0:	2a22b03a 	or	r17,r5,r8
 800e9a4:	017f0344 	movi	r5,-1011
 800e9a8:	290bc83a 	sub	r5,r5,r4
 800e9ac:	0013883a 	mov	r9,zero
 800e9b0:	003f8e06 	br	800e7ec <__ram_exceptions_end+0xf7f8e5ac>
 800e9b4:	008000c4 	movi	r2,3
 800e9b8:	50811d26 	beq	r10,r2,800ee30 <__muldf3+0x70c>
 800e9bc:	00800044 	movi	r2,1
 800e9c0:	5080e01e 	bne	r10,r2,800ed44 <__muldf3+0x620>
 800e9c4:	e0a6703a 	and	r19,fp,r2
 800e9c8:	0009883a 	mov	r4,zero
 800e9cc:	0021883a 	mov	r16,zero
 800e9d0:	0025883a 	mov	r18,zero
 800e9d4:	003fad06 	br	800e88c <__ram_exceptions_end+0xf7f8e64c>
 800e9d8:	0023883a 	mov	r17,zero
 800e9dc:	002f883a 	mov	r23,zero
 800e9e0:	02400044 	movi	r9,1
 800e9e4:	003f8106 	br	800e7ec <__ram_exceptions_end+0xf7f8e5ac>
 800e9e8:	024000c4 	movi	r9,3
 800e9ec:	003f7f06 	br	800e7ec <__ram_exceptions_end+0xf7f8e5ac>
 800e9f0:	05400104 	movi	r21,4
 800e9f4:	0021883a 	mov	r16,zero
 800e9f8:	0025883a 	mov	r18,zero
 800e9fc:	02800044 	movi	r10,1
 800ea00:	003f6806 	br	800e7a4 <__ram_exceptions_end+0xf7f8e564>
 800ea04:	05400304 	movi	r21,12
 800ea08:	028000c4 	movi	r10,3
 800ea0c:	003f6506 	br	800e7a4 <__ram_exceptions_end+0xf7f8e564>
 800ea10:	04000434 	movhi	r16,16
 800ea14:	0027883a 	mov	r19,zero
 800ea18:	843fffc4 	addi	r16,r16,-1
 800ea1c:	04bfffc4 	movi	r18,-1
 800ea20:	0101ffc4 	movi	r4,2047
 800ea24:	003f9906 	br	800e88c <__ram_exceptions_end+0xf7f8e64c>
 800ea28:	8821883a 	mov	r16,r17
 800ea2c:	b825883a 	mov	r18,r23
 800ea30:	5839883a 	mov	fp,r11
 800ea34:	4815883a 	mov	r10,r9
 800ea38:	003f8e06 	br	800e874 <__ram_exceptions_end+0xf7f8e634>
 800ea3c:	8821883a 	mov	r16,r17
 800ea40:	b825883a 	mov	r18,r23
 800ea44:	b039883a 	mov	fp,r22
 800ea48:	4815883a 	mov	r10,r9
 800ea4c:	003f8906 	br	800e874 <__ram_exceptions_end+0xf7f8e634>
 800ea50:	b80cd43a 	srli	r6,r23,16
 800ea54:	9006d43a 	srli	r3,r18,16
 800ea58:	90bfffcc 	andi	r2,r18,65535
 800ea5c:	bdffffcc 	andi	r23,r23,65535
 800ea60:	b891383a 	mul	r8,r23,r2
 800ea64:	b8c9383a 	mul	r4,r23,r3
 800ea68:	309b383a 	mul	r13,r6,r2
 800ea6c:	400ed43a 	srli	r7,r8,16
 800ea70:	30df383a 	mul	r15,r6,r3
 800ea74:	235b883a 	add	r13,r4,r13
 800ea78:	69db883a 	add	r13,r13,r7
 800ea7c:	6900022e 	bgeu	r13,r4,800ea88 <__muldf3+0x364>
 800ea80:	01000074 	movhi	r4,1
 800ea84:	791f883a 	add	r15,r15,r4
 800ea88:	8828d43a 	srli	r20,r17,16
 800ea8c:	8c7fffcc 	andi	r17,r17,65535
 800ea90:	888f383a 	mul	r7,r17,r2
 800ea94:	88d3383a 	mul	r9,r17,r3
 800ea98:	a0a5383a 	mul	r18,r20,r2
 800ea9c:	3816d43a 	srli	r11,r7,16
 800eaa0:	6814943a 	slli	r10,r13,16
 800eaa4:	4ca5883a 	add	r18,r9,r18
 800eaa8:	423fffcc 	andi	r8,r8,65535
 800eaac:	92e5883a 	add	r18,r18,r11
 800eab0:	6808d43a 	srli	r4,r13,16
 800eab4:	5215883a 	add	r10,r10,r8
 800eab8:	a0c7383a 	mul	r3,r20,r3
 800eabc:	9240022e 	bgeu	r18,r9,800eac8 <__muldf3+0x3a4>
 800eac0:	00800074 	movhi	r2,1
 800eac4:	1887883a 	add	r3,r3,r2
 800eac8:	802ad43a 	srli	r21,r16,16
 800eacc:	80bfffcc 	andi	r2,r16,65535
 800ead0:	b893383a 	mul	r9,r23,r2
 800ead4:	3091383a 	mul	r8,r6,r2
 800ead8:	bd6f383a 	mul	r23,r23,r21
 800eadc:	9026943a 	slli	r19,r18,16
 800eae0:	481ad43a 	srli	r13,r9,16
 800eae4:	9024d43a 	srli	r18,r18,16
 800eae8:	39ffffcc 	andi	r7,r7,65535
 800eaec:	ba11883a 	add	r8,r23,r8
 800eaf0:	99e7883a 	add	r19,r19,r7
 800eaf4:	4351883a 	add	r8,r8,r13
 800eaf8:	1c97883a 	add	r11,r3,r18
 800eafc:	354d383a 	mul	r6,r6,r21
 800eb00:	9925883a 	add	r18,r19,r4
 800eb04:	45c0022e 	bgeu	r8,r23,800eb10 <__muldf3+0x3ec>
 800eb08:	00c00074 	movhi	r3,1
 800eb0c:	30cd883a 	add	r6,r6,r3
 800eb10:	8889383a 	mul	r4,r17,r2
 800eb14:	8d63383a 	mul	r17,r17,r21
 800eb18:	a085383a 	mul	r2,r20,r2
 800eb1c:	200ed43a 	srli	r7,r4,16
 800eb20:	401cd43a 	srli	r14,r8,16
 800eb24:	401a943a 	slli	r13,r8,16
 800eb28:	8885883a 	add	r2,r17,r2
 800eb2c:	4a3fffcc 	andi	r8,r9,65535
 800eb30:	11c5883a 	add	r2,r2,r7
 800eb34:	339d883a 	add	r14,r6,r14
 800eb38:	6a11883a 	add	r8,r13,r8
 800eb3c:	a561383a 	mul	r16,r20,r21
 800eb40:	1440022e 	bgeu	r2,r17,800eb4c <__muldf3+0x428>
 800eb44:	00c00074 	movhi	r3,1
 800eb48:	80e1883a 	add	r16,r16,r3
 800eb4c:	1006943a 	slli	r3,r2,16
 800eb50:	213fffcc 	andi	r4,r4,65535
 800eb54:	93db883a 	add	r13,r18,r15
 800eb58:	1909883a 	add	r4,r3,r4
 800eb5c:	22c7883a 	add	r3,r4,r11
 800eb60:	6cd3803a 	cmpltu	r9,r13,r19
 800eb64:	6a09883a 	add	r4,r13,r8
 800eb68:	1a5b883a 	add	r13,r3,r9
 800eb6c:	2211803a 	cmpltu	r8,r4,r8
 800eb70:	734d883a 	add	r6,r14,r13
 800eb74:	100ed43a 	srli	r7,r2,16
 800eb78:	6a53803a 	cmpltu	r9,r13,r9
 800eb7c:	3205883a 	add	r2,r6,r8
 800eb80:	1ac7803a 	cmpltu	r3,r3,r11
 800eb84:	1211803a 	cmpltu	r8,r2,r8
 800eb88:	48c6b03a 	or	r3,r9,r3
 800eb8c:	338d803a 	cmpltu	r6,r6,r14
 800eb90:	19c7883a 	add	r3,r3,r7
 800eb94:	418cb03a 	or	r6,r8,r6
 800eb98:	1987883a 	add	r3,r3,r6
 800eb9c:	2024927a 	slli	r18,r4,9
 800eba0:	1c07883a 	add	r3,r3,r16
 800eba4:	1806927a 	slli	r3,r3,9
 800eba8:	1020d5fa 	srli	r16,r2,23
 800ebac:	2008d5fa 	srli	r4,r4,23
 800ebb0:	9294b03a 	or	r10,r18,r10
 800ebb4:	1004927a 	slli	r2,r2,9
 800ebb8:	5024c03a 	cmpne	r18,r10,zero
 800ebbc:	1c20b03a 	or	r16,r3,r16
 800ebc0:	9108b03a 	or	r4,r18,r4
 800ebc4:	80c0402c 	andhi	r3,r16,256
 800ebc8:	20a4b03a 	or	r18,r4,r2
 800ebcc:	18000726 	beq	r3,zero,800ebec <__muldf3+0x4c8>
 800ebd0:	9006d07a 	srli	r3,r18,1
 800ebd4:	800897fa 	slli	r4,r16,31
 800ebd8:	9080004c 	andi	r2,r18,1
 800ebdc:	8020d07a 	srli	r16,r16,1
 800ebe0:	10c4b03a 	or	r2,r2,r3
 800ebe4:	1124b03a 	or	r18,r2,r4
 800ebe8:	600b883a 	mov	r5,r12
 800ebec:	2900ffc4 	addi	r4,r5,1023
 800ebf0:	01004b0e 	bge	zero,r4,800ed20 <__muldf3+0x5fc>
 800ebf4:	908001cc 	andi	r2,r18,7
 800ebf8:	10000726 	beq	r2,zero,800ec18 <__muldf3+0x4f4>
 800ebfc:	90c003cc 	andi	r3,r18,15
 800ec00:	00800104 	movi	r2,4
 800ec04:	18800426 	beq	r3,r2,800ec18 <__muldf3+0x4f4>
 800ec08:	9087883a 	add	r3,r18,r2
 800ec0c:	1c85803a 	cmpltu	r2,r3,r18
 800ec10:	80a1883a 	add	r16,r16,r2
 800ec14:	1825883a 	mov	r18,r3
 800ec18:	8080402c 	andhi	r2,r16,256
 800ec1c:	10000426 	beq	r2,zero,800ec30 <__muldf3+0x50c>
 800ec20:	00bfc034 	movhi	r2,65280
 800ec24:	10bfffc4 	addi	r2,r2,-1
 800ec28:	29010004 	addi	r4,r5,1024
 800ec2c:	80a0703a 	and	r16,r16,r2
 800ec30:	0081ff84 	movi	r2,2046
 800ec34:	1100320e 	bge	r2,r4,800ed00 <__muldf3+0x5dc>
 800ec38:	b4c0004c 	andi	r19,r22,1
 800ec3c:	0101ffc4 	movi	r4,2047
 800ec40:	0021883a 	mov	r16,zero
 800ec44:	0025883a 	mov	r18,zero
 800ec48:	003f1006 	br	800e88c <__ram_exceptions_end+0xf7f8e64c>
 800ec4c:	8080022c 	andhi	r2,r16,8
 800ec50:	10000926 	beq	r2,zero,800ec78 <__muldf3+0x554>
 800ec54:	8880022c 	andhi	r2,r17,8
 800ec58:	1000071e 	bne	r2,zero,800ec78 <__muldf3+0x554>
 800ec5c:	00800434 	movhi	r2,16
 800ec60:	8c000234 	orhi	r16,r17,8
 800ec64:	10bfffc4 	addi	r2,r2,-1
 800ec68:	1827883a 	mov	r19,r3
 800ec6c:	80a0703a 	and	r16,r16,r2
 800ec70:	b825883a 	mov	r18,r23
 800ec74:	003f6a06 	br	800ea20 <__ram_exceptions_end+0xf7f8e7e0>
 800ec78:	00800434 	movhi	r2,16
 800ec7c:	84000234 	orhi	r16,r16,8
 800ec80:	10bfffc4 	addi	r2,r2,-1
 800ec84:	80a0703a 	and	r16,r16,r2
 800ec88:	003f6506 	br	800ea20 <__ram_exceptions_end+0xf7f8e7e0>
 800ec8c:	3009883a 	mov	r4,r6
 800ec90:	d8c00215 	stw	r3,8(sp)
 800ec94:	d9800315 	stw	r6,12(sp)
 800ec98:	da800015 	stw	r10,0(sp)
 800ec9c:	dac00115 	stw	r11,4(sp)
 800eca0:	8003cf80 	call	8003cf8 <__clzsi2>
 800eca4:	11000804 	addi	r4,r2,32
 800eca8:	014009c4 	movi	r5,39
 800ecac:	d8c00217 	ldw	r3,8(sp)
 800ecb0:	d9800317 	ldw	r6,12(sp)
 800ecb4:	da800017 	ldw	r10,0(sp)
 800ecb8:	dac00117 	ldw	r11,4(sp)
 800ecbc:	293f320e 	bge	r5,r4,800e988 <__ram_exceptions_end+0xf7f8e748>
 800ecc0:	10bffe04 	addi	r2,r2,-8
 800ecc4:	b8a2983a 	sll	r17,r23,r2
 800ecc8:	002f883a 	mov	r23,zero
 800eccc:	003f3506 	br	800e9a4 <__ram_exceptions_end+0xf7f8e764>
 800ecd0:	d9800315 	stw	r6,12(sp)
 800ecd4:	d9c00015 	stw	r7,0(sp)
 800ecd8:	8003cf80 	call	8003cf8 <__clzsi2>
 800ecdc:	10c00804 	addi	r3,r2,32
 800ece0:	010009c4 	movi	r4,39
 800ece4:	d9800317 	ldw	r6,12(sp)
 800ece8:	d9c00017 	ldw	r7,0(sp)
 800ecec:	20ff060e 	bge	r4,r3,800e908 <__ram_exceptions_end+0xf7f8e6c8>
 800ecf0:	10bffe04 	addi	r2,r2,-8
 800ecf4:	88a0983a 	sll	r16,r17,r2
 800ecf8:	0025883a 	mov	r18,zero
 800ecfc:	003f0906 	br	800e924 <__ram_exceptions_end+0xf7f8e6e4>
 800ed00:	9004d0fa 	srli	r2,r18,3
 800ed04:	8024977a 	slli	r18,r16,29
 800ed08:	8020927a 	slli	r16,r16,9
 800ed0c:	2101ffcc 	andi	r4,r4,2047
 800ed10:	90a4b03a 	or	r18,r18,r2
 800ed14:	8020d33a 	srli	r16,r16,12
 800ed18:	b4c0004c 	andi	r19,r22,1
 800ed1c:	003edb06 	br	800e88c <__ram_exceptions_end+0xf7f8e64c>
 800ed20:	00ff0084 	movi	r3,-1022
 800ed24:	1947c83a 	sub	r3,r3,r5
 800ed28:	00800e04 	movi	r2,56
 800ed2c:	10c0080e 	bge	r2,r3,800ed50 <__muldf3+0x62c>
 800ed30:	b4c0004c 	andi	r19,r22,1
 800ed34:	0009883a 	mov	r4,zero
 800ed38:	0021883a 	mov	r16,zero
 800ed3c:	0025883a 	mov	r18,zero
 800ed40:	003ed206 	br	800e88c <__ram_exceptions_end+0xf7f8e64c>
 800ed44:	600b883a 	mov	r5,r12
 800ed48:	e02d883a 	mov	r22,fp
 800ed4c:	003fa706 	br	800ebec <__ram_exceptions_end+0xf7f8e9ac>
 800ed50:	008007c4 	movi	r2,31
 800ed54:	10c01816 	blt	r2,r3,800edb8 <__muldf3+0x694>
 800ed58:	29410784 	addi	r5,r5,1054
 800ed5c:	8144983a 	sll	r2,r16,r5
 800ed60:	90c8d83a 	srl	r4,r18,r3
 800ed64:	914a983a 	sll	r5,r18,r5
 800ed68:	80c6d83a 	srl	r3,r16,r3
 800ed6c:	2088b03a 	or	r4,r4,r2
 800ed70:	2804c03a 	cmpne	r2,r5,zero
 800ed74:	2084b03a 	or	r2,r4,r2
 800ed78:	110001cc 	andi	r4,r2,7
 800ed7c:	20000726 	beq	r4,zero,800ed9c <__muldf3+0x678>
 800ed80:	114003cc 	andi	r5,r2,15
 800ed84:	01000104 	movi	r4,4
 800ed88:	29000426 	beq	r5,r4,800ed9c <__muldf3+0x678>
 800ed8c:	11000104 	addi	r4,r2,4
 800ed90:	2085803a 	cmpltu	r2,r4,r2
 800ed94:	1887883a 	add	r3,r3,r2
 800ed98:	2005883a 	mov	r2,r4
 800ed9c:	1900202c 	andhi	r4,r3,128
 800eda0:	20001826 	beq	r4,zero,800ee04 <__muldf3+0x6e0>
 800eda4:	b4c0004c 	andi	r19,r22,1
 800eda8:	01000044 	movi	r4,1
 800edac:	0021883a 	mov	r16,zero
 800edb0:	0025883a 	mov	r18,zero
 800edb4:	003eb506 	br	800e88c <__ram_exceptions_end+0xf7f8e64c>
 800edb8:	00bef884 	movi	r2,-1054
 800edbc:	1145c83a 	sub	r2,r2,r5
 800edc0:	8088d83a 	srl	r4,r16,r2
 800edc4:	00800804 	movi	r2,32
 800edc8:	18801726 	beq	r3,r2,800ee28 <__muldf3+0x704>
 800edcc:	28810f84 	addi	r2,r5,1086
 800edd0:	8084983a 	sll	r2,r16,r2
 800edd4:	1484b03a 	or	r2,r2,r18
 800edd8:	1004c03a 	cmpne	r2,r2,zero
 800eddc:	1104b03a 	or	r2,r2,r4
 800ede0:	10c001cc 	andi	r3,r2,7
 800ede4:	18000b1e 	bne	r3,zero,800ee14 <__muldf3+0x6f0>
 800ede8:	0021883a 	mov	r16,zero
 800edec:	1004d0fa 	srli	r2,r2,3
 800edf0:	b4c0004c 	andi	r19,r22,1
 800edf4:	0009883a 	mov	r4,zero
 800edf8:	10e4b03a 	or	r18,r2,r3
 800edfc:	003ea306 	br	800e88c <__ram_exceptions_end+0xf7f8e64c>
 800ee00:	0007883a 	mov	r3,zero
 800ee04:	1820927a 	slli	r16,r3,9
 800ee08:	1806977a 	slli	r3,r3,29
 800ee0c:	8020d33a 	srli	r16,r16,12
 800ee10:	003ff606 	br	800edec <__ram_exceptions_end+0xf7f8ebac>
 800ee14:	110003cc 	andi	r4,r2,15
 800ee18:	00c00104 	movi	r3,4
 800ee1c:	20fff826 	beq	r4,r3,800ee00 <__ram_exceptions_end+0xf7f8ebc0>
 800ee20:	0007883a 	mov	r3,zero
 800ee24:	003fd906 	br	800ed8c <__ram_exceptions_end+0xf7f8eb4c>
 800ee28:	0005883a 	mov	r2,zero
 800ee2c:	003fe906 	br	800edd4 <__ram_exceptions_end+0xf7f8eb94>
 800ee30:	00800434 	movhi	r2,16
 800ee34:	84000234 	orhi	r16,r16,8
 800ee38:	10bfffc4 	addi	r2,r2,-1
 800ee3c:	e4c0004c 	andi	r19,fp,1
 800ee40:	80a0703a 	and	r16,r16,r2
 800ee44:	003ef606 	br	800ea20 <__ram_exceptions_end+0xf7f8e7e0>

0800ee48 <__subdf3>:
 800ee48:	00c00434 	movhi	r3,16
 800ee4c:	18ffffc4 	addi	r3,r3,-1
 800ee50:	defffb04 	addi	sp,sp,-20
 800ee54:	28d2703a 	and	r9,r5,r3
 800ee58:	3814d53a 	srli	r10,r7,20
 800ee5c:	38c6703a 	and	r3,r7,r3
 800ee60:	3004d77a 	srli	r2,r6,29
 800ee64:	dc800215 	stw	r18,8(sp)
 800ee68:	dc000015 	stw	r16,0(sp)
 800ee6c:	2824d7fa 	srli	r18,r5,31
 800ee70:	2820d53a 	srli	r16,r5,20
 800ee74:	481290fa 	slli	r9,r9,3
 800ee78:	200ad77a 	srli	r5,r4,29
 800ee7c:	180690fa 	slli	r3,r3,3
 800ee80:	dc400115 	stw	r17,4(sp)
 800ee84:	dfc00415 	stw	ra,16(sp)
 800ee88:	202290fa 	slli	r17,r4,3
 800ee8c:	dcc00315 	stw	r19,12(sp)
 800ee90:	5281ffcc 	andi	r10,r10,2047
 800ee94:	0101ffc4 	movi	r4,2047
 800ee98:	9011883a 	mov	r8,r18
 800ee9c:	8401ffcc 	andi	r16,r16,2047
 800eea0:	94803fcc 	andi	r18,r18,255
 800eea4:	494ab03a 	or	r5,r9,r5
 800eea8:	380ed7fa 	srli	r7,r7,31
 800eeac:	1886b03a 	or	r3,r3,r2
 800eeb0:	300c90fa 	slli	r6,r6,3
 800eeb4:	51009026 	beq	r10,r4,800f0f8 <__subdf3+0x2b0>
 800eeb8:	39c0005c 	xori	r7,r7,1
 800eebc:	8285c83a 	sub	r2,r16,r10
 800eec0:	91c06f26 	beq	r18,r7,800f080 <__subdf3+0x238>
 800eec4:	0080b10e 	bge	zero,r2,800f18c <__subdf3+0x344>
 800eec8:	50002a1e 	bne	r10,zero,800ef74 <__subdf3+0x12c>
 800eecc:	1988b03a 	or	r4,r3,r6
 800eed0:	2000941e 	bne	r4,zero,800f124 <__subdf3+0x2dc>
 800eed4:	888001cc 	andi	r2,r17,7
 800eed8:	10005b26 	beq	r2,zero,800f048 <__subdf3+0x200>
 800eedc:	88c003cc 	andi	r3,r17,15
 800eee0:	00800104 	movi	r2,4
 800eee4:	18805826 	beq	r3,r2,800f048 <__subdf3+0x200>
 800eee8:	88c00104 	addi	r3,r17,4
 800eeec:	1c63803a 	cmpltu	r17,r3,r17
 800eef0:	2c4b883a 	add	r5,r5,r17
 800eef4:	2880202c 	andhi	r2,r5,128
 800eef8:	9200004c 	andi	r8,r18,1
 800eefc:	1823883a 	mov	r17,r3
 800ef00:	10005426 	beq	r2,zero,800f054 <__subdf3+0x20c>
 800ef04:	84000044 	addi	r16,r16,1
 800ef08:	0081ffc4 	movi	r2,2047
 800ef0c:	8080bf26 	beq	r16,r2,800f20c <__subdf3+0x3c4>
 800ef10:	013fe034 	movhi	r4,65408
 800ef14:	213fffc4 	addi	r4,r4,-1
 800ef18:	290a703a 	and	r5,r5,r4
 800ef1c:	2804977a 	slli	r2,r5,29
 800ef20:	280a927a 	slli	r5,r5,9
 800ef24:	8822d0fa 	srli	r17,r17,3
 800ef28:	8401ffcc 	andi	r16,r16,2047
 800ef2c:	2808d33a 	srli	r4,r5,12
 800ef30:	1444b03a 	or	r2,r2,r17
 800ef34:	8401ffcc 	andi	r16,r16,2047
 800ef38:	800a953a 	slli	r5,r16,20
 800ef3c:	40c03fcc 	andi	r3,r8,255
 800ef40:	04000434 	movhi	r16,16
 800ef44:	180697fa 	slli	r3,r3,31
 800ef48:	843fffc4 	addi	r16,r16,-1
 800ef4c:	2420703a 	and	r16,r4,r16
 800ef50:	8160b03a 	or	r16,r16,r5
 800ef54:	80c6b03a 	or	r3,r16,r3
 800ef58:	dfc00417 	ldw	ra,16(sp)
 800ef5c:	dcc00317 	ldw	r19,12(sp)
 800ef60:	dc800217 	ldw	r18,8(sp)
 800ef64:	dc400117 	ldw	r17,4(sp)
 800ef68:	dc000017 	ldw	r16,0(sp)
 800ef6c:	dec00504 	addi	sp,sp,20
 800ef70:	f800283a 	ret
 800ef74:	0101ffc4 	movi	r4,2047
 800ef78:	813fd626 	beq	r16,r4,800eed4 <__ram_exceptions_end+0xf7f8ec94>
 800ef7c:	18c02034 	orhi	r3,r3,128
 800ef80:	01000e04 	movi	r4,56
 800ef84:	2080a416 	blt	r4,r2,800f218 <__subdf3+0x3d0>
 800ef88:	010007c4 	movi	r4,31
 800ef8c:	2080c716 	blt	r4,r2,800f2ac <__subdf3+0x464>
 800ef90:	01000804 	movi	r4,32
 800ef94:	2089c83a 	sub	r4,r4,r2
 800ef98:	1910983a 	sll	r8,r3,r4
 800ef9c:	308ed83a 	srl	r7,r6,r2
 800efa0:	3108983a 	sll	r4,r6,r4
 800efa4:	1884d83a 	srl	r2,r3,r2
 800efa8:	41ccb03a 	or	r6,r8,r7
 800efac:	2008c03a 	cmpne	r4,r4,zero
 800efb0:	310cb03a 	or	r6,r6,r4
 800efb4:	898dc83a 	sub	r6,r17,r6
 800efb8:	89a3803a 	cmpltu	r17,r17,r6
 800efbc:	288bc83a 	sub	r5,r5,r2
 800efc0:	2c4bc83a 	sub	r5,r5,r17
 800efc4:	3023883a 	mov	r17,r6
 800efc8:	2880202c 	andhi	r2,r5,128
 800efcc:	10006b26 	beq	r2,zero,800f17c <__subdf3+0x334>
 800efd0:	04c02034 	movhi	r19,128
 800efd4:	9cffffc4 	addi	r19,r19,-1
 800efd8:	2ce6703a 	and	r19,r5,r19
 800efdc:	98007c26 	beq	r19,zero,800f1d0 <__subdf3+0x388>
 800efe0:	9809883a 	mov	r4,r19
 800efe4:	8003cf80 	call	8003cf8 <__clzsi2>
 800efe8:	10fffe04 	addi	r3,r2,-8
 800efec:	010007c4 	movi	r4,31
 800eff0:	20c07d16 	blt	r4,r3,800f1e8 <__subdf3+0x3a0>
 800eff4:	01400a04 	movi	r5,40
 800eff8:	2885c83a 	sub	r2,r5,r2
 800effc:	888ad83a 	srl	r5,r17,r2
 800f000:	98e6983a 	sll	r19,r19,r3
 800f004:	88e2983a 	sll	r17,r17,r3
 800f008:	2ce6b03a 	or	r19,r5,r19
 800f00c:	1c007a16 	blt	r3,r16,800f1f8 <__subdf3+0x3b0>
 800f010:	1c21c83a 	sub	r16,r3,r16
 800f014:	81400044 	addi	r5,r16,1
 800f018:	00c007c4 	movi	r3,31
 800f01c:	19409616 	blt	r3,r5,800f278 <__subdf3+0x430>
 800f020:	1c21c83a 	sub	r16,r3,r16
 800f024:	8c08983a 	sll	r4,r17,r16
 800f028:	8946d83a 	srl	r3,r17,r5
 800f02c:	9c20983a 	sll	r16,r19,r16
 800f030:	2008c03a 	cmpne	r4,r4,zero
 800f034:	994ad83a 	srl	r5,r19,r5
 800f038:	1c06b03a 	or	r3,r3,r16
 800f03c:	1922b03a 	or	r17,r3,r4
 800f040:	0021883a 	mov	r16,zero
 800f044:	003fa306 	br	800eed4 <__ram_exceptions_end+0xf7f8ec94>
 800f048:	2880202c 	andhi	r2,r5,128
 800f04c:	9200004c 	andi	r8,r18,1
 800f050:	103fac1e 	bne	r2,zero,800ef04 <__ram_exceptions_end+0xf7f8ecc4>
 800f054:	2804977a 	slli	r2,r5,29
 800f058:	8822d0fa 	srli	r17,r17,3
 800f05c:	00c1ffc4 	movi	r3,2047
 800f060:	280ad0fa 	srli	r5,r5,3
 800f064:	1444b03a 	or	r2,r2,r17
 800f068:	80c02726 	beq	r16,r3,800f108 <__subdf3+0x2c0>
 800f06c:	01000434 	movhi	r4,16
 800f070:	213fffc4 	addi	r4,r4,-1
 800f074:	80e0703a 	and	r16,r16,r3
 800f078:	2908703a 	and	r4,r5,r4
 800f07c:	003fad06 	br	800ef34 <__ram_exceptions_end+0xf7f8ecf4>
 800f080:	0080690e 	bge	zero,r2,800f228 <__subdf3+0x3e0>
 800f084:	50002f26 	beq	r10,zero,800f144 <__subdf3+0x2fc>
 800f088:	0101ffc4 	movi	r4,2047
 800f08c:	813f9126 	beq	r16,r4,800eed4 <__ram_exceptions_end+0xf7f8ec94>
 800f090:	18c02034 	orhi	r3,r3,128
 800f094:	01000e04 	movi	r4,56
 800f098:	2080b00e 	bge	r4,r2,800f35c <__subdf3+0x514>
 800f09c:	198cb03a 	or	r6,r3,r6
 800f0a0:	300ec03a 	cmpne	r7,r6,zero
 800f0a4:	0005883a 	mov	r2,zero
 800f0a8:	3c4f883a 	add	r7,r7,r17
 800f0ac:	3c63803a 	cmpltu	r17,r7,r17
 800f0b0:	114b883a 	add	r5,r2,r5
 800f0b4:	2c4b883a 	add	r5,r5,r17
 800f0b8:	3823883a 	mov	r17,r7
 800f0bc:	2880202c 	andhi	r2,r5,128
 800f0c0:	10002e26 	beq	r2,zero,800f17c <__subdf3+0x334>
 800f0c4:	84000044 	addi	r16,r16,1
 800f0c8:	0081ffc4 	movi	r2,2047
 800f0cc:	8080de26 	beq	r16,r2,800f448 <__subdf3+0x600>
 800f0d0:	00bfe034 	movhi	r2,65408
 800f0d4:	10bfffc4 	addi	r2,r2,-1
 800f0d8:	288a703a 	and	r5,r5,r2
 800f0dc:	880cd07a 	srli	r6,r17,1
 800f0e0:	280897fa 	slli	r4,r5,31
 800f0e4:	88c0004c 	andi	r3,r17,1
 800f0e8:	30e2b03a 	or	r17,r6,r3
 800f0ec:	280ad07a 	srli	r5,r5,1
 800f0f0:	8922b03a 	or	r17,r17,r4
 800f0f4:	003f7706 	br	800eed4 <__ram_exceptions_end+0xf7f8ec94>
 800f0f8:	1984b03a 	or	r2,r3,r6
 800f0fc:	103f6e26 	beq	r2,zero,800eeb8 <__ram_exceptions_end+0xf7f8ec78>
 800f100:	39c03fcc 	andi	r7,r7,255
 800f104:	003f6d06 	br	800eebc <__ram_exceptions_end+0xf7f8ec7c>
 800f108:	1146b03a 	or	r3,r2,r5
 800f10c:	18003f26 	beq	r3,zero,800f20c <__subdf3+0x3c4>
 800f110:	00c00434 	movhi	r3,16
 800f114:	29000234 	orhi	r4,r5,8
 800f118:	18ffffc4 	addi	r3,r3,-1
 800f11c:	20c8703a 	and	r4,r4,r3
 800f120:	003f8406 	br	800ef34 <__ram_exceptions_end+0xf7f8ecf4>
 800f124:	10bfffc4 	addi	r2,r2,-1
 800f128:	1000501e 	bne	r2,zero,800f26c <__subdf3+0x424>
 800f12c:	898fc83a 	sub	r7,r17,r6
 800f130:	89e3803a 	cmpltu	r17,r17,r7
 800f134:	28cbc83a 	sub	r5,r5,r3
 800f138:	2c4bc83a 	sub	r5,r5,r17
 800f13c:	3823883a 	mov	r17,r7
 800f140:	003fa106 	br	800efc8 <__ram_exceptions_end+0xf7f8ed88>
 800f144:	1988b03a 	or	r4,r3,r6
 800f148:	203f6226 	beq	r4,zero,800eed4 <__ram_exceptions_end+0xf7f8ec94>
 800f14c:	10bfffc4 	addi	r2,r2,-1
 800f150:	10009b1e 	bne	r2,zero,800f3c0 <__subdf3+0x578>
 800f154:	344d883a 	add	r6,r6,r17
 800f158:	3463803a 	cmpltu	r17,r6,r17
 800f15c:	194b883a 	add	r5,r3,r5
 800f160:	2c4b883a 	add	r5,r5,r17
 800f164:	3023883a 	mov	r17,r6
 800f168:	003fd406 	br	800f0bc <__ram_exceptions_end+0xf7f8ee7c>
 800f16c:	1106b03a 	or	r3,r2,r4
 800f170:	1800b426 	beq	r3,zero,800f444 <__subdf3+0x5fc>
 800f174:	100b883a 	mov	r5,r2
 800f178:	2023883a 	mov	r17,r4
 800f17c:	888001cc 	andi	r2,r17,7
 800f180:	103f561e 	bne	r2,zero,800eedc <__ram_exceptions_end+0xf7f8ec9c>
 800f184:	9200004c 	andi	r8,r18,1
 800f188:	003fb206 	br	800f054 <__ram_exceptions_end+0xf7f8ee14>
 800f18c:	1000531e 	bne	r2,zero,800f2dc <__subdf3+0x494>
 800f190:	80800044 	addi	r2,r16,1
 800f194:	1081ffcc 	andi	r2,r2,2047
 800f198:	01000044 	movi	r4,1
 800f19c:	2080a00e 	bge	r4,r2,800f420 <__subdf3+0x5d8>
 800f1a0:	8985c83a 	sub	r2,r17,r6
 800f1a4:	8889803a 	cmpltu	r4,r17,r2
 800f1a8:	28e7c83a 	sub	r19,r5,r3
 800f1ac:	9927c83a 	sub	r19,r19,r4
 800f1b0:	9900202c 	andhi	r4,r19,128
 800f1b4:	20006226 	beq	r4,zero,800f340 <__subdf3+0x4f8>
 800f1b8:	3463c83a 	sub	r17,r6,r17
 800f1bc:	194bc83a 	sub	r5,r3,r5
 800f1c0:	344d803a 	cmpltu	r6,r6,r17
 800f1c4:	29a7c83a 	sub	r19,r5,r6
 800f1c8:	3825883a 	mov	r18,r7
 800f1cc:	983f841e 	bne	r19,zero,800efe0 <__ram_exceptions_end+0xf7f8eda0>
 800f1d0:	8809883a 	mov	r4,r17
 800f1d4:	8003cf80 	call	8003cf8 <__clzsi2>
 800f1d8:	10800804 	addi	r2,r2,32
 800f1dc:	10fffe04 	addi	r3,r2,-8
 800f1e0:	010007c4 	movi	r4,31
 800f1e4:	20ff830e 	bge	r4,r3,800eff4 <__ram_exceptions_end+0xf7f8edb4>
 800f1e8:	14fff604 	addi	r19,r2,-40
 800f1ec:	8ce6983a 	sll	r19,r17,r19
 800f1f0:	0023883a 	mov	r17,zero
 800f1f4:	1c3f860e 	bge	r3,r16,800f010 <__ram_exceptions_end+0xf7f8edd0>
 800f1f8:	017fe034 	movhi	r5,65408
 800f1fc:	297fffc4 	addi	r5,r5,-1
 800f200:	80e1c83a 	sub	r16,r16,r3
 800f204:	994a703a 	and	r5,r19,r5
 800f208:	003f3206 	br	800eed4 <__ram_exceptions_end+0xf7f8ec94>
 800f20c:	0009883a 	mov	r4,zero
 800f210:	0005883a 	mov	r2,zero
 800f214:	003f4706 	br	800ef34 <__ram_exceptions_end+0xf7f8ecf4>
 800f218:	198cb03a 	or	r6,r3,r6
 800f21c:	300cc03a 	cmpne	r6,r6,zero
 800f220:	0005883a 	mov	r2,zero
 800f224:	003f6306 	br	800efb4 <__ram_exceptions_end+0xf7f8ed74>
 800f228:	10009d1e 	bne	r2,zero,800f4a0 <__subdf3+0x658>
 800f22c:	81c00044 	addi	r7,r16,1
 800f230:	3881ffcc 	andi	r2,r7,2047
 800f234:	02400044 	movi	r9,1
 800f238:	4880680e 	bge	r9,r2,800f3dc <__subdf3+0x594>
 800f23c:	0081ffc4 	movi	r2,2047
 800f240:	3880ae26 	beq	r7,r2,800f4fc <__subdf3+0x6b4>
 800f244:	344d883a 	add	r6,r6,r17
 800f248:	3463803a 	cmpltu	r17,r6,r17
 800f24c:	194b883a 	add	r5,r3,r5
 800f250:	2c4b883a 	add	r5,r5,r17
 800f254:	282297fa 	slli	r17,r5,31
 800f258:	300cd07a 	srli	r6,r6,1
 800f25c:	280ad07a 	srli	r5,r5,1
 800f260:	3821883a 	mov	r16,r7
 800f264:	89a2b03a 	or	r17,r17,r6
 800f268:	003f1a06 	br	800eed4 <__ram_exceptions_end+0xf7f8ec94>
 800f26c:	0101ffc4 	movi	r4,2047
 800f270:	813f431e 	bne	r16,r4,800ef80 <__ram_exceptions_end+0xf7f8ed40>
 800f274:	003f1706 	br	800eed4 <__ram_exceptions_end+0xf7f8ec94>
 800f278:	80bff844 	addi	r2,r16,-31
 800f27c:	00c00804 	movi	r3,32
 800f280:	9884d83a 	srl	r2,r19,r2
 800f284:	28c05126 	beq	r5,r3,800f3cc <__subdf3+0x584>
 800f288:	00c00fc4 	movi	r3,63
 800f28c:	1c21c83a 	sub	r16,r3,r16
 800f290:	9c26983a 	sll	r19,r19,r16
 800f294:	9c62b03a 	or	r17,r19,r17
 800f298:	8822c03a 	cmpne	r17,r17,zero
 800f29c:	88a2b03a 	or	r17,r17,r2
 800f2a0:	000b883a 	mov	r5,zero
 800f2a4:	0021883a 	mov	r16,zero
 800f2a8:	003fb406 	br	800f17c <__ram_exceptions_end+0xf7f8ef3c>
 800f2ac:	113ff804 	addi	r4,r2,-32
 800f2b0:	01c00804 	movi	r7,32
 800f2b4:	1908d83a 	srl	r4,r3,r4
 800f2b8:	11c04626 	beq	r2,r7,800f3d4 <__subdf3+0x58c>
 800f2bc:	01c01004 	movi	r7,64
 800f2c0:	3885c83a 	sub	r2,r7,r2
 800f2c4:	1884983a 	sll	r2,r3,r2
 800f2c8:	118cb03a 	or	r6,r2,r6
 800f2cc:	300cc03a 	cmpne	r6,r6,zero
 800f2d0:	310cb03a 	or	r6,r6,r4
 800f2d4:	0005883a 	mov	r2,zero
 800f2d8:	003f3606 	br	800efb4 <__ram_exceptions_end+0xf7f8ed74>
 800f2dc:	80002b26 	beq	r16,zero,800f38c <__subdf3+0x544>
 800f2e0:	0101ffc4 	movi	r4,2047
 800f2e4:	51006926 	beq	r10,r4,800f48c <__subdf3+0x644>
 800f2e8:	0085c83a 	sub	r2,zero,r2
 800f2ec:	29402034 	orhi	r5,r5,128
 800f2f0:	01000e04 	movi	r4,56
 800f2f4:	20807d16 	blt	r4,r2,800f4ec <__subdf3+0x6a4>
 800f2f8:	010007c4 	movi	r4,31
 800f2fc:	2080d916 	blt	r4,r2,800f664 <__subdf3+0x81c>
 800f300:	01000804 	movi	r4,32
 800f304:	2089c83a 	sub	r4,r4,r2
 800f308:	2912983a 	sll	r9,r5,r4
 800f30c:	8890d83a 	srl	r8,r17,r2
 800f310:	8908983a 	sll	r4,r17,r4
 800f314:	2884d83a 	srl	r2,r5,r2
 800f318:	4a22b03a 	or	r17,r9,r8
 800f31c:	2008c03a 	cmpne	r4,r4,zero
 800f320:	8922b03a 	or	r17,r17,r4
 800f324:	3463c83a 	sub	r17,r6,r17
 800f328:	1885c83a 	sub	r2,r3,r2
 800f32c:	344d803a 	cmpltu	r6,r6,r17
 800f330:	118bc83a 	sub	r5,r2,r6
 800f334:	5021883a 	mov	r16,r10
 800f338:	3825883a 	mov	r18,r7
 800f33c:	003f2206 	br	800efc8 <__ram_exceptions_end+0xf7f8ed88>
 800f340:	9886b03a 	or	r3,r19,r2
 800f344:	18001c1e 	bne	r3,zero,800f3b8 <__subdf3+0x570>
 800f348:	0011883a 	mov	r8,zero
 800f34c:	000b883a 	mov	r5,zero
 800f350:	0023883a 	mov	r17,zero
 800f354:	0021883a 	mov	r16,zero
 800f358:	003f3e06 	br	800f054 <__ram_exceptions_end+0xf7f8ee14>
 800f35c:	010007c4 	movi	r4,31
 800f360:	20803c16 	blt	r4,r2,800f454 <__subdf3+0x60c>
 800f364:	01000804 	movi	r4,32
 800f368:	2089c83a 	sub	r4,r4,r2
 800f36c:	1912983a 	sll	r9,r3,r4
 800f370:	308ed83a 	srl	r7,r6,r2
 800f374:	3108983a 	sll	r4,r6,r4
 800f378:	1884d83a 	srl	r2,r3,r2
 800f37c:	49ceb03a 	or	r7,r9,r7
 800f380:	2008c03a 	cmpne	r4,r4,zero
 800f384:	390eb03a 	or	r7,r7,r4
 800f388:	003f4706 	br	800f0a8 <__ram_exceptions_end+0xf7f8ee68>
 800f38c:	2c48b03a 	or	r4,r5,r17
 800f390:	20003e26 	beq	r4,zero,800f48c <__subdf3+0x644>
 800f394:	0084303a 	nor	r2,zero,r2
 800f398:	10003a1e 	bne	r2,zero,800f484 <__subdf3+0x63c>
 800f39c:	3463c83a 	sub	r17,r6,r17
 800f3a0:	194bc83a 	sub	r5,r3,r5
 800f3a4:	344d803a 	cmpltu	r6,r6,r17
 800f3a8:	298bc83a 	sub	r5,r5,r6
 800f3ac:	5021883a 	mov	r16,r10
 800f3b0:	3825883a 	mov	r18,r7
 800f3b4:	003f0406 	br	800efc8 <__ram_exceptions_end+0xf7f8ed88>
 800f3b8:	1023883a 	mov	r17,r2
 800f3bc:	003f0706 	br	800efdc <__ram_exceptions_end+0xf7f8ed9c>
 800f3c0:	0101ffc4 	movi	r4,2047
 800f3c4:	813f331e 	bne	r16,r4,800f094 <__ram_exceptions_end+0xf7f8ee54>
 800f3c8:	003ec206 	br	800eed4 <__ram_exceptions_end+0xf7f8ec94>
 800f3cc:	0027883a 	mov	r19,zero
 800f3d0:	003fb006 	br	800f294 <__ram_exceptions_end+0xf7f8f054>
 800f3d4:	0005883a 	mov	r2,zero
 800f3d8:	003fbb06 	br	800f2c8 <__ram_exceptions_end+0xf7f8f088>
 800f3dc:	2c44b03a 	or	r2,r5,r17
 800f3e0:	80008b1e 	bne	r16,zero,800f610 <__subdf3+0x7c8>
 800f3e4:	1000b526 	beq	r2,zero,800f6bc <__subdf3+0x874>
 800f3e8:	1984b03a 	or	r2,r3,r6
 800f3ec:	103eb926 	beq	r2,zero,800eed4 <__ram_exceptions_end+0xf7f8ec94>
 800f3f0:	3449883a 	add	r4,r6,r17
 800f3f4:	2463803a 	cmpltu	r17,r4,r17
 800f3f8:	194b883a 	add	r5,r3,r5
 800f3fc:	2c4b883a 	add	r5,r5,r17
 800f400:	2880202c 	andhi	r2,r5,128
 800f404:	2023883a 	mov	r17,r4
 800f408:	103f5c26 	beq	r2,zero,800f17c <__ram_exceptions_end+0xf7f8ef3c>
 800f40c:	00bfe034 	movhi	r2,65408
 800f410:	10bfffc4 	addi	r2,r2,-1
 800f414:	4821883a 	mov	r16,r9
 800f418:	288a703a 	and	r5,r5,r2
 800f41c:	003ead06 	br	800eed4 <__ram_exceptions_end+0xf7f8ec94>
 800f420:	2c44b03a 	or	r2,r5,r17
 800f424:	8000291e 	bne	r16,zero,800f4cc <__subdf3+0x684>
 800f428:	10004f1e 	bne	r2,zero,800f568 <__subdf3+0x720>
 800f42c:	1984b03a 	or	r2,r3,r6
 800f430:	10000426 	beq	r2,zero,800f444 <__subdf3+0x5fc>
 800f434:	180b883a 	mov	r5,r3
 800f438:	3023883a 	mov	r17,r6
 800f43c:	3825883a 	mov	r18,r7
 800f440:	003ea406 	br	800eed4 <__ram_exceptions_end+0xf7f8ec94>
 800f444:	0011883a 	mov	r8,zero
 800f448:	000b883a 	mov	r5,zero
 800f44c:	0023883a 	mov	r17,zero
 800f450:	003f0006 	br	800f054 <__ram_exceptions_end+0xf7f8ee14>
 800f454:	11fff804 	addi	r7,r2,-32
 800f458:	19c8d83a 	srl	r4,r3,r7
 800f45c:	01c00804 	movi	r7,32
 800f460:	11c07e26 	beq	r2,r7,800f65c <__subdf3+0x814>
 800f464:	01c01004 	movi	r7,64
 800f468:	3885c83a 	sub	r2,r7,r2
 800f46c:	1884983a 	sll	r2,r3,r2
 800f470:	118cb03a 	or	r6,r2,r6
 800f474:	300ec03a 	cmpne	r7,r6,zero
 800f478:	390eb03a 	or	r7,r7,r4
 800f47c:	0005883a 	mov	r2,zero
 800f480:	003f0906 	br	800f0a8 <__ram_exceptions_end+0xf7f8ee68>
 800f484:	0101ffc4 	movi	r4,2047
 800f488:	513f991e 	bne	r10,r4,800f2f0 <__ram_exceptions_end+0xf7f8f0b0>
 800f48c:	180b883a 	mov	r5,r3
 800f490:	3023883a 	mov	r17,r6
 800f494:	5021883a 	mov	r16,r10
 800f498:	3825883a 	mov	r18,r7
 800f49c:	003e8d06 	br	800eed4 <__ram_exceptions_end+0xf7f8ec94>
 800f4a0:	80001a1e 	bne	r16,zero,800f50c <__subdf3+0x6c4>
 800f4a4:	2c48b03a 	or	r4,r5,r17
 800f4a8:	20005526 	beq	r4,zero,800f600 <__subdf3+0x7b8>
 800f4ac:	0084303a 	nor	r2,zero,r2
 800f4b0:	1000511e 	bne	r2,zero,800f5f8 <__subdf3+0x7b0>
 800f4b4:	89a3883a 	add	r17,r17,r6
 800f4b8:	194b883a 	add	r5,r3,r5
 800f4bc:	898d803a 	cmpltu	r6,r17,r6
 800f4c0:	298b883a 	add	r5,r5,r6
 800f4c4:	5021883a 	mov	r16,r10
 800f4c8:	003efc06 	br	800f0bc <__ram_exceptions_end+0xf7f8ee7c>
 800f4cc:	1000341e 	bne	r2,zero,800f5a0 <__subdf3+0x758>
 800f4d0:	1984b03a 	or	r2,r3,r6
 800f4d4:	10006f26 	beq	r2,zero,800f694 <__subdf3+0x84c>
 800f4d8:	180b883a 	mov	r5,r3
 800f4dc:	3023883a 	mov	r17,r6
 800f4e0:	3825883a 	mov	r18,r7
 800f4e4:	0401ffc4 	movi	r16,2047
 800f4e8:	003e7a06 	br	800eed4 <__ram_exceptions_end+0xf7f8ec94>
 800f4ec:	2c62b03a 	or	r17,r5,r17
 800f4f0:	8822c03a 	cmpne	r17,r17,zero
 800f4f4:	0005883a 	mov	r2,zero
 800f4f8:	003f8a06 	br	800f324 <__ram_exceptions_end+0xf7f8f0e4>
 800f4fc:	3821883a 	mov	r16,r7
 800f500:	000b883a 	mov	r5,zero
 800f504:	0023883a 	mov	r17,zero
 800f508:	003ed206 	br	800f054 <__ram_exceptions_end+0xf7f8ee14>
 800f50c:	0101ffc4 	movi	r4,2047
 800f510:	51003b26 	beq	r10,r4,800f600 <__subdf3+0x7b8>
 800f514:	0085c83a 	sub	r2,zero,r2
 800f518:	29402034 	orhi	r5,r5,128
 800f51c:	01000e04 	movi	r4,56
 800f520:	20806216 	blt	r4,r2,800f6ac <__subdf3+0x864>
 800f524:	010007c4 	movi	r4,31
 800f528:	20806b16 	blt	r4,r2,800f6d8 <__subdf3+0x890>
 800f52c:	01000804 	movi	r4,32
 800f530:	2089c83a 	sub	r4,r4,r2
 800f534:	2912983a 	sll	r9,r5,r4
 800f538:	888ed83a 	srl	r7,r17,r2
 800f53c:	8908983a 	sll	r4,r17,r4
 800f540:	2884d83a 	srl	r2,r5,r2
 800f544:	49e2b03a 	or	r17,r9,r7
 800f548:	2008c03a 	cmpne	r4,r4,zero
 800f54c:	8922b03a 	or	r17,r17,r4
 800f550:	89a3883a 	add	r17,r17,r6
 800f554:	10c5883a 	add	r2,r2,r3
 800f558:	898d803a 	cmpltu	r6,r17,r6
 800f55c:	118b883a 	add	r5,r2,r6
 800f560:	5021883a 	mov	r16,r10
 800f564:	003ed506 	br	800f0bc <__ram_exceptions_end+0xf7f8ee7c>
 800f568:	1984b03a 	or	r2,r3,r6
 800f56c:	103e5926 	beq	r2,zero,800eed4 <__ram_exceptions_end+0xf7f8ec94>
 800f570:	8989c83a 	sub	r4,r17,r6
 800f574:	8911803a 	cmpltu	r8,r17,r4
 800f578:	28c5c83a 	sub	r2,r5,r3
 800f57c:	1205c83a 	sub	r2,r2,r8
 800f580:	1200202c 	andhi	r8,r2,128
 800f584:	403ef926 	beq	r8,zero,800f16c <__ram_exceptions_end+0xf7f8ef2c>
 800f588:	3463c83a 	sub	r17,r6,r17
 800f58c:	194bc83a 	sub	r5,r3,r5
 800f590:	344d803a 	cmpltu	r6,r6,r17
 800f594:	298bc83a 	sub	r5,r5,r6
 800f598:	3825883a 	mov	r18,r7
 800f59c:	003e4d06 	br	800eed4 <__ram_exceptions_end+0xf7f8ec94>
 800f5a0:	1984b03a 	or	r2,r3,r6
 800f5a4:	10002b26 	beq	r2,zero,800f654 <__subdf3+0x80c>
 800f5a8:	2808d0fa 	srli	r4,r5,3
 800f5ac:	8822d0fa 	srli	r17,r17,3
 800f5b0:	280a977a 	slli	r5,r5,29
 800f5b4:	2080022c 	andhi	r2,r4,8
 800f5b8:	2c62b03a 	or	r17,r5,r17
 800f5bc:	10000826 	beq	r2,zero,800f5e0 <__subdf3+0x798>
 800f5c0:	1810d0fa 	srli	r8,r3,3
 800f5c4:	4080022c 	andhi	r2,r8,8
 800f5c8:	1000051e 	bne	r2,zero,800f5e0 <__subdf3+0x798>
 800f5cc:	300cd0fa 	srli	r6,r6,3
 800f5d0:	1804977a 	slli	r2,r3,29
 800f5d4:	4009883a 	mov	r4,r8
 800f5d8:	3825883a 	mov	r18,r7
 800f5dc:	11a2b03a 	or	r17,r2,r6
 800f5e0:	880ad77a 	srli	r5,r17,29
 800f5e4:	200890fa 	slli	r4,r4,3
 800f5e8:	882290fa 	slli	r17,r17,3
 800f5ec:	0401ffc4 	movi	r16,2047
 800f5f0:	290ab03a 	or	r5,r5,r4
 800f5f4:	003e3706 	br	800eed4 <__ram_exceptions_end+0xf7f8ec94>
 800f5f8:	0101ffc4 	movi	r4,2047
 800f5fc:	513fc71e 	bne	r10,r4,800f51c <__ram_exceptions_end+0xf7f8f2dc>
 800f600:	180b883a 	mov	r5,r3
 800f604:	3023883a 	mov	r17,r6
 800f608:	5021883a 	mov	r16,r10
 800f60c:	003e3106 	br	800eed4 <__ram_exceptions_end+0xf7f8ec94>
 800f610:	10002d26 	beq	r2,zero,800f6c8 <__subdf3+0x880>
 800f614:	1984b03a 	or	r2,r3,r6
 800f618:	10000e26 	beq	r2,zero,800f654 <__subdf3+0x80c>
 800f61c:	2808d0fa 	srli	r4,r5,3
 800f620:	8822d0fa 	srli	r17,r17,3
 800f624:	280a977a 	slli	r5,r5,29
 800f628:	2080022c 	andhi	r2,r4,8
 800f62c:	2c62b03a 	or	r17,r5,r17
 800f630:	103feb26 	beq	r2,zero,800f5e0 <__ram_exceptions_end+0xf7f8f3a0>
 800f634:	180ed0fa 	srli	r7,r3,3
 800f638:	3880022c 	andhi	r2,r7,8
 800f63c:	103fe81e 	bne	r2,zero,800f5e0 <__ram_exceptions_end+0xf7f8f3a0>
 800f640:	300cd0fa 	srli	r6,r6,3
 800f644:	1804977a 	slli	r2,r3,29
 800f648:	3809883a 	mov	r4,r7
 800f64c:	11a2b03a 	or	r17,r2,r6
 800f650:	003fe306 	br	800f5e0 <__ram_exceptions_end+0xf7f8f3a0>
 800f654:	0401ffc4 	movi	r16,2047
 800f658:	003e1e06 	br	800eed4 <__ram_exceptions_end+0xf7f8ec94>
 800f65c:	0005883a 	mov	r2,zero
 800f660:	003f8306 	br	800f470 <__ram_exceptions_end+0xf7f8f230>
 800f664:	113ff804 	addi	r4,r2,-32
 800f668:	02000804 	movi	r8,32
 800f66c:	2908d83a 	srl	r4,r5,r4
 800f670:	12002526 	beq	r2,r8,800f708 <__subdf3+0x8c0>
 800f674:	02001004 	movi	r8,64
 800f678:	4085c83a 	sub	r2,r8,r2
 800f67c:	288a983a 	sll	r5,r5,r2
 800f680:	2c62b03a 	or	r17,r5,r17
 800f684:	8822c03a 	cmpne	r17,r17,zero
 800f688:	8922b03a 	or	r17,r17,r4
 800f68c:	0005883a 	mov	r2,zero
 800f690:	003f2406 	br	800f324 <__ram_exceptions_end+0xf7f8f0e4>
 800f694:	01402034 	movhi	r5,128
 800f698:	0011883a 	mov	r8,zero
 800f69c:	297fffc4 	addi	r5,r5,-1
 800f6a0:	047ffe04 	movi	r17,-8
 800f6a4:	0401ffc4 	movi	r16,2047
 800f6a8:	003e6a06 	br	800f054 <__ram_exceptions_end+0xf7f8ee14>
 800f6ac:	2c62b03a 	or	r17,r5,r17
 800f6b0:	8822c03a 	cmpne	r17,r17,zero
 800f6b4:	0005883a 	mov	r2,zero
 800f6b8:	003fa506 	br	800f550 <__ram_exceptions_end+0xf7f8f310>
 800f6bc:	180b883a 	mov	r5,r3
 800f6c0:	3023883a 	mov	r17,r6
 800f6c4:	003e0306 	br	800eed4 <__ram_exceptions_end+0xf7f8ec94>
 800f6c8:	180b883a 	mov	r5,r3
 800f6cc:	3023883a 	mov	r17,r6
 800f6d0:	0401ffc4 	movi	r16,2047
 800f6d4:	003dff06 	br	800eed4 <__ram_exceptions_end+0xf7f8ec94>
 800f6d8:	113ff804 	addi	r4,r2,-32
 800f6dc:	01c00804 	movi	r7,32
 800f6e0:	2908d83a 	srl	r4,r5,r4
 800f6e4:	11c00a26 	beq	r2,r7,800f710 <__subdf3+0x8c8>
 800f6e8:	01c01004 	movi	r7,64
 800f6ec:	3885c83a 	sub	r2,r7,r2
 800f6f0:	288a983a 	sll	r5,r5,r2
 800f6f4:	2c62b03a 	or	r17,r5,r17
 800f6f8:	8822c03a 	cmpne	r17,r17,zero
 800f6fc:	8922b03a 	or	r17,r17,r4
 800f700:	0005883a 	mov	r2,zero
 800f704:	003f9206 	br	800f550 <__ram_exceptions_end+0xf7f8f310>
 800f708:	000b883a 	mov	r5,zero
 800f70c:	003fdc06 	br	800f680 <__ram_exceptions_end+0xf7f8f440>
 800f710:	000b883a 	mov	r5,zero
 800f714:	003ff706 	br	800f6f4 <__ram_exceptions_end+0xf7f8f4b4>

0800f718 <__fixdfsi>:
 800f718:	2806d53a 	srli	r3,r5,20
 800f71c:	00800434 	movhi	r2,16
 800f720:	10bfffc4 	addi	r2,r2,-1
 800f724:	18c1ffcc 	andi	r3,r3,2047
 800f728:	0180ff84 	movi	r6,1022
 800f72c:	2884703a 	and	r2,r5,r2
 800f730:	280ad7fa 	srli	r5,r5,31
 800f734:	30c0130e 	bge	r6,r3,800f784 <__fixdfsi+0x6c>
 800f738:	01810744 	movi	r6,1053
 800f73c:	30c00d16 	blt	r6,r3,800f774 <__fixdfsi+0x5c>
 800f740:	01810cc4 	movi	r6,1075
 800f744:	30cdc83a 	sub	r6,r6,r3
 800f748:	01c007c4 	movi	r7,31
 800f74c:	10800434 	orhi	r2,r2,16
 800f750:	39800e0e 	bge	r7,r6,800f78c <__fixdfsi+0x74>
 800f754:	010104c4 	movi	r4,1043
 800f758:	20c7c83a 	sub	r3,r4,r3
 800f75c:	10c6d83a 	srl	r3,r2,r3
 800f760:	29403fcc 	andi	r5,r5,255
 800f764:	0145c83a 	sub	r2,zero,r5
 800f768:	1884f03a 	xor	r2,r3,r2
 800f76c:	1145883a 	add	r2,r2,r5
 800f770:	f800283a 	ret
 800f774:	00a00034 	movhi	r2,32768
 800f778:	10bfffc4 	addi	r2,r2,-1
 800f77c:	2885883a 	add	r2,r5,r2
 800f780:	f800283a 	ret
 800f784:	0005883a 	mov	r2,zero
 800f788:	f800283a 	ret
 800f78c:	18fefb44 	addi	r3,r3,-1043
 800f790:	2188d83a 	srl	r4,r4,r6
 800f794:	10c6983a 	sll	r3,r2,r3
 800f798:	20c6b03a 	or	r3,r4,r3
 800f79c:	003ff006 	br	800f760 <__ram_exceptions_end+0xf7f8f520>

0800f7a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f7a0:	defffe04 	addi	sp,sp,-8
 800f7a4:	dfc00115 	stw	ra,4(sp)
 800f7a8:	df000015 	stw	fp,0(sp)
 800f7ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f7b0:	00820074 	movhi	r2,2049
 800f7b4:	10915204 	addi	r2,r2,17736
 800f7b8:	10800017 	ldw	r2,0(r2)
 800f7bc:	10000526 	beq	r2,zero,800f7d4 <alt_get_errno+0x34>
 800f7c0:	00820074 	movhi	r2,2049
 800f7c4:	10915204 	addi	r2,r2,17736
 800f7c8:	10800017 	ldw	r2,0(r2)
 800f7cc:	103ee83a 	callr	r2
 800f7d0:	00000206 	br	800f7dc <alt_get_errno+0x3c>
 800f7d4:	00820074 	movhi	r2,2049
 800f7d8:	10982304 	addi	r2,r2,24716
}
 800f7dc:	e037883a 	mov	sp,fp
 800f7e0:	dfc00117 	ldw	ra,4(sp)
 800f7e4:	df000017 	ldw	fp,0(sp)
 800f7e8:	dec00204 	addi	sp,sp,8
 800f7ec:	f800283a 	ret

0800f7f0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800f7f0:	defffb04 	addi	sp,sp,-20
 800f7f4:	dfc00415 	stw	ra,16(sp)
 800f7f8:	df000315 	stw	fp,12(sp)
 800f7fc:	df000304 	addi	fp,sp,12
 800f800:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800f804:	e0bfff17 	ldw	r2,-4(fp)
 800f808:	10000616 	blt	r2,zero,800f824 <close+0x34>
 800f80c:	e0bfff17 	ldw	r2,-4(fp)
 800f810:	10c00324 	muli	r3,r2,12
 800f814:	00820074 	movhi	r2,2049
 800f818:	108cc504 	addi	r2,r2,13076
 800f81c:	1885883a 	add	r2,r3,r2
 800f820:	00000106 	br	800f828 <close+0x38>
 800f824:	0005883a 	mov	r2,zero
 800f828:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800f82c:	e0bffd17 	ldw	r2,-12(fp)
 800f830:	10001926 	beq	r2,zero,800f898 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800f834:	e0bffd17 	ldw	r2,-12(fp)
 800f838:	10800017 	ldw	r2,0(r2)
 800f83c:	10800417 	ldw	r2,16(r2)
 800f840:	10000626 	beq	r2,zero,800f85c <close+0x6c>
 800f844:	e0bffd17 	ldw	r2,-12(fp)
 800f848:	10800017 	ldw	r2,0(r2)
 800f84c:	10800417 	ldw	r2,16(r2)
 800f850:	e13ffd17 	ldw	r4,-12(fp)
 800f854:	103ee83a 	callr	r2
 800f858:	00000106 	br	800f860 <close+0x70>
 800f85c:	0005883a 	mov	r2,zero
 800f860:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800f864:	e13fff17 	ldw	r4,-4(fp)
 800f868:	800feec0 	call	800feec <alt_release_fd>
    if (rval < 0)
 800f86c:	e0bffe17 	ldw	r2,-8(fp)
 800f870:	1000070e 	bge	r2,zero,800f890 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 800f874:	800f7a00 	call	800f7a0 <alt_get_errno>
 800f878:	1007883a 	mov	r3,r2
 800f87c:	e0bffe17 	ldw	r2,-8(fp)
 800f880:	0085c83a 	sub	r2,zero,r2
 800f884:	18800015 	stw	r2,0(r3)
      return -1;
 800f888:	00bfffc4 	movi	r2,-1
 800f88c:	00000706 	br	800f8ac <close+0xbc>
    }
    return 0;
 800f890:	0005883a 	mov	r2,zero
 800f894:	00000506 	br	800f8ac <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800f898:	800f7a00 	call	800f7a0 <alt_get_errno>
 800f89c:	1007883a 	mov	r3,r2
 800f8a0:	00801444 	movi	r2,81
 800f8a4:	18800015 	stw	r2,0(r3)
    return -1;
 800f8a8:	00bfffc4 	movi	r2,-1
  }
}
 800f8ac:	e037883a 	mov	sp,fp
 800f8b0:	dfc00117 	ldw	ra,4(sp)
 800f8b4:	df000017 	ldw	fp,0(sp)
 800f8b8:	dec00204 	addi	sp,sp,8
 800f8bc:	f800283a 	ret

0800f8c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800f8c0:	defffc04 	addi	sp,sp,-16
 800f8c4:	df000315 	stw	fp,12(sp)
 800f8c8:	df000304 	addi	fp,sp,12
 800f8cc:	e13ffd15 	stw	r4,-12(fp)
 800f8d0:	e17ffe15 	stw	r5,-8(fp)
 800f8d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800f8d8:	e0bfff17 	ldw	r2,-4(fp)
}
 800f8dc:	e037883a 	mov	sp,fp
 800f8e0:	df000017 	ldw	fp,0(sp)
 800f8e4:	dec00104 	addi	sp,sp,4
 800f8e8:	f800283a 	ret

0800f8ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f8ec:	defffe04 	addi	sp,sp,-8
 800f8f0:	dfc00115 	stw	ra,4(sp)
 800f8f4:	df000015 	stw	fp,0(sp)
 800f8f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f8fc:	00820074 	movhi	r2,2049
 800f900:	10915204 	addi	r2,r2,17736
 800f904:	10800017 	ldw	r2,0(r2)
 800f908:	10000526 	beq	r2,zero,800f920 <alt_get_errno+0x34>
 800f90c:	00820074 	movhi	r2,2049
 800f910:	10915204 	addi	r2,r2,17736
 800f914:	10800017 	ldw	r2,0(r2)
 800f918:	103ee83a 	callr	r2
 800f91c:	00000206 	br	800f928 <alt_get_errno+0x3c>
 800f920:	00820074 	movhi	r2,2049
 800f924:	10982304 	addi	r2,r2,24716
}
 800f928:	e037883a 	mov	sp,fp
 800f92c:	dfc00117 	ldw	ra,4(sp)
 800f930:	df000017 	ldw	fp,0(sp)
 800f934:	dec00204 	addi	sp,sp,8
 800f938:	f800283a 	ret

0800f93c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800f93c:	defffb04 	addi	sp,sp,-20
 800f940:	dfc00415 	stw	ra,16(sp)
 800f944:	df000315 	stw	fp,12(sp)
 800f948:	df000304 	addi	fp,sp,12
 800f94c:	e13ffe15 	stw	r4,-8(fp)
 800f950:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f954:	e0bffe17 	ldw	r2,-8(fp)
 800f958:	10000616 	blt	r2,zero,800f974 <fstat+0x38>
 800f95c:	e0bffe17 	ldw	r2,-8(fp)
 800f960:	10c00324 	muli	r3,r2,12
 800f964:	00820074 	movhi	r2,2049
 800f968:	108cc504 	addi	r2,r2,13076
 800f96c:	1885883a 	add	r2,r3,r2
 800f970:	00000106 	br	800f978 <fstat+0x3c>
 800f974:	0005883a 	mov	r2,zero
 800f978:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800f97c:	e0bffd17 	ldw	r2,-12(fp)
 800f980:	10001026 	beq	r2,zero,800f9c4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800f984:	e0bffd17 	ldw	r2,-12(fp)
 800f988:	10800017 	ldw	r2,0(r2)
 800f98c:	10800817 	ldw	r2,32(r2)
 800f990:	10000726 	beq	r2,zero,800f9b0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 800f994:	e0bffd17 	ldw	r2,-12(fp)
 800f998:	10800017 	ldw	r2,0(r2)
 800f99c:	10800817 	ldw	r2,32(r2)
 800f9a0:	e13ffd17 	ldw	r4,-12(fp)
 800f9a4:	e17fff17 	ldw	r5,-4(fp)
 800f9a8:	103ee83a 	callr	r2
 800f9ac:	00000a06 	br	800f9d8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800f9b0:	e0bfff17 	ldw	r2,-4(fp)
 800f9b4:	00c80004 	movi	r3,8192
 800f9b8:	10c00115 	stw	r3,4(r2)
      return 0;
 800f9bc:	0005883a 	mov	r2,zero
 800f9c0:	00000506 	br	800f9d8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800f9c4:	800f8ec0 	call	800f8ec <alt_get_errno>
 800f9c8:	1007883a 	mov	r3,r2
 800f9cc:	00801444 	movi	r2,81
 800f9d0:	18800015 	stw	r2,0(r3)
    return -1;
 800f9d4:	00bfffc4 	movi	r2,-1
  }
}
 800f9d8:	e037883a 	mov	sp,fp
 800f9dc:	dfc00117 	ldw	ra,4(sp)
 800f9e0:	df000017 	ldw	fp,0(sp)
 800f9e4:	dec00204 	addi	sp,sp,8
 800f9e8:	f800283a 	ret

0800f9ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f9ec:	defffe04 	addi	sp,sp,-8
 800f9f0:	dfc00115 	stw	ra,4(sp)
 800f9f4:	df000015 	stw	fp,0(sp)
 800f9f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f9fc:	00820074 	movhi	r2,2049
 800fa00:	10915204 	addi	r2,r2,17736
 800fa04:	10800017 	ldw	r2,0(r2)
 800fa08:	10000526 	beq	r2,zero,800fa20 <alt_get_errno+0x34>
 800fa0c:	00820074 	movhi	r2,2049
 800fa10:	10915204 	addi	r2,r2,17736
 800fa14:	10800017 	ldw	r2,0(r2)
 800fa18:	103ee83a 	callr	r2
 800fa1c:	00000206 	br	800fa28 <alt_get_errno+0x3c>
 800fa20:	00820074 	movhi	r2,2049
 800fa24:	10982304 	addi	r2,r2,24716
}
 800fa28:	e037883a 	mov	sp,fp
 800fa2c:	dfc00117 	ldw	ra,4(sp)
 800fa30:	df000017 	ldw	fp,0(sp)
 800fa34:	dec00204 	addi	sp,sp,8
 800fa38:	f800283a 	ret

0800fa3c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800fa3c:	deffed04 	addi	sp,sp,-76
 800fa40:	dfc01215 	stw	ra,72(sp)
 800fa44:	df001115 	stw	fp,68(sp)
 800fa48:	df001104 	addi	fp,sp,68
 800fa4c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800fa50:	e0bfff17 	ldw	r2,-4(fp)
 800fa54:	10000616 	blt	r2,zero,800fa70 <isatty+0x34>
 800fa58:	e0bfff17 	ldw	r2,-4(fp)
 800fa5c:	10c00324 	muli	r3,r2,12
 800fa60:	00820074 	movhi	r2,2049
 800fa64:	108cc504 	addi	r2,r2,13076
 800fa68:	1885883a 	add	r2,r3,r2
 800fa6c:	00000106 	br	800fa74 <isatty+0x38>
 800fa70:	0005883a 	mov	r2,zero
 800fa74:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800fa78:	e0bfef17 	ldw	r2,-68(fp)
 800fa7c:	10000e26 	beq	r2,zero,800fab8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800fa80:	e0bfef17 	ldw	r2,-68(fp)
 800fa84:	10800017 	ldw	r2,0(r2)
 800fa88:	10800817 	ldw	r2,32(r2)
 800fa8c:	1000021e 	bne	r2,zero,800fa98 <isatty+0x5c>
    {
      return 1;
 800fa90:	00800044 	movi	r2,1
 800fa94:	00000d06 	br	800facc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800fa98:	e0bff004 	addi	r2,fp,-64
 800fa9c:	e13fff17 	ldw	r4,-4(fp)
 800faa0:	100b883a 	mov	r5,r2
 800faa4:	800f93c0 	call	800f93c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800faa8:	e0bff117 	ldw	r2,-60(fp)
 800faac:	10880020 	cmpeqi	r2,r2,8192
 800fab0:	10803fcc 	andi	r2,r2,255
 800fab4:	00000506 	br	800facc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800fab8:	800f9ec0 	call	800f9ec <alt_get_errno>
 800fabc:	1007883a 	mov	r3,r2
 800fac0:	00801444 	movi	r2,81
 800fac4:	18800015 	stw	r2,0(r3)
    return 0;
 800fac8:	0005883a 	mov	r2,zero
  }
}
 800facc:	e037883a 	mov	sp,fp
 800fad0:	dfc00117 	ldw	ra,4(sp)
 800fad4:	df000017 	ldw	fp,0(sp)
 800fad8:	dec00204 	addi	sp,sp,8
 800fadc:	f800283a 	ret

0800fae0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800fae0:	defffc04 	addi	sp,sp,-16
 800fae4:	df000315 	stw	fp,12(sp)
 800fae8:	df000304 	addi	fp,sp,12
 800faec:	e13ffd15 	stw	r4,-12(fp)
 800faf0:	e17ffe15 	stw	r5,-8(fp)
 800faf4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800faf8:	e0fffe17 	ldw	r3,-8(fp)
 800fafc:	e0bffd17 	ldw	r2,-12(fp)
 800fb00:	18800c26 	beq	r3,r2,800fb34 <alt_load_section+0x54>
  {
    while( to != end )
 800fb04:	00000806 	br	800fb28 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800fb08:	e0bffe17 	ldw	r2,-8(fp)
 800fb0c:	10c00104 	addi	r3,r2,4
 800fb10:	e0fffe15 	stw	r3,-8(fp)
 800fb14:	e0fffd17 	ldw	r3,-12(fp)
 800fb18:	19000104 	addi	r4,r3,4
 800fb1c:	e13ffd15 	stw	r4,-12(fp)
 800fb20:	18c00017 	ldw	r3,0(r3)
 800fb24:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800fb28:	e0fffe17 	ldw	r3,-8(fp)
 800fb2c:	e0bfff17 	ldw	r2,-4(fp)
 800fb30:	18bff51e 	bne	r3,r2,800fb08 <__ram_exceptions_end+0xf7f8f8c8>
    {
      *to++ = *from++;
    }
  }
}
 800fb34:	e037883a 	mov	sp,fp
 800fb38:	df000017 	ldw	fp,0(sp)
 800fb3c:	dec00104 	addi	sp,sp,4
 800fb40:	f800283a 	ret

0800fb44 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800fb44:	defffe04 	addi	sp,sp,-8
 800fb48:	dfc00115 	stw	ra,4(sp)
 800fb4c:	df000015 	stw	fp,0(sp)
 800fb50:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800fb54:	01020074 	movhi	r4,2049
 800fb58:	21115704 	addi	r4,r4,17756
 800fb5c:	01420074 	movhi	r5,2049
 800fb60:	294a9204 	addi	r5,r5,10824
 800fb64:	01820074 	movhi	r6,2049
 800fb68:	31915704 	addi	r6,r6,17756
 800fb6c:	800fae00 	call	800fae0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800fb70:	01020034 	movhi	r4,2048
 800fb74:	21000004 	addi	r4,r4,0
 800fb78:	01440234 	movhi	r5,4104
 800fb7c:	29400804 	addi	r5,r5,32
 800fb80:	01840234 	movhi	r6,4104
 800fb84:	31809004 	addi	r6,r6,576
 800fb88:	800fae00 	call	800fae0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800fb8c:	01020074 	movhi	r4,2049
 800fb90:	2108a304 	addi	r4,r4,8844
 800fb94:	01420074 	movhi	r5,2049
 800fb98:	2948a304 	addi	r5,r5,8844
 800fb9c:	01820074 	movhi	r6,2049
 800fba0:	318a9204 	addi	r6,r6,10824
 800fba4:	800fae00 	call	800fae0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800fba8:	80111100 	call	8011110 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800fbac:	80113900 	call	8011390 <alt_icache_flush_all>
}
 800fbb0:	e037883a 	mov	sp,fp
 800fbb4:	dfc00117 	ldw	ra,4(sp)
 800fbb8:	df000017 	ldw	fp,0(sp)
 800fbbc:	dec00204 	addi	sp,sp,8
 800fbc0:	f800283a 	ret

0800fbc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800fbc4:	defffe04 	addi	sp,sp,-8
 800fbc8:	dfc00115 	stw	ra,4(sp)
 800fbcc:	df000015 	stw	fp,0(sp)
 800fbd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fbd4:	00820074 	movhi	r2,2049
 800fbd8:	10915204 	addi	r2,r2,17736
 800fbdc:	10800017 	ldw	r2,0(r2)
 800fbe0:	10000526 	beq	r2,zero,800fbf8 <alt_get_errno+0x34>
 800fbe4:	00820074 	movhi	r2,2049
 800fbe8:	10915204 	addi	r2,r2,17736
 800fbec:	10800017 	ldw	r2,0(r2)
 800fbf0:	103ee83a 	callr	r2
 800fbf4:	00000206 	br	800fc00 <alt_get_errno+0x3c>
 800fbf8:	00820074 	movhi	r2,2049
 800fbfc:	10982304 	addi	r2,r2,24716
}
 800fc00:	e037883a 	mov	sp,fp
 800fc04:	dfc00117 	ldw	ra,4(sp)
 800fc08:	df000017 	ldw	fp,0(sp)
 800fc0c:	dec00204 	addi	sp,sp,8
 800fc10:	f800283a 	ret

0800fc14 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800fc14:	defff904 	addi	sp,sp,-28
 800fc18:	dfc00615 	stw	ra,24(sp)
 800fc1c:	df000515 	stw	fp,20(sp)
 800fc20:	df000504 	addi	fp,sp,20
 800fc24:	e13ffd15 	stw	r4,-12(fp)
 800fc28:	e17ffe15 	stw	r5,-8(fp)
 800fc2c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800fc30:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800fc34:	e0bffd17 	ldw	r2,-12(fp)
 800fc38:	10000616 	blt	r2,zero,800fc54 <lseek+0x40>
 800fc3c:	e0bffd17 	ldw	r2,-12(fp)
 800fc40:	10c00324 	muli	r3,r2,12
 800fc44:	00820074 	movhi	r2,2049
 800fc48:	108cc504 	addi	r2,r2,13076
 800fc4c:	1885883a 	add	r2,r3,r2
 800fc50:	00000106 	br	800fc58 <lseek+0x44>
 800fc54:	0005883a 	mov	r2,zero
 800fc58:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800fc5c:	e0bffc17 	ldw	r2,-16(fp)
 800fc60:	10001026 	beq	r2,zero,800fca4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800fc64:	e0bffc17 	ldw	r2,-16(fp)
 800fc68:	10800017 	ldw	r2,0(r2)
 800fc6c:	10800717 	ldw	r2,28(r2)
 800fc70:	10000926 	beq	r2,zero,800fc98 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800fc74:	e0bffc17 	ldw	r2,-16(fp)
 800fc78:	10800017 	ldw	r2,0(r2)
 800fc7c:	10800717 	ldw	r2,28(r2)
 800fc80:	e13ffc17 	ldw	r4,-16(fp)
 800fc84:	e17ffe17 	ldw	r5,-8(fp)
 800fc88:	e1bfff17 	ldw	r6,-4(fp)
 800fc8c:	103ee83a 	callr	r2
 800fc90:	e0bffb15 	stw	r2,-20(fp)
 800fc94:	00000506 	br	800fcac <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800fc98:	00bfde84 	movi	r2,-134
 800fc9c:	e0bffb15 	stw	r2,-20(fp)
 800fca0:	00000206 	br	800fcac <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 800fca4:	00bfebc4 	movi	r2,-81
 800fca8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800fcac:	e0bffb17 	ldw	r2,-20(fp)
 800fcb0:	1000070e 	bge	r2,zero,800fcd0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 800fcb4:	800fbc40 	call	800fbc4 <alt_get_errno>
 800fcb8:	1007883a 	mov	r3,r2
 800fcbc:	e0bffb17 	ldw	r2,-20(fp)
 800fcc0:	0085c83a 	sub	r2,zero,r2
 800fcc4:	18800015 	stw	r2,0(r3)
    rc = -1;
 800fcc8:	00bfffc4 	movi	r2,-1
 800fccc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800fcd0:	e0bffb17 	ldw	r2,-20(fp)
}
 800fcd4:	e037883a 	mov	sp,fp
 800fcd8:	dfc00117 	ldw	ra,4(sp)
 800fcdc:	df000017 	ldw	fp,0(sp)
 800fce0:	dec00204 	addi	sp,sp,8
 800fce4:	f800283a 	ret

0800fce8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800fce8:	defffd04 	addi	sp,sp,-12
 800fcec:	dfc00215 	stw	ra,8(sp)
 800fcf0:	df000115 	stw	fp,4(sp)
 800fcf4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800fcf8:	0009883a 	mov	r4,zero
 800fcfc:	80105080 	call	8010508 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800fd00:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800fd04:	801053c0 	call	801053c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800fd08:	01020074 	movhi	r4,2049
 800fd0c:	210a8804 	addi	r4,r4,10784
 800fd10:	01420074 	movhi	r5,2049
 800fd14:	294a8804 	addi	r5,r5,10784
 800fd18:	01820074 	movhi	r6,2049
 800fd1c:	318a8804 	addi	r6,r6,10784
 800fd20:	80117500 	call	8011750 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800fd24:	80112480 	call	8011248 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800fd28:	01020074 	movhi	r4,2049
 800fd2c:	2104a904 	addi	r4,r4,4772
 800fd30:	8011ee80 	call	8011ee8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800fd34:	d126e717 	ldw	r4,-25700(gp)
 800fd38:	d0e6e817 	ldw	r3,-25696(gp)
 800fd3c:	d0a6e917 	ldw	r2,-25692(gp)
 800fd40:	180b883a 	mov	r5,r3
 800fd44:	100d883a 	mov	r6,r2
 800fd48:	8002dfc0 	call	8002dfc <main>
 800fd4c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800fd50:	01000044 	movi	r4,1
 800fd54:	800f7f00 	call	800f7f0 <close>
  exit (result);
 800fd58:	e13fff17 	ldw	r4,-4(fp)
 800fd5c:	8011efc0 	call	8011efc <exit>

0800fd60 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800fd60:	defffe04 	addi	sp,sp,-8
 800fd64:	df000115 	stw	fp,4(sp)
 800fd68:	df000104 	addi	fp,sp,4
 800fd6c:	e13fff15 	stw	r4,-4(fp)
}
 800fd70:	e037883a 	mov	sp,fp
 800fd74:	df000017 	ldw	fp,0(sp)
 800fd78:	dec00104 	addi	sp,sp,4
 800fd7c:	f800283a 	ret

0800fd80 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800fd80:	defffe04 	addi	sp,sp,-8
 800fd84:	df000115 	stw	fp,4(sp)
 800fd88:	df000104 	addi	fp,sp,4
 800fd8c:	e13fff15 	stw	r4,-4(fp)
}
 800fd90:	e037883a 	mov	sp,fp
 800fd94:	df000017 	ldw	fp,0(sp)
 800fd98:	dec00104 	addi	sp,sp,4
 800fd9c:	f800283a 	ret

0800fda0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800fda0:	defffe04 	addi	sp,sp,-8
 800fda4:	dfc00115 	stw	ra,4(sp)
 800fda8:	df000015 	stw	fp,0(sp)
 800fdac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fdb0:	00820074 	movhi	r2,2049
 800fdb4:	10915204 	addi	r2,r2,17736
 800fdb8:	10800017 	ldw	r2,0(r2)
 800fdbc:	10000526 	beq	r2,zero,800fdd4 <alt_get_errno+0x34>
 800fdc0:	00820074 	movhi	r2,2049
 800fdc4:	10915204 	addi	r2,r2,17736
 800fdc8:	10800017 	ldw	r2,0(r2)
 800fdcc:	103ee83a 	callr	r2
 800fdd0:	00000206 	br	800fddc <alt_get_errno+0x3c>
 800fdd4:	00820074 	movhi	r2,2049
 800fdd8:	10982304 	addi	r2,r2,24716
}
 800fddc:	e037883a 	mov	sp,fp
 800fde0:	dfc00117 	ldw	ra,4(sp)
 800fde4:	df000017 	ldw	fp,0(sp)
 800fde8:	dec00204 	addi	sp,sp,8
 800fdec:	f800283a 	ret

0800fdf0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800fdf0:	defff904 	addi	sp,sp,-28
 800fdf4:	dfc00615 	stw	ra,24(sp)
 800fdf8:	df000515 	stw	fp,20(sp)
 800fdfc:	df000504 	addi	fp,sp,20
 800fe00:	e13ffd15 	stw	r4,-12(fp)
 800fe04:	e17ffe15 	stw	r5,-8(fp)
 800fe08:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800fe0c:	e0bffd17 	ldw	r2,-12(fp)
 800fe10:	10000616 	blt	r2,zero,800fe2c <read+0x3c>
 800fe14:	e0bffd17 	ldw	r2,-12(fp)
 800fe18:	10c00324 	muli	r3,r2,12
 800fe1c:	00820074 	movhi	r2,2049
 800fe20:	108cc504 	addi	r2,r2,13076
 800fe24:	1885883a 	add	r2,r3,r2
 800fe28:	00000106 	br	800fe30 <read+0x40>
 800fe2c:	0005883a 	mov	r2,zero
 800fe30:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800fe34:	e0bffb17 	ldw	r2,-20(fp)
 800fe38:	10002226 	beq	r2,zero,800fec4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800fe3c:	e0bffb17 	ldw	r2,-20(fp)
 800fe40:	10800217 	ldw	r2,8(r2)
 800fe44:	108000cc 	andi	r2,r2,3
 800fe48:	10800060 	cmpeqi	r2,r2,1
 800fe4c:	1000181e 	bne	r2,zero,800feb0 <read+0xc0>
        (fd->dev->read))
 800fe50:	e0bffb17 	ldw	r2,-20(fp)
 800fe54:	10800017 	ldw	r2,0(r2)
 800fe58:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800fe5c:	10001426 	beq	r2,zero,800feb0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800fe60:	e0bffb17 	ldw	r2,-20(fp)
 800fe64:	10800017 	ldw	r2,0(r2)
 800fe68:	10800517 	ldw	r2,20(r2)
 800fe6c:	e0ffff17 	ldw	r3,-4(fp)
 800fe70:	e13ffb17 	ldw	r4,-20(fp)
 800fe74:	e17ffe17 	ldw	r5,-8(fp)
 800fe78:	180d883a 	mov	r6,r3
 800fe7c:	103ee83a 	callr	r2
 800fe80:	e0bffc15 	stw	r2,-16(fp)
 800fe84:	e0bffc17 	ldw	r2,-16(fp)
 800fe88:	1000070e 	bge	r2,zero,800fea8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 800fe8c:	800fda00 	call	800fda0 <alt_get_errno>
 800fe90:	1007883a 	mov	r3,r2
 800fe94:	e0bffc17 	ldw	r2,-16(fp)
 800fe98:	0085c83a 	sub	r2,zero,r2
 800fe9c:	18800015 	stw	r2,0(r3)
          return -1;
 800fea0:	00bfffc4 	movi	r2,-1
 800fea4:	00000c06 	br	800fed8 <read+0xe8>
        }
        return rval;
 800fea8:	e0bffc17 	ldw	r2,-16(fp)
 800feac:	00000a06 	br	800fed8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800feb0:	800fda00 	call	800fda0 <alt_get_errno>
 800feb4:	1007883a 	mov	r3,r2
 800feb8:	00800344 	movi	r2,13
 800febc:	18800015 	stw	r2,0(r3)
 800fec0:	00000406 	br	800fed4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800fec4:	800fda00 	call	800fda0 <alt_get_errno>
 800fec8:	1007883a 	mov	r3,r2
 800fecc:	00801444 	movi	r2,81
 800fed0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800fed4:	00bfffc4 	movi	r2,-1
}
 800fed8:	e037883a 	mov	sp,fp
 800fedc:	dfc00117 	ldw	ra,4(sp)
 800fee0:	df000017 	ldw	fp,0(sp)
 800fee4:	dec00204 	addi	sp,sp,8
 800fee8:	f800283a 	ret

0800feec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800feec:	defffe04 	addi	sp,sp,-8
 800fef0:	df000115 	stw	fp,4(sp)
 800fef4:	df000104 	addi	fp,sp,4
 800fef8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800fefc:	e0bfff17 	ldw	r2,-4(fp)
 800ff00:	108000d0 	cmplti	r2,r2,3
 800ff04:	10000d1e 	bne	r2,zero,800ff3c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 800ff08:	00820074 	movhi	r2,2049
 800ff0c:	108cc504 	addi	r2,r2,13076
 800ff10:	e0ffff17 	ldw	r3,-4(fp)
 800ff14:	18c00324 	muli	r3,r3,12
 800ff18:	10c5883a 	add	r2,r2,r3
 800ff1c:	10800204 	addi	r2,r2,8
 800ff20:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800ff24:	00820074 	movhi	r2,2049
 800ff28:	108cc504 	addi	r2,r2,13076
 800ff2c:	e0ffff17 	ldw	r3,-4(fp)
 800ff30:	18c00324 	muli	r3,r3,12
 800ff34:	10c5883a 	add	r2,r2,r3
 800ff38:	10000015 	stw	zero,0(r2)
  }
}
 800ff3c:	e037883a 	mov	sp,fp
 800ff40:	df000017 	ldw	fp,0(sp)
 800ff44:	dec00104 	addi	sp,sp,4
 800ff48:	f800283a 	ret

0800ff4c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800ff4c:	defff904 	addi	sp,sp,-28
 800ff50:	df000615 	stw	fp,24(sp)
 800ff54:	df000604 	addi	fp,sp,24
 800ff58:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ff5c:	0005303a 	rdctl	r2,status
 800ff60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ff64:	e0fffc17 	ldw	r3,-16(fp)
 800ff68:	00bfff84 	movi	r2,-2
 800ff6c:	1884703a 	and	r2,r3,r2
 800ff70:	1001703a 	wrctl	status,r2
  
  return context;
 800ff74:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800ff78:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800ff7c:	d0a01617 	ldw	r2,-32680(gp)
 800ff80:	10c000c4 	addi	r3,r2,3
 800ff84:	00bfff04 	movi	r2,-4
 800ff88:	1884703a 	and	r2,r3,r2
 800ff8c:	d0a01615 	stw	r2,-32680(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800ff90:	d0e01617 	ldw	r3,-32680(gp)
 800ff94:	e0bfff17 	ldw	r2,-4(fp)
 800ff98:	1887883a 	add	r3,r3,r2
 800ff9c:	00840034 	movhi	r2,4096
 800ffa0:	10800004 	addi	r2,r2,0
 800ffa4:	10c0062e 	bgeu	r2,r3,800ffc0 <sbrk+0x74>
 800ffa8:	e0bffa17 	ldw	r2,-24(fp)
 800ffac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ffb0:	e0bffd17 	ldw	r2,-12(fp)
 800ffb4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800ffb8:	00bfffc4 	movi	r2,-1
 800ffbc:	00000b06 	br	800ffec <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800ffc0:	d0a01617 	ldw	r2,-32680(gp)
 800ffc4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800ffc8:	d0e01617 	ldw	r3,-32680(gp)
 800ffcc:	e0bfff17 	ldw	r2,-4(fp)
 800ffd0:	1885883a 	add	r2,r3,r2
 800ffd4:	d0a01615 	stw	r2,-32680(gp)
 800ffd8:	e0bffa17 	ldw	r2,-24(fp)
 800ffdc:	e0bffe15 	stw	r2,-8(fp)
 800ffe0:	e0bffe17 	ldw	r2,-8(fp)
 800ffe4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800ffe8:	e0bffb17 	ldw	r2,-20(fp)
} 
 800ffec:	e037883a 	mov	sp,fp
 800fff0:	df000017 	ldw	fp,0(sp)
 800fff4:	dec00104 	addi	sp,sp,4
 800fff8:	f800283a 	ret

0800fffc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800fffc:	defffe04 	addi	sp,sp,-8
 8010000:	dfc00115 	stw	ra,4(sp)
 8010004:	df000015 	stw	fp,0(sp)
 8010008:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801000c:	00820074 	movhi	r2,2049
 8010010:	10915204 	addi	r2,r2,17736
 8010014:	10800017 	ldw	r2,0(r2)
 8010018:	10000526 	beq	r2,zero,8010030 <alt_get_errno+0x34>
 801001c:	00820074 	movhi	r2,2049
 8010020:	10915204 	addi	r2,r2,17736
 8010024:	10800017 	ldw	r2,0(r2)
 8010028:	103ee83a 	callr	r2
 801002c:	00000206 	br	8010038 <alt_get_errno+0x3c>
 8010030:	00820074 	movhi	r2,2049
 8010034:	10982304 	addi	r2,r2,24716
}
 8010038:	e037883a 	mov	sp,fp
 801003c:	dfc00117 	ldw	ra,4(sp)
 8010040:	df000017 	ldw	fp,0(sp)
 8010044:	dec00204 	addi	sp,sp,8
 8010048:	f800283a 	ret

0801004c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 801004c:	defff904 	addi	sp,sp,-28
 8010050:	dfc00615 	stw	ra,24(sp)
 8010054:	df000515 	stw	fp,20(sp)
 8010058:	df000504 	addi	fp,sp,20
 801005c:	e13ffd15 	stw	r4,-12(fp)
 8010060:	e17ffe15 	stw	r5,-8(fp)
 8010064:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8010068:	e0bffd17 	ldw	r2,-12(fp)
 801006c:	10000616 	blt	r2,zero,8010088 <write+0x3c>
 8010070:	e0bffd17 	ldw	r2,-12(fp)
 8010074:	10c00324 	muli	r3,r2,12
 8010078:	00820074 	movhi	r2,2049
 801007c:	108cc504 	addi	r2,r2,13076
 8010080:	1885883a 	add	r2,r3,r2
 8010084:	00000106 	br	801008c <write+0x40>
 8010088:	0005883a 	mov	r2,zero
 801008c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8010090:	e0bffb17 	ldw	r2,-20(fp)
 8010094:	10002126 	beq	r2,zero,801011c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8010098:	e0bffb17 	ldw	r2,-20(fp)
 801009c:	10800217 	ldw	r2,8(r2)
 80100a0:	108000cc 	andi	r2,r2,3
 80100a4:	10001826 	beq	r2,zero,8010108 <write+0xbc>
 80100a8:	e0bffb17 	ldw	r2,-20(fp)
 80100ac:	10800017 	ldw	r2,0(r2)
 80100b0:	10800617 	ldw	r2,24(r2)
 80100b4:	10001426 	beq	r2,zero,8010108 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 80100b8:	e0bffb17 	ldw	r2,-20(fp)
 80100bc:	10800017 	ldw	r2,0(r2)
 80100c0:	10800617 	ldw	r2,24(r2)
 80100c4:	e0ffff17 	ldw	r3,-4(fp)
 80100c8:	e13ffb17 	ldw	r4,-20(fp)
 80100cc:	e17ffe17 	ldw	r5,-8(fp)
 80100d0:	180d883a 	mov	r6,r3
 80100d4:	103ee83a 	callr	r2
 80100d8:	e0bffc15 	stw	r2,-16(fp)
 80100dc:	e0bffc17 	ldw	r2,-16(fp)
 80100e0:	1000070e 	bge	r2,zero,8010100 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 80100e4:	800fffc0 	call	800fffc <alt_get_errno>
 80100e8:	1007883a 	mov	r3,r2
 80100ec:	e0bffc17 	ldw	r2,-16(fp)
 80100f0:	0085c83a 	sub	r2,zero,r2
 80100f4:	18800015 	stw	r2,0(r3)
        return -1;
 80100f8:	00bfffc4 	movi	r2,-1
 80100fc:	00000c06 	br	8010130 <write+0xe4>
      }
      return rval;
 8010100:	e0bffc17 	ldw	r2,-16(fp)
 8010104:	00000a06 	br	8010130 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8010108:	800fffc0 	call	800fffc <alt_get_errno>
 801010c:	1007883a 	mov	r3,r2
 8010110:	00800344 	movi	r2,13
 8010114:	18800015 	stw	r2,0(r3)
 8010118:	00000406 	br	801012c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 801011c:	800fffc0 	call	800fffc <alt_get_errno>
 8010120:	1007883a 	mov	r3,r2
 8010124:	00801444 	movi	r2,81
 8010128:	18800015 	stw	r2,0(r3)
  }
  return -1;
 801012c:	00bfffc4 	movi	r2,-1
}
 8010130:	e037883a 	mov	sp,fp
 8010134:	dfc00117 	ldw	ra,4(sp)
 8010138:	df000017 	ldw	fp,0(sp)
 801013c:	dec00204 	addi	sp,sp,8
 8010140:	f800283a 	ret

08010144 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 8010144:	defffd04 	addi	sp,sp,-12
 8010148:	df000215 	stw	fp,8(sp)
 801014c:	df000204 	addi	fp,sp,8
 8010150:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 8010154:	e0bfff17 	ldw	r2,-4(fp)
 8010158:	10800a17 	ldw	r2,40(r2)
 801015c:	10800104 	addi	r2,r2,4
 8010160:	10800037 	ldwio	r2,0(r2)
 8010164:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 8010168:	e0bffe17 	ldw	r2,-8(fp)
 801016c:	10800054 	ori	r2,r2,1
 8010170:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 8010174:	e0bfff17 	ldw	r2,-4(fp)
 8010178:	10800a17 	ldw	r2,40(r2)
 801017c:	10800104 	addi	r2,r2,4
 8010180:	1007883a 	mov	r3,r2
 8010184:	e0bffe17 	ldw	r2,-8(fp)
 8010188:	18800035 	stwio	r2,0(r3)
}
 801018c:	e037883a 	mov	sp,fp
 8010190:	df000017 	ldw	fp,0(sp)
 8010194:	dec00104 	addi	sp,sp,4
 8010198:	f800283a 	ret

0801019c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 801019c:	defffd04 	addi	sp,sp,-12
 80101a0:	df000215 	stw	fp,8(sp)
 80101a4:	df000204 	addi	fp,sp,8
 80101a8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 80101ac:	e0bfff17 	ldw	r2,-4(fp)
 80101b0:	10800a17 	ldw	r2,40(r2)
 80101b4:	10800104 	addi	r2,r2,4
 80101b8:	10800037 	ldwio	r2,0(r2)
 80101bc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 80101c0:	e0fffe17 	ldw	r3,-8(fp)
 80101c4:	00bfff84 	movi	r2,-2
 80101c8:	1884703a 	and	r2,r3,r2
 80101cc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 80101d0:	e0bfff17 	ldw	r2,-4(fp)
 80101d4:	10800a17 	ldw	r2,40(r2)
 80101d8:	10800104 	addi	r2,r2,4
 80101dc:	1007883a 	mov	r3,r2
 80101e0:	e0bffe17 	ldw	r2,-8(fp)
 80101e4:	18800035 	stwio	r2,0(r3)
}
 80101e8:	e037883a 	mov	sp,fp
 80101ec:	df000017 	ldw	fp,0(sp)
 80101f0:	dec00104 	addi	sp,sp,4
 80101f4:	f800283a 	ret

080101f8 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 80101f8:	defffd04 	addi	sp,sp,-12
 80101fc:	df000215 	stw	fp,8(sp)
 8010200:	df000204 	addi	fp,sp,8
 8010204:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 8010208:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 801020c:	e0bfff17 	ldw	r2,-4(fp)
 8010210:	10800a17 	ldw	r2,40(r2)
 8010214:	10800084 	addi	r2,r2,2
 8010218:	1080002b 	ldhuio	r2,0(r2)
 801021c:	10bfffcc 	andi	r2,r2,65535
 8010220:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 8010224:	e0bffe0b 	ldhu	r2,-8(fp)
}
 8010228:	e037883a 	mov	sp,fp
 801022c:	df000017 	ldw	fp,0(sp)
 8010230:	dec00104 	addi	sp,sp,4
 8010234:	f800283a 	ret

08010238 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 8010238:	defffd04 	addi	sp,sp,-12
 801023c:	df000215 	stw	fp,8(sp)
 8010240:	df000204 	addi	fp,sp,8
 8010244:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 8010248:	e0bfff17 	ldw	r2,-4(fp)
 801024c:	10800a17 	ldw	r2,40(r2)
 8010250:	10800104 	addi	r2,r2,4
 8010254:	10800037 	ldwio	r2,0(r2)
 8010258:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 801025c:	e0bffe17 	ldw	r2,-8(fp)
 8010260:	1004d43a 	srli	r2,r2,16
}
 8010264:	e037883a 	mov	sp,fp
 8010268:	df000017 	ldw	fp,0(sp)
 801026c:	dec00104 	addi	sp,sp,4
 8010270:	f800283a 	ret

08010274 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 8010274:	defffd04 	addi	sp,sp,-12
 8010278:	df000215 	stw	fp,8(sp)
 801027c:	df000204 	addi	fp,sp,8
 8010280:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 8010284:	e0bfff17 	ldw	r2,-4(fp)
 8010288:	1080800c 	andi	r2,r2,512
 801028c:	1004d27a 	srli	r2,r2,9
 8010290:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
 8010294:	e0bffe17 	ldw	r2,-8(fp)
 8010298:	10000226 	beq	r2,zero,80102a4 <alt_up_rs232_check_parity+0x30>
 801029c:	00bfffc4 	movi	r2,-1
 80102a0:	00000106 	br	80102a8 <alt_up_rs232_check_parity+0x34>
 80102a4:	0005883a 	mov	r2,zero
}
 80102a8:	e037883a 	mov	sp,fp
 80102ac:	df000017 	ldw	fp,0(sp)
 80102b0:	dec00104 	addi	sp,sp,4
 80102b4:	f800283a 	ret

080102b8 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 80102b8:	defffd04 	addi	sp,sp,-12
 80102bc:	df000215 	stw	fp,8(sp)
 80102c0:	df000204 	addi	fp,sp,8
 80102c4:	e13ffe15 	stw	r4,-8(fp)
 80102c8:	2805883a 	mov	r2,r5
 80102cc:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 80102d0:	e0bffe17 	ldw	r2,-8(fp)
 80102d4:	10800a17 	ldw	r2,40(r2)
 80102d8:	1007883a 	mov	r3,r2
 80102dc:	e0bfff03 	ldbu	r2,-4(fp)
 80102e0:	18800035 	stwio	r2,0(r3)
	return 0;
 80102e4:	0005883a 	mov	r2,zero
}
 80102e8:	e037883a 	mov	sp,fp
 80102ec:	df000017 	ldw	fp,0(sp)
 80102f0:	dec00104 	addi	sp,sp,4
 80102f4:	f800283a 	ret

080102f8 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 80102f8:	defffa04 	addi	sp,sp,-24
 80102fc:	dfc00515 	stw	ra,20(sp)
 8010300:	df000415 	stw	fp,16(sp)
 8010304:	df000404 	addi	fp,sp,16
 8010308:	e13ffd15 	stw	r4,-12(fp)
 801030c:	e17ffe15 	stw	r5,-8(fp)
 8010310:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 8010314:	e0bffd17 	ldw	r2,-12(fp)
 8010318:	10800a17 	ldw	r2,40(r2)
 801031c:	10800037 	ldwio	r2,0(r2)
 8010320:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 8010324:	e0bffc17 	ldw	r2,-16(fp)
 8010328:	1007883a 	mov	r3,r2
 801032c:	e0bffe17 	ldw	r2,-8(fp)
 8010330:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 8010334:	e13ffc17 	ldw	r4,-16(fp)
 8010338:	80102740 	call	8010274 <alt_up_rs232_check_parity>
 801033c:	1007883a 	mov	r3,r2
 8010340:	e0bfff17 	ldw	r2,-4(fp)
 8010344:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 8010348:	e0bffc17 	ldw	r2,-16(fp)
 801034c:	10a0000c 	andi	r2,r2,32768
 8010350:	1004d3fa 	srli	r2,r2,15
 8010354:	10bfffc4 	addi	r2,r2,-1
}
 8010358:	e037883a 	mov	sp,fp
 801035c:	dfc00117 	ldw	ra,4(sp)
 8010360:	df000017 	ldw	fp,0(sp)
 8010364:	dec00204 	addi	sp,sp,8
 8010368:	f800283a 	ret

0801036c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 801036c:	defff804 	addi	sp,sp,-32
 8010370:	dfc00715 	stw	ra,28(sp)
 8010374:	df000615 	stw	fp,24(sp)
 8010378:	df000604 	addi	fp,sp,24
 801037c:	e13ffd15 	stw	r4,-12(fp)
 8010380:	e17ffe15 	stw	r5,-8(fp)
 8010384:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 8010388:	e0bffd17 	ldw	r2,-12(fp)
 801038c:	10800017 	ldw	r2,0(r2)
 8010390:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 8010394:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 8010398:	00000e06 	br	80103d4 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
 801039c:	e0bffe17 	ldw	r2,-8(fp)
 80103a0:	10c00044 	addi	r3,r2,1
 80103a4:	e0fffe15 	stw	r3,-8(fp)
 80103a8:	e0fffc04 	addi	r3,fp,-16
 80103ac:	e13ffb17 	ldw	r4,-20(fp)
 80103b0:	100b883a 	mov	r5,r2
 80103b4:	180d883a 	mov	r6,r3
 80103b8:	80102f80 	call	80102f8 <alt_up_rs232_read_data>
 80103bc:	1000041e 	bne	r2,zero,80103d0 <alt_up_rs232_read_fd+0x64>
			count++;
 80103c0:	e0bffa17 	ldw	r2,-24(fp)
 80103c4:	10800044 	addi	r2,r2,1
 80103c8:	e0bffa15 	stw	r2,-24(fp)
 80103cc:	00000106 	br	80103d4 <alt_up_rs232_read_fd+0x68>
		else
			break;
 80103d0:	00000406 	br	80103e4 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 80103d4:	e0bfff17 	ldw	r2,-4(fp)
 80103d8:	10ffffc4 	addi	r3,r2,-1
 80103dc:	e0ffff15 	stw	r3,-4(fp)
 80103e0:	103fee1e 	bne	r2,zero,801039c <__ram_exceptions_end+0xf7f9015c>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 80103e4:	e0bffa17 	ldw	r2,-24(fp)
}
 80103e8:	e037883a 	mov	sp,fp
 80103ec:	dfc00117 	ldw	ra,4(sp)
 80103f0:	df000017 	ldw	fp,0(sp)
 80103f4:	dec00204 	addi	sp,sp,8
 80103f8:	f800283a 	ret

080103fc <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 80103fc:	defff904 	addi	sp,sp,-28
 8010400:	dfc00615 	stw	ra,24(sp)
 8010404:	df000515 	stw	fp,20(sp)
 8010408:	df000504 	addi	fp,sp,20
 801040c:	e13ffd15 	stw	r4,-12(fp)
 8010410:	e17ffe15 	stw	r5,-8(fp)
 8010414:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 8010418:	e0bffd17 	ldw	r2,-12(fp)
 801041c:	10800017 	ldw	r2,0(r2)
 8010420:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 8010424:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 8010428:	00000f06 	br	8010468 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 801042c:	e0bffe17 	ldw	r2,-8(fp)
 8010430:	10800003 	ldbu	r2,0(r2)
 8010434:	10803fcc 	andi	r2,r2,255
 8010438:	e13ffc17 	ldw	r4,-16(fp)
 801043c:	100b883a 	mov	r5,r2
 8010440:	80102b80 	call	80102b8 <alt_up_rs232_write_data>
 8010444:	1000071e 	bne	r2,zero,8010464 <alt_up_rs232_write_fd+0x68>
		{
			count++;
 8010448:	e0bffb17 	ldw	r2,-20(fp)
 801044c:	10800044 	addi	r2,r2,1
 8010450:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 8010454:	e0bffe17 	ldw	r2,-8(fp)
 8010458:	10800044 	addi	r2,r2,1
 801045c:	e0bffe15 	stw	r2,-8(fp)
 8010460:	00000106 	br	8010468 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
 8010464:	00000406 	br	8010478 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 8010468:	e0bfff17 	ldw	r2,-4(fp)
 801046c:	10ffffc4 	addi	r3,r2,-1
 8010470:	e0ffff15 	stw	r3,-4(fp)
 8010474:	103fed1e 	bne	r2,zero,801042c <__ram_exceptions_end+0xf7f901ec>
			ptr++;
		}
		else
			break;
	}
	return count;
 8010478:	e0bffb17 	ldw	r2,-20(fp)
}
 801047c:	e037883a 	mov	sp,fp
 8010480:	dfc00117 	ldw	ra,4(sp)
 8010484:	df000017 	ldw	fp,0(sp)
 8010488:	dec00204 	addi	sp,sp,8
 801048c:	f800283a 	ret

08010490 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 8010490:	defffc04 	addi	sp,sp,-16
 8010494:	dfc00315 	stw	ra,12(sp)
 8010498:	df000215 	stw	fp,8(sp)
 801049c:	df000204 	addi	fp,sp,8
 80104a0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 80104a4:	e13fff17 	ldw	r4,-4(fp)
 80104a8:	01420074 	movhi	r5,2049
 80104ac:	29514f04 	addi	r5,r5,17724
 80104b0:	80113000 	call	8011300 <alt_find_dev>
 80104b4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 80104b8:	e0bffe17 	ldw	r2,-8(fp)
}
 80104bc:	e037883a 	mov	sp,fp
 80104c0:	dfc00117 	ldw	ra,4(sp)
 80104c4:	df000017 	ldw	fp,0(sp)
 80104c8:	dec00204 	addi	sp,sp,8
 80104cc:	f800283a 	ret

080104d0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 80104d0:	defffd04 	addi	sp,sp,-12
 80104d4:	dfc00215 	stw	ra,8(sp)
 80104d8:	df000115 	stw	fp,4(sp)
 80104dc:	df000104 	addi	fp,sp,4
 80104e0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 80104e4:	e13fff17 	ldw	r4,-4(fp)
 80104e8:	01420074 	movhi	r5,2049
 80104ec:	29514f04 	addi	r5,r5,17724
 80104f0:	80111a40 	call	80111a4 <alt_dev_llist_insert>
}
 80104f4:	e037883a 	mov	sp,fp
 80104f8:	dfc00117 	ldw	ra,4(sp)
 80104fc:	df000017 	ldw	fp,0(sp)
 8010500:	dec00204 	addi	sp,sp,8
 8010504:	f800283a 	ret

08010508 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8010508:	defffd04 	addi	sp,sp,-12
 801050c:	dfc00215 	stw	ra,8(sp)
 8010510:	df000115 	stw	fp,4(sp)
 8010514:	df000104 	addi	fp,sp,4
 8010518:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
 801051c:	8011bd80 	call	8011bd8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8010520:	00800044 	movi	r2,1
 8010524:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8010528:	e037883a 	mov	sp,fp
 801052c:	dfc00117 	ldw	ra,4(sp)
 8010530:	df000017 	ldw	fp,0(sp)
 8010534:	dec00204 	addi	sp,sp,8
 8010538:	f800283a 	ret

0801053c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 801053c:	defffe04 	addi	sp,sp,-8
 8010540:	dfc00115 	stw	ra,4(sp)
 8010544:	df000015 	stw	fp,0(sp)
 8010548:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 801054c:	01020074 	movhi	r4,2049
 8010550:	210d2f04 	addi	r4,r4,13500
 8010554:	000b883a 	mov	r5,zero
 8010558:	01800044 	movi	r6,1
 801055c:	80106e80 	call	80106e8 <altera_avalon_jtag_uart_init>
 8010560:	01020074 	movhi	r4,2049
 8010564:	210d2504 	addi	r4,r4,13460
 8010568:	80104d00 	call	80104d0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 801056c:	0001883a 	nop
}
 8010570:	e037883a 	mov	sp,fp
 8010574:	dfc00117 	ldw	ra,4(sp)
 8010578:	df000017 	ldw	fp,0(sp)
 801057c:	dec00204 	addi	sp,sp,8
 8010580:	f800283a 	ret

08010584 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8010584:	defffa04 	addi	sp,sp,-24
 8010588:	dfc00515 	stw	ra,20(sp)
 801058c:	df000415 	stw	fp,16(sp)
 8010590:	df000404 	addi	fp,sp,16
 8010594:	e13ffd15 	stw	r4,-12(fp)
 8010598:	e17ffe15 	stw	r5,-8(fp)
 801059c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80105a0:	e0bffd17 	ldw	r2,-12(fp)
 80105a4:	10800017 	ldw	r2,0(r2)
 80105a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 80105ac:	e0bffc17 	ldw	r2,-16(fp)
 80105b0:	10c00a04 	addi	r3,r2,40
 80105b4:	e0bffd17 	ldw	r2,-12(fp)
 80105b8:	10800217 	ldw	r2,8(r2)
 80105bc:	1809883a 	mov	r4,r3
 80105c0:	e17ffe17 	ldw	r5,-8(fp)
 80105c4:	e1bfff17 	ldw	r6,-4(fp)
 80105c8:	100f883a 	mov	r7,r2
 80105cc:	8010bac0 	call	8010bac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 80105d0:	e037883a 	mov	sp,fp
 80105d4:	dfc00117 	ldw	ra,4(sp)
 80105d8:	df000017 	ldw	fp,0(sp)
 80105dc:	dec00204 	addi	sp,sp,8
 80105e0:	f800283a 	ret

080105e4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80105e4:	defffa04 	addi	sp,sp,-24
 80105e8:	dfc00515 	stw	ra,20(sp)
 80105ec:	df000415 	stw	fp,16(sp)
 80105f0:	df000404 	addi	fp,sp,16
 80105f4:	e13ffd15 	stw	r4,-12(fp)
 80105f8:	e17ffe15 	stw	r5,-8(fp)
 80105fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8010600:	e0bffd17 	ldw	r2,-12(fp)
 8010604:	10800017 	ldw	r2,0(r2)
 8010608:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 801060c:	e0bffc17 	ldw	r2,-16(fp)
 8010610:	10c00a04 	addi	r3,r2,40
 8010614:	e0bffd17 	ldw	r2,-12(fp)
 8010618:	10800217 	ldw	r2,8(r2)
 801061c:	1809883a 	mov	r4,r3
 8010620:	e17ffe17 	ldw	r5,-8(fp)
 8010624:	e1bfff17 	ldw	r6,-4(fp)
 8010628:	100f883a 	mov	r7,r2
 801062c:	8010db80 	call	8010db8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8010630:	e037883a 	mov	sp,fp
 8010634:	dfc00117 	ldw	ra,4(sp)
 8010638:	df000017 	ldw	fp,0(sp)
 801063c:	dec00204 	addi	sp,sp,8
 8010640:	f800283a 	ret

08010644 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8010644:	defffc04 	addi	sp,sp,-16
 8010648:	dfc00315 	stw	ra,12(sp)
 801064c:	df000215 	stw	fp,8(sp)
 8010650:	df000204 	addi	fp,sp,8
 8010654:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8010658:	e0bfff17 	ldw	r2,-4(fp)
 801065c:	10800017 	ldw	r2,0(r2)
 8010660:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8010664:	e0bffe17 	ldw	r2,-8(fp)
 8010668:	10c00a04 	addi	r3,r2,40
 801066c:	e0bfff17 	ldw	r2,-4(fp)
 8010670:	10800217 	ldw	r2,8(r2)
 8010674:	1809883a 	mov	r4,r3
 8010678:	100b883a 	mov	r5,r2
 801067c:	8010a580 	call	8010a58 <altera_avalon_jtag_uart_close>
}
 8010680:	e037883a 	mov	sp,fp
 8010684:	dfc00117 	ldw	ra,4(sp)
 8010688:	df000017 	ldw	fp,0(sp)
 801068c:	dec00204 	addi	sp,sp,8
 8010690:	f800283a 	ret

08010694 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8010694:	defffa04 	addi	sp,sp,-24
 8010698:	dfc00515 	stw	ra,20(sp)
 801069c:	df000415 	stw	fp,16(sp)
 80106a0:	df000404 	addi	fp,sp,16
 80106a4:	e13ffd15 	stw	r4,-12(fp)
 80106a8:	e17ffe15 	stw	r5,-8(fp)
 80106ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 80106b0:	e0bffd17 	ldw	r2,-12(fp)
 80106b4:	10800017 	ldw	r2,0(r2)
 80106b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 80106bc:	e0bffc17 	ldw	r2,-16(fp)
 80106c0:	10800a04 	addi	r2,r2,40
 80106c4:	1009883a 	mov	r4,r2
 80106c8:	e17ffe17 	ldw	r5,-8(fp)
 80106cc:	e1bfff17 	ldw	r6,-4(fp)
 80106d0:	8010ac00 	call	8010ac0 <altera_avalon_jtag_uart_ioctl>
}
 80106d4:	e037883a 	mov	sp,fp
 80106d8:	dfc00117 	ldw	ra,4(sp)
 80106dc:	df000017 	ldw	fp,0(sp)
 80106e0:	dec00204 	addi	sp,sp,8
 80106e4:	f800283a 	ret

080106e8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 80106e8:	defffa04 	addi	sp,sp,-24
 80106ec:	dfc00515 	stw	ra,20(sp)
 80106f0:	df000415 	stw	fp,16(sp)
 80106f4:	df000404 	addi	fp,sp,16
 80106f8:	e13ffd15 	stw	r4,-12(fp)
 80106fc:	e17ffe15 	stw	r5,-8(fp)
 8010700:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8010704:	e0bffd17 	ldw	r2,-12(fp)
 8010708:	00c00044 	movi	r3,1
 801070c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8010710:	e0bffd17 	ldw	r2,-12(fp)
 8010714:	10800017 	ldw	r2,0(r2)
 8010718:	10800104 	addi	r2,r2,4
 801071c:	1007883a 	mov	r3,r2
 8010720:	e0bffd17 	ldw	r2,-12(fp)
 8010724:	10800817 	ldw	r2,32(r2)
 8010728:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 801072c:	e0fffe17 	ldw	r3,-8(fp)
 8010730:	e0bfff17 	ldw	r2,-4(fp)
 8010734:	d8000015 	stw	zero,0(sp)
 8010738:	1809883a 	mov	r4,r3
 801073c:	100b883a 	mov	r5,r2
 8010740:	01820074 	movhi	r6,2049
 8010744:	3181eb04 	addi	r6,r6,1964
 8010748:	e1fffd17 	ldw	r7,-12(fp)
 801074c:	80113c00 	call	80113c0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8010750:	e0bffd17 	ldw	r2,-12(fp)
 8010754:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8010758:	e0bffd17 	ldw	r2,-12(fp)
 801075c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8010760:	00820074 	movhi	r2,2049
 8010764:	10982804 	addi	r2,r2,24736
 8010768:	10800017 	ldw	r2,0(r2)
 801076c:	1809883a 	mov	r4,r3
 8010770:	100b883a 	mov	r5,r2
 8010774:	01820074 	movhi	r6,2049
 8010778:	31826c04 	addi	r6,r6,2480
 801077c:	e1fffd17 	ldw	r7,-12(fp)
 8010780:	8010fd00 	call	8010fd0 <alt_alarm_start>
 8010784:	1000040e 	bge	r2,zero,8010798 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8010788:	e0fffd17 	ldw	r3,-12(fp)
 801078c:	00a00034 	movhi	r2,32768
 8010790:	10bfffc4 	addi	r2,r2,-1
 8010794:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8010798:	e037883a 	mov	sp,fp
 801079c:	dfc00117 	ldw	ra,4(sp)
 80107a0:	df000017 	ldw	fp,0(sp)
 80107a4:	dec00204 	addi	sp,sp,8
 80107a8:	f800283a 	ret

080107ac <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 80107ac:	defff804 	addi	sp,sp,-32
 80107b0:	df000715 	stw	fp,28(sp)
 80107b4:	df000704 	addi	fp,sp,28
 80107b8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 80107bc:	e0bfff17 	ldw	r2,-4(fp)
 80107c0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 80107c4:	e0bffb17 	ldw	r2,-20(fp)
 80107c8:	10800017 	ldw	r2,0(r2)
 80107cc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80107d0:	e0bffc17 	ldw	r2,-16(fp)
 80107d4:	10800104 	addi	r2,r2,4
 80107d8:	10800037 	ldwio	r2,0(r2)
 80107dc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80107e0:	e0bffd17 	ldw	r2,-12(fp)
 80107e4:	1080c00c 	andi	r2,r2,768
 80107e8:	1000011e 	bne	r2,zero,80107f0 <altera_avalon_jtag_uart_irq+0x44>
      break;
 80107ec:	00006c06 	br	80109a0 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 80107f0:	e0bffd17 	ldw	r2,-12(fp)
 80107f4:	1080400c 	andi	r2,r2,256
 80107f8:	10003426 	beq	r2,zero,80108cc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80107fc:	00800074 	movhi	r2,1
 8010800:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010804:	e0bffb17 	ldw	r2,-20(fp)
 8010808:	10800a17 	ldw	r2,40(r2)
 801080c:	10800044 	addi	r2,r2,1
 8010810:	1081ffcc 	andi	r2,r2,2047
 8010814:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8010818:	e0bffb17 	ldw	r2,-20(fp)
 801081c:	10c00b17 	ldw	r3,44(r2)
 8010820:	e0bffe17 	ldw	r2,-8(fp)
 8010824:	1880011e 	bne	r3,r2,801082c <altera_avalon_jtag_uart_irq+0x80>
          break;
 8010828:	00001606 	br	8010884 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 801082c:	e0bffc17 	ldw	r2,-16(fp)
 8010830:	10800037 	ldwio	r2,0(r2)
 8010834:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8010838:	e0bff917 	ldw	r2,-28(fp)
 801083c:	10a0000c 	andi	r2,r2,32768
 8010840:	1000011e 	bne	r2,zero,8010848 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 8010844:	00000f06 	br	8010884 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8010848:	e0bffb17 	ldw	r2,-20(fp)
 801084c:	10800a17 	ldw	r2,40(r2)
 8010850:	e0fff917 	ldw	r3,-28(fp)
 8010854:	1809883a 	mov	r4,r3
 8010858:	e0fffb17 	ldw	r3,-20(fp)
 801085c:	1885883a 	add	r2,r3,r2
 8010860:	10800e04 	addi	r2,r2,56
 8010864:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010868:	e0bffb17 	ldw	r2,-20(fp)
 801086c:	10800a17 	ldw	r2,40(r2)
 8010870:	10800044 	addi	r2,r2,1
 8010874:	10c1ffcc 	andi	r3,r2,2047
 8010878:	e0bffb17 	ldw	r2,-20(fp)
 801087c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8010880:	003fe006 	br	8010804 <__ram_exceptions_end+0xf7f905c4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8010884:	e0bff917 	ldw	r2,-28(fp)
 8010888:	10bfffec 	andhi	r2,r2,65535
 801088c:	10000f26 	beq	r2,zero,80108cc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8010890:	e0bffb17 	ldw	r2,-20(fp)
 8010894:	10c00817 	ldw	r3,32(r2)
 8010898:	00bfff84 	movi	r2,-2
 801089c:	1886703a 	and	r3,r3,r2
 80108a0:	e0bffb17 	ldw	r2,-20(fp)
 80108a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 80108a8:	e0bffc17 	ldw	r2,-16(fp)
 80108ac:	10800104 	addi	r2,r2,4
 80108b0:	1007883a 	mov	r3,r2
 80108b4:	e0bffb17 	ldw	r2,-20(fp)
 80108b8:	10800817 	ldw	r2,32(r2)
 80108bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80108c0:	e0bffc17 	ldw	r2,-16(fp)
 80108c4:	10800104 	addi	r2,r2,4
 80108c8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 80108cc:	e0bffd17 	ldw	r2,-12(fp)
 80108d0:	1080800c 	andi	r2,r2,512
 80108d4:	10003126 	beq	r2,zero,801099c <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 80108d8:	e0bffd17 	ldw	r2,-12(fp)
 80108dc:	1004d43a 	srli	r2,r2,16
 80108e0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80108e4:	00001406 	br	8010938 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80108e8:	e0bffc17 	ldw	r2,-16(fp)
 80108ec:	e0fffb17 	ldw	r3,-20(fp)
 80108f0:	18c00d17 	ldw	r3,52(r3)
 80108f4:	e13ffb17 	ldw	r4,-20(fp)
 80108f8:	20c7883a 	add	r3,r4,r3
 80108fc:	18c20e04 	addi	r3,r3,2104
 8010900:	18c00003 	ldbu	r3,0(r3)
 8010904:	18c03fcc 	andi	r3,r3,255
 8010908:	18c0201c 	xori	r3,r3,128
 801090c:	18ffe004 	addi	r3,r3,-128
 8010910:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010914:	e0bffb17 	ldw	r2,-20(fp)
 8010918:	10800d17 	ldw	r2,52(r2)
 801091c:	10800044 	addi	r2,r2,1
 8010920:	10c1ffcc 	andi	r3,r2,2047
 8010924:	e0bffb17 	ldw	r2,-20(fp)
 8010928:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 801092c:	e0bffa17 	ldw	r2,-24(fp)
 8010930:	10bfffc4 	addi	r2,r2,-1
 8010934:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8010938:	e0bffa17 	ldw	r2,-24(fp)
 801093c:	10000526 	beq	r2,zero,8010954 <altera_avalon_jtag_uart_irq+0x1a8>
 8010940:	e0bffb17 	ldw	r2,-20(fp)
 8010944:	10c00d17 	ldw	r3,52(r2)
 8010948:	e0bffb17 	ldw	r2,-20(fp)
 801094c:	10800c17 	ldw	r2,48(r2)
 8010950:	18bfe51e 	bne	r3,r2,80108e8 <__ram_exceptions_end+0xf7f906a8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8010954:	e0bffa17 	ldw	r2,-24(fp)
 8010958:	10001026 	beq	r2,zero,801099c <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801095c:	e0bffb17 	ldw	r2,-20(fp)
 8010960:	10c00817 	ldw	r3,32(r2)
 8010964:	00bfff44 	movi	r2,-3
 8010968:	1886703a 	and	r3,r3,r2
 801096c:	e0bffb17 	ldw	r2,-20(fp)
 8010970:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8010974:	e0bffb17 	ldw	r2,-20(fp)
 8010978:	10800017 	ldw	r2,0(r2)
 801097c:	10800104 	addi	r2,r2,4
 8010980:	1007883a 	mov	r3,r2
 8010984:	e0bffb17 	ldw	r2,-20(fp)
 8010988:	10800817 	ldw	r2,32(r2)
 801098c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8010990:	e0bffc17 	ldw	r2,-16(fp)
 8010994:	10800104 	addi	r2,r2,4
 8010998:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 801099c:	003f8c06 	br	80107d0 <__ram_exceptions_end+0xf7f90590>
}
 80109a0:	e037883a 	mov	sp,fp
 80109a4:	df000017 	ldw	fp,0(sp)
 80109a8:	dec00104 	addi	sp,sp,4
 80109ac:	f800283a 	ret

080109b0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 80109b0:	defff804 	addi	sp,sp,-32
 80109b4:	df000715 	stw	fp,28(sp)
 80109b8:	df000704 	addi	fp,sp,28
 80109bc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 80109c0:	e0bffb17 	ldw	r2,-20(fp)
 80109c4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 80109c8:	e0bff917 	ldw	r2,-28(fp)
 80109cc:	10800017 	ldw	r2,0(r2)
 80109d0:	10800104 	addi	r2,r2,4
 80109d4:	10800037 	ldwio	r2,0(r2)
 80109d8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80109dc:	e0bffa17 	ldw	r2,-24(fp)
 80109e0:	1081000c 	andi	r2,r2,1024
 80109e4:	10000b26 	beq	r2,zero,8010a14 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 80109e8:	e0bff917 	ldw	r2,-28(fp)
 80109ec:	10800017 	ldw	r2,0(r2)
 80109f0:	10800104 	addi	r2,r2,4
 80109f4:	1007883a 	mov	r3,r2
 80109f8:	e0bff917 	ldw	r2,-28(fp)
 80109fc:	10800817 	ldw	r2,32(r2)
 8010a00:	10810014 	ori	r2,r2,1024
 8010a04:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8010a08:	e0bff917 	ldw	r2,-28(fp)
 8010a0c:	10000915 	stw	zero,36(r2)
 8010a10:	00000a06 	br	8010a3c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8010a14:	e0bff917 	ldw	r2,-28(fp)
 8010a18:	10c00917 	ldw	r3,36(r2)
 8010a1c:	00a00034 	movhi	r2,32768
 8010a20:	10bfff04 	addi	r2,r2,-4
 8010a24:	10c00536 	bltu	r2,r3,8010a3c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8010a28:	e0bff917 	ldw	r2,-28(fp)
 8010a2c:	10800917 	ldw	r2,36(r2)
 8010a30:	10c00044 	addi	r3,r2,1
 8010a34:	e0bff917 	ldw	r2,-28(fp)
 8010a38:	10c00915 	stw	r3,36(r2)
 8010a3c:	00820074 	movhi	r2,2049
 8010a40:	10982804 	addi	r2,r2,24736
 8010a44:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8010a48:	e037883a 	mov	sp,fp
 8010a4c:	df000017 	ldw	fp,0(sp)
 8010a50:	dec00104 	addi	sp,sp,4
 8010a54:	f800283a 	ret

08010a58 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8010a58:	defffd04 	addi	sp,sp,-12
 8010a5c:	df000215 	stw	fp,8(sp)
 8010a60:	df000204 	addi	fp,sp,8
 8010a64:	e13ffe15 	stw	r4,-8(fp)
 8010a68:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8010a6c:	00000506 	br	8010a84 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8010a70:	e0bfff17 	ldw	r2,-4(fp)
 8010a74:	1090000c 	andi	r2,r2,16384
 8010a78:	10000226 	beq	r2,zero,8010a84 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8010a7c:	00bffd44 	movi	r2,-11
 8010a80:	00000b06 	br	8010ab0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8010a84:	e0bffe17 	ldw	r2,-8(fp)
 8010a88:	10c00d17 	ldw	r3,52(r2)
 8010a8c:	e0bffe17 	ldw	r2,-8(fp)
 8010a90:	10800c17 	ldw	r2,48(r2)
 8010a94:	18800526 	beq	r3,r2,8010aac <altera_avalon_jtag_uart_close+0x54>
 8010a98:	e0bffe17 	ldw	r2,-8(fp)
 8010a9c:	10c00917 	ldw	r3,36(r2)
 8010aa0:	e0bffe17 	ldw	r2,-8(fp)
 8010aa4:	10800117 	ldw	r2,4(r2)
 8010aa8:	18bff136 	bltu	r3,r2,8010a70 <__ram_exceptions_end+0xf7f90830>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8010aac:	0005883a 	mov	r2,zero
}
 8010ab0:	e037883a 	mov	sp,fp
 8010ab4:	df000017 	ldw	fp,0(sp)
 8010ab8:	dec00104 	addi	sp,sp,4
 8010abc:	f800283a 	ret

08010ac0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8010ac0:	defffa04 	addi	sp,sp,-24
 8010ac4:	df000515 	stw	fp,20(sp)
 8010ac8:	df000504 	addi	fp,sp,20
 8010acc:	e13ffd15 	stw	r4,-12(fp)
 8010ad0:	e17ffe15 	stw	r5,-8(fp)
 8010ad4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8010ad8:	00bff9c4 	movi	r2,-25
 8010adc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8010ae0:	e0bffe17 	ldw	r2,-8(fp)
 8010ae4:	10da8060 	cmpeqi	r3,r2,27137
 8010ae8:	1800031e 	bne	r3,zero,8010af8 <altera_avalon_jtag_uart_ioctl+0x38>
 8010aec:	109a80a0 	cmpeqi	r2,r2,27138
 8010af0:	1000191e 	bne	r2,zero,8010b58 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 8010af4:	00002806 	br	8010b98 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8010af8:	e0bffd17 	ldw	r2,-12(fp)
 8010afc:	10c00117 	ldw	r3,4(r2)
 8010b00:	00a00034 	movhi	r2,32768
 8010b04:	10bfffc4 	addi	r2,r2,-1
 8010b08:	18801226 	beq	r3,r2,8010b54 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 8010b0c:	e0bfff17 	ldw	r2,-4(fp)
 8010b10:	10800017 	ldw	r2,0(r2)
 8010b14:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8010b18:	e0bffc17 	ldw	r2,-16(fp)
 8010b1c:	10800090 	cmplti	r2,r2,2
 8010b20:	1000061e 	bne	r2,zero,8010b3c <altera_avalon_jtag_uart_ioctl+0x7c>
 8010b24:	e0fffc17 	ldw	r3,-16(fp)
 8010b28:	00a00034 	movhi	r2,32768
 8010b2c:	10bfffc4 	addi	r2,r2,-1
 8010b30:	18800226 	beq	r3,r2,8010b3c <altera_avalon_jtag_uart_ioctl+0x7c>
 8010b34:	e0bffc17 	ldw	r2,-16(fp)
 8010b38:	00000206 	br	8010b44 <altera_avalon_jtag_uart_ioctl+0x84>
 8010b3c:	00a00034 	movhi	r2,32768
 8010b40:	10bfff84 	addi	r2,r2,-2
 8010b44:	e0fffd17 	ldw	r3,-12(fp)
 8010b48:	18800115 	stw	r2,4(r3)
      rc = 0;
 8010b4c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8010b50:	00001106 	br	8010b98 <altera_avalon_jtag_uart_ioctl+0xd8>
 8010b54:	00001006 	br	8010b98 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8010b58:	e0bffd17 	ldw	r2,-12(fp)
 8010b5c:	10c00117 	ldw	r3,4(r2)
 8010b60:	00a00034 	movhi	r2,32768
 8010b64:	10bfffc4 	addi	r2,r2,-1
 8010b68:	18800a26 	beq	r3,r2,8010b94 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8010b6c:	e0bffd17 	ldw	r2,-12(fp)
 8010b70:	10c00917 	ldw	r3,36(r2)
 8010b74:	e0bffd17 	ldw	r2,-12(fp)
 8010b78:	10800117 	ldw	r2,4(r2)
 8010b7c:	1885803a 	cmpltu	r2,r3,r2
 8010b80:	10c03fcc 	andi	r3,r2,255
 8010b84:	e0bfff17 	ldw	r2,-4(fp)
 8010b88:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8010b8c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8010b90:	00000006 	br	8010b94 <altera_avalon_jtag_uart_ioctl+0xd4>
 8010b94:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8010b98:	e0bffb17 	ldw	r2,-20(fp)
}
 8010b9c:	e037883a 	mov	sp,fp
 8010ba0:	df000017 	ldw	fp,0(sp)
 8010ba4:	dec00104 	addi	sp,sp,4
 8010ba8:	f800283a 	ret

08010bac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8010bac:	defff304 	addi	sp,sp,-52
 8010bb0:	dfc00c15 	stw	ra,48(sp)
 8010bb4:	df000b15 	stw	fp,44(sp)
 8010bb8:	df000b04 	addi	fp,sp,44
 8010bbc:	e13ffc15 	stw	r4,-16(fp)
 8010bc0:	e17ffd15 	stw	r5,-12(fp)
 8010bc4:	e1bffe15 	stw	r6,-8(fp)
 8010bc8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8010bcc:	e0bffd17 	ldw	r2,-12(fp)
 8010bd0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8010bd4:	00004906 	br	8010cfc <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8010bd8:	e0bffc17 	ldw	r2,-16(fp)
 8010bdc:	10800a17 	ldw	r2,40(r2)
 8010be0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8010be4:	e0bffc17 	ldw	r2,-16(fp)
 8010be8:	10800b17 	ldw	r2,44(r2)
 8010bec:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8010bf0:	e0fff717 	ldw	r3,-36(fp)
 8010bf4:	e0bff817 	ldw	r2,-32(fp)
 8010bf8:	18800536 	bltu	r3,r2,8010c10 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8010bfc:	e0fff717 	ldw	r3,-36(fp)
 8010c00:	e0bff817 	ldw	r2,-32(fp)
 8010c04:	1885c83a 	sub	r2,r3,r2
 8010c08:	e0bff615 	stw	r2,-40(fp)
 8010c0c:	00000406 	br	8010c20 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8010c10:	00c20004 	movi	r3,2048
 8010c14:	e0bff817 	ldw	r2,-32(fp)
 8010c18:	1885c83a 	sub	r2,r3,r2
 8010c1c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8010c20:	e0bff617 	ldw	r2,-40(fp)
 8010c24:	1000011e 	bne	r2,zero,8010c2c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 8010c28:	00001d06 	br	8010ca0 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 8010c2c:	e0fffe17 	ldw	r3,-8(fp)
 8010c30:	e0bff617 	ldw	r2,-40(fp)
 8010c34:	1880022e 	bgeu	r3,r2,8010c40 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 8010c38:	e0bffe17 	ldw	r2,-8(fp)
 8010c3c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8010c40:	e0bff817 	ldw	r2,-32(fp)
 8010c44:	10800e04 	addi	r2,r2,56
 8010c48:	e0fffc17 	ldw	r3,-16(fp)
 8010c4c:	1885883a 	add	r2,r3,r2
 8010c50:	e13ff517 	ldw	r4,-44(fp)
 8010c54:	100b883a 	mov	r5,r2
 8010c58:	e1bff617 	ldw	r6,-40(fp)
 8010c5c:	80097580 	call	8009758 <memcpy>
      ptr   += n;
 8010c60:	e0fff517 	ldw	r3,-44(fp)
 8010c64:	e0bff617 	ldw	r2,-40(fp)
 8010c68:	1885883a 	add	r2,r3,r2
 8010c6c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8010c70:	e0fffe17 	ldw	r3,-8(fp)
 8010c74:	e0bff617 	ldw	r2,-40(fp)
 8010c78:	1885c83a 	sub	r2,r3,r2
 8010c7c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010c80:	e0fff817 	ldw	r3,-32(fp)
 8010c84:	e0bff617 	ldw	r2,-40(fp)
 8010c88:	1885883a 	add	r2,r3,r2
 8010c8c:	10c1ffcc 	andi	r3,r2,2047
 8010c90:	e0bffc17 	ldw	r2,-16(fp)
 8010c94:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8010c98:	e0bffe17 	ldw	r2,-8(fp)
 8010c9c:	00bfce16 	blt	zero,r2,8010bd8 <__ram_exceptions_end+0xf7f90998>

    /* If we read any data then return it */
    if (ptr != buffer)
 8010ca0:	e0fff517 	ldw	r3,-44(fp)
 8010ca4:	e0bffd17 	ldw	r2,-12(fp)
 8010ca8:	18800126 	beq	r3,r2,8010cb0 <altera_avalon_jtag_uart_read+0x104>
      break;
 8010cac:	00001506 	br	8010d04 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8010cb0:	e0bfff17 	ldw	r2,-4(fp)
 8010cb4:	1090000c 	andi	r2,r2,16384
 8010cb8:	10000126 	beq	r2,zero,8010cc0 <altera_avalon_jtag_uart_read+0x114>
      break;
 8010cbc:	00001106 	br	8010d04 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8010cc0:	0001883a 	nop
 8010cc4:	e0bffc17 	ldw	r2,-16(fp)
 8010cc8:	10c00a17 	ldw	r3,40(r2)
 8010ccc:	e0bff717 	ldw	r2,-36(fp)
 8010cd0:	1880051e 	bne	r3,r2,8010ce8 <altera_avalon_jtag_uart_read+0x13c>
 8010cd4:	e0bffc17 	ldw	r2,-16(fp)
 8010cd8:	10c00917 	ldw	r3,36(r2)
 8010cdc:	e0bffc17 	ldw	r2,-16(fp)
 8010ce0:	10800117 	ldw	r2,4(r2)
 8010ce4:	18bff736 	bltu	r3,r2,8010cc4 <__ram_exceptions_end+0xf7f90a84>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8010ce8:	e0bffc17 	ldw	r2,-16(fp)
 8010cec:	10c00a17 	ldw	r3,40(r2)
 8010cf0:	e0bff717 	ldw	r2,-36(fp)
 8010cf4:	1880011e 	bne	r3,r2,8010cfc <altera_avalon_jtag_uart_read+0x150>
      break;
 8010cf8:	00000206 	br	8010d04 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8010cfc:	e0bffe17 	ldw	r2,-8(fp)
 8010d00:	00bfb516 	blt	zero,r2,8010bd8 <__ram_exceptions_end+0xf7f90998>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8010d04:	e0fff517 	ldw	r3,-44(fp)
 8010d08:	e0bffd17 	ldw	r2,-12(fp)
 8010d0c:	18801826 	beq	r3,r2,8010d70 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010d10:	0005303a 	rdctl	r2,status
 8010d14:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010d18:	e0fffa17 	ldw	r3,-24(fp)
 8010d1c:	00bfff84 	movi	r2,-2
 8010d20:	1884703a 	and	r2,r3,r2
 8010d24:	1001703a 	wrctl	status,r2
  
  return context;
 8010d28:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8010d2c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8010d30:	e0bffc17 	ldw	r2,-16(fp)
 8010d34:	10800817 	ldw	r2,32(r2)
 8010d38:	10c00054 	ori	r3,r2,1
 8010d3c:	e0bffc17 	ldw	r2,-16(fp)
 8010d40:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8010d44:	e0bffc17 	ldw	r2,-16(fp)
 8010d48:	10800017 	ldw	r2,0(r2)
 8010d4c:	10800104 	addi	r2,r2,4
 8010d50:	1007883a 	mov	r3,r2
 8010d54:	e0bffc17 	ldw	r2,-16(fp)
 8010d58:	10800817 	ldw	r2,32(r2)
 8010d5c:	18800035 	stwio	r2,0(r3)
 8010d60:	e0bff917 	ldw	r2,-28(fp)
 8010d64:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010d68:	e0bffb17 	ldw	r2,-20(fp)
 8010d6c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8010d70:	e0fff517 	ldw	r3,-44(fp)
 8010d74:	e0bffd17 	ldw	r2,-12(fp)
 8010d78:	18800426 	beq	r3,r2,8010d8c <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 8010d7c:	e0fff517 	ldw	r3,-44(fp)
 8010d80:	e0bffd17 	ldw	r2,-12(fp)
 8010d84:	1885c83a 	sub	r2,r3,r2
 8010d88:	00000606 	br	8010da4 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 8010d8c:	e0bfff17 	ldw	r2,-4(fp)
 8010d90:	1090000c 	andi	r2,r2,16384
 8010d94:	10000226 	beq	r2,zero,8010da0 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 8010d98:	00bffd44 	movi	r2,-11
 8010d9c:	00000106 	br	8010da4 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 8010da0:	00bffec4 	movi	r2,-5
}
 8010da4:	e037883a 	mov	sp,fp
 8010da8:	dfc00117 	ldw	ra,4(sp)
 8010dac:	df000017 	ldw	fp,0(sp)
 8010db0:	dec00204 	addi	sp,sp,8
 8010db4:	f800283a 	ret

08010db8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8010db8:	defff304 	addi	sp,sp,-52
 8010dbc:	dfc00c15 	stw	ra,48(sp)
 8010dc0:	df000b15 	stw	fp,44(sp)
 8010dc4:	df000b04 	addi	fp,sp,44
 8010dc8:	e13ffc15 	stw	r4,-16(fp)
 8010dcc:	e17ffd15 	stw	r5,-12(fp)
 8010dd0:	e1bffe15 	stw	r6,-8(fp)
 8010dd4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8010dd8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8010ddc:	e0bffd17 	ldw	r2,-12(fp)
 8010de0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8010de4:	00003806 	br	8010ec8 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8010de8:	e0bffc17 	ldw	r2,-16(fp)
 8010dec:	10800c17 	ldw	r2,48(r2)
 8010df0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 8010df4:	e0bffc17 	ldw	r2,-16(fp)
 8010df8:	10800d17 	ldw	r2,52(r2)
 8010dfc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8010e00:	e0fff817 	ldw	r3,-32(fp)
 8010e04:	e0bff517 	ldw	r2,-44(fp)
 8010e08:	1880062e 	bgeu	r3,r2,8010e24 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8010e0c:	e0fff517 	ldw	r3,-44(fp)
 8010e10:	e0bff817 	ldw	r2,-32(fp)
 8010e14:	1885c83a 	sub	r2,r3,r2
 8010e18:	10bfffc4 	addi	r2,r2,-1
 8010e1c:	e0bff615 	stw	r2,-40(fp)
 8010e20:	00000b06 	br	8010e50 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8010e24:	e0bff517 	ldw	r2,-44(fp)
 8010e28:	10000526 	beq	r2,zero,8010e40 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8010e2c:	00c20004 	movi	r3,2048
 8010e30:	e0bff817 	ldw	r2,-32(fp)
 8010e34:	1885c83a 	sub	r2,r3,r2
 8010e38:	e0bff615 	stw	r2,-40(fp)
 8010e3c:	00000406 	br	8010e50 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8010e40:	00c1ffc4 	movi	r3,2047
 8010e44:	e0bff817 	ldw	r2,-32(fp)
 8010e48:	1885c83a 	sub	r2,r3,r2
 8010e4c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8010e50:	e0bff617 	ldw	r2,-40(fp)
 8010e54:	1000011e 	bne	r2,zero,8010e5c <altera_avalon_jtag_uart_write+0xa4>
        break;
 8010e58:	00001d06 	br	8010ed0 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 8010e5c:	e0fffe17 	ldw	r3,-8(fp)
 8010e60:	e0bff617 	ldw	r2,-40(fp)
 8010e64:	1880022e 	bgeu	r3,r2,8010e70 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 8010e68:	e0bffe17 	ldw	r2,-8(fp)
 8010e6c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8010e70:	e0bff817 	ldw	r2,-32(fp)
 8010e74:	10820e04 	addi	r2,r2,2104
 8010e78:	e0fffc17 	ldw	r3,-16(fp)
 8010e7c:	1885883a 	add	r2,r3,r2
 8010e80:	1009883a 	mov	r4,r2
 8010e84:	e17ffd17 	ldw	r5,-12(fp)
 8010e88:	e1bff617 	ldw	r6,-40(fp)
 8010e8c:	80097580 	call	8009758 <memcpy>
      ptr   += n;
 8010e90:	e0fffd17 	ldw	r3,-12(fp)
 8010e94:	e0bff617 	ldw	r2,-40(fp)
 8010e98:	1885883a 	add	r2,r3,r2
 8010e9c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8010ea0:	e0fffe17 	ldw	r3,-8(fp)
 8010ea4:	e0bff617 	ldw	r2,-40(fp)
 8010ea8:	1885c83a 	sub	r2,r3,r2
 8010eac:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010eb0:	e0fff817 	ldw	r3,-32(fp)
 8010eb4:	e0bff617 	ldw	r2,-40(fp)
 8010eb8:	1885883a 	add	r2,r3,r2
 8010ebc:	10c1ffcc 	andi	r3,r2,2047
 8010ec0:	e0bffc17 	ldw	r2,-16(fp)
 8010ec4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8010ec8:	e0bffe17 	ldw	r2,-8(fp)
 8010ecc:	00bfc616 	blt	zero,r2,8010de8 <__ram_exceptions_end+0xf7f90ba8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010ed0:	0005303a 	rdctl	r2,status
 8010ed4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010ed8:	e0fffa17 	ldw	r3,-24(fp)
 8010edc:	00bfff84 	movi	r2,-2
 8010ee0:	1884703a 	and	r2,r3,r2
 8010ee4:	1001703a 	wrctl	status,r2
  
  return context;
 8010ee8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8010eec:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8010ef0:	e0bffc17 	ldw	r2,-16(fp)
 8010ef4:	10800817 	ldw	r2,32(r2)
 8010ef8:	10c00094 	ori	r3,r2,2
 8010efc:	e0bffc17 	ldw	r2,-16(fp)
 8010f00:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8010f04:	e0bffc17 	ldw	r2,-16(fp)
 8010f08:	10800017 	ldw	r2,0(r2)
 8010f0c:	10800104 	addi	r2,r2,4
 8010f10:	1007883a 	mov	r3,r2
 8010f14:	e0bffc17 	ldw	r2,-16(fp)
 8010f18:	10800817 	ldw	r2,32(r2)
 8010f1c:	18800035 	stwio	r2,0(r3)
 8010f20:	e0bff917 	ldw	r2,-28(fp)
 8010f24:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010f28:	e0bffb17 	ldw	r2,-20(fp)
 8010f2c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8010f30:	e0bffe17 	ldw	r2,-8(fp)
 8010f34:	0080120e 	bge	zero,r2,8010f80 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 8010f38:	e0bfff17 	ldw	r2,-4(fp)
 8010f3c:	1090000c 	andi	r2,r2,16384
 8010f40:	10000126 	beq	r2,zero,8010f48 <altera_avalon_jtag_uart_write+0x190>
        break;
 8010f44:	00001006 	br	8010f88 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8010f48:	0001883a 	nop
 8010f4c:	e0bffc17 	ldw	r2,-16(fp)
 8010f50:	10c00d17 	ldw	r3,52(r2)
 8010f54:	e0bff517 	ldw	r2,-44(fp)
 8010f58:	1880051e 	bne	r3,r2,8010f70 <altera_avalon_jtag_uart_write+0x1b8>
 8010f5c:	e0bffc17 	ldw	r2,-16(fp)
 8010f60:	10c00917 	ldw	r3,36(r2)
 8010f64:	e0bffc17 	ldw	r2,-16(fp)
 8010f68:	10800117 	ldw	r2,4(r2)
 8010f6c:	18bff736 	bltu	r3,r2,8010f4c <__ram_exceptions_end+0xf7f90d0c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8010f70:	e0bffc17 	ldw	r2,-16(fp)
 8010f74:	10800917 	ldw	r2,36(r2)
 8010f78:	10000126 	beq	r2,zero,8010f80 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 8010f7c:	00000206 	br	8010f88 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 8010f80:	e0bffe17 	ldw	r2,-8(fp)
 8010f84:	00bf9716 	blt	zero,r2,8010de4 <__ram_exceptions_end+0xf7f90ba4>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8010f88:	e0fffd17 	ldw	r3,-12(fp)
 8010f8c:	e0bff717 	ldw	r2,-36(fp)
 8010f90:	18800426 	beq	r3,r2,8010fa4 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 8010f94:	e0fffd17 	ldw	r3,-12(fp)
 8010f98:	e0bff717 	ldw	r2,-36(fp)
 8010f9c:	1885c83a 	sub	r2,r3,r2
 8010fa0:	00000606 	br	8010fbc <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 8010fa4:	e0bfff17 	ldw	r2,-4(fp)
 8010fa8:	1090000c 	andi	r2,r2,16384
 8010fac:	10000226 	beq	r2,zero,8010fb8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 8010fb0:	00bffd44 	movi	r2,-11
 8010fb4:	00000106 	br	8010fbc <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8010fb8:	00bffec4 	movi	r2,-5
}
 8010fbc:	e037883a 	mov	sp,fp
 8010fc0:	dfc00117 	ldw	ra,4(sp)
 8010fc4:	df000017 	ldw	fp,0(sp)
 8010fc8:	dec00204 	addi	sp,sp,8
 8010fcc:	f800283a 	ret

08010fd0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8010fd0:	defff504 	addi	sp,sp,-44
 8010fd4:	df000a15 	stw	fp,40(sp)
 8010fd8:	df000a04 	addi	fp,sp,40
 8010fdc:	e13ffc15 	stw	r4,-16(fp)
 8010fe0:	e17ffd15 	stw	r5,-12(fp)
 8010fe4:	e1bffe15 	stw	r6,-8(fp)
 8010fe8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8010fec:	e03ff615 	stw	zero,-40(fp)
 8010ff0:	00820074 	movhi	r2,2049
 8010ff4:	10982804 	addi	r2,r2,24736
 8010ff8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 8010ffc:	10003f26 	beq	r2,zero,80110fc <alt_alarm_start+0x12c>
  {
    if (alarm)
 8011000:	e0bffc17 	ldw	r2,-16(fp)
 8011004:	10003b26 	beq	r2,zero,80110f4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 8011008:	e0bffc17 	ldw	r2,-16(fp)
 801100c:	e0fffe17 	ldw	r3,-8(fp)
 8011010:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8011014:	e0bffc17 	ldw	r2,-16(fp)
 8011018:	e0ffff17 	ldw	r3,-4(fp)
 801101c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011020:	0005303a 	rdctl	r2,status
 8011024:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011028:	e0fff817 	ldw	r3,-32(fp)
 801102c:	00bfff84 	movi	r2,-2
 8011030:	1884703a 	and	r2,r3,r2
 8011034:	1001703a 	wrctl	status,r2
  
  return context;
 8011038:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 801103c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8011040:	00820074 	movhi	r2,2049
 8011044:	10982904 	addi	r2,r2,24740
 8011048:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 801104c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8011050:	e0fffd17 	ldw	r3,-12(fp)
 8011054:	e0bff617 	ldw	r2,-40(fp)
 8011058:	1885883a 	add	r2,r3,r2
 801105c:	10c00044 	addi	r3,r2,1
 8011060:	e0bffc17 	ldw	r2,-16(fp)
 8011064:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8011068:	e0bffc17 	ldw	r2,-16(fp)
 801106c:	10c00217 	ldw	r3,8(r2)
 8011070:	e0bff617 	ldw	r2,-40(fp)
 8011074:	1880042e 	bgeu	r3,r2,8011088 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 8011078:	e0bffc17 	ldw	r2,-16(fp)
 801107c:	00c00044 	movi	r3,1
 8011080:	10c00405 	stb	r3,16(r2)
 8011084:	00000206 	br	8011090 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 8011088:	e0bffc17 	ldw	r2,-16(fp)
 801108c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8011090:	e0fffc17 	ldw	r3,-16(fp)
 8011094:	00820074 	movhi	r2,2049
 8011098:	10915504 	addi	r2,r2,17748
 801109c:	e0bff915 	stw	r2,-28(fp)
 80110a0:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80110a4:	e0bffa17 	ldw	r2,-24(fp)
 80110a8:	e0fff917 	ldw	r3,-28(fp)
 80110ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80110b0:	e0bff917 	ldw	r2,-28(fp)
 80110b4:	10c00017 	ldw	r3,0(r2)
 80110b8:	e0bffa17 	ldw	r2,-24(fp)
 80110bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80110c0:	e0bff917 	ldw	r2,-28(fp)
 80110c4:	10800017 	ldw	r2,0(r2)
 80110c8:	e0fffa17 	ldw	r3,-24(fp)
 80110cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80110d0:	e0bff917 	ldw	r2,-28(fp)
 80110d4:	e0fffa17 	ldw	r3,-24(fp)
 80110d8:	10c00015 	stw	r3,0(r2)
 80110dc:	e0bff717 	ldw	r2,-36(fp)
 80110e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80110e4:	e0bffb17 	ldw	r2,-20(fp)
 80110e8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 80110ec:	0005883a 	mov	r2,zero
 80110f0:	00000306 	br	8011100 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 80110f4:	00bffa84 	movi	r2,-22
 80110f8:	00000106 	br	8011100 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 80110fc:	00bfde84 	movi	r2,-134
  }
}
 8011100:	e037883a 	mov	sp,fp
 8011104:	df000017 	ldw	fp,0(sp)
 8011108:	dec00104 	addi	sp,sp,4
 801110c:	f800283a 	ret

08011110 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8011110:	defffe04 	addi	sp,sp,-8
 8011114:	df000115 	stw	fp,4(sp)
 8011118:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 801111c:	e03fff15 	stw	zero,-4(fp)
 8011120:	00000506 	br	8011138 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8011124:	e0bfff17 	ldw	r2,-4(fp)
 8011128:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 801112c:	e0bfff17 	ldw	r2,-4(fp)
 8011130:	10800804 	addi	r2,r2,32
 8011134:	e0bfff15 	stw	r2,-4(fp)
 8011138:	e0bfff17 	ldw	r2,-4(fp)
 801113c:	10820030 	cmpltui	r2,r2,2048
 8011140:	103ff81e 	bne	r2,zero,8011124 <__ram_exceptions_end+0xf7f90ee4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8011144:	e037883a 	mov	sp,fp
 8011148:	df000017 	ldw	fp,0(sp)
 801114c:	dec00104 	addi	sp,sp,4
 8011150:	f800283a 	ret

08011154 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8011154:	defffe04 	addi	sp,sp,-8
 8011158:	dfc00115 	stw	ra,4(sp)
 801115c:	df000015 	stw	fp,0(sp)
 8011160:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011164:	00820074 	movhi	r2,2049
 8011168:	10915204 	addi	r2,r2,17736
 801116c:	10800017 	ldw	r2,0(r2)
 8011170:	10000526 	beq	r2,zero,8011188 <alt_get_errno+0x34>
 8011174:	00820074 	movhi	r2,2049
 8011178:	10915204 	addi	r2,r2,17736
 801117c:	10800017 	ldw	r2,0(r2)
 8011180:	103ee83a 	callr	r2
 8011184:	00000206 	br	8011190 <alt_get_errno+0x3c>
 8011188:	00820074 	movhi	r2,2049
 801118c:	10982304 	addi	r2,r2,24716
}
 8011190:	e037883a 	mov	sp,fp
 8011194:	dfc00117 	ldw	ra,4(sp)
 8011198:	df000017 	ldw	fp,0(sp)
 801119c:	dec00204 	addi	sp,sp,8
 80111a0:	f800283a 	ret

080111a4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 80111a4:	defffa04 	addi	sp,sp,-24
 80111a8:	dfc00515 	stw	ra,20(sp)
 80111ac:	df000415 	stw	fp,16(sp)
 80111b0:	df000404 	addi	fp,sp,16
 80111b4:	e13ffe15 	stw	r4,-8(fp)
 80111b8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80111bc:	e0bffe17 	ldw	r2,-8(fp)
 80111c0:	10000326 	beq	r2,zero,80111d0 <alt_dev_llist_insert+0x2c>
 80111c4:	e0bffe17 	ldw	r2,-8(fp)
 80111c8:	10800217 	ldw	r2,8(r2)
 80111cc:	1000061e 	bne	r2,zero,80111e8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 80111d0:	80111540 	call	8011154 <alt_get_errno>
 80111d4:	1007883a 	mov	r3,r2
 80111d8:	00800584 	movi	r2,22
 80111dc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 80111e0:	00bffa84 	movi	r2,-22
 80111e4:	00001306 	br	8011234 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80111e8:	e0bffe17 	ldw	r2,-8(fp)
 80111ec:	e0ffff17 	ldw	r3,-4(fp)
 80111f0:	e0fffc15 	stw	r3,-16(fp)
 80111f4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80111f8:	e0bffd17 	ldw	r2,-12(fp)
 80111fc:	e0fffc17 	ldw	r3,-16(fp)
 8011200:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8011204:	e0bffc17 	ldw	r2,-16(fp)
 8011208:	10c00017 	ldw	r3,0(r2)
 801120c:	e0bffd17 	ldw	r2,-12(fp)
 8011210:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8011214:	e0bffc17 	ldw	r2,-16(fp)
 8011218:	10800017 	ldw	r2,0(r2)
 801121c:	e0fffd17 	ldw	r3,-12(fp)
 8011220:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8011224:	e0bffc17 	ldw	r2,-16(fp)
 8011228:	e0fffd17 	ldw	r3,-12(fp)
 801122c:	10c00015 	stw	r3,0(r2)

  return 0;  
 8011230:	0005883a 	mov	r2,zero
}
 8011234:	e037883a 	mov	sp,fp
 8011238:	dfc00117 	ldw	ra,4(sp)
 801123c:	df000017 	ldw	fp,0(sp)
 8011240:	dec00204 	addi	sp,sp,8
 8011244:	f800283a 	ret

08011248 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8011248:	defffd04 	addi	sp,sp,-12
 801124c:	dfc00215 	stw	ra,8(sp)
 8011250:	df000115 	stw	fp,4(sp)
 8011254:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8011258:	00820074 	movhi	r2,2049
 801125c:	1088a204 	addi	r2,r2,8840
 8011260:	e0bfff15 	stw	r2,-4(fp)
 8011264:	00000606 	br	8011280 <_do_ctors+0x38>
        (*ctor) (); 
 8011268:	e0bfff17 	ldw	r2,-4(fp)
 801126c:	10800017 	ldw	r2,0(r2)
 8011270:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8011274:	e0bfff17 	ldw	r2,-4(fp)
 8011278:	10bfff04 	addi	r2,r2,-4
 801127c:	e0bfff15 	stw	r2,-4(fp)
 8011280:	e0ffff17 	ldw	r3,-4(fp)
 8011284:	00820074 	movhi	r2,2049
 8011288:	1088a304 	addi	r2,r2,8844
 801128c:	18bff62e 	bgeu	r3,r2,8011268 <__ram_exceptions_end+0xf7f91028>
        (*ctor) (); 
}
 8011290:	e037883a 	mov	sp,fp
 8011294:	dfc00117 	ldw	ra,4(sp)
 8011298:	df000017 	ldw	fp,0(sp)
 801129c:	dec00204 	addi	sp,sp,8
 80112a0:	f800283a 	ret

080112a4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 80112a4:	defffd04 	addi	sp,sp,-12
 80112a8:	dfc00215 	stw	ra,8(sp)
 80112ac:	df000115 	stw	fp,4(sp)
 80112b0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80112b4:	00820074 	movhi	r2,2049
 80112b8:	1088a204 	addi	r2,r2,8840
 80112bc:	e0bfff15 	stw	r2,-4(fp)
 80112c0:	00000606 	br	80112dc <_do_dtors+0x38>
        (*dtor) (); 
 80112c4:	e0bfff17 	ldw	r2,-4(fp)
 80112c8:	10800017 	ldw	r2,0(r2)
 80112cc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80112d0:	e0bfff17 	ldw	r2,-4(fp)
 80112d4:	10bfff04 	addi	r2,r2,-4
 80112d8:	e0bfff15 	stw	r2,-4(fp)
 80112dc:	e0ffff17 	ldw	r3,-4(fp)
 80112e0:	00820074 	movhi	r2,2049
 80112e4:	1088a304 	addi	r2,r2,8844
 80112e8:	18bff62e 	bgeu	r3,r2,80112c4 <__ram_exceptions_end+0xf7f91084>
        (*dtor) (); 
}
 80112ec:	e037883a 	mov	sp,fp
 80112f0:	dfc00117 	ldw	ra,4(sp)
 80112f4:	df000017 	ldw	fp,0(sp)
 80112f8:	dec00204 	addi	sp,sp,8
 80112fc:	f800283a 	ret

08011300 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8011300:	defffa04 	addi	sp,sp,-24
 8011304:	dfc00515 	stw	ra,20(sp)
 8011308:	df000415 	stw	fp,16(sp)
 801130c:	df000404 	addi	fp,sp,16
 8011310:	e13ffe15 	stw	r4,-8(fp)
 8011314:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8011318:	e0bfff17 	ldw	r2,-4(fp)
 801131c:	10800017 	ldw	r2,0(r2)
 8011320:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8011324:	e13ffe17 	ldw	r4,-8(fp)
 8011328:	80041000 	call	8004100 <strlen>
 801132c:	10800044 	addi	r2,r2,1
 8011330:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8011334:	00000d06 	br	801136c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8011338:	e0bffc17 	ldw	r2,-16(fp)
 801133c:	10c00217 	ldw	r3,8(r2)
 8011340:	e0bffd17 	ldw	r2,-12(fp)
 8011344:	1809883a 	mov	r4,r3
 8011348:	e17ffe17 	ldw	r5,-8(fp)
 801134c:	100d883a 	mov	r6,r2
 8011350:	8011f340 	call	8011f34 <memcmp>
 8011354:	1000021e 	bne	r2,zero,8011360 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8011358:	e0bffc17 	ldw	r2,-16(fp)
 801135c:	00000706 	br	801137c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8011360:	e0bffc17 	ldw	r2,-16(fp)
 8011364:	10800017 	ldw	r2,0(r2)
 8011368:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801136c:	e0fffc17 	ldw	r3,-16(fp)
 8011370:	e0bfff17 	ldw	r2,-4(fp)
 8011374:	18bff01e 	bne	r3,r2,8011338 <__ram_exceptions_end+0xf7f910f8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8011378:	0005883a 	mov	r2,zero
}
 801137c:	e037883a 	mov	sp,fp
 8011380:	dfc00117 	ldw	ra,4(sp)
 8011384:	df000017 	ldw	fp,0(sp)
 8011388:	dec00204 	addi	sp,sp,8
 801138c:	f800283a 	ret

08011390 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8011390:	defffe04 	addi	sp,sp,-8
 8011394:	dfc00115 	stw	ra,4(sp)
 8011398:	df000015 	stw	fp,0(sp)
 801139c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 80113a0:	0009883a 	mov	r4,zero
 80113a4:	01440004 	movi	r5,4096
 80113a8:	8011dc00 	call	8011dc0 <alt_icache_flush>
#endif
}
 80113ac:	e037883a 	mov	sp,fp
 80113b0:	dfc00117 	ldw	ra,4(sp)
 80113b4:	df000017 	ldw	fp,0(sp)
 80113b8:	dec00204 	addi	sp,sp,8
 80113bc:	f800283a 	ret

080113c0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80113c0:	defff904 	addi	sp,sp,-28
 80113c4:	dfc00615 	stw	ra,24(sp)
 80113c8:	df000515 	stw	fp,20(sp)
 80113cc:	df000504 	addi	fp,sp,20
 80113d0:	e13ffc15 	stw	r4,-16(fp)
 80113d4:	e17ffd15 	stw	r5,-12(fp)
 80113d8:	e1bffe15 	stw	r6,-8(fp)
 80113dc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 80113e0:	e0800217 	ldw	r2,8(fp)
 80113e4:	d8800015 	stw	r2,0(sp)
 80113e8:	e13ffc17 	ldw	r4,-16(fp)
 80113ec:	e17ffd17 	ldw	r5,-12(fp)
 80113f0:	e1bffe17 	ldw	r6,-8(fp)
 80113f4:	e1ffff17 	ldw	r7,-4(fp)
 80113f8:	80115a00 	call	80115a0 <alt_iic_isr_register>
}  
 80113fc:	e037883a 	mov	sp,fp
 8011400:	dfc00117 	ldw	ra,4(sp)
 8011404:	df000017 	ldw	fp,0(sp)
 8011408:	dec00204 	addi	sp,sp,8
 801140c:	f800283a 	ret

08011410 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8011410:	defff904 	addi	sp,sp,-28
 8011414:	df000615 	stw	fp,24(sp)
 8011418:	df000604 	addi	fp,sp,24
 801141c:	e13ffe15 	stw	r4,-8(fp)
 8011420:	e17fff15 	stw	r5,-4(fp)
 8011424:	e0bfff17 	ldw	r2,-4(fp)
 8011428:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801142c:	0005303a 	rdctl	r2,status
 8011430:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011434:	e0fffb17 	ldw	r3,-20(fp)
 8011438:	00bfff84 	movi	r2,-2
 801143c:	1884703a 	and	r2,r3,r2
 8011440:	1001703a 	wrctl	status,r2
  
  return context;
 8011444:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8011448:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 801144c:	e0bffa17 	ldw	r2,-24(fp)
 8011450:	00c00044 	movi	r3,1
 8011454:	1884983a 	sll	r2,r3,r2
 8011458:	1007883a 	mov	r3,r2
 801145c:	00820074 	movhi	r2,2049
 8011460:	10982704 	addi	r2,r2,24732
 8011464:	10800017 	ldw	r2,0(r2)
 8011468:	1886b03a 	or	r3,r3,r2
 801146c:	00820074 	movhi	r2,2049
 8011470:	10982704 	addi	r2,r2,24732
 8011474:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8011478:	00820074 	movhi	r2,2049
 801147c:	10982704 	addi	r2,r2,24732
 8011480:	10800017 	ldw	r2,0(r2)
 8011484:	100170fa 	wrctl	ienable,r2
 8011488:	e0bffc17 	ldw	r2,-16(fp)
 801148c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011490:	e0bffd17 	ldw	r2,-12(fp)
 8011494:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8011498:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 801149c:	0001883a 	nop
}
 80114a0:	e037883a 	mov	sp,fp
 80114a4:	df000017 	ldw	fp,0(sp)
 80114a8:	dec00104 	addi	sp,sp,4
 80114ac:	f800283a 	ret

080114b0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80114b0:	defff904 	addi	sp,sp,-28
 80114b4:	df000615 	stw	fp,24(sp)
 80114b8:	df000604 	addi	fp,sp,24
 80114bc:	e13ffe15 	stw	r4,-8(fp)
 80114c0:	e17fff15 	stw	r5,-4(fp)
 80114c4:	e0bfff17 	ldw	r2,-4(fp)
 80114c8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80114cc:	0005303a 	rdctl	r2,status
 80114d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80114d4:	e0fffb17 	ldw	r3,-20(fp)
 80114d8:	00bfff84 	movi	r2,-2
 80114dc:	1884703a 	and	r2,r3,r2
 80114e0:	1001703a 	wrctl	status,r2
  
  return context;
 80114e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80114e8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 80114ec:	e0bffa17 	ldw	r2,-24(fp)
 80114f0:	00c00044 	movi	r3,1
 80114f4:	1884983a 	sll	r2,r3,r2
 80114f8:	0084303a 	nor	r2,zero,r2
 80114fc:	1007883a 	mov	r3,r2
 8011500:	00820074 	movhi	r2,2049
 8011504:	10982704 	addi	r2,r2,24732
 8011508:	10800017 	ldw	r2,0(r2)
 801150c:	1886703a 	and	r3,r3,r2
 8011510:	00820074 	movhi	r2,2049
 8011514:	10982704 	addi	r2,r2,24732
 8011518:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801151c:	00820074 	movhi	r2,2049
 8011520:	10982704 	addi	r2,r2,24732
 8011524:	10800017 	ldw	r2,0(r2)
 8011528:	100170fa 	wrctl	ienable,r2
 801152c:	e0bffc17 	ldw	r2,-16(fp)
 8011530:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011534:	e0bffd17 	ldw	r2,-12(fp)
 8011538:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 801153c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8011540:	0001883a 	nop
}
 8011544:	e037883a 	mov	sp,fp
 8011548:	df000017 	ldw	fp,0(sp)
 801154c:	dec00104 	addi	sp,sp,4
 8011550:	f800283a 	ret

08011554 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8011554:	defffc04 	addi	sp,sp,-16
 8011558:	df000315 	stw	fp,12(sp)
 801155c:	df000304 	addi	fp,sp,12
 8011560:	e13ffe15 	stw	r4,-8(fp)
 8011564:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8011568:	000530fa 	rdctl	r2,ienable
 801156c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8011570:	e0bfff17 	ldw	r2,-4(fp)
 8011574:	00c00044 	movi	r3,1
 8011578:	1884983a 	sll	r2,r3,r2
 801157c:	1007883a 	mov	r3,r2
 8011580:	e0bffd17 	ldw	r2,-12(fp)
 8011584:	1884703a 	and	r2,r3,r2
 8011588:	1004c03a 	cmpne	r2,r2,zero
 801158c:	10803fcc 	andi	r2,r2,255
}
 8011590:	e037883a 	mov	sp,fp
 8011594:	df000017 	ldw	fp,0(sp)
 8011598:	dec00104 	addi	sp,sp,4
 801159c:	f800283a 	ret

080115a0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80115a0:	defff504 	addi	sp,sp,-44
 80115a4:	dfc00a15 	stw	ra,40(sp)
 80115a8:	df000915 	stw	fp,36(sp)
 80115ac:	df000904 	addi	fp,sp,36
 80115b0:	e13ffc15 	stw	r4,-16(fp)
 80115b4:	e17ffd15 	stw	r5,-12(fp)
 80115b8:	e1bffe15 	stw	r6,-8(fp)
 80115bc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 80115c0:	00bffa84 	movi	r2,-22
 80115c4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 80115c8:	e0bffd17 	ldw	r2,-12(fp)
 80115cc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 80115d0:	e0bff817 	ldw	r2,-32(fp)
 80115d4:	10800808 	cmpgei	r2,r2,32
 80115d8:	1000271e 	bne	r2,zero,8011678 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80115dc:	0005303a 	rdctl	r2,status
 80115e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80115e4:	e0fffa17 	ldw	r3,-24(fp)
 80115e8:	00bfff84 	movi	r2,-2
 80115ec:	1884703a 	and	r2,r3,r2
 80115f0:	1001703a 	wrctl	status,r2
  
  return context;
 80115f4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 80115f8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 80115fc:	00820074 	movhi	r2,2049
 8011600:	10983504 	addi	r2,r2,24788
 8011604:	e0fff817 	ldw	r3,-32(fp)
 8011608:	180690fa 	slli	r3,r3,3
 801160c:	10c5883a 	add	r2,r2,r3
 8011610:	e0fffe17 	ldw	r3,-8(fp)
 8011614:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8011618:	00820074 	movhi	r2,2049
 801161c:	10983504 	addi	r2,r2,24788
 8011620:	e0fff817 	ldw	r3,-32(fp)
 8011624:	180690fa 	slli	r3,r3,3
 8011628:	10c5883a 	add	r2,r2,r3
 801162c:	10800104 	addi	r2,r2,4
 8011630:	e0ffff17 	ldw	r3,-4(fp)
 8011634:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8011638:	e0bffe17 	ldw	r2,-8(fp)
 801163c:	10000526 	beq	r2,zero,8011654 <alt_iic_isr_register+0xb4>
 8011640:	e0bff817 	ldw	r2,-32(fp)
 8011644:	e13ffc17 	ldw	r4,-16(fp)
 8011648:	100b883a 	mov	r5,r2
 801164c:	80114100 	call	8011410 <alt_ic_irq_enable>
 8011650:	00000406 	br	8011664 <alt_iic_isr_register+0xc4>
 8011654:	e0bff817 	ldw	r2,-32(fp)
 8011658:	e13ffc17 	ldw	r4,-16(fp)
 801165c:	100b883a 	mov	r5,r2
 8011660:	80114b00 	call	80114b0 <alt_ic_irq_disable>
 8011664:	e0bff715 	stw	r2,-36(fp)
 8011668:	e0bff917 	ldw	r2,-28(fp)
 801166c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011670:	e0bffb17 	ldw	r2,-20(fp)
 8011674:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8011678:	e0bff717 	ldw	r2,-36(fp)
}
 801167c:	e037883a 	mov	sp,fp
 8011680:	dfc00117 	ldw	ra,4(sp)
 8011684:	df000017 	ldw	fp,0(sp)
 8011688:	dec00204 	addi	sp,sp,8
 801168c:	f800283a 	ret

08011690 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8011690:	defff904 	addi	sp,sp,-28
 8011694:	dfc00615 	stw	ra,24(sp)
 8011698:	df000515 	stw	fp,20(sp)
 801169c:	df000504 	addi	fp,sp,20
 80116a0:	e13ffc15 	stw	r4,-16(fp)
 80116a4:	e17ffd15 	stw	r5,-12(fp)
 80116a8:	e1bffe15 	stw	r6,-8(fp)
 80116ac:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 80116b0:	e13ffd17 	ldw	r4,-12(fp)
 80116b4:	e17ffe17 	ldw	r5,-8(fp)
 80116b8:	e1bfff17 	ldw	r6,-4(fp)
 80116bc:	80118e40 	call	80118e4 <open>
 80116c0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 80116c4:	e0bffb17 	ldw	r2,-20(fp)
 80116c8:	10001c16 	blt	r2,zero,801173c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 80116cc:	00820074 	movhi	r2,2049
 80116d0:	108cc504 	addi	r2,r2,13076
 80116d4:	e0fffb17 	ldw	r3,-20(fp)
 80116d8:	18c00324 	muli	r3,r3,12
 80116dc:	10c5883a 	add	r2,r2,r3
 80116e0:	10c00017 	ldw	r3,0(r2)
 80116e4:	e0bffc17 	ldw	r2,-16(fp)
 80116e8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80116ec:	00820074 	movhi	r2,2049
 80116f0:	108cc504 	addi	r2,r2,13076
 80116f4:	e0fffb17 	ldw	r3,-20(fp)
 80116f8:	18c00324 	muli	r3,r3,12
 80116fc:	10c5883a 	add	r2,r2,r3
 8011700:	10800104 	addi	r2,r2,4
 8011704:	10c00017 	ldw	r3,0(r2)
 8011708:	e0bffc17 	ldw	r2,-16(fp)
 801170c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8011710:	00820074 	movhi	r2,2049
 8011714:	108cc504 	addi	r2,r2,13076
 8011718:	e0fffb17 	ldw	r3,-20(fp)
 801171c:	18c00324 	muli	r3,r3,12
 8011720:	10c5883a 	add	r2,r2,r3
 8011724:	10800204 	addi	r2,r2,8
 8011728:	10c00017 	ldw	r3,0(r2)
 801172c:	e0bffc17 	ldw	r2,-16(fp)
 8011730:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8011734:	e13ffb17 	ldw	r4,-20(fp)
 8011738:	800feec0 	call	800feec <alt_release_fd>
  }
} 
 801173c:	e037883a 	mov	sp,fp
 8011740:	dfc00117 	ldw	ra,4(sp)
 8011744:	df000017 	ldw	fp,0(sp)
 8011748:	dec00204 	addi	sp,sp,8
 801174c:	f800283a 	ret

08011750 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8011750:	defffb04 	addi	sp,sp,-20
 8011754:	dfc00415 	stw	ra,16(sp)
 8011758:	df000315 	stw	fp,12(sp)
 801175c:	df000304 	addi	fp,sp,12
 8011760:	e13ffd15 	stw	r4,-12(fp)
 8011764:	e17ffe15 	stw	r5,-8(fp)
 8011768:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 801176c:	01020074 	movhi	r4,2049
 8011770:	210cc804 	addi	r4,r4,13088
 8011774:	e17ffd17 	ldw	r5,-12(fp)
 8011778:	01800044 	movi	r6,1
 801177c:	01c07fc4 	movi	r7,511
 8011780:	80116900 	call	8011690 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8011784:	01020074 	movhi	r4,2049
 8011788:	210cc504 	addi	r4,r4,13076
 801178c:	e17ffe17 	ldw	r5,-8(fp)
 8011790:	000d883a 	mov	r6,zero
 8011794:	01c07fc4 	movi	r7,511
 8011798:	80116900 	call	8011690 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 801179c:	01020074 	movhi	r4,2049
 80117a0:	210ccb04 	addi	r4,r4,13100
 80117a4:	e17fff17 	ldw	r5,-4(fp)
 80117a8:	01800044 	movi	r6,1
 80117ac:	01c07fc4 	movi	r7,511
 80117b0:	80116900 	call	8011690 <alt_open_fd>
}  
 80117b4:	e037883a 	mov	sp,fp
 80117b8:	dfc00117 	ldw	ra,4(sp)
 80117bc:	df000017 	ldw	fp,0(sp)
 80117c0:	dec00204 	addi	sp,sp,8
 80117c4:	f800283a 	ret

080117c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80117c8:	defffe04 	addi	sp,sp,-8
 80117cc:	dfc00115 	stw	ra,4(sp)
 80117d0:	df000015 	stw	fp,0(sp)
 80117d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80117d8:	00820074 	movhi	r2,2049
 80117dc:	10915204 	addi	r2,r2,17736
 80117e0:	10800017 	ldw	r2,0(r2)
 80117e4:	10000526 	beq	r2,zero,80117fc <alt_get_errno+0x34>
 80117e8:	00820074 	movhi	r2,2049
 80117ec:	10915204 	addi	r2,r2,17736
 80117f0:	10800017 	ldw	r2,0(r2)
 80117f4:	103ee83a 	callr	r2
 80117f8:	00000206 	br	8011804 <alt_get_errno+0x3c>
 80117fc:	00820074 	movhi	r2,2049
 8011800:	10982304 	addi	r2,r2,24716
}
 8011804:	e037883a 	mov	sp,fp
 8011808:	dfc00117 	ldw	ra,4(sp)
 801180c:	df000017 	ldw	fp,0(sp)
 8011810:	dec00204 	addi	sp,sp,8
 8011814:	f800283a 	ret

08011818 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8011818:	defffd04 	addi	sp,sp,-12
 801181c:	df000215 	stw	fp,8(sp)
 8011820:	df000204 	addi	fp,sp,8
 8011824:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8011828:	e0bfff17 	ldw	r2,-4(fp)
 801182c:	10800217 	ldw	r2,8(r2)
 8011830:	10d00034 	orhi	r3,r2,16384
 8011834:	e0bfff17 	ldw	r2,-4(fp)
 8011838:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 801183c:	e03ffe15 	stw	zero,-8(fp)
 8011840:	00001d06 	br	80118b8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8011844:	00820074 	movhi	r2,2049
 8011848:	108cc504 	addi	r2,r2,13076
 801184c:	e0fffe17 	ldw	r3,-8(fp)
 8011850:	18c00324 	muli	r3,r3,12
 8011854:	10c5883a 	add	r2,r2,r3
 8011858:	10c00017 	ldw	r3,0(r2)
 801185c:	e0bfff17 	ldw	r2,-4(fp)
 8011860:	10800017 	ldw	r2,0(r2)
 8011864:	1880111e 	bne	r3,r2,80118ac <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8011868:	00820074 	movhi	r2,2049
 801186c:	108cc504 	addi	r2,r2,13076
 8011870:	e0fffe17 	ldw	r3,-8(fp)
 8011874:	18c00324 	muli	r3,r3,12
 8011878:	10c5883a 	add	r2,r2,r3
 801187c:	10800204 	addi	r2,r2,8
 8011880:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8011884:	1000090e 	bge	r2,zero,80118ac <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8011888:	e0bffe17 	ldw	r2,-8(fp)
 801188c:	10c00324 	muli	r3,r2,12
 8011890:	00820074 	movhi	r2,2049
 8011894:	108cc504 	addi	r2,r2,13076
 8011898:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 801189c:	e0bfff17 	ldw	r2,-4(fp)
 80118a0:	18800226 	beq	r3,r2,80118ac <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 80118a4:	00bffcc4 	movi	r2,-13
 80118a8:	00000a06 	br	80118d4 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80118ac:	e0bffe17 	ldw	r2,-8(fp)
 80118b0:	10800044 	addi	r2,r2,1
 80118b4:	e0bffe15 	stw	r2,-8(fp)
 80118b8:	00820074 	movhi	r2,2049
 80118bc:	10915104 	addi	r2,r2,17732
 80118c0:	10800017 	ldw	r2,0(r2)
 80118c4:	1007883a 	mov	r3,r2
 80118c8:	e0bffe17 	ldw	r2,-8(fp)
 80118cc:	18bfdd2e 	bgeu	r3,r2,8011844 <__ram_exceptions_end+0xf7f91604>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 80118d0:	0005883a 	mov	r2,zero
}
 80118d4:	e037883a 	mov	sp,fp
 80118d8:	df000017 	ldw	fp,0(sp)
 80118dc:	dec00104 	addi	sp,sp,4
 80118e0:	f800283a 	ret

080118e4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80118e4:	defff604 	addi	sp,sp,-40
 80118e8:	dfc00915 	stw	ra,36(sp)
 80118ec:	df000815 	stw	fp,32(sp)
 80118f0:	df000804 	addi	fp,sp,32
 80118f4:	e13ffd15 	stw	r4,-12(fp)
 80118f8:	e17ffe15 	stw	r5,-8(fp)
 80118fc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8011900:	00bfffc4 	movi	r2,-1
 8011904:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8011908:	00bffb44 	movi	r2,-19
 801190c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8011910:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8011914:	e13ffd17 	ldw	r4,-12(fp)
 8011918:	01420074 	movhi	r5,2049
 801191c:	29514f04 	addi	r5,r5,17724
 8011920:	80113000 	call	8011300 <alt_find_dev>
 8011924:	e0bff815 	stw	r2,-32(fp)
 8011928:	e0bff817 	ldw	r2,-32(fp)
 801192c:	1000051e 	bne	r2,zero,8011944 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8011930:	e13ffd17 	ldw	r4,-12(fp)
 8011934:	8011bf80 	call	8011bf8 <alt_find_file>
 8011938:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 801193c:	00800044 	movi	r2,1
 8011940:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8011944:	e0bff817 	ldw	r2,-32(fp)
 8011948:	10002926 	beq	r2,zero,80119f0 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 801194c:	e13ff817 	ldw	r4,-32(fp)
 8011950:	8011d0c0 	call	8011d0c <alt_get_fd>
 8011954:	e0bff915 	stw	r2,-28(fp)
 8011958:	e0bff917 	ldw	r2,-28(fp)
 801195c:	1000030e 	bge	r2,zero,801196c <open+0x88>
    {
      status = index;
 8011960:	e0bff917 	ldw	r2,-28(fp)
 8011964:	e0bffa15 	stw	r2,-24(fp)
 8011968:	00002306 	br	80119f8 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 801196c:	e0bff917 	ldw	r2,-28(fp)
 8011970:	10c00324 	muli	r3,r2,12
 8011974:	00820074 	movhi	r2,2049
 8011978:	108cc504 	addi	r2,r2,13076
 801197c:	1885883a 	add	r2,r3,r2
 8011980:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8011984:	e0fffe17 	ldw	r3,-8(fp)
 8011988:	00900034 	movhi	r2,16384
 801198c:	10bfffc4 	addi	r2,r2,-1
 8011990:	1886703a 	and	r3,r3,r2
 8011994:	e0bffc17 	ldw	r2,-16(fp)
 8011998:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 801199c:	e0bffb17 	ldw	r2,-20(fp)
 80119a0:	1000051e 	bne	r2,zero,80119b8 <open+0xd4>
 80119a4:	e13ffc17 	ldw	r4,-16(fp)
 80119a8:	80118180 	call	8011818 <alt_file_locked>
 80119ac:	e0bffa15 	stw	r2,-24(fp)
 80119b0:	e0bffa17 	ldw	r2,-24(fp)
 80119b4:	10001016 	blt	r2,zero,80119f8 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 80119b8:	e0bff817 	ldw	r2,-32(fp)
 80119bc:	10800317 	ldw	r2,12(r2)
 80119c0:	10000826 	beq	r2,zero,80119e4 <open+0x100>
 80119c4:	e0bff817 	ldw	r2,-32(fp)
 80119c8:	10800317 	ldw	r2,12(r2)
 80119cc:	e13ffc17 	ldw	r4,-16(fp)
 80119d0:	e17ffd17 	ldw	r5,-12(fp)
 80119d4:	e1bffe17 	ldw	r6,-8(fp)
 80119d8:	e1ffff17 	ldw	r7,-4(fp)
 80119dc:	103ee83a 	callr	r2
 80119e0:	00000106 	br	80119e8 <open+0x104>
 80119e4:	0005883a 	mov	r2,zero
 80119e8:	e0bffa15 	stw	r2,-24(fp)
 80119ec:	00000206 	br	80119f8 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 80119f0:	00bffb44 	movi	r2,-19
 80119f4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 80119f8:	e0bffa17 	ldw	r2,-24(fp)
 80119fc:	1000090e 	bge	r2,zero,8011a24 <open+0x140>
  {
    alt_release_fd (index);  
 8011a00:	e13ff917 	ldw	r4,-28(fp)
 8011a04:	800feec0 	call	800feec <alt_release_fd>
    ALT_ERRNO = -status;
 8011a08:	80117c80 	call	80117c8 <alt_get_errno>
 8011a0c:	1007883a 	mov	r3,r2
 8011a10:	e0bffa17 	ldw	r2,-24(fp)
 8011a14:	0085c83a 	sub	r2,zero,r2
 8011a18:	18800015 	stw	r2,0(r3)
    return -1;
 8011a1c:	00bfffc4 	movi	r2,-1
 8011a20:	00000106 	br	8011a28 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 8011a24:	e0bff917 	ldw	r2,-28(fp)
}
 8011a28:	e037883a 	mov	sp,fp
 8011a2c:	dfc00117 	ldw	ra,4(sp)
 8011a30:	df000017 	ldw	fp,0(sp)
 8011a34:	dec00204 	addi	sp,sp,8
 8011a38:	f800283a 	ret

08011a3c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8011a3c:	defffa04 	addi	sp,sp,-24
 8011a40:	df000515 	stw	fp,20(sp)
 8011a44:	df000504 	addi	fp,sp,20
 8011a48:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011a4c:	0005303a 	rdctl	r2,status
 8011a50:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011a54:	e0fffc17 	ldw	r3,-16(fp)
 8011a58:	00bfff84 	movi	r2,-2
 8011a5c:	1884703a 	and	r2,r3,r2
 8011a60:	1001703a 	wrctl	status,r2
  
  return context;
 8011a64:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8011a68:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8011a6c:	e0bfff17 	ldw	r2,-4(fp)
 8011a70:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8011a74:	e0bffd17 	ldw	r2,-12(fp)
 8011a78:	10800017 	ldw	r2,0(r2)
 8011a7c:	e0fffd17 	ldw	r3,-12(fp)
 8011a80:	18c00117 	ldw	r3,4(r3)
 8011a84:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8011a88:	e0bffd17 	ldw	r2,-12(fp)
 8011a8c:	10800117 	ldw	r2,4(r2)
 8011a90:	e0fffd17 	ldw	r3,-12(fp)
 8011a94:	18c00017 	ldw	r3,0(r3)
 8011a98:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8011a9c:	e0bffd17 	ldw	r2,-12(fp)
 8011aa0:	e0fffd17 	ldw	r3,-12(fp)
 8011aa4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8011aa8:	e0bffd17 	ldw	r2,-12(fp)
 8011aac:	e0fffd17 	ldw	r3,-12(fp)
 8011ab0:	10c00015 	stw	r3,0(r2)
 8011ab4:	e0bffb17 	ldw	r2,-20(fp)
 8011ab8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011abc:	e0bffe17 	ldw	r2,-8(fp)
 8011ac0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8011ac4:	e037883a 	mov	sp,fp
 8011ac8:	df000017 	ldw	fp,0(sp)
 8011acc:	dec00104 	addi	sp,sp,4
 8011ad0:	f800283a 	ret

08011ad4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8011ad4:	defffb04 	addi	sp,sp,-20
 8011ad8:	dfc00415 	stw	ra,16(sp)
 8011adc:	df000315 	stw	fp,12(sp)
 8011ae0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8011ae4:	d0a01817 	ldw	r2,-32672(gp)
 8011ae8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8011aec:	d0a6ec17 	ldw	r2,-25680(gp)
 8011af0:	10800044 	addi	r2,r2,1
 8011af4:	d0a6ec15 	stw	r2,-25680(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8011af8:	00002e06 	br	8011bb4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8011afc:	e0bffd17 	ldw	r2,-12(fp)
 8011b00:	10800017 	ldw	r2,0(r2)
 8011b04:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8011b08:	e0bffd17 	ldw	r2,-12(fp)
 8011b0c:	10800403 	ldbu	r2,16(r2)
 8011b10:	10803fcc 	andi	r2,r2,255
 8011b14:	10000426 	beq	r2,zero,8011b28 <alt_tick+0x54>
 8011b18:	d0a6ec17 	ldw	r2,-25680(gp)
 8011b1c:	1000021e 	bne	r2,zero,8011b28 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8011b20:	e0bffd17 	ldw	r2,-12(fp)
 8011b24:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8011b28:	e0bffd17 	ldw	r2,-12(fp)
 8011b2c:	10800217 	ldw	r2,8(r2)
 8011b30:	d0e6ec17 	ldw	r3,-25680(gp)
 8011b34:	18801d36 	bltu	r3,r2,8011bac <alt_tick+0xd8>
 8011b38:	e0bffd17 	ldw	r2,-12(fp)
 8011b3c:	10800403 	ldbu	r2,16(r2)
 8011b40:	10803fcc 	andi	r2,r2,255
 8011b44:	1000191e 	bne	r2,zero,8011bac <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8011b48:	e0bffd17 	ldw	r2,-12(fp)
 8011b4c:	10800317 	ldw	r2,12(r2)
 8011b50:	e0fffd17 	ldw	r3,-12(fp)
 8011b54:	18c00517 	ldw	r3,20(r3)
 8011b58:	1809883a 	mov	r4,r3
 8011b5c:	103ee83a 	callr	r2
 8011b60:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8011b64:	e0bfff17 	ldw	r2,-4(fp)
 8011b68:	1000031e 	bne	r2,zero,8011b78 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8011b6c:	e13ffd17 	ldw	r4,-12(fp)
 8011b70:	8011a3c0 	call	8011a3c <alt_alarm_stop>
 8011b74:	00000d06 	br	8011bac <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8011b78:	e0bffd17 	ldw	r2,-12(fp)
 8011b7c:	10c00217 	ldw	r3,8(r2)
 8011b80:	e0bfff17 	ldw	r2,-4(fp)
 8011b84:	1887883a 	add	r3,r3,r2
 8011b88:	e0bffd17 	ldw	r2,-12(fp)
 8011b8c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8011b90:	e0bffd17 	ldw	r2,-12(fp)
 8011b94:	10c00217 	ldw	r3,8(r2)
 8011b98:	d0a6ec17 	ldw	r2,-25680(gp)
 8011b9c:	1880032e 	bgeu	r3,r2,8011bac <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8011ba0:	e0bffd17 	ldw	r2,-12(fp)
 8011ba4:	00c00044 	movi	r3,1
 8011ba8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8011bac:	e0bffe17 	ldw	r2,-8(fp)
 8011bb0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8011bb4:	e0fffd17 	ldw	r3,-12(fp)
 8011bb8:	d0a01804 	addi	r2,gp,-32672
 8011bbc:	18bfcf1e 	bne	r3,r2,8011afc <__ram_exceptions_end+0xf7f918bc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8011bc0:	0001883a 	nop
}
 8011bc4:	e037883a 	mov	sp,fp
 8011bc8:	dfc00117 	ldw	ra,4(sp)
 8011bcc:	df000017 	ldw	fp,0(sp)
 8011bd0:	dec00204 	addi	sp,sp,8
 8011bd4:	f800283a 	ret

08011bd8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8011bd8:	deffff04 	addi	sp,sp,-4
 8011bdc:	df000015 	stw	fp,0(sp)
 8011be0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8011be4:	000170fa 	wrctl	ienable,zero
}
 8011be8:	e037883a 	mov	sp,fp
 8011bec:	df000017 	ldw	fp,0(sp)
 8011bf0:	dec00104 	addi	sp,sp,4
 8011bf4:	f800283a 	ret

08011bf8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8011bf8:	defffb04 	addi	sp,sp,-20
 8011bfc:	dfc00415 	stw	ra,16(sp)
 8011c00:	df000315 	stw	fp,12(sp)
 8011c04:	df000304 	addi	fp,sp,12
 8011c08:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8011c0c:	00820074 	movhi	r2,2049
 8011c10:	10914d04 	addi	r2,r2,17716
 8011c14:	10800017 	ldw	r2,0(r2)
 8011c18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8011c1c:	00003106 	br	8011ce4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 8011c20:	e0bffd17 	ldw	r2,-12(fp)
 8011c24:	10800217 	ldw	r2,8(r2)
 8011c28:	1009883a 	mov	r4,r2
 8011c2c:	80041000 	call	8004100 <strlen>
 8011c30:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8011c34:	e0bffd17 	ldw	r2,-12(fp)
 8011c38:	10c00217 	ldw	r3,8(r2)
 8011c3c:	e0bffe17 	ldw	r2,-8(fp)
 8011c40:	10bfffc4 	addi	r2,r2,-1
 8011c44:	1885883a 	add	r2,r3,r2
 8011c48:	10800003 	ldbu	r2,0(r2)
 8011c4c:	10803fcc 	andi	r2,r2,255
 8011c50:	1080201c 	xori	r2,r2,128
 8011c54:	10bfe004 	addi	r2,r2,-128
 8011c58:	10800bd8 	cmpnei	r2,r2,47
 8011c5c:	1000031e 	bne	r2,zero,8011c6c <alt_find_file+0x74>
    {
      len -= 1;
 8011c60:	e0bffe17 	ldw	r2,-8(fp)
 8011c64:	10bfffc4 	addi	r2,r2,-1
 8011c68:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8011c6c:	e0bffe17 	ldw	r2,-8(fp)
 8011c70:	e0ffff17 	ldw	r3,-4(fp)
 8011c74:	1885883a 	add	r2,r3,r2
 8011c78:	10800003 	ldbu	r2,0(r2)
 8011c7c:	10803fcc 	andi	r2,r2,255
 8011c80:	1080201c 	xori	r2,r2,128
 8011c84:	10bfe004 	addi	r2,r2,-128
 8011c88:	10800be0 	cmpeqi	r2,r2,47
 8011c8c:	1000081e 	bne	r2,zero,8011cb0 <alt_find_file+0xb8>
 8011c90:	e0bffe17 	ldw	r2,-8(fp)
 8011c94:	e0ffff17 	ldw	r3,-4(fp)
 8011c98:	1885883a 	add	r2,r3,r2
 8011c9c:	10800003 	ldbu	r2,0(r2)
 8011ca0:	10803fcc 	andi	r2,r2,255
 8011ca4:	1080201c 	xori	r2,r2,128
 8011ca8:	10bfe004 	addi	r2,r2,-128
 8011cac:	10000a1e 	bne	r2,zero,8011cd8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 8011cb0:	e0bffd17 	ldw	r2,-12(fp)
 8011cb4:	10c00217 	ldw	r3,8(r2)
 8011cb8:	e0bffe17 	ldw	r2,-8(fp)
 8011cbc:	1809883a 	mov	r4,r3
 8011cc0:	e17fff17 	ldw	r5,-4(fp)
 8011cc4:	100d883a 	mov	r6,r2
 8011cc8:	8011f340 	call	8011f34 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8011ccc:	1000021e 	bne	r2,zero,8011cd8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8011cd0:	e0bffd17 	ldw	r2,-12(fp)
 8011cd4:	00000806 	br	8011cf8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 8011cd8:	e0bffd17 	ldw	r2,-12(fp)
 8011cdc:	10800017 	ldw	r2,0(r2)
 8011ce0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8011ce4:	e0fffd17 	ldw	r3,-12(fp)
 8011ce8:	00820074 	movhi	r2,2049
 8011cec:	10914d04 	addi	r2,r2,17716
 8011cf0:	18bfcb1e 	bne	r3,r2,8011c20 <__ram_exceptions_end+0xf7f919e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8011cf4:	0005883a 	mov	r2,zero
}
 8011cf8:	e037883a 	mov	sp,fp
 8011cfc:	dfc00117 	ldw	ra,4(sp)
 8011d00:	df000017 	ldw	fp,0(sp)
 8011d04:	dec00204 	addi	sp,sp,8
 8011d08:	f800283a 	ret

08011d0c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8011d0c:	defffc04 	addi	sp,sp,-16
 8011d10:	df000315 	stw	fp,12(sp)
 8011d14:	df000304 	addi	fp,sp,12
 8011d18:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8011d1c:	00bffa04 	movi	r2,-24
 8011d20:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8011d24:	e03ffd15 	stw	zero,-12(fp)
 8011d28:	00001d06 	br	8011da0 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 8011d2c:	00820074 	movhi	r2,2049
 8011d30:	108cc504 	addi	r2,r2,13076
 8011d34:	e0fffd17 	ldw	r3,-12(fp)
 8011d38:	18c00324 	muli	r3,r3,12
 8011d3c:	10c5883a 	add	r2,r2,r3
 8011d40:	10800017 	ldw	r2,0(r2)
 8011d44:	1000131e 	bne	r2,zero,8011d94 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 8011d48:	00820074 	movhi	r2,2049
 8011d4c:	108cc504 	addi	r2,r2,13076
 8011d50:	e0fffd17 	ldw	r3,-12(fp)
 8011d54:	18c00324 	muli	r3,r3,12
 8011d58:	10c5883a 	add	r2,r2,r3
 8011d5c:	e0ffff17 	ldw	r3,-4(fp)
 8011d60:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8011d64:	00820074 	movhi	r2,2049
 8011d68:	10915104 	addi	r2,r2,17732
 8011d6c:	10c00017 	ldw	r3,0(r2)
 8011d70:	e0bffd17 	ldw	r2,-12(fp)
 8011d74:	1880040e 	bge	r3,r2,8011d88 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 8011d78:	00820074 	movhi	r2,2049
 8011d7c:	10915104 	addi	r2,r2,17732
 8011d80:	e0fffd17 	ldw	r3,-12(fp)
 8011d84:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8011d88:	e0bffd17 	ldw	r2,-12(fp)
 8011d8c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8011d90:	00000606 	br	8011dac <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8011d94:	e0bffd17 	ldw	r2,-12(fp)
 8011d98:	10800044 	addi	r2,r2,1
 8011d9c:	e0bffd15 	stw	r2,-12(fp)
 8011da0:	e0bffd17 	ldw	r2,-12(fp)
 8011da4:	10800810 	cmplti	r2,r2,32
 8011da8:	103fe01e 	bne	r2,zero,8011d2c <__ram_exceptions_end+0xf7f91aec>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8011dac:	e0bffe17 	ldw	r2,-8(fp)
}
 8011db0:	e037883a 	mov	sp,fp
 8011db4:	df000017 	ldw	fp,0(sp)
 8011db8:	dec00104 	addi	sp,sp,4
 8011dbc:	f800283a 	ret

08011dc0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8011dc0:	defffb04 	addi	sp,sp,-20
 8011dc4:	df000415 	stw	fp,16(sp)
 8011dc8:	df000404 	addi	fp,sp,16
 8011dcc:	e13ffe15 	stw	r4,-8(fp)
 8011dd0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8011dd4:	e0bfff17 	ldw	r2,-4(fp)
 8011dd8:	10840070 	cmpltui	r2,r2,4097
 8011ddc:	1000021e 	bne	r2,zero,8011de8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8011de0:	00840004 	movi	r2,4096
 8011de4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8011de8:	e0fffe17 	ldw	r3,-8(fp)
 8011dec:	e0bfff17 	ldw	r2,-4(fp)
 8011df0:	1885883a 	add	r2,r3,r2
 8011df4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8011df8:	e0bffe17 	ldw	r2,-8(fp)
 8011dfc:	e0bffc15 	stw	r2,-16(fp)
 8011e00:	00000506 	br	8011e18 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8011e04:	e0bffc17 	ldw	r2,-16(fp)
 8011e08:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8011e0c:	e0bffc17 	ldw	r2,-16(fp)
 8011e10:	10800804 	addi	r2,r2,32
 8011e14:	e0bffc15 	stw	r2,-16(fp)
 8011e18:	e0fffc17 	ldw	r3,-16(fp)
 8011e1c:	e0bffd17 	ldw	r2,-12(fp)
 8011e20:	18bff836 	bltu	r3,r2,8011e04 <__ram_exceptions_end+0xf7f91bc4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8011e24:	e0bffe17 	ldw	r2,-8(fp)
 8011e28:	108007cc 	andi	r2,r2,31
 8011e2c:	10000226 	beq	r2,zero,8011e38 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8011e30:	e0bffc17 	ldw	r2,-16(fp)
 8011e34:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8011e38:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8011e3c:	e037883a 	mov	sp,fp
 8011e40:	df000017 	ldw	fp,0(sp)
 8011e44:	dec00104 	addi	sp,sp,4
 8011e48:	f800283a 	ret

08011e4c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8011e4c:	defffe04 	addi	sp,sp,-8
 8011e50:	df000115 	stw	fp,4(sp)
 8011e54:	df000104 	addi	fp,sp,4
 8011e58:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8011e5c:	e0bfff17 	ldw	r2,-4(fp)
 8011e60:	10bffe84 	addi	r2,r2,-6
 8011e64:	10c00428 	cmpgeui	r3,r2,16
 8011e68:	18001a1e 	bne	r3,zero,8011ed4 <alt_exception_cause_generated_bad_addr+0x88>
 8011e6c:	100690ba 	slli	r3,r2,2
 8011e70:	00820074 	movhi	r2,2049
 8011e74:	1087a104 	addi	r2,r2,7812
 8011e78:	1885883a 	add	r2,r3,r2
 8011e7c:	10800017 	ldw	r2,0(r2)
 8011e80:	1000683a 	jmp	r2
 8011e84:	08011ec4 	addi	zero,at,1147
 8011e88:	08011ec4 	addi	zero,at,1147
 8011e8c:	08011ed4 	ori	zero,at,1147
 8011e90:	08011ed4 	ori	zero,at,1147
 8011e94:	08011ed4 	ori	zero,at,1147
 8011e98:	08011ec4 	addi	zero,at,1147
 8011e9c:	08011ecc 	andi	zero,at,1147
 8011ea0:	08011ed4 	ori	zero,at,1147
 8011ea4:	08011ec4 	addi	zero,at,1147
 8011ea8:	08011ec4 	addi	zero,at,1147
 8011eac:	08011ed4 	ori	zero,at,1147
 8011eb0:	08011ec4 	addi	zero,at,1147
 8011eb4:	08011ecc 	andi	zero,at,1147
 8011eb8:	08011ed4 	ori	zero,at,1147
 8011ebc:	08011ed4 	ori	zero,at,1147
 8011ec0:	08011ec4 	addi	zero,at,1147
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8011ec4:	00800044 	movi	r2,1
 8011ec8:	00000306 	br	8011ed8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8011ecc:	0005883a 	mov	r2,zero
 8011ed0:	00000106 	br	8011ed8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8011ed4:	0005883a 	mov	r2,zero
  }
}
 8011ed8:	e037883a 	mov	sp,fp
 8011edc:	df000017 	ldw	fp,0(sp)
 8011ee0:	dec00104 	addi	sp,sp,4
 8011ee4:	f800283a 	ret

08011ee8 <atexit>:
 8011ee8:	200b883a 	mov	r5,r4
 8011eec:	000d883a 	mov	r6,zero
 8011ef0:	0009883a 	mov	r4,zero
 8011ef4:	000f883a 	mov	r7,zero
 8011ef8:	8011fb01 	jmpi	8011fb0 <__register_exitproc>

08011efc <exit>:
 8011efc:	defffe04 	addi	sp,sp,-8
 8011f00:	000b883a 	mov	r5,zero
 8011f04:	dc000015 	stw	r16,0(sp)
 8011f08:	dfc00115 	stw	ra,4(sp)
 8011f0c:	2021883a 	mov	r16,r4
 8011f10:	80120c40 	call	80120c4 <__call_exitprocs>
 8011f14:	00820074 	movhi	r2,2049
 8011f18:	10914704 	addi	r2,r2,17692
 8011f1c:	11000017 	ldw	r4,0(r2)
 8011f20:	20800f17 	ldw	r2,60(r4)
 8011f24:	10000126 	beq	r2,zero,8011f2c <exit+0x30>
 8011f28:	103ee83a 	callr	r2
 8011f2c:	8009883a 	mov	r4,r16
 8011f30:	80122580 	call	8012258 <_exit>

08011f34 <memcmp>:
 8011f34:	01c000c4 	movi	r7,3
 8011f38:	3980192e 	bgeu	r7,r6,8011fa0 <memcmp+0x6c>
 8011f3c:	2144b03a 	or	r2,r4,r5
 8011f40:	11c4703a 	and	r2,r2,r7
 8011f44:	10000f26 	beq	r2,zero,8011f84 <memcmp+0x50>
 8011f48:	20800003 	ldbu	r2,0(r4)
 8011f4c:	28c00003 	ldbu	r3,0(r5)
 8011f50:	10c0151e 	bne	r2,r3,8011fa8 <memcmp+0x74>
 8011f54:	31bfff84 	addi	r6,r6,-2
 8011f58:	01ffffc4 	movi	r7,-1
 8011f5c:	00000406 	br	8011f70 <memcmp+0x3c>
 8011f60:	20800003 	ldbu	r2,0(r4)
 8011f64:	28c00003 	ldbu	r3,0(r5)
 8011f68:	31bfffc4 	addi	r6,r6,-1
 8011f6c:	10c00e1e 	bne	r2,r3,8011fa8 <memcmp+0x74>
 8011f70:	21000044 	addi	r4,r4,1
 8011f74:	29400044 	addi	r5,r5,1
 8011f78:	31fff91e 	bne	r6,r7,8011f60 <__ram_exceptions_end+0xf7f91d20>
 8011f7c:	0005883a 	mov	r2,zero
 8011f80:	f800283a 	ret
 8011f84:	20c00017 	ldw	r3,0(r4)
 8011f88:	28800017 	ldw	r2,0(r5)
 8011f8c:	1880041e 	bne	r3,r2,8011fa0 <memcmp+0x6c>
 8011f90:	31bfff04 	addi	r6,r6,-4
 8011f94:	21000104 	addi	r4,r4,4
 8011f98:	29400104 	addi	r5,r5,4
 8011f9c:	39bff936 	bltu	r7,r6,8011f84 <__ram_exceptions_end+0xf7f91d44>
 8011fa0:	303fe91e 	bne	r6,zero,8011f48 <__ram_exceptions_end+0xf7f91d08>
 8011fa4:	003ff506 	br	8011f7c <__ram_exceptions_end+0xf7f91d3c>
 8011fa8:	10c5c83a 	sub	r2,r2,r3
 8011fac:	f800283a 	ret

08011fb0 <__register_exitproc>:
 8011fb0:	00820074 	movhi	r2,2049
 8011fb4:	defffa04 	addi	sp,sp,-24
 8011fb8:	10914704 	addi	r2,r2,17692
 8011fbc:	dc000315 	stw	r16,12(sp)
 8011fc0:	14000017 	ldw	r16,0(r2)
 8011fc4:	dc400415 	stw	r17,16(sp)
 8011fc8:	dfc00515 	stw	ra,20(sp)
 8011fcc:	80805217 	ldw	r2,328(r16)
 8011fd0:	2023883a 	mov	r17,r4
 8011fd4:	10003626 	beq	r2,zero,80120b0 <__register_exitproc+0x100>
 8011fd8:	10c00117 	ldw	r3,4(r2)
 8011fdc:	010007c4 	movi	r4,31
 8011fe0:	20c00e16 	blt	r4,r3,801201c <__register_exitproc+0x6c>
 8011fe4:	1a400044 	addi	r9,r3,1
 8011fe8:	8800211e 	bne	r17,zero,8012070 <__register_exitproc+0xc0>
 8011fec:	18c00084 	addi	r3,r3,2
 8011ff0:	18c7883a 	add	r3,r3,r3
 8011ff4:	18c7883a 	add	r3,r3,r3
 8011ff8:	12400115 	stw	r9,4(r2)
 8011ffc:	10c7883a 	add	r3,r2,r3
 8012000:	19400015 	stw	r5,0(r3)
 8012004:	0005883a 	mov	r2,zero
 8012008:	dfc00517 	ldw	ra,20(sp)
 801200c:	dc400417 	ldw	r17,16(sp)
 8012010:	dc000317 	ldw	r16,12(sp)
 8012014:	dec00604 	addi	sp,sp,24
 8012018:	f800283a 	ret
 801201c:	00800034 	movhi	r2,0
 8012020:	10800004 	addi	r2,r2,0
 8012024:	10002526 	beq	r2,zero,80120bc <__register_exitproc+0x10c>
 8012028:	01006404 	movi	r4,400
 801202c:	d9400015 	stw	r5,0(sp)
 8012030:	d9800115 	stw	r6,4(sp)
 8012034:	d9c00215 	stw	r7,8(sp)
 8012038:	00000000 	call	0 <__alt_mem_sdram_control-0x8000000>
 801203c:	d9400017 	ldw	r5,0(sp)
 8012040:	d9800117 	ldw	r6,4(sp)
 8012044:	d9c00217 	ldw	r7,8(sp)
 8012048:	10001c26 	beq	r2,zero,80120bc <__register_exitproc+0x10c>
 801204c:	80c05217 	ldw	r3,328(r16)
 8012050:	10000115 	stw	zero,4(r2)
 8012054:	02400044 	movi	r9,1
 8012058:	10c00015 	stw	r3,0(r2)
 801205c:	80805215 	stw	r2,328(r16)
 8012060:	10006215 	stw	zero,392(r2)
 8012064:	10006315 	stw	zero,396(r2)
 8012068:	0007883a 	mov	r3,zero
 801206c:	883fdf26 	beq	r17,zero,8011fec <__ram_exceptions_end+0xf7f91dac>
 8012070:	18d1883a 	add	r8,r3,r3
 8012074:	4211883a 	add	r8,r8,r8
 8012078:	1211883a 	add	r8,r2,r8
 801207c:	41802215 	stw	r6,136(r8)
 8012080:	01000044 	movi	r4,1
 8012084:	11806217 	ldw	r6,392(r2)
 8012088:	20c8983a 	sll	r4,r4,r3
 801208c:	310cb03a 	or	r6,r6,r4
 8012090:	11806215 	stw	r6,392(r2)
 8012094:	41c04215 	stw	r7,264(r8)
 8012098:	01800084 	movi	r6,2
 801209c:	89bfd31e 	bne	r17,r6,8011fec <__ram_exceptions_end+0xf7f91dac>
 80120a0:	11806317 	ldw	r6,396(r2)
 80120a4:	3108b03a 	or	r4,r6,r4
 80120a8:	11006315 	stw	r4,396(r2)
 80120ac:	003fcf06 	br	8011fec <__ram_exceptions_end+0xf7f91dac>
 80120b0:	80805304 	addi	r2,r16,332
 80120b4:	80805215 	stw	r2,328(r16)
 80120b8:	003fc706 	br	8011fd8 <__ram_exceptions_end+0xf7f91d98>
 80120bc:	00bfffc4 	movi	r2,-1
 80120c0:	003fd106 	br	8012008 <__ram_exceptions_end+0xf7f91dc8>

080120c4 <__call_exitprocs>:
 80120c4:	00820074 	movhi	r2,2049
 80120c8:	10914704 	addi	r2,r2,17692
 80120cc:	10800017 	ldw	r2,0(r2)
 80120d0:	defff404 	addi	sp,sp,-48
 80120d4:	dd800815 	stw	r22,32(sp)
 80120d8:	d8800015 	stw	r2,0(sp)
 80120dc:	10805204 	addi	r2,r2,328
 80120e0:	dd000615 	stw	r20,24(sp)
 80120e4:	dc800415 	stw	r18,16(sp)
 80120e8:	dfc00b15 	stw	ra,44(sp)
 80120ec:	df000a15 	stw	fp,40(sp)
 80120f0:	ddc00915 	stw	r23,36(sp)
 80120f4:	dd400715 	stw	r21,28(sp)
 80120f8:	dcc00515 	stw	r19,20(sp)
 80120fc:	dc400315 	stw	r17,12(sp)
 8012100:	dc000215 	stw	r16,8(sp)
 8012104:	2025883a 	mov	r18,r4
 8012108:	2829883a 	mov	r20,r5
 801210c:	d8800115 	stw	r2,4(sp)
 8012110:	05bfffc4 	movi	r22,-1
 8012114:	d8800017 	ldw	r2,0(sp)
 8012118:	14c05217 	ldw	r19,328(r2)
 801211c:	98001d26 	beq	r19,zero,8012194 <__call_exitprocs+0xd0>
 8012120:	dd400117 	ldw	r21,4(sp)
 8012124:	98800117 	ldw	r2,4(r19)
 8012128:	173fffc4 	addi	fp,r2,-1
 801212c:	e0000d16 	blt	fp,zero,8012164 <__call_exitprocs+0xa0>
 8012130:	14000044 	addi	r16,r2,1
 8012134:	8421883a 	add	r16,r16,r16
 8012138:	8421883a 	add	r16,r16,r16
 801213c:	84402004 	addi	r17,r16,128
 8012140:	9c63883a 	add	r17,r19,r17
 8012144:	9c21883a 	add	r16,r19,r16
 8012148:	a0001e26 	beq	r20,zero,80121c4 <__call_exitprocs+0x100>
 801214c:	80804017 	ldw	r2,256(r16)
 8012150:	15001c26 	beq	r2,r20,80121c4 <__call_exitprocs+0x100>
 8012154:	e73fffc4 	addi	fp,fp,-1
 8012158:	843fff04 	addi	r16,r16,-4
 801215c:	8c7fff04 	addi	r17,r17,-4
 8012160:	e5bff91e 	bne	fp,r22,8012148 <__ram_exceptions_end+0xf7f91f08>
 8012164:	00800034 	movhi	r2,0
 8012168:	10800004 	addi	r2,r2,0
 801216c:	10000926 	beq	r2,zero,8012194 <__call_exitprocs+0xd0>
 8012170:	98800117 	ldw	r2,4(r19)
 8012174:	1000311e 	bne	r2,zero,801223c <__call_exitprocs+0x178>
 8012178:	98800017 	ldw	r2,0(r19)
 801217c:	10003426 	beq	r2,zero,8012250 <__call_exitprocs+0x18c>
 8012180:	9809883a 	mov	r4,r19
 8012184:	a8800015 	stw	r2,0(r21)
 8012188:	00000000 	call	0 <__alt_mem_sdram_control-0x8000000>
 801218c:	acc00017 	ldw	r19,0(r21)
 8012190:	983fe41e 	bne	r19,zero,8012124 <__ram_exceptions_end+0xf7f91ee4>
 8012194:	dfc00b17 	ldw	ra,44(sp)
 8012198:	df000a17 	ldw	fp,40(sp)
 801219c:	ddc00917 	ldw	r23,36(sp)
 80121a0:	dd800817 	ldw	r22,32(sp)
 80121a4:	dd400717 	ldw	r21,28(sp)
 80121a8:	dd000617 	ldw	r20,24(sp)
 80121ac:	dcc00517 	ldw	r19,20(sp)
 80121b0:	dc800417 	ldw	r18,16(sp)
 80121b4:	dc400317 	ldw	r17,12(sp)
 80121b8:	dc000217 	ldw	r16,8(sp)
 80121bc:	dec00c04 	addi	sp,sp,48
 80121c0:	f800283a 	ret
 80121c4:	98800117 	ldw	r2,4(r19)
 80121c8:	80c00017 	ldw	r3,0(r16)
 80121cc:	10bfffc4 	addi	r2,r2,-1
 80121d0:	17001526 	beq	r2,fp,8012228 <__call_exitprocs+0x164>
 80121d4:	80000015 	stw	zero,0(r16)
 80121d8:	183fde26 	beq	r3,zero,8012154 <__ram_exceptions_end+0xf7f91f14>
 80121dc:	00800044 	movi	r2,1
 80121e0:	1708983a 	sll	r4,r2,fp
 80121e4:	98806217 	ldw	r2,392(r19)
 80121e8:	9dc00117 	ldw	r23,4(r19)
 80121ec:	2084703a 	and	r2,r4,r2
 80121f0:	1000061e 	bne	r2,zero,801220c <__call_exitprocs+0x148>
 80121f4:	183ee83a 	callr	r3
 80121f8:	98800117 	ldw	r2,4(r19)
 80121fc:	15ffc51e 	bne	r2,r23,8012114 <__ram_exceptions_end+0xf7f91ed4>
 8012200:	a8800017 	ldw	r2,0(r21)
 8012204:	14ffd326 	beq	r2,r19,8012154 <__ram_exceptions_end+0xf7f91f14>
 8012208:	003fc206 	br	8012114 <__ram_exceptions_end+0xf7f91ed4>
 801220c:	98806317 	ldw	r2,396(r19)
 8012210:	2084703a 	and	r2,r4,r2
 8012214:	1000061e 	bne	r2,zero,8012230 <__call_exitprocs+0x16c>
 8012218:	89400017 	ldw	r5,0(r17)
 801221c:	9009883a 	mov	r4,r18
 8012220:	183ee83a 	callr	r3
 8012224:	003ff406 	br	80121f8 <__ram_exceptions_end+0xf7f91fb8>
 8012228:	9f000115 	stw	fp,4(r19)
 801222c:	003fea06 	br	80121d8 <__ram_exceptions_end+0xf7f91f98>
 8012230:	89000017 	ldw	r4,0(r17)
 8012234:	183ee83a 	callr	r3
 8012238:	003fef06 	br	80121f8 <__ram_exceptions_end+0xf7f91fb8>
 801223c:	98800017 	ldw	r2,0(r19)
 8012240:	982b883a 	mov	r21,r19
 8012244:	1027883a 	mov	r19,r2
 8012248:	983fb61e 	bne	r19,zero,8012124 <__ram_exceptions_end+0xf7f91ee4>
 801224c:	003fd106 	br	8012194 <__ram_exceptions_end+0xf7f91f54>
 8012250:	0005883a 	mov	r2,zero
 8012254:	003ffa06 	br	8012240 <__ram_exceptions_end+0xf7f92000>

08012258 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8012258:	defffd04 	addi	sp,sp,-12
 801225c:	df000215 	stw	fp,8(sp)
 8012260:	df000204 	addi	fp,sp,8
 8012264:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8012268:	0001883a 	nop
 801226c:	e0bfff17 	ldw	r2,-4(fp)
 8012270:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8012274:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8012278:	10000226 	beq	r2,zero,8012284 <_exit+0x2c>
    ALT_SIM_FAIL();
 801227c:	002af070 	cmpltui	zero,zero,43969
 8012280:	00000106 	br	8012288 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8012284:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8012288:	003fff06 	br	8012288 <__ram_exceptions_end+0xf7f92048>
