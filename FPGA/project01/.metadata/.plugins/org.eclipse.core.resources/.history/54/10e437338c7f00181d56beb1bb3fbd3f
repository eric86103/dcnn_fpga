#include "alt_types.h"
alt_u8 truncation(alt_16 data) {
   double max_num = 7.9375;
   if(data > max_num) {
      printf("    Data %f is bigger than %f!!\n", (double)(data) / 16.0, (double)(max_num));
      return (alt_u8)(max_num*16);
   }
   else if(data < 0) {
      printf("    Data %f is smaller than %f!!\n", (double)(data) / 16.0, (double)(0));
      return 0;
   }
   return (alt_u8)data;
};

void matrix_to_imageCube(alt_16* matrix_result, alt_u8* o_fmap, int height, int width, int depth) {
   printf("  Transforming matrix to image cube...\n");
   int h = 0, w = 0, d = 0;
   for(d = 0; d < depth; d++) {
      alt_16* current_map;
      current_map = matrix_result + d;
      for(w = 0; w < width; w++) {
         for(h = 0; h < height; h++) {
            printf("    Data before truncate: "); //
            printf("%f", (double)(*(current_map + (h + w*height)*depth)) / 16.0);
            printf("\n");
            *(o_fmap+h*width*depth+w*depth+d) = truncation(*(current_map + (h + w*height)*depth));
            printf("    Data after truncate: ");
            printf("%f", (*(o_fmap+ h*width*depth + w*depth + d)) / 16.0);
            printf("\n");
         }
      }
   }
};


void flatten_matrix(alt_u8* flattened_matrix, alt_u8* input_fmap,
		int filter_h, int filter_w, int filter_d, int input_fmap_w, int input_fmap_h)
{
   printf("  flatten input_fmap to flattened_matrix ...................................................\n");
   int w = 0, h = 0, d = 0;
   int count = 0;
   while(h + filter_h <= input_fmap_h)
   {
      while(w + filter_w <= input_fmap_w)
      {  
         int w_in, h_in, d_in = 0;
         for(h_in = 0; h_in < filter_h; ++h_in){
            for (w_in = 0; w_in < filter_w; ++w_in){
               for (d_in = 0; d_in < filter_d; ++d_in){
                  *(flattened_matrix + count) = *(input_fmap + (h_in+h) * filter_d * input_fmap_w + (w_in+w) * filter_d + d_in);
                  count = count + 1;
               }
            }
         }
         w = w + 1;
      }
      h = h + 1;
      w = 0;
   }
};

void printSignBinary(alt_u8 data, double offset) {
	if((data >>7) == 1) {
		data = (data-1) ^ 0xFF;
		//printBinary(data, 0, 32);
		printf("%f", -(double)((data) / offset));
	}
	else printf("%f", data / offset);
}
