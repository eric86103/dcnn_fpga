/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */
#include "system.h"
#include "./HAL/inc/nios2.h"
#include <stdio.h>
#include "io.h"

static const int NUM_VECTOR = 8; // change to 128 actually
static const int NUM_VECTOR_SHRINK = 8 >> 2; // due to 4 (32/8) data per transmission
static const int NUM_DIM = 8; // change to 256 actually
static const int NUM_DIM_SHRINK = 8 >> 1; // due to 2 (32/16) result per transmission

static int bit_mask = 0x000000FF;

void printBinary(int val2, int mode, int num_bit) {
   /*
    * Used to print 32 bits, e.g. 10000000_10000000_10000000_10000000
    */
   unsigned char *p = (unsigned char*)&val2 + 3;
   int k = 0;
   int i = 0;
   for(k = 0; k <= num_but >> 3; k++) {
      int val2 = *(p-k);
      for (i = 7; i >= 0; i--) {
      if(val2 & (1 << i))
         printf("1");
      else
         printf("0");
      }
      if(k != 3)
        printf("_");
   }
   if(mode == 1)
     printf("_");
   else printf("\n");
};

void transform_32to8(alt_u32 data_32, alt_u8 data_8[4] ) {
   data_8[0] = data_32 & bit_mask;
   data_8[1] = (data_32 >> 8) & bit_mask;
   data_8[2] = (data_32 >> 16) & bit_mask;
   data_8[3] = (data_32 >> 24) & bit_mask;
};

alt_u32 transform_8to32(alt_u8* data_8) {
  alt_u32 data_32 = 0;
  int i = 0;
  for(i = 0; i < 4; ++i)
    data_32 += (alt_u32)((((alt_u32)(*(data_8+i)))) << 8*i);
  return data_32;
}
/*
void printMatrix(alt_u32* matrix, alt_u16* result, decimal = true) {
   int row = 0;
   int column = 0;
   if(NUM_DIM >= NUM_VECTOR) {
     for(row = 0; row < NUM_DIM; ++row) {
        for(column = 0; column < NUM_VECTOR_SHRINK; ++column) {

        }
     }
   }
   else {
   }
};
*/
void mat_mul(alt_u8* matrix, alt_u16* result) {
   // Assert the matrix size to NUM_DIM x NUM_VECTOR
   printf("  Calculating matmul(%d x %d)...\n", NUM_DIM, NUM_VECTOR);
   int row = 0, column = 0;
   alt_u32 matrix_32[8+1][2] = {0};
   for(row = 0; row < NUM_DIM+1; row++) {
     for(column = 0; column < NUM_VECTOR_SHRINK; column++) {
       matrix_32[row][column] = transform_8to32(matrix+NUM_VECTOR*row+4*column);
       printf("matrix_32 (%d, %d) = ", row, column);
       printBinary(matrix_32[row][column], 0);
       //printf("%d", matrix_32[row][column]);
     }
   }
   for(row = 0; row < NUM_DIM+1; row++) {
      for(column = 0; column < NUM_VECTOR_SHRINK; column++) {
         IOWR(TEST_SLAVE_0_BASE, 0, matrix_32[row][column]);
      }
   }
   alt_u32 tmp;
   printf("  Collecting the result...\n");
   for(row = 0; row < NUM_DIM_SHRINK; row ++) {
      tmp = IORD(TEST_SLAVE_0_BASE, 0);
      *(result + 2*row) = (alt_u16)((tmp << 16) >> 16);
      *(result + 2*row + 1) = (alt_u16)(tmp >> 16);
      printBinary(tmp, 0);
      printBinary(*(result + 2* row), 0);
      printBinary(*(result + 2* row+1), 0);
   }
};

int main() {
   printf("Hello from Nios II!\n");
   alt_u8 matrix[8+1][8] = {0};
   alt_u16 result[8] = {0};
   int row = 0;
   int column = 0;
   for(row = 0; row < NUM_DIM+1; row ++){
      for(column = 0; column < NUM_VECTOR; column++){
         matrix[row][column] = 64;
      }
   }

   mat_mul(matrix, result);
   printf("Matrix Multiplication:\n");
   //printMatrix(matrix, result);
   return 0;
}
