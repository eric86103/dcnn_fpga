#include "alt_types.h"
#include "./utils.h"

void flatten_matrix(alt_u8* flattened_matrix, alt_u8* input_fmap,
      int input_fmap_h, int input_fmap_w, int filter_h, int filter_w, int depth){
   printf("  flatten input_fmap to flattened_matrix ...................................................\n");
   int w = 0, h = 0, d = 0;
   int count = 0;
   while(w + filter_w <= input_fmap_w)
   {
      while(h + filter_h <= input_fmap_h)
      {  
         int w_in, h_in, d_in = 0;
         for(h_in = 0; h_in < filter_h; ++h_in){
            for (w_in = 0; w_in < filter_w; ++w_in){
               for (d_in = 0; d_in < depth; ++d_in){
                  *(flattened_matrix + count) = *(input_fmap + (h+h_in) * depth * input_fmap_w + (w+w_in) * depth + d_in);
                  count = count + 1;
               }
            }
         }
         h = h + 1;
      }
      w = w + 1;
      h = 0;
   }
};

alt_u8 truncation(alt_16 data) {
   double max_num = 7.9375;
   if(data > max_num*16) {
      printf("    Data %f is bigger than %f!!\n", (double)(data) / 16.0, (double)(max_num));
      return (alt_u8)(max_num*16);
   }
   else if(data < 0) {
      printf("    Data %f is smaller than %f!!\n", (double)(data) / 16.0, (double)(0));
      return 0;
   }
   return (alt_u8)data;
};

void matrix_to_imageCube(alt_16* matrix_result, alt_u8* o_fmap, int height, int width, int depth) {
   printf("  Transforming matrix to image cube...\n");
   int h = 0, w = 0, d = 0;
   for(d = 0; d < depth; d++) {
      alt_16* current_map;
      current_map = matrix_result + d;
      for(w = 0; w < width; w++) {
         for(h = 0; h < height; h++) {
         printf("    Data before truncate: "); //
            printf("%f", (double)(*(current_map + (h + w*height)*depth)) / 16.0);
            printf("\n");
            *(o_fmap+h*width*depth+w*depth+d) = truncation(*(current_map + (h + w*height)*depth));
            printf("    Data after truncate: ");
            printSignBinary((*(o_fmap+ h*width*depth + w*depth + d)), 16.0);
            printf("\n");
         }
      }
   }
};

void printBinary(int val2, int mode, int num_bit) {
   /*
    * Used to print 32 bits, e.g. 10000000_10000000_10000000_10000000
    */
   val2 = (val2 << (32 - num_bit));
   unsigned char *p = (unsigned char*)&(val2) + 3;
   int k = 0;
   int i = 0;
   for(k = 0; k < num_bit >> 3; k++) {
      int val2 = *(p-k);
      for (i = 7; i >= 0; i--) {
      if(val2 & (1 << i))
         printf("1");
      else
         printf("0");
      }
      if(k != (num_bit >> 3)-1)
        printf("_");
   }
   if(mode == 1)
     printf("_");
   else printf("\n");
};

void transform_32to8(alt_u32 data_32, alt_u8 data_8[4] ) {
   data_8[0] = data_32 & bit_mask;
   data_8[1] = (data_32 >> 8) & bit_mask;
   data_8[2] = (data_32 >> 16) & bit_mask;
   data_8[3] = (data_32 >> 24) & bit_mask;
};

alt_u32 transform_8to32(alt_u8* data_8) {
  alt_u32 data_32 = 0;
  int i = 0;
  for(i = 0; i < 4; ++i)
    data_32 += (alt_u32)((((alt_u32)(*(data_8+i)))) << 8*i);
  return data_32;
}

void printSignBinary(alt_u8 data, double offset) {
   if((data >>7) == 1) {
      data = (data-1) ^ 0xFF;
      //printBinary(data, 0, 32);
      printf("%f", -(double)((data) / offset));
   }
   else printf("%f", (double)data / offset);
}

void printMatrix(alt_u8* matrix, int ROW, int COLUMN, int DEPTH) {
  int row = 0, column = 0, dep = 0;
  for(dep = 0; dep < DEPTH; dep ++) {
    printf("Dep %d: \n", dep);
    for(row = 0; row < ROW; row++){
      for(column = 0; column < COLUMN; column++) {
        printSignBinary(*(matrix+row*COLUMN*DEPTH+column*DEPTH + dep), 16);
        printf(" ");
      }
      printf("\n");
    }
  }
}
void printResult(alt_u8* matrix, alt_16* result) {
   int row = 0;
   int column = 0;
   int weight_counter = 0;
   if(NUM_DIM >= NUM_VECTOR) {
     for(row = 0; row < NUM_DIM; ++row) {
      printf("[ ");
        for(column = 0; column < NUM_VECTOR; ++column) {
          printSignBinary((*(matrix + row*NUM_VECTOR + column)), 16);
          printf(" ");
        }
        if(row >= NUM_VECTOR) printf("]         ");
        else {
          printf("] ");//%3f", (double)(*(matrix+(NUM_DIM)*NUM_VECTOR+weight_counter)) / 128.0);
          printSignBinary(*(matrix+(NUM_DIM)*NUM_VECTOR+weight_counter), 128);
        }
        weight_counter ++;
        printf(" %f\n", (double)(*(result+row)) / 16.0);
     }
   }
};

void mat_mul(alt_u8* matrix, alt_16* result) {
   // Assert the matrix size to NUM_DIM x NUM_VECTOR
   printf("  Calculating matmul(%d x %d)...\n", NUM_DIM, NUM_VECTOR);
   int row = 0, column = 0;
   alt_u32 matrix_32[8+1][2] = {0};
   for(row = 0; row < NUM_DIM+1; row++) {
     for(column = 0; column < NUM_VECTOR_SHRINK; column++) {
       matrix_32[row][column] = transform_8to32(matrix+NUM_VECTOR*row+4*column);
       //printf("matrix_32 (%d, %d) = ", row, column);
       //printBinary(matrix_32[row][column], 0, 32);
       //printf("%d", matrix_32[row][column]);
     }
   }
   for(row = 0; row < NUM_DIM+1; row++) {
      for(column = 0; column < NUM_VECTOR_SHRINK; column++) {
         IOWR(TEST_SLAVE_0_BASE, 0, matrix_32[row][column]);
      }
   }
   alt_u32 tmp;
   printf("  Collecting the result...\n");
   for(row = 0; row < NUM_DIM_SHRINK; row ++) {
      tmp = IORD(TEST_SLAVE_0_BASE, 0);
      *(result + 2*row) = (alt_16)((tmp << 16) >> 16);
      *(result + 2*row + 1) = (alt_16)(tmp >> 16);
      //printBinary(tmp, 0, 32);
      //printBinary(*(result + 2* row), 0, 16);
      //printBinary(*(result + 2* row+1), 0, 16);
   }
};

void conv( alt_u8 * data_mat, int image_h, int image_w, 
   alt_u8 * weight_mat, int filter_height, int filter_weight, int filter_num, alt_u8 * temp_fmap ){
   int flatten_num = image_h*image_w;
   alt_u8 mat_block[257][128] = {0};
   alt_16 result[256] = {0};
   alt_16 output_mat[flatten_num][filter_num] = {0};
   alt_u8 * d_ptr; d_ptr = data_mat;
   alt_u8 * f_ptr; f_ptr = weight_mat;
   int i=0, db=0, fb=0 r=0, c=0, result_c=0;

   // for every colume in filter
   for(i=0 ; i < filter_num ; ++i){
      // for every block in filter(filter block)
      for(fb=0; fb < (filter_height * filter_weight - 1)/128 + 1; ++fb){
         //set the initial ptr
         d_ptr = data_mat + fb*128;
         f_ptr = weight_mat + fb*filter_num*128;

         // for every block per colume in data(data block)
         for(db=0; db < (flatten_num - 1)/256 + 1; ++db){
            // one block
            // put every row in data into mat_block
            for( r=0; r<256; ++r ){
               // when data row is smaller then flatten_num
               if( db*256+r < flatten_num ){
                  // put every element in data into mat_block
                  for(c=0 ; c<128 ; ++c){
                     // when data colume is smaller then filter_height*filter_weight
                     if( fb*128+c < filter_height*filter_weight ){
                        mat_block[r][c] = *(d_ptr);
                        d_ptr = d_ptr+1;
                     }
                     // else = 0
                     else{
                        mat_block[r][c] = (alt_u8)0;
                     }
                  }
                  d_ptr = d_ptr-128+filter_height*filter_weight;
               }
               // else = 0
               else{
                  for(c=0 ; c<128 ; ++c){ mat_block[r][c] = (alt_u8)0; }
               }
            }

            // put one colume in filter into mat_block
            for(c=0 ; c<128 ; ++c){
               if(fb*128+r<filter_height*filter_weight){
                  mat_block[255][c] = *(f_ptr);
                  f_ptr = f_ptr + filter_num;
               }
               else
                  mat_block[255][c] = (alt_u8)0;
            }

            //calculate by mat_mul
            mat_mul(mat_block, result);
            for(result_c=0 ; result_c<256 ; ++result_c){
               if(db*256+result_c<flatten_num)
                  output_mat[db*256+result_c][i] += result[result_c];
            }
         }
      }
   }

   //recovery to image
   matrix_to_imageCube(output_mat, temp_fmap, image_h, image_w, filter_num);

};

void max_pooling(alt_u8* input_fmap, alt_u8* output_fmap, int height, int width, int depth){
   int w = 0; h = 0; d = 0; 
   while(h + 1 <= height)
   {
      while(w + 1 <= width)
      {
         while(d <= depth)
         {
            int i = 1;
            alt_u8 temp = 0;
            temp = *(input_fmap + h * depth * width + w * depth + d);
            for (i = 1; i < 4; i++){
               if (temp >= *(input_fmap + (h + i/2) * depth * width + (w + i%2) * depth + d)) 
                  temp = *(input_fmap + (h + i/2) * depth * width + (w + i%2) * depth + d);       
            }
            *(output_fmap + count) = temp;
            count = count + 1;
            d = d + 1;
         }
         w = w + 2;
         d = 0;
      }
      h = h + 2;
      w = 0;
      d = 0;
   }
};

void total_conv(alt_u8* first_conv, alt_u8* second_conv, alt_u8* spectrum, alt_u8* conv_finish_fmap){
   
   /* Convolution 1 */
   alt_u8 flatten_mat1[1240][100] = {0};
   alt_u8  con2_fmap[40][31][16] = {0};
   flatten_matrix(flatten_mat1, spectrum, 49, 40, 10, 10, 1);
   conv(flatten_mat1, 40, 31, first_conv, 10, 10, 16, con2_fmap);

   /* Convolution 2 */
   alt_u8 flatten_mat2[972][400] = {0};
   alt_u8  temp_fmap[36][27][16] = {0};
   flatten_matrix(flatten_mat2, con2_fmap, 40, 31, 5, 5, 16);
   conv(flatten_mat2, 36, 27, second_conv, 5, 5, 16, temp_fmap);
   max_pooling(temp_fmap, conv_finish_fmap, 36, 27, 16);


};


