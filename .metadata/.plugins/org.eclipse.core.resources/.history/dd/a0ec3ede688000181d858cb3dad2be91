#include "system.h"
#include "io.h"
#include "./HAL/inc/altera_up_avalon_rs232_regs.h"
#include "./HAL/inc/altera_up_avalon_rs232.h"
#include "./HAL/inc/nios2.h"
#include <stdio.h>
#include "./convolution.h"
static const int NUM_VECTOR = 128; // change to 128 actually
static const int NUM_DIM = 256; // due to 4 (32/8) data per transmission
static const int NUM_DIM_WRITE = (256+4) / 4; // change to 256 actually
static const int NUM_DIM_SHRINK = 256 >> 1; // due to 2 (32/16) result per transmission

static int bit_mask = 0x000000FF;

#define READ_FIFO_EMPTY 0x0

alt_u8 par;

static int LABEL_NUM = 6;
static int FC_UNITS = 864;
static int FIRST_CONV = 10 * 10 * 1 * 16;
static int SECOND_CONV = 5 * 5 * 16 * 16;
static int DATA_SHAPE = 49 * 40;
alt_u8 transform(alt_u8 data) {
	if(data >> 7 == 1)
		data = (((data << 1) >> 1) ^ 0xFF)+1+128;
	return data;
}
void read_event(alt_up_rs232_dev* rs232, alt_u8* w_data, int read_num){
  alt_u8 read_FIFO_used = 0;
  alt_u8 fail = 1;
  alt_u8 data;
  int count = 0;
  while(1){
    //read_FIFO_used = alt_up_rs232_get_used_space_in_read_FIFO(rs232_ptr);
    fail = alt_up_rs232_read_data(rs232 , &data, &par);
    if(!fail){
      data = transform(data);
      *(w_data + count) = data;
      alt_up_rs232_disable_read_interrupt(rs232);
      alt_up_rs232_write_data(rs232, 1);
      alt_up_rs232_enable_read_interrupt(rs232);
      count++;
      //printf("Read num: %d\n",count);
    }
    if(count == read_num){
      printf("Reading data successfully!!!\n");
      break;
    }
  }
}



void printBinary(int val2, int mode, int num_bit) {
   /*
    * Used to print 32 bits, e.g. 10000000_10000000_10000000_10000000
    */
   val2 = (val2 << (32 - num_bit));
   unsigned char *p = (unsigned char*)&(val2) + 3;
   int k = 0;
   int i = 0;
   for(k = 0; k < num_bit >> 3; k++) {
      int val2 = *(p-k);
      for (i = 7; i >= 0; i--) {
      if(val2 & (1 << i))
         printf("1");
      else
         printf("0");
      }
      if(k != (num_bit >> 3)-1)
        printf("_");
   }
   if(mode == 1)
     printf("_");
   else printf("\n");
};

void transform_32to8(alt_u32 data_32, alt_u8 data_8[4] ) {
   data_8[0] = data_32 & bit_mask;
   data_8[1] = (data_32 >> 8) & bit_mask;
   data_8[2] = (data_32 >> 16) & bit_mask;
   data_8[3] = (data_32 >> 24) & bit_mask;
};

alt_u32 transform_8to32(alt_u8* data_8) {
  alt_u32 data_32 = 0;
  int i = 0;
  for(i = 0; i < 4; ++i)
    data_32 += (alt_u32)((((alt_u32)(*(data_8+i*NUM_VECTOR)))) << 8*i);
  return data_32;
}


void printMatrix(alt_u8* matrix, int ROW, int COLUMN, int DEPTH) {
  int row = 0, column = 0, dep = 0;
  for(dep = 0; dep < DEPTH; dep ++) {
    printf("Dep %d: \n", dep);
    for(row = 0; row < ROW; row++){
      for(column = 0; column < COLUMN; column++) {
        printSignBinary(*(matrix+row*COLUMN*DEPTH+column*DEPTH + dep), 16);
        printf(" ");
      }
      printf("\n");
    }
  }
}
void printResult(alt_u8* matrix, alt_16* result) {
   int row = 0;
   int column = 0;
   int weight_counter = 0;
   if(NUM_DIM >= NUM_VECTOR) {
     for(row = 0; row < NUM_DIM; ++row) {
      printf("[ ");
        for(column = 0; column < NUM_VECTOR; ++column) {
          printSignBinary((*(matrix + row*NUM_VECTOR + column)), 16);
          printf(" ");
        }
        if(row >= NUM_VECTOR) printf("]         ");
        else {
          printf("] ");//%3f", (double)(*(matrix+(NUM_DIM)*NUM_VECTOR+weight_counter)) / 128.0);
          printSignBinary(*(matrix+(NUM_DIM)*NUM_VECTOR+weight_counter), 128);
        }
        weight_counter ++;
        printf(" %f\n", (double)(*(result+row)) / 16.0);
     }
   }
};
void mat_mul(alt_u8* matrix, alt_16* result) {
   // Assert the matrix size to NUM_DIM x NUM_VECTOR
//   printf("  Calculating matmul(%d x %d)...\n", NUM_DIM, NUM_VECTOR);
   int row = 0, column = 0;
   alt_u32 matrix_32[65][128] = {0};
//   printf("ready................\n");
   for(column = 0; column < NUM_VECTOR; column++) {
     for(row = 0; row < NUM_DIM_WRITE; row++) {
       matrix_32[row][column] = transform_8to32(matrix+NUM_VECTOR*4*row+column);
       //printf("matrix_32 (%d, %d) = ", row, column);
       //printBinary(matrix_32[row][column], 0, 32);
       //printf("%d", matrix_32[row][column]);
     }
   }

//   printf("ready write................\n");
   int count = 0;
   for(column = 0; column < NUM_VECTOR; column++) {
      for(row = 0; row < NUM_DIM_WRITE; row++) {
        count = count + 1;
       //printf("writing ................column: %d, row : %d,  times %d \n", column, row, count);
         IOWR(TEST_SLAVE_0_BASE, 0, matrix_32[row][column]);
      }
   }

   alt_u32 tmp;
//   printf("ready read................\n");

   //printf("  Collecting the result...\n");
   for(row = 0; row < NUM_DIM_SHRINK; row ++) {
//     printf("reading ................. row : %d\n", row);
      tmp = IORD(TEST_SLAVE_0_BASE, 0);
//      printf("finish r row : %d \n", row);
      *(result + 2*row) = (alt_16)((tmp << 16) >> 16);
      *(result + 2*row + 1) = (alt_16)(tmp >> 16);
      //printBinary(tmp, 0, 32);
      //printBinary(*(result + 2* row), 0, 16);
      //printBinary(*(result + 2* row+1), 0, 16);
   }
//   printf("finish read................\n");


};

int main() {

     printf("Hello from Nios II!\n");
     alt_u8 matrix[256+1][128] = {0};
     alt_16 result[128] = {0};
     int row = 0;
     int column = 0;
     printf("ha ha ..........................\n");
     for(row = 0; row < NUM_DIM+1; row ++){
        for(column = 0; column < NUM_VECTOR; column++){
           matrix[row][column] = 32;//+row+column;
        }
     }
     printf("fuck ..........................\n");

     mat_mul(matrix, result);
     printf("Matrix Multiplication:\n");
     for(row = 0; row < 3; row++)
   	   printf("%f ", (double)(*(result+row)) / 16.0);
     //printResult(matrix, result);
     return 0;
//  alt_u8 matrix[4][4] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
//
//  alt_u8 filter[2][2][1][1] = {1,1,1,1};
//  alt_16 result[3];
//  mat_mul(matrix, result);
//  int c = 0;
//  for(c = 0; c < 3; c++)
//	   printf("%f ", (double)(*(result+c)) / 16.0);
//  alt_u8 flatten [9][4] = {0};
//  alt_16 output_mat[9][1] = {0};
//  alt_u8  con2_fmap[3][3][1] = {0};
//  flatten_matrix(flatten, matrix, 4, 4, 2, 2, 1);
//  printMatrix(flatten, 9, 4, 1);
//  conv(flatten, 3, 3, filter, 2, 2, 1, con2_fmap, output_mat);
//  printMatrix(con2_fmap, 3, 3, 1);


//  alt_up_rs232_dev* rs232_ptr ;
//  alt_up_rs232_dev rs232 ;
//  rs232.base = RS232_0_BASE;
//  rs232_ptr = &rs232;
//
//
//  if(rs232_ptr == NULL) printf("Error\n");
//  else printf("Open\n");
//
//  alt_up_rs232_enable_read_interrupt(rs232_ptr);
//
//  alt_u8 fc[864][6] = {0};
//  alt_u8 first_conv[10][10][1][16] = {0};
//  alt_u8 second_conv[5][5][16][16] = {0};
//  alt_u8 spectrum[49][40] = {0};
//
//  alt_u8 conv_finish_fmap[18][13][16] = {0};
//
//
//  /* Reading model */
//
//  read_event(rs232_ptr, &fc, FC_UNITS * LABEL_NUM);
//  read_event(rs232_ptr, &first_conv, FIRST_CONV);
//  read_event(rs232_ptr, &second_conv, SECOND_CONV);
//  read_event(rs232_ptr, &spectrum, DATA_SHAPE);
//
//  /* Read testing data */
//  // read_event(.....)
//
//  /* Testing model parameters */
//
//  printf("fc element 0 : %d\n", (int)fc[0][0]);
//  printSignBinary(fc[0][0], 128);
//  printf("\n");
//  printf("fc element 16 : %d\n", (int)fc[2][4]);
//  printSignBinary(fc[2][4], 128);
//  printf("\n");
//  printf("first conv element 0 : %d\n", (int)first_conv[0][0][0][0]);
//  printSignBinary(first_conv[0][0][0][0], 128);
//  printf("\n");
//  printf("first conv element 16 : %d\n", (int)first_conv[0][1][0][0]);
//  printSignBinary(first_conv[0][1][0][0], 128);
//  printf("\n");
//  printf("second conv element 0 : %d\n", (int)second_conv[0][0][0][0]);
//  printSignBinary(second_conv[0][0][0][0], 128);
//  printf("\n");
//  printf("second conv element 16 : %d\n", (int)second_conv[0][0][1][0]);
//  printSignBinary(second_conv[0][0][1][0], 128);
//  printf("\n");
//  printf("data element 0 : %d\n", (int)spectrum[0][0]);
//  printSignBinary(spectrum[0][0], 16);
//  printf("\n");
//  printf("data element 49 : %d\n", (int)spectrum[1][9]);
//  printSignBinary(spectrum[1][9], 16);
//  printf("\n");
//  total_conv(first_conv, second_conv, spectrum, conv_finish_fmap);
//  printf("end\n");
//  //printMatrix(conv_finish_fmap, 18, 13, 16);
//
  return 0;
}
