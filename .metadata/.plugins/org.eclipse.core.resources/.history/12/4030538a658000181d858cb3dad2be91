#include "alt_types.h"

void printSignBinary(alt_u8 data, double offset) {
   if((data >>7) == 1) {
      data = -(data);//-1) ^ 0xFF;
      //printBinary(data, 0, 32);
      printf("%f", -(double)((data) / offset));
   }
   else printf("%f", (double)data / offset);
}

void flatten_matrix(alt_u8* flattened_matrix, alt_u8* input_fmap,
      int input_fmap_h, int input_fmap_w, int filter_h, int filter_w, int depth){
   //printf("  flatten input_fmap to flattened_matrix ...................................................\n");
   int w = 0, h = 0, d = 0;
   int count = 0;
   while(w + filter_w <= input_fmap_w)
   {
      while(h + filter_h <= input_fmap_h)
      {  
         int w_in, h_in, d_in = 0;
         for(h_in = 0; h_in < filter_h; ++h_in){
            for (w_in = 0; w_in < filter_w; ++w_in){
               for (d_in = 0; d_in < depth; ++d_in){
                  *(flattened_matrix + count) = *(input_fmap + (h+h_in) * depth * input_fmap_w + (w+w_in) * depth + d_in);
                  count = count + 1;
               }
            }
         }
         h = h + 1;
      }
      w = w + 1;
      h = 0;
   }
};

alt_u8 truncation(alt_16 data) {
   double max_num = 7.9375;
   if(data > max_num*16) {
      //printf("    Data %f is bigger than %f!!\n", (double)(data) / 16.0, (double)(max_num));
      return (alt_u8)(max_num*16);
   }
   else if(data < 0) {
      //printf("    Data %f is smaller than %f!!\n", (double)(data) / 16.0, (double)(0));
      return 0;
   }
   return (alt_u8)data;
};

void matrix_to_imageCube(alt_16* matrix_result, alt_u8* o_fmap, int height, int width, int depth) {
   printf("  Transforming matrix to image cube...\n");
   int h = 0, w = 0, d = 0;
   for(d = 0; d < depth; d++) {
      alt_16* current_map;
      current_map = matrix_result + d;
      for(w = 0; w < width; w++) {
         for(h = 0; h < height; h++) {
         //printf("    Data before truncate: "); //
            //printf("%f", (double)(*(current_map + (h + w*height)*depth)) / 16.0);
            //printf("\n");
            //*(o_fmap+h*width*depth+w*depth+d) = truncation(*(current_map + (h + w*height)*depth));
        	*(o_fmap+h*width*depth+w*depth+d) = (*(current_map + (h + w*height)*depth));
            //printf("    Data after truncate: ");
            //printSignBinary((*(o_fmap+ h*width*depth + w*depth + d)), 16.0);
            //printf("\n");
         }
      }
   }
};

void conv( alt_u8 * data_mat, int image_h, int image_w, 
   alt_u8 * weight_mat, int filter_height, int filter_weight, int filter_num, alt_u8 * temp_fmap, alt_16 * output_mat){

   int flatten_num = image_h*image_w;
   alt_u8 mat_block[257][128] = {0};
   alt_16 result[256] = {0};
   alt_u8 * d_ptr; d_ptr = data_mat;
   alt_u8 * f_ptr; f_ptr = weight_mat;
   int i=0, db=0, fb=0, r=0, c=0, result_c=0;

   // for every colume in filter
   for(i=0 ; i < filter_num ; ++i){
      // for every block in filter(filter block)
      for(fb=0; fb < (filter_height * filter_weight - 1)/128 + 1; ++fb){
         //set the initial ptr
         d_ptr = data_mat + fb*128;
         f_ptr = weight_mat + fb*filter_num*128 +i;

         // for every block per colume in data(data block)
         for(db=0; db < (flatten_num - 1)/256 + 1; ++db){
            // one block
            // put every row in data into mat_block
            for( r=0; r<256; ++r ){
               // when data row is smaller then flatten_num
               if( db*256+r < flatten_num ){
                  // put every element in data into mat_block
                  for(c=0 ; c<128 ; ++c){
                     // when data colume is smaller then filter_height*filter_weight
                     if( fb*128+c < filter_height*filter_weight ){
                        mat_block[r][c] = *(d_ptr);
                        d_ptr = d_ptr+1;
                     }
                     // else = 0
                     else{
                        mat_block[r][c] = (alt_u8)0;
                     }
                  }
                  d_ptr = data_mat + db*256*filter_height*filter_weight + (r+1)*filter_height*filter_weight + fb*128;
               }
               // else = 0
               else{
                  for(c=0 ; c<128 ; ++c){ mat_block[r][c] = (alt_u8)0; }
               }
            }

            // put one colume in filter into mat_block
            for(c=0 ; c<128 ; ++c){
               if(fb*128+c<(filter_height*filter_weight)){
                  mat_block[256][c] = *(f_ptr);
                  f_ptr = f_ptr + filter_num;
               }
               else
                  mat_block[256][c] = (alt_u8)0;
            }

            //if(i==0 && fb==0 && db==0) {printMatrix(mat_block, 10, 10, 1);}


            //calculate by mat_mul
            mat_mul(mat_block, result);
//            if(i==0 && fb==0 && db==0) {
//               int fuck=0;
//               for(fuck=0 ; fuck<256 ; ++fuck){
//                  printf("%d\n",*(result+fuck));
//               }
//            }
            for(result_c=0 ; result_c<256 ; ++result_c){
               if(db*256+result_c<flatten_num)
                  *(output_mat+(db*256+result_c)*filter_num + i) += result[result_c];
            }
         }
      }
   }
   printMatrix(output_mat, 3, 3, 1);

   //recovery to image
   matrix_to_imageCube(output_mat, temp_fmap, image_h, image_w, filter_num);
   //printMatrix(temp_fmap, 40, 31, 16);

};

void max_pooling(alt_u8* input_fmap, alt_u8* output_fmap, int height, int width, int depth){
   int w = 0, h = 0, d = 0,count=0;
   while(h + 1 <= height)
   {
      while(w + 1 <= width)
      {
         while(d <= depth)
         {
            int i = 1;
            alt_u8 temp = 0;
            temp = *(input_fmap + h * depth * width + w * depth + d);
            for (i = 1; i < 4; i++){
               if (temp >= *(input_fmap + (h + i/2) * depth * width + (w + i%2) * depth + d)) 
                  temp = *(input_fmap + (h + i/2) * depth * width + (w + i%2) * depth + d);       
            }
            *(output_fmap + count) = temp;
            count = count + 1;
            d = d + 1;
         }
         w = w + 2;
         d = 0;
      }
      h = h + 2;
      w = 0;
      d = 0;
   }
};
void mean_pooling(alt_u8* input_fmap, alt_u8* output_fmap, int height, int width, int depth){
   int w = 0, h = 0, d = 0,count=0;
   while(h + 1 <= height)
   {
      while(w + 1 <= width)
      {
         while(d <= depth)
         {
            int i = 1;
            alt_u8 temp = 0;
            temp = *(input_fmap + h * depth * width + w * depth + d);
            for (i = 1; i < 4; i++){
               temp = temp + *(input_fmap + (h + i/2) * depth * width + (w + i%2) * depth + d);
            }
            *(output_fmap + count) = temp/4;
            count = count + 1;
            d = d + 1;
         }
         w = w + 2;
         d = 0;
      }
      h = h + 2;
      w = 0;
      d = 0;
   }
};
void conv_interface_1(alt_u8* first_conv, alt_u8* spectrum, alt_u8* con2_fmap){
   /* Convolution 1 */
   alt_u8 flatten_mat1[1240][100] = {0};
   alt_16 output_mat[1240][16] = {0};
   flatten_matrix(flatten_mat1, spectrum, 49, 40, 10, 10, 1);
   conv(flatten_mat1, 40, 31, first_conv, 10, 10, 16, con2_fmap, output_mat);
};

void conv_interface_2(alt_u8* second_conv, alt_u8* con2_fmap, alt_u8* conv_finish_fmap){
   /* Convolution 2 */
   alt_u8 flatten_mat2[972][400] = {0};
   alt_u8  temp_fmap[36][27][16] = {0};
   alt_16 output_mat[972][16] = {0};
   flatten_matrix(flatten_mat2, con2_fmap, 40, 31, 5, 5, 16);
   conv(flatten_mat2, 36, 27, second_conv, 5, 5, 16, temp_fmap, output_mat);
   max_pooling(temp_fmap, conv_finish_fmap, 36, 27, 16);
};

void total_conv(alt_u8* first_conv, alt_u8* second_conv, alt_u8* spectrum, alt_u8* conv_finish_fmap){
   alt_u8  con2_fmap[40][31][16] = {0};
   conv_interface_1( first_conv, spectrum, con2_fmap);
   //printf("%d\n", con2_fmap[0][0][3]);
   //printf("%f", (double)con2_fmap[0][0][3] / 16.0);
   printMatrix(con2_fmap, 40,31,1);
   //printSignBinary(con2_fmap[0][0][3], 16);
   printf("\n");
   //conv_interface_2(second_conv, con2_fmap, conv_finish_fmap);
};



